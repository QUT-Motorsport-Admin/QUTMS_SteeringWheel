
oled_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000516  00800100  00002e3c  00002ed0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800616  00800616  000033e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000033e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00003458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fb8  00000000  00000000  000036c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000050c  00000000  00000000  00005680  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000209f  00000000  00000000  00005b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a54  00000000  00000000  00007c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000989  00000000  00000000  00008680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001660  00000000  00000000  00009009  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000a669  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 04 	jmp	0x87c	; 0x87c <__ctors_end>
       4:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
       8:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
       c:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      10:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      14:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      18:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      1c:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      20:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      24:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      28:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__vector_10>
      2c:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      30:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      34:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      38:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      3c:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      40:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      44:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      48:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__vector_18>
      4c:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      50:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      54:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      58:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      5c:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      60:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      64:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      68:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      6c:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      70:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      74:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
      78:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>

0000007c <Motorsport>:
	...
     1c4:	00 00 03 f8 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     1e4:	00 00 1f fe 00 fc 03 f7 ff ff 3f c0 1f e0 1f f0     ..........?.....
	...
     204:	00 00 7f ff 80 fc 07 e7 ff fe 3f c0 3f e0 1f e0     ..........?.?...
	...
     224:	00 00 ff ff c1 f8 07 e7 ff fe 3f c0 3f c0 1f e0     ..........?.?...
	...
     244:	00 01 ff ff c1 f8 07 ef ff fe 7f 80 3f c0 3f e0     ............?.?.
	...
     264:	00 07 ff ff e1 f8 0f cf ff fc 7f 80 3f c0 3f c0     ............?.?.
	...
     284:	00 07 fc 7f e3 f0 0f c0 3f 00 7f 80 7f 80 3f c0     ........?.....?.
	...
     2a4:	00 0f f0 1f e3 f0 0f c0 3f 00 ff 00 7f 80 7f c0     ........?.......
	...
     2c4:	00 1f c0 0f e3 f0 1f 80 7e 00 ff 00 7f 80 7f 80     ........~.......
	...
     2e4:	00 3f 80 0f e7 e0 1f 80 7e 00 00 ff 00 7f 80 00     .?......~.......
	...
     304:	00 3f 80 0f e7 e0 1f 80 7e 00 00 ff 00 ff 00 00     .?......~.......
	...
     324:	00 7f 00 0f e7 e0 3f 00 fc 00 01 ff 00 ff 00 00     ......?.........
	...
     344:	00 7f 00 0f cf c0 3f 00 fc 00 01 fe 00 ff 00 00     ......?.........
	...
     364:	00 7e 00 0f cf c0 3f 00 fc 00 01 fe 01 fe 00 00     .~....?.........
	...
     384:	00 7e 01 ff cf c0 7e 01 f8 00 03 fe 01 fe 00 00     .~....~.........
	...
     3a4:	00 fe 03 ff 9f 80 7e 01 f8 00 03 fc 01 fe 00 00     ......~.........
	...
     3c4:	00 fe 03 ff 9f 80 7e 01 f8 00 03 fc 03 fc 00 00     ......~.........
	...
     3e4:	00 fe 01 ff 1f 80 fc 03 f0 07 f8 03 fc 03 fc 00     ................
	...
     404:	00 ff 01 ff 1f 80 fc 03 f0 07 f8 07 fc 03 fc 00     ................
	...
     424:	00 ff 83 fe 3f 81 f8 03 f0 0f f8 07 f8 03 fc 00     ....?...........
	...
     444:	00 7f ff fc 3f ff f8 07 f0 0f f0 07 f8 07 f8 00     ....?...........
	...
     464:	00 7f ff fc 1f ff f0 07 e0 0f f0 0f f8 07 f8 00     ................
	...
     484:	00 3f ff fc 1f ff e0 07 e0 1f f0 0f f0 07 f8 00     .?..............
	...
     4a4:	00 3f ff fe 0f ff c0 0f e0 1f e0 0f f0 0f f8 00     .?..............
	...
     4c4:	00 0f ff fe 07 ff 00 0f c0 1f e0 1f f0 0f f0 00     ................
	...
     4e4:	00 03 f8 7e 01 f8 00 0f c0 1f c0 1f e0 0f f0 00     ...~............
	...
     544:	07 ff ff ff ff ff ff ff ff ff ff ff ff ff e0 00     ................
	...
     564:	0f ff ff ff ff ff ff ff ff ff ff ff ff ff e0 00     ................
	...
     584:	0f ff ff ff ff ff ff ff ff ff ff ff ff ff c0 00     ................
	...
     5a4:	0e fd f0 3c 07 81 f0 3e 0f 81 f0 3e 07 81 c0 00     ...<...>...>....
	...
     5c4:	1c 79 e0 1c 07 01 e0 3c 07 01 e0 3c 07 01 c0 00     .y.....<...<....
	...
     5e4:	1c 61 c7 1f 3e 38 e7 38 cf 39 c7 1c 67 cf 80 00     .a..>8.8.9..g...
	...
     604:	1c 03 cf 1e 3c 79 e7 38 3f 31 8f 1c e7 cf 80 00     ....<y.8?1......
	...
     624:	38 03 8f 1e 7c f9 c0 7c 1e 03 9f 38 0f 8f 80 00     8...|..|...8....
	...
     644:	39 03 8f 3e 7c f1 c0 ff 8e 07 9e 38 1f 9f 00 00     9..>|......8....
	...
     664:	39 e7 8c 3c 7c 63 cc f3 9c 1f 8c 79 9f 9f 00 00     9..<|c.....y....
	...
     684:	71 e7 80 7c fc 07 8c f0 1c 7f 80 f1 9f 1f 00 00     q..|............
	...
     6a4:	73 c7 c1 fc fe 0f 9c 78 3c ff c1 f3 8f 3e 00 00     s......x<....>..
	...
     6c4:	7f ff ff ff ff ff ff ff ff ff ff ff ff fe 00 00     ................
	...
     6e4:	ff ff ff ff ff ff ff ff ff ff ff ff ff fe 00 00     ................
	...

0000087c <__ctors_end>:
     87c:	11 24       	eor	r1, r1
     87e:	1f be       	out	0x3f, r1	; 63
     880:	cf ef       	ldi	r28, 0xFF	; 255
     882:	d0 e1       	ldi	r29, 0x10	; 16
     884:	de bf       	out	0x3e, r29	; 62
     886:	cd bf       	out	0x3d, r28	; 61

00000888 <__do_copy_data>:
     888:	16 e0       	ldi	r17, 0x06	; 6
     88a:	a0 e0       	ldi	r26, 0x00	; 0
     88c:	b1 e0       	ldi	r27, 0x01	; 1
     88e:	ec e3       	ldi	r30, 0x3C	; 60
     890:	fe e2       	ldi	r31, 0x2E	; 46
     892:	02 c0       	rjmp	.+4      	; 0x898 <__do_copy_data+0x10>
     894:	05 90       	lpm	r0, Z+
     896:	0d 92       	st	X+, r0
     898:	a6 31       	cpi	r26, 0x16	; 22
     89a:	b1 07       	cpc	r27, r17
     89c:	d9 f7       	brne	.-10     	; 0x894 <__do_copy_data+0xc>

0000089e <__do_clear_bss>:
     89e:	26 e0       	ldi	r18, 0x06	; 6
     8a0:	a6 e1       	ldi	r26, 0x16	; 22
     8a2:	b6 e0       	ldi	r27, 0x06	; 6
     8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <.do_clear_bss_start>

000008a6 <.do_clear_bss_loop>:
     8a6:	1d 92       	st	X+, r1

000008a8 <.do_clear_bss_start>:
     8a8:	a5 32       	cpi	r26, 0x25	; 37
     8aa:	b2 07       	cpc	r27, r18
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <.do_clear_bss_loop>
     8ae:	0e 94 18 09 	call	0x1230	; 0x1230 <main>
     8b2:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <_exit>

000008b6 <__bad_interrupt>:
     8b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000008ba <CAN_init>:
	if(mob>=0)CAN_TXMOB(mob, 2, tData, 0, 2); //transmit registration and do not wait for finish
	return mob;
}

uint8_t CAN_init()
{
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	2f 97       	sbiw	r28, 0x0f	; 15
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	f8 94       	cli
     8c8:	de bf       	out	0x3e, r29	; 62
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	cd bf       	out	0x3d, r28	; 61
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
     8ce:	88 ed       	ldi	r24, 0xD8	; 216
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	21 e0       	ldi	r18, 0x01	; 1
     8d4:	fc 01       	movw	r30, r24
     8d6:	20 83       	st	Z, r18
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
     8d8:	19 82       	std	Y+1, r1	; 0x01
     8da:	22 c0       	rjmp	.+68     	; 0x920 <CAN_init+0x66>
	{
		CANPAGE = (mobCount << 4);		//select the message object to modify
     8dc:	8d ee       	ldi	r24, 0xED	; 237
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	29 81       	ldd	r18, Y+1	; 0x01
     8e2:	22 95       	swap	r18
     8e4:	20 7f       	andi	r18, 0xF0	; 240
     8e6:	fc 01       	movw	r30, r24
     8e8:	20 83       	st	Z, r18
		CANCDMOB = 0;					//make sure we do not do any actions on this mob.
     8ea:	8f ee       	ldi	r24, 0xEF	; 239
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	fc 01       	movw	r30, r24
     8f0:	10 82       	st	Z, r1
		CANSTMOB = 0;					//make sure no interrupts are set.
     8f2:	8e ee       	ldi	r24, 0xEE	; 238
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	fc 01       	movw	r30, r24
     8f8:	10 82       	st	Z, r1
		CANIDM1 = 0;
     8fa:	87 ef       	ldi	r24, 0xF7	; 247
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	fc 01       	movw	r30, r24
     900:	10 82       	st	Z, r1
		CANIDM2 = 0;
     902:	86 ef       	ldi	r24, 0xF6	; 246
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	fc 01       	movw	r30, r24
     908:	10 82       	st	Z, r1
		CANIDM3 = 0;
     90a:	85 ef       	ldi	r24, 0xF5	; 245
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	fc 01       	movw	r30, r24
     910:	10 82       	st	Z, r1
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
     912:	84 ef       	ldi	r24, 0xF4	; 244
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	fc 01       	movw	r30, r24
     918:	10 82       	st	Z, r1

uint8_t CAN_init()
{
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	8f 5f       	subi	r24, 0xFF	; 255
     91e:	89 83       	std	Y+1, r24	; 0x01
     920:	89 81       	ldd	r24, Y+1	; 0x01
     922:	86 30       	cpi	r24, 0x06	; 6
     924:	d8 f2       	brcs	.-74     	; 0x8dc <CAN_init+0x22>
		CANIDM1 = 0;
		CANIDM2 = 0;
		CANIDM3 = 0;
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
	}
	CANBT1 = 0x0E;		//these registers control speed of communication
     926:	82 ee       	ldi	r24, 0xE2	; 226
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	2e e0       	ldi	r18, 0x0E	; 14
     92c:	fc 01       	movw	r30, r24
     92e:	20 83       	st	Z, r18
	CANBT2 = 0x04;		//currently with these values, it is 250kbps
     930:	83 ee       	ldi	r24, 0xE3	; 227
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	24 e0       	ldi	r18, 0x04	; 4
     936:	fc 01       	movw	r30, r24
     938:	20 83       	st	Z, r18
	CANBT3 = 0x13;		//with 8 TQ per bit.
     93a:	84 ee       	ldi	r24, 0xE4	; 228
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	23 e1       	ldi	r18, 0x13	; 19
     940:	fc 01       	movw	r30, r24
     942:	20 83       	st	Z, r18

	CANIE2 = (1 << IEMOB4)|(1 << IEMOB5);		//enable interrupts on MOB 4 and 5 for receiving
     944:	8e ed       	ldi	r24, 0xDE	; 222
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	20 e3       	ldi	r18, 0x30	; 48
     94a:	fc 01       	movw	r30, r24
     94c:	20 83       	st	Z, r18
	CANGIE = (1 << ENRX)|(1 << ENIT);		//enable receive interrupt; enable global CAN interrupt (all interrupts)
     94e:	8b ed       	ldi	r24, 0xDB	; 219
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	20 ea       	ldi	r18, 0xA0	; 160
     954:	fc 01       	movw	r30, r24
     956:	20 83       	st	Z, r18
	//put other initialisation functions here.

	CANGCON = (1 << ENASTB);    // Enable the CAN. 
     958:	88 ed       	ldi	r24, 0xD8	; 216
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	22 e0       	ldi	r18, 0x02	; 2
     95e:	fc 01       	movw	r30, r24
     960:	20 83       	st	Z, r18
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	a8 e4       	ldi	r26, 0x48	; 72
     968:	b2 e4       	ldi	r27, 0x42	; 66
     96a:	8a 83       	std	Y+2, r24	; 0x02
     96c:	9b 83       	std	Y+3, r25	; 0x03
     96e:	ac 83       	std	Y+4, r26	; 0x04
     970:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	4a e7       	ldi	r20, 0x7A	; 122
     978:	55 e4       	ldi	r21, 0x45	; 69
     97a:	6a 81       	ldd	r22, Y+2	; 0x02
     97c:	7b 81       	ldd	r23, Y+3	; 0x03
     97e:	8c 81       	ldd	r24, Y+4	; 0x04
     980:	9d 81       	ldd	r25, Y+5	; 0x05
     982:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__mulsf3>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	8e 83       	std	Y+6, r24	; 0x06
     98c:	9f 83       	std	Y+7, r25	; 0x07
     98e:	a8 87       	std	Y+8, r26	; 0x08
     990:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	40 e8       	ldi	r20, 0x80	; 128
     998:	5f e3       	ldi	r21, 0x3F	; 63
     99a:	6e 81       	ldd	r22, Y+6	; 0x06
     99c:	7f 81       	ldd	r23, Y+7	; 0x07
     99e:	88 85       	ldd	r24, Y+8	; 0x08
     9a0:	99 85       	ldd	r25, Y+9	; 0x09
     9a2:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__cmpsf2>
     9a6:	88 23       	and	r24, r24
     9a8:	2c f4       	brge	.+10     	; 0x9b4 <CAN_init+0xfa>
		__ticks = 1;
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	9b 87       	std	Y+11, r25	; 0x0b
     9b0:	8a 87       	std	Y+10, r24	; 0x0a
     9b2:	3f c0       	rjmp	.+126    	; 0xa32 <CAN_init+0x178>
	else if (__tmp > 65535)
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	3f ef       	ldi	r19, 0xFF	; 255
     9b8:	4f e7       	ldi	r20, 0x7F	; 127
     9ba:	57 e4       	ldi	r21, 0x47	; 71
     9bc:	6e 81       	ldd	r22, Y+6	; 0x06
     9be:	7f 81       	ldd	r23, Y+7	; 0x07
     9c0:	88 85       	ldd	r24, Y+8	; 0x08
     9c2:	99 85       	ldd	r25, Y+9	; 0x09
     9c4:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__gesf2>
     9c8:	18 16       	cp	r1, r24
     9ca:	4c f5       	brge	.+82     	; 0xa1e <CAN_init+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	40 e2       	ldi	r20, 0x20	; 32
     9d2:	51 e4       	ldi	r21, 0x41	; 65
     9d4:	6a 81       	ldd	r22, Y+2	; 0x02
     9d6:	7b 81       	ldd	r23, Y+3	; 0x03
     9d8:	8c 81       	ldd	r24, Y+4	; 0x04
     9da:	9d 81       	ldd	r25, Y+5	; 0x05
     9dc:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__mulsf3>
     9e0:	dc 01       	movw	r26, r24
     9e2:	cb 01       	movw	r24, r22
     9e4:	bc 01       	movw	r22, r24
     9e6:	cd 01       	movw	r24, r26
     9e8:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__fixunssfsi>
     9ec:	dc 01       	movw	r26, r24
     9ee:	cb 01       	movw	r24, r22
     9f0:	9b 87       	std	Y+11, r25	; 0x0b
     9f2:	8a 87       	std	Y+10, r24	; 0x0a
     9f4:	0f c0       	rjmp	.+30     	; 0xa14 <CAN_init+0x15a>
     9f6:	80 e9       	ldi	r24, 0x90	; 144
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	9d 87       	std	Y+13, r25	; 0x0d
     9fc:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9fe:	8c 85       	ldd	r24, Y+12	; 0x0c
     a00:	9d 85       	ldd	r25, Y+13	; 0x0d
     a02:	01 97       	sbiw	r24, 0x01	; 1
     a04:	f1 f7       	brne	.-4      	; 0xa02 <CAN_init+0x148>
     a06:	9d 87       	std	Y+13, r25	; 0x0d
     a08:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a0a:	8a 85       	ldd	r24, Y+10	; 0x0a
     a0c:	9b 85       	ldd	r25, Y+11	; 0x0b
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	9b 87       	std	Y+11, r25	; 0x0b
     a12:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a14:	8a 85       	ldd	r24, Y+10	; 0x0a
     a16:	9b 85       	ldd	r25, Y+11	; 0x0b
     a18:	89 2b       	or	r24, r25
     a1a:	69 f7       	brne	.-38     	; 0x9f6 <CAN_init+0x13c>
     a1c:	14 c0       	rjmp	.+40     	; 0xa46 <CAN_init+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a1e:	6e 81       	ldd	r22, Y+6	; 0x06
     a20:	7f 81       	ldd	r23, Y+7	; 0x07
     a22:	88 85       	ldd	r24, Y+8	; 0x08
     a24:	99 85       	ldd	r25, Y+9	; 0x09
     a26:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__fixunssfsi>
     a2a:	dc 01       	movw	r26, r24
     a2c:	cb 01       	movw	r24, r22
     a2e:	9b 87       	std	Y+11, r25	; 0x0b
     a30:	8a 87       	std	Y+10, r24	; 0x0a
     a32:	8a 85       	ldd	r24, Y+10	; 0x0a
     a34:	9b 85       	ldd	r25, Y+11	; 0x0b
     a36:	9f 87       	std	Y+15, r25	; 0x0f
     a38:	8e 87       	std	Y+14, r24	; 0x0e
     a3a:	8e 85       	ldd	r24, Y+14	; 0x0e
     a3c:	9f 85       	ldd	r25, Y+15	; 0x0f
     a3e:	01 97       	sbiw	r24, 0x01	; 1
     a40:	f1 f7       	brne	.-4      	; 0xa3e <CAN_init+0x184>
     a42:	9f 87       	std	Y+15, r25	; 0x0f
     a44:	8e 87       	std	Y+14, r24	; 0x0e
	_delay_ms(50);
	if(!(CANGSTA & (1<<ENFG)))return 1;
     a46:	89 ed       	ldi	r24, 0xD9	; 217
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	fc 01       	movw	r30, r24
     a4c:	80 81       	ld	r24, Z
     a4e:	88 2f       	mov	r24, r24
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	84 70       	andi	r24, 0x04	; 4
     a54:	99 27       	eor	r25, r25
     a56:	89 2b       	or	r24, r25
     a58:	11 f4       	brne	.+4      	; 0xa5e <CAN_init+0x1a4>
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	01 c0       	rjmp	.+2      	; 0xa60 <CAN_init+0x1a6>
	return 0;
     a5e:	80 e0       	ldi	r24, 0x00	; 0
}
     a60:	2f 96       	adiw	r28, 0x0f	; 15
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	cd bf       	out	0x3d, r28	; 61
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret

00000a72 <CAN_RXInit>:

void CAN_RXInit(int8_t mob, uint8_t numBytes, uint32_t IDmsk, uint32_t ID)
{
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	2a 97       	sbiw	r28, 0x0a	; 10
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
     a8e:	89 83       	std	Y+1, r24	; 0x01
     a90:	6a 83       	std	Y+2, r22	; 0x02
     a92:	2b 83       	std	Y+3, r18	; 0x03
     a94:	3c 83       	std	Y+4, r19	; 0x04
     a96:	4d 83       	std	Y+5, r20	; 0x05
     a98:	5e 83       	std	Y+6, r21	; 0x06
     a9a:	ef 82       	std	Y+7, r14	; 0x07
     a9c:	f8 86       	std	Y+8, r15	; 0x08
     a9e:	09 87       	std	Y+9, r16	; 0x09
     aa0:	1a 87       	std	Y+10, r17	; 0x0a
	CANPAGE = ( mob << 4);		//use the mobth mob for receiving.
     aa2:	8d ee       	ldi	r24, 0xED	; 237
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	29 81       	ldd	r18, Y+1	; 0x01
     aa8:	22 95       	swap	r18
     aaa:	20 7f       	andi	r18, 0xF0	; 240
     aac:	fc 01       	movw	r30, r24
     aae:	20 83       	st	Z, r18
	//IDEMSK is sent with the CAN packet, we choose to not require that it be set, and instead focus on ID match
	CANIDM4 = (IDmsk<<03) & 0xF8;	//shifts the value sets RTRMSK to zero and IDEMSK to 0
     ab0:	84 ef       	ldi	r24, 0xF4	; 244
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	2b 81       	ldd	r18, Y+3	; 0x03
     ab6:	22 0f       	add	r18, r18
     ab8:	22 0f       	add	r18, r18
     aba:	22 0f       	add	r18, r18
     abc:	fc 01       	movw	r30, r24
     abe:	20 83       	st	Z, r18
	CANIDM3 = (IDmsk>>05) & 0xFF;
     ac0:	25 ef       	ldi	r18, 0xF5	; 245
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	8b 81       	ldd	r24, Y+3	; 0x03
     ac6:	9c 81       	ldd	r25, Y+4	; 0x04
     ac8:	ad 81       	ldd	r26, Y+5	; 0x05
     aca:	be 81       	ldd	r27, Y+6	; 0x06
     acc:	68 94       	set
     ace:	14 f8       	bld	r1, 4
     ad0:	b6 95       	lsr	r27
     ad2:	a7 95       	ror	r26
     ad4:	97 95       	ror	r25
     ad6:	87 95       	ror	r24
     ad8:	16 94       	lsr	r1
     ada:	d1 f7       	brne	.-12     	; 0xad0 <CAN_RXInit+0x5e>
     adc:	f9 01       	movw	r30, r18
     ade:	80 83       	st	Z, r24
	CANIDM2 = (IDmsk>>13) & 0xFF;	
     ae0:	26 ef       	ldi	r18, 0xF6	; 246
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	8b 81       	ldd	r24, Y+3	; 0x03
     ae6:	9c 81       	ldd	r25, Y+4	; 0x04
     ae8:	ad 81       	ldd	r26, Y+5	; 0x05
     aea:	be 81       	ldd	r27, Y+6	; 0x06
     aec:	07 2e       	mov	r0, r23
     aee:	7d e0       	ldi	r23, 0x0D	; 13
     af0:	b6 95       	lsr	r27
     af2:	a7 95       	ror	r26
     af4:	97 95       	ror	r25
     af6:	87 95       	ror	r24
     af8:	7a 95       	dec	r23
     afa:	d1 f7       	brne	.-12     	; 0xaf0 <CAN_RXInit+0x7e>
     afc:	70 2d       	mov	r23, r0
     afe:	f9 01       	movw	r30, r18
     b00:	80 83       	st	Z, r24
	CANIDM1 = (IDmsk>>21) & 0xFF;
     b02:	27 ef       	ldi	r18, 0xF7	; 247
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	8b 81       	ldd	r24, Y+3	; 0x03
     b08:	9c 81       	ldd	r25, Y+4	; 0x04
     b0a:	ad 81       	ldd	r26, Y+5	; 0x05
     b0c:	be 81       	ldd	r27, Y+6	; 0x06
     b0e:	07 2e       	mov	r0, r23
     b10:	75 e1       	ldi	r23, 0x15	; 21
     b12:	b6 95       	lsr	r27
     b14:	a7 95       	ror	r26
     b16:	97 95       	ror	r25
     b18:	87 95       	ror	r24
     b1a:	7a 95       	dec	r23
     b1c:	d1 f7       	brne	.-12     	; 0xb12 <CAN_RXInit+0xa0>
     b1e:	70 2d       	mov	r23, r0
     b20:	f9 01       	movw	r30, r18
     b22:	80 83       	st	Z, r24
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG to 0
     b24:	80 ef       	ldi	r24, 0xF0	; 240
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	2f 81       	ldd	r18, Y+7	; 0x07
     b2a:	22 0f       	add	r18, r18
     b2c:	22 0f       	add	r18, r18
     b2e:	22 0f       	add	r18, r18
     b30:	fc 01       	movw	r30, r24
     b32:	20 83       	st	Z, r18
	CANIDT3 = (ID>>05) & 0xFF;
     b34:	21 ef       	ldi	r18, 0xF1	; 241
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	8f 81       	ldd	r24, Y+7	; 0x07
     b3a:	98 85       	ldd	r25, Y+8	; 0x08
     b3c:	a9 85       	ldd	r26, Y+9	; 0x09
     b3e:	ba 85       	ldd	r27, Y+10	; 0x0a
     b40:	68 94       	set
     b42:	14 f8       	bld	r1, 4
     b44:	b6 95       	lsr	r27
     b46:	a7 95       	ror	r26
     b48:	97 95       	ror	r25
     b4a:	87 95       	ror	r24
     b4c:	16 94       	lsr	r1
     b4e:	d1 f7       	brne	.-12     	; 0xb44 <CAN_RXInit+0xd2>
     b50:	f9 01       	movw	r30, r18
     b52:	80 83       	st	Z, r24
	CANIDT2 = (ID>>13) & 0xFF;
     b54:	22 ef       	ldi	r18, 0xF2	; 242
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	8f 81       	ldd	r24, Y+7	; 0x07
     b5a:	98 85       	ldd	r25, Y+8	; 0x08
     b5c:	a9 85       	ldd	r26, Y+9	; 0x09
     b5e:	ba 85       	ldd	r27, Y+10	; 0x0a
     b60:	07 2e       	mov	r0, r23
     b62:	7d e0       	ldi	r23, 0x0D	; 13
     b64:	b6 95       	lsr	r27
     b66:	a7 95       	ror	r26
     b68:	97 95       	ror	r25
     b6a:	87 95       	ror	r24
     b6c:	7a 95       	dec	r23
     b6e:	d1 f7       	brne	.-12     	; 0xb64 <CAN_RXInit+0xf2>
     b70:	70 2d       	mov	r23, r0
     b72:	f9 01       	movw	r30, r18
     b74:	80 83       	st	Z, r24
	CANIDT1 = (ID>>21) & 0xFF;
     b76:	23 ef       	ldi	r18, 0xF3	; 243
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	8f 81       	ldd	r24, Y+7	; 0x07
     b7c:	98 85       	ldd	r25, Y+8	; 0x08
     b7e:	a9 85       	ldd	r26, Y+9	; 0x09
     b80:	ba 85       	ldd	r27, Y+10	; 0x0a
     b82:	07 2e       	mov	r0, r23
     b84:	75 e1       	ldi	r23, 0x15	; 21
     b86:	b6 95       	lsr	r27
     b88:	a7 95       	ror	r26
     b8a:	97 95       	ror	r25
     b8c:	87 95       	ror	r24
     b8e:	7a 95       	dec	r23
     b90:	d1 f7       	brne	.-12     	; 0xb86 <CAN_RXInit+0x114>
     b92:	70 2d       	mov	r23, r0
     b94:	f9 01       	movw	r30, r18
     b96:	80 83       	st	Z, r24
	
	CANCDMOB = (numBytes << DLC0)|(2<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.
     b98:	8f ee       	ldi	r24, 0xEF	; 239
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	2a 81       	ldd	r18, Y+2	; 0x02
     b9e:	20 69       	ori	r18, 0x90	; 144
     ba0:	fc 01       	movw	r30, r24
     ba2:	20 83       	st	Z, r18
}
     ba4:	2a 96       	adiw	r28, 0x0a	; 10
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	de bf       	out	0x3e, r29	; 62
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	cd bf       	out	0x3d, r28	; 61
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	ff 90       	pop	r15
     bba:	ef 90       	pop	r14
     bbc:	08 95       	ret

00000bbe <CAN_TXMOB>:

void CAN_TXMOB(int8_t mob, uint8_t numBytes, uint8_t * data, uint32_t ID, uint8_t ms_loop_until_TXOK)
{
     bbe:	ef 92       	push	r14
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	69 97       	sbiw	r28, 0x19	; 25
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	89 8b       	std	Y+17, r24	; 0x11
     bda:	6a 8b       	std	Y+18, r22	; 0x12
     bdc:	5c 8b       	std	Y+20, r21	; 0x14
     bde:	4b 8b       	std	Y+19, r20	; 0x13
     be0:	0d 8b       	std	Y+21, r16	; 0x15
     be2:	1e 8b       	std	Y+22, r17	; 0x16
     be4:	2f 8b       	std	Y+23, r18	; 0x17
     be6:	38 8f       	std	Y+24, r19	; 0x18
     be8:	e9 8e       	std	Y+25, r14	; 0x19
	CANPAGE = ( mob << 4);		//use the mobth mob
     bea:	8d ee       	ldi	r24, 0xED	; 237
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	29 89       	ldd	r18, Y+17	; 0x11
     bf0:	22 95       	swap	r18
     bf2:	20 7f       	andi	r18, 0xF0	; 240
     bf4:	fc 01       	movw	r30, r24
     bf6:	20 83       	st	Z, r18
	//IDEMSK is sent with the CAN packet, we choose to not set it, and instead the receiver will focus on ID match
	CANSTMOB &= ~(1<<TXOK);
     bf8:	8e ee       	ldi	r24, 0xEE	; 238
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	2e ee       	ldi	r18, 0xEE	; 238
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	f9 01       	movw	r30, r18
     c02:	20 81       	ld	r18, Z
     c04:	2f 7b       	andi	r18, 0xBF	; 191
     c06:	fc 01       	movw	r30, r24
     c08:	20 83       	st	Z, r18
	CANIDM4 = 0;
     c0a:	84 ef       	ldi	r24, 0xF4	; 244
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	fc 01       	movw	r30, r24
     c10:	10 82       	st	Z, r1
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG
     c12:	80 ef       	ldi	r24, 0xF0	; 240
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	2d 89       	ldd	r18, Y+21	; 0x15
     c18:	22 0f       	add	r18, r18
     c1a:	22 0f       	add	r18, r18
     c1c:	22 0f       	add	r18, r18
     c1e:	fc 01       	movw	r30, r24
     c20:	20 83       	st	Z, r18
	CANIDT3 = (ID>>05) & 0xFF;
     c22:	21 ef       	ldi	r18, 0xF1	; 241
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	8d 89       	ldd	r24, Y+21	; 0x15
     c28:	9e 89       	ldd	r25, Y+22	; 0x16
     c2a:	af 89       	ldd	r26, Y+23	; 0x17
     c2c:	b8 8d       	ldd	r27, Y+24	; 0x18
     c2e:	68 94       	set
     c30:	14 f8       	bld	r1, 4
     c32:	b6 95       	lsr	r27
     c34:	a7 95       	ror	r26
     c36:	97 95       	ror	r25
     c38:	87 95       	ror	r24
     c3a:	16 94       	lsr	r1
     c3c:	d1 f7       	brne	.-12     	; 0xc32 <CAN_TXMOB+0x74>
     c3e:	f9 01       	movw	r30, r18
     c40:	80 83       	st	Z, r24
	CANIDT2 = (ID>>13) & 0xFF;
     c42:	22 ef       	ldi	r18, 0xF2	; 242
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	8d 89       	ldd	r24, Y+21	; 0x15
     c48:	9e 89       	ldd	r25, Y+22	; 0x16
     c4a:	af 89       	ldd	r26, Y+23	; 0x17
     c4c:	b8 8d       	ldd	r27, Y+24	; 0x18
     c4e:	07 2e       	mov	r0, r23
     c50:	7d e0       	ldi	r23, 0x0D	; 13
     c52:	b6 95       	lsr	r27
     c54:	a7 95       	ror	r26
     c56:	97 95       	ror	r25
     c58:	87 95       	ror	r24
     c5a:	7a 95       	dec	r23
     c5c:	d1 f7       	brne	.-12     	; 0xc52 <CAN_TXMOB+0x94>
     c5e:	70 2d       	mov	r23, r0
     c60:	f9 01       	movw	r30, r18
     c62:	80 83       	st	Z, r24
	CANIDT1 = (ID>>21) & 0xFF;
     c64:	23 ef       	ldi	r18, 0xF3	; 243
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	8d 89       	ldd	r24, Y+21	; 0x15
     c6a:	9e 89       	ldd	r25, Y+22	; 0x16
     c6c:	af 89       	ldd	r26, Y+23	; 0x17
     c6e:	b8 8d       	ldd	r27, Y+24	; 0x18
     c70:	07 2e       	mov	r0, r23
     c72:	75 e1       	ldi	r23, 0x15	; 21
     c74:	b6 95       	lsr	r27
     c76:	a7 95       	ror	r26
     c78:	97 95       	ror	r25
     c7a:	87 95       	ror	r24
     c7c:	7a 95       	dec	r23
     c7e:	d1 f7       	brne	.-12     	; 0xc74 <CAN_TXMOB+0xb6>
     c80:	70 2d       	mov	r23, r0
     c82:	f9 01       	movw	r30, r18
     c84:	80 83       	st	Z, r24
	for(uint8_t i = 0; i < numBytes; i++)
     c86:	19 82       	std	Y+1, r1	; 0x01
     c88:	10 c0       	rjmp	.+32     	; 0xcaa <CAN_TXMOB+0xec>
	{
		CANMSG = data[i];
     c8a:	8a ef       	ldi	r24, 0xFA	; 250
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	29 81       	ldd	r18, Y+1	; 0x01
     c90:	22 2f       	mov	r18, r18
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	4b 89       	ldd	r20, Y+19	; 0x13
     c96:	5c 89       	ldd	r21, Y+20	; 0x14
     c98:	24 0f       	add	r18, r20
     c9a:	35 1f       	adc	r19, r21
     c9c:	f9 01       	movw	r30, r18
     c9e:	20 81       	ld	r18, Z
     ca0:	fc 01       	movw	r30, r24
     ca2:	20 83       	st	Z, r18
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG
	CANIDT3 = (ID>>05) & 0xFF;
	CANIDT2 = (ID>>13) & 0xFF;
	CANIDT1 = (ID>>21) & 0xFF;
	for(uint8_t i = 0; i < numBytes; i++)
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	8f 5f       	subi	r24, 0xFF	; 255
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	99 81       	ldd	r25, Y+1	; 0x01
     cac:	8a 89       	ldd	r24, Y+18	; 0x12
     cae:	98 17       	cp	r25, r24
     cb0:	60 f3       	brcs	.-40     	; 0xc8a <CAN_TXMOB+0xcc>
	{
		CANMSG = data[i];
	}
	CANCDMOB = (numBytes << DLC0)|(1<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.
     cb2:	8f ee       	ldi	r24, 0xEF	; 239
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	2a 89       	ldd	r18, Y+18	; 0x12
     cb8:	20 65       	ori	r18, 0x50	; 80
     cba:	fc 01       	movw	r30, r24
     cbc:	20 83       	st	Z, r18

	for(uint8_t i = 0; i < ms_loop_until_TXOK; i++)	//loop until specified wait time is up
     cbe:	1a 82       	std	Y+2, r1	; 0x02
     cc0:	80 c0       	rjmp	.+256    	; 0xdc2 <CAN_TXMOB+0x204>
	{
		if((CANSTMOB & (1 << TXOK)))break;		//check for transmission complete
     cc2:	8e ee       	ldi	r24, 0xEE	; 238
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	fc 01       	movw	r30, r24
     cc8:	80 81       	ld	r24, Z
     cca:	88 2f       	mov	r24, r24
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	80 74       	andi	r24, 0x40	; 64
     cd0:	99 27       	eor	r25, r25
     cd2:	89 2b       	or	r24, r25
     cd4:	09 f0       	breq	.+2      	; 0xcd8 <CAN_TXMOB+0x11a>
     cd6:	7a c0       	rjmp	.+244    	; 0xdcc <CAN_TXMOB+0x20e>
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e8       	ldi	r26, 0x80	; 128
     cde:	bf e3       	ldi	r27, 0x3F	; 63
     ce0:	8b 83       	std	Y+3, r24	; 0x03
     ce2:	9c 83       	std	Y+4, r25	; 0x04
     ce4:	ad 83       	std	Y+5, r26	; 0x05
     ce6:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	4a e7       	ldi	r20, 0x7A	; 122
     cee:	55 e4       	ldi	r21, 0x45	; 69
     cf0:	6b 81       	ldd	r22, Y+3	; 0x03
     cf2:	7c 81       	ldd	r23, Y+4	; 0x04
     cf4:	8d 81       	ldd	r24, Y+5	; 0x05
     cf6:	9e 81       	ldd	r25, Y+6	; 0x06
     cf8:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__mulsf3>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	8f 83       	std	Y+7, r24	; 0x07
     d02:	98 87       	std	Y+8, r25	; 0x08
     d04:	a9 87       	std	Y+9, r26	; 0x09
     d06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e8       	ldi	r20, 0x80	; 128
     d0e:	5f e3       	ldi	r21, 0x3F	; 63
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__cmpsf2>
     d1c:	88 23       	and	r24, r24
     d1e:	2c f4       	brge	.+10     	; 0xd2a <CAN_TXMOB+0x16c>
		__ticks = 1;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	9c 87       	std	Y+12, r25	; 0x0c
     d26:	8b 87       	std	Y+11, r24	; 0x0b
     d28:	3f c0       	rjmp	.+126    	; 0xda8 <CAN_TXMOB+0x1ea>
	else if (__tmp > 65535)
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	3f ef       	ldi	r19, 0xFF	; 255
     d2e:	4f e7       	ldi	r20, 0x7F	; 127
     d30:	57 e4       	ldi	r21, 0x47	; 71
     d32:	6f 81       	ldd	r22, Y+7	; 0x07
     d34:	78 85       	ldd	r23, Y+8	; 0x08
     d36:	89 85       	ldd	r24, Y+9	; 0x09
     d38:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__gesf2>
     d3e:	18 16       	cp	r1, r24
     d40:	4c f5       	brge	.+82     	; 0xd94 <CAN_TXMOB+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	40 e2       	ldi	r20, 0x20	; 32
     d48:	51 e4       	ldi	r21, 0x41	; 65
     d4a:	6b 81       	ldd	r22, Y+3	; 0x03
     d4c:	7c 81       	ldd	r23, Y+4	; 0x04
     d4e:	8d 81       	ldd	r24, Y+5	; 0x05
     d50:	9e 81       	ldd	r25, Y+6	; 0x06
     d52:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__mulsf3>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	bc 01       	movw	r22, r24
     d5c:	cd 01       	movw	r24, r26
     d5e:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__fixunssfsi>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	9c 87       	std	Y+12, r25	; 0x0c
     d68:	8b 87       	std	Y+11, r24	; 0x0b
     d6a:	0f c0       	rjmp	.+30     	; 0xd8a <CAN_TXMOB+0x1cc>
     d6c:	80 e9       	ldi	r24, 0x90	; 144
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	9e 87       	std	Y+14, r25	; 0x0e
     d72:	8d 87       	std	Y+13, r24	; 0x0d
     d74:	8d 85       	ldd	r24, Y+13	; 0x0d
     d76:	9e 85       	ldd	r25, Y+14	; 0x0e
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	f1 f7       	brne	.-4      	; 0xd78 <CAN_TXMOB+0x1ba>
     d7c:	9e 87       	std	Y+14, r25	; 0x0e
     d7e:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d80:	8b 85       	ldd	r24, Y+11	; 0x0b
     d82:	9c 85       	ldd	r25, Y+12	; 0x0c
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	9c 87       	std	Y+12, r25	; 0x0c
     d88:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d8a:	8b 85       	ldd	r24, Y+11	; 0x0b
     d8c:	9c 85       	ldd	r25, Y+12	; 0x0c
     d8e:	89 2b       	or	r24, r25
     d90:	69 f7       	brne	.-38     	; 0xd6c <CAN_TXMOB+0x1ae>
     d92:	14 c0       	rjmp	.+40     	; 0xdbc <CAN_TXMOB+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d94:	6f 81       	ldd	r22, Y+7	; 0x07
     d96:	78 85       	ldd	r23, Y+8	; 0x08
     d98:	89 85       	ldd	r24, Y+9	; 0x09
     d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9c:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__fixunssfsi>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	9c 87       	std	Y+12, r25	; 0x0c
     da6:	8b 87       	std	Y+11, r24	; 0x0b
     da8:	8b 85       	ldd	r24, Y+11	; 0x0b
     daa:	9c 85       	ldd	r25, Y+12	; 0x0c
     dac:	98 8b       	std	Y+16, r25	; 0x10
     dae:	8f 87       	std	Y+15, r24	; 0x0f
     db0:	8f 85       	ldd	r24, Y+15	; 0x0f
     db2:	98 89       	ldd	r25, Y+16	; 0x10
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <CAN_TXMOB+0x1f6>
     db8:	98 8b       	std	Y+16, r25	; 0x10
     dba:	8f 87       	std	Y+15, r24	; 0x0f
	{
		CANMSG = data[i];
	}
	CANCDMOB = (numBytes << DLC0)|(1<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.

	for(uint8_t i = 0; i < ms_loop_until_TXOK; i++)	//loop until specified wait time is up
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	8f 5f       	subi	r24, 0xFF	; 255
     dc0:	8a 83       	std	Y+2, r24	; 0x02
     dc2:	9a 81       	ldd	r25, Y+2	; 0x02
     dc4:	89 8d       	ldd	r24, Y+25	; 0x19
     dc6:	98 17       	cp	r25, r24
     dc8:	08 f4       	brcc	.+2      	; 0xdcc <CAN_TXMOB+0x20e>
     dca:	7b cf       	rjmp	.-266    	; 0xcc2 <CAN_TXMOB+0x104>
	{
		if((CANSTMOB & (1 << TXOK)))break;		//check for transmission complete
		_delay_ms(1);								//do nothing for 1 ms
	}
}
     dcc:	69 96       	adiw	r28, 0x19	; 25
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	ef 90       	pop	r14
     de2:	08 95       	ret

00000de4 <CAN_findFreeTXMOB>:

int8_t CAN_findFreeTXMOB()
{
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	1f 92       	push	r1
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
     dee:	19 82       	std	Y+1, r1	; 0x01
     df0:	20 c0       	rjmp	.+64     	; 0xe32 <CAN_findFreeTXMOB+0x4e>
	{
		CANPAGE = ( i << 4);		//use the mobth mob
     df2:	8d ee       	ldi	r24, 0xED	; 237
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	29 81       	ldd	r18, Y+1	; 0x01
     df8:	22 95       	swap	r18
     dfa:	20 7f       	andi	r18, 0xF0	; 240
     dfc:	fc 01       	movw	r30, r24
     dfe:	20 83       	st	Z, r18
		if((CANSTMOB & (1<<TXOK)) || !(CANCDMOB & (1<<CONMOB0))) //if the transmission is complete or the mob has not been setup yet
     e00:	8e ee       	ldi	r24, 0xEE	; 238
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	fc 01       	movw	r30, r24
     e06:	80 81       	ld	r24, Z
     e08:	88 2f       	mov	r24, r24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	80 74       	andi	r24, 0x40	; 64
     e0e:	99 27       	eor	r25, r25
     e10:	89 2b       	or	r24, r25
     e12:	51 f4       	brne	.+20     	; 0xe28 <CAN_findFreeTXMOB+0x44>
     e14:	8f ee       	ldi	r24, 0xEF	; 239
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	fc 01       	movw	r30, r24
     e1a:	80 81       	ld	r24, Z
     e1c:	88 2f       	mov	r24, r24
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	80 74       	andi	r24, 0x40	; 64
     e22:	99 27       	eor	r25, r25
     e24:	89 2b       	or	r24, r25
     e26:	11 f4       	brne	.+4      	; 0xe2c <CAN_findFreeTXMOB+0x48>
		{
			return i;			//send back the free mob
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	07 c0       	rjmp	.+14     	; 0xe3a <CAN_findFreeTXMOB+0x56>
	}
}

int8_t CAN_findFreeTXMOB()
{
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	8f 5f       	subi	r24, 0xFF	; 255
     e30:	89 83       	std	Y+1, r24	; 0x01
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	84 30       	cpi	r24, 0x04	; 4
     e36:	e8 f2       	brcs	.-70     	; 0xdf2 <CAN_findFreeTXMOB+0xe>
		if((CANSTMOB & (1<<TXOK)) || !(CANCDMOB & (1<<CONMOB0))) //if the transmission is complete or the mob has not been setup yet
		{
			return i;			//send back the free mob
		}
	}
	return -1;		//otherwise, none are free
     e38:	8f ef       	ldi	r24, 0xFF	; 255
     e3a:	0f 90       	pop	r0
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	08 95       	ret

00000e42 <__vector_10>:
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  ISR
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

ISR(INT3_vect)
{
     e42:	1f 92       	push	r1
     e44:	0f 92       	push	r0
     e46:	00 90 5f 00 	lds	r0, 0x005F
     e4a:	0f 92       	push	r0
     e4c:	11 24       	eor	r1, r1
     e4e:	2f 93       	push	r18
     e50:	8f 93       	push	r24
     e52:	9f 93       	push	r25
     e54:	ef 93       	push	r30
     e56:	ff 93       	push	r31
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
	SMCR = (0<<SM2)|(0<<SM1)|(1<<SM0)|(0<<SE);		//disable the mode, and disable the enable bit.
     e60:	83 e5       	ldi	r24, 0x53	; 83
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	22 e0       	ldi	r18, 0x02	; 2
     e66:	fc 01       	movw	r30, r24
     e68:	20 83       	st	Z, r18
}
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	ff 91       	pop	r31
     e70:	ef 91       	pop	r30
     e72:	9f 91       	pop	r25
     e74:	8f 91       	pop	r24
     e76:	2f 91       	pop	r18
     e78:	0f 90       	pop	r0
     e7a:	00 92 5f 00 	sts	0x005F, r0
     e7e:	0f 90       	pop	r0
     e80:	1f 90       	pop	r1
     e82:	18 95       	reti

00000e84 <__vector_18>:

ISR(CAN_INT_vect)
{
     e84:	1f 92       	push	r1
     e86:	0f 92       	push	r0
     e88:	00 90 5f 00 	lds	r0, 0x005F
     e8c:	0f 92       	push	r0
     e8e:	11 24       	eor	r1, r1
     e90:	ef 92       	push	r14
     e92:	ff 92       	push	r15
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	2f 93       	push	r18
     e9a:	3f 93       	push	r19
     e9c:	4f 93       	push	r20
     e9e:	5f 93       	push	r21
     ea0:	6f 93       	push	r22
     ea2:	7f 93       	push	r23
     ea4:	8f 93       	push	r24
     ea6:	9f 93       	push	r25
     ea8:	af 93       	push	r26
     eaa:	bf 93       	push	r27
     eac:	ef 93       	push	r30
     eae:	ff 93       	push	r31
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <__vector_18+0x32>
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
	//uint8_t authority;
	int8_t mob;
	if((CANSIT2 & (1 << SIT5)))	//we received a CAN message on mob 5, which is set up to receive exclusively from the AMU.
     eba:	80 ee       	ldi	r24, 0xE0	; 224
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	fc 01       	movw	r30, r24
     ec0:	80 81       	ld	r24, Z
     ec2:	88 2f       	mov	r24, r24
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	80 72       	andi	r24, 0x20	; 32
     ec8:	99 27       	eor	r25, r25
     eca:	89 2b       	or	r24, r25
     ecc:	09 f4       	brne	.+2      	; 0xed0 <__vector_18+0x4c>
     ece:	d2 c0       	rjmp	.+420    	; 0x1074 <__vector_18+0x1f0>
	{
		
		CANPAGE = (5 << 4);			//set the canpage to the receiver MOB
     ed0:	8d ee       	ldi	r24, 0xED	; 237
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	20 e5       	ldi	r18, 0x50	; 80
     ed6:	fc 01       	movw	r30, r24
     ed8:	20 83       	st	Z, r18
		ThrottlePercentageData = CANMSG << 8;
     eda:	8a ef       	ldi	r24, 0xFA	; 250
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	fc 01       	movw	r30, r24
     ee0:	80 81       	ld	r24, Z
     ee2:	88 2f       	mov	r24, r24
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	98 2f       	mov	r25, r24
     ee8:	88 27       	eor	r24, r24
     eea:	90 93 17 06 	sts	0x0617, r25
     eee:	80 93 16 06 	sts	0x0616, r24
		ThrottlePercentageData += CANMSG;
     ef2:	8a ef       	ldi	r24, 0xFA	; 250
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	fc 01       	movw	r30, r24
     ef8:	80 81       	ld	r24, Z
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	80 91 16 06 	lds	r24, 0x0616
     f02:	90 91 17 06 	lds	r25, 0x0617
     f06:	82 0f       	add	r24, r18
     f08:	93 1f       	adc	r25, r19
     f0a:	90 93 17 06 	sts	0x0617, r25
     f0e:	80 93 16 06 	sts	0x0616, r24
		ThrottlePercentageData = ThrottlePercentageData * 100 /511;
     f12:	80 91 16 06 	lds	r24, 0x0616
     f16:	90 91 17 06 	lds	r25, 0x0617
     f1a:	24 e6       	ldi	r18, 0x64	; 100
     f1c:	28 9f       	mul	r18, r24
     f1e:	a0 01       	movw	r20, r0
     f20:	29 9f       	mul	r18, r25
     f22:	50 0d       	add	r21, r0
     f24:	11 24       	eor	r1, r1
     f26:	2f ef       	ldi	r18, 0xFF	; 255
     f28:	31 e0       	ldi	r19, 0x01	; 1
     f2a:	ca 01       	movw	r24, r20
     f2c:	b9 01       	movw	r22, r18
     f2e:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__udivmodhi4>
     f32:	cb 01       	movw	r24, r22
     f34:	90 93 17 06 	sts	0x0617, r25
     f38:	80 93 16 06 	sts	0x0616, r24
		RPMData = CANMSG << 8;
     f3c:	8a ef       	ldi	r24, 0xFA	; 250
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	fc 01       	movw	r30, r24
     f42:	80 81       	ld	r24, Z
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	98 2f       	mov	r25, r24
     f4a:	88 27       	eor	r24, r24
     f4c:	09 2e       	mov	r0, r25
     f4e:	00 0c       	add	r0, r0
     f50:	aa 0b       	sbc	r26, r26
     f52:	bb 0b       	sbc	r27, r27
     f54:	80 93 18 06 	sts	0x0618, r24
     f58:	90 93 19 06 	sts	0x0619, r25
     f5c:	a0 93 1a 06 	sts	0x061A, r26
     f60:	b0 93 1b 06 	sts	0x061B, r27
		RPMData += CANMSG;
     f64:	8a ef       	ldi	r24, 0xFA	; 250
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	fc 01       	movw	r30, r24
     f6a:	80 81       	ld	r24, Z
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	80 91 18 06 	lds	r24, 0x0618
     f78:	90 91 19 06 	lds	r25, 0x0619
     f7c:	a0 91 1a 06 	lds	r26, 0x061A
     f80:	b0 91 1b 06 	lds	r27, 0x061B
     f84:	82 0f       	add	r24, r18
     f86:	93 1f       	adc	r25, r19
     f88:	a4 1f       	adc	r26, r20
     f8a:	b5 1f       	adc	r27, r21
     f8c:	80 93 18 06 	sts	0x0618, r24
     f90:	90 93 19 06 	sts	0x0619, r25
     f94:	a0 93 1a 06 	sts	0x061A, r26
     f98:	b0 93 1b 06 	sts	0x061B, r27
		GearboxTempData = CANMSG << 8;
     f9c:	8a ef       	ldi	r24, 0xFA	; 250
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	fc 01       	movw	r30, r24
     fa2:	80 81       	ld	r24, Z
     fa4:	88 2f       	mov	r24, r24
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	98 2f       	mov	r25, r24
     faa:	88 27       	eor	r24, r24
     fac:	09 2e       	mov	r0, r25
     fae:	00 0c       	add	r0, r0
     fb0:	aa 0b       	sbc	r26, r26
     fb2:	bb 0b       	sbc	r27, r27
     fb4:	80 93 1c 06 	sts	0x061C, r24
     fb8:	90 93 1d 06 	sts	0x061D, r25
     fbc:	a0 93 1e 06 	sts	0x061E, r26
     fc0:	b0 93 1f 06 	sts	0x061F, r27
		GearboxTempData += CANMSG;
     fc4:	8a ef       	ldi	r24, 0xFA	; 250
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	fc 01       	movw	r30, r24
     fca:	80 81       	ld	r24, Z
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	80 91 1c 06 	lds	r24, 0x061C
     fd8:	90 91 1d 06 	lds	r25, 0x061D
     fdc:	a0 91 1e 06 	lds	r26, 0x061E
     fe0:	b0 91 1f 06 	lds	r27, 0x061F
     fe4:	82 0f       	add	r24, r18
     fe6:	93 1f       	adc	r25, r19
     fe8:	a4 1f       	adc	r26, r20
     fea:	b5 1f       	adc	r27, r21
     fec:	80 93 1c 06 	sts	0x061C, r24
     ff0:	90 93 1d 06 	sts	0x061D, r25
     ff4:	a0 93 1e 06 	sts	0x061E, r26
     ff8:	b0 93 1f 06 	sts	0x061F, r27
		VoltageData = CANMSG << 8;
     ffc:	8a ef       	ldi	r24, 0xFA	; 250
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	fc 01       	movw	r30, r24
    1002:	80 81       	ld	r24, Z
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	98 2f       	mov	r25, r24
    100a:	88 27       	eor	r24, r24
    100c:	09 2e       	mov	r0, r25
    100e:	00 0c       	add	r0, r0
    1010:	aa 0b       	sbc	r26, r26
    1012:	bb 0b       	sbc	r27, r27
    1014:	80 93 20 06 	sts	0x0620, r24
    1018:	90 93 21 06 	sts	0x0621, r25
    101c:	a0 93 22 06 	sts	0x0622, r26
    1020:	b0 93 23 06 	sts	0x0623, r27
		VoltageData += CANMSG;
    1024:	8a ef       	ldi	r24, 0xFA	; 250
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	fc 01       	movw	r30, r24
    102a:	80 81       	ld	r24, Z
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e0       	ldi	r20, 0x00	; 0
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	80 91 20 06 	lds	r24, 0x0620
    1038:	90 91 21 06 	lds	r25, 0x0621
    103c:	a0 91 22 06 	lds	r26, 0x0622
    1040:	b0 91 23 06 	lds	r27, 0x0623
    1044:	82 0f       	add	r24, r18
    1046:	93 1f       	adc	r25, r19
    1048:	a4 1f       	adc	r26, r20
    104a:	b5 1f       	adc	r27, r21
    104c:	80 93 20 06 	sts	0x0620, r24
    1050:	90 93 21 06 	sts	0x0621, r25
    1054:	a0 93 22 06 	sts	0x0622, r26
    1058:	b0 93 23 06 	sts	0x0623, r27

		CAN_RXInit(5,8,0x400000, 0x400000);
    105c:	e1 2c       	mov	r14, r1
    105e:	f1 2c       	mov	r15, r1
    1060:	00 e4       	ldi	r16, 0x40	; 64
    1062:	10 e0       	ldi	r17, 0x00	; 0
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	40 e4       	ldi	r20, 0x40	; 64
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	68 e0       	ldi	r22, 0x08	; 8
    106e:	85 e0       	ldi	r24, 0x05	; 5
    1070:	0e 94 39 05 	call	0xa72	; 0xa72 <CAN_RXInit>
	}
	
	CANPAGE = (5 << 4);			//set the canpage to the receiver MOB
    1074:	8d ee       	ldi	r24, 0xED	; 237
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	20 e5       	ldi	r18, 0x50	; 80
    107a:	fc 01       	movw	r30, r24
    107c:	20 83       	st	Z, r18
	CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
    107e:	8e ee       	ldi	r24, 0xEE	; 238
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	2e ee       	ldi	r18, 0xEE	; 238
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	f9 01       	movw	r30, r18
    1088:	20 81       	ld	r18, Z
    108a:	2f 7d       	andi	r18, 0xDF	; 223
    108c:	fc 01       	movw	r30, r24
    108e:	20 83       	st	Z, r18
	CANPAGE = (4 << 4);
    1090:	8d ee       	ldi	r24, 0xED	; 237
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	20 e4       	ldi	r18, 0x40	; 64
    1096:	fc 01       	movw	r30, r24
    1098:	20 83       	st	Z, r18
	CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
    109a:	8e ee       	ldi	r24, 0xEE	; 238
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	2e ee       	ldi	r18, 0xEE	; 238
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	f9 01       	movw	r30, r18
    10a4:	20 81       	ld	r18, Z
    10a6:	2f 7d       	andi	r18, 0xDF	; 223
    10a8:	fc 01       	movw	r30, r24
    10aa:	20 83       	st	Z, r18
}
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	ff 91       	pop	r31
    10b6:	ef 91       	pop	r30
    10b8:	bf 91       	pop	r27
    10ba:	af 91       	pop	r26
    10bc:	9f 91       	pop	r25
    10be:	8f 91       	pop	r24
    10c0:	7f 91       	pop	r23
    10c2:	6f 91       	pop	r22
    10c4:	5f 91       	pop	r21
    10c6:	4f 91       	pop	r20
    10c8:	3f 91       	pop	r19
    10ca:	2f 91       	pop	r18
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ff 90       	pop	r15
    10d2:	ef 90       	pop	r14
    10d4:	0f 90       	pop	r0
    10d6:	00 92 5f 00 	sts	0x005F, r0
    10da:	0f 90       	pop	r0
    10dc:	1f 90       	pop	r1
    10de:	18 95       	reti

000010e0 <ADC_init>:
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  ADC
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

void ADC_init()
{
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
	ADMUX=(1<<REFS0)|(1<<AREFEN);                      // For Aref=AVcc with external capacitor;
    10e8:	8c e7       	ldi	r24, 0x7C	; 124
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	20 e6       	ldi	r18, 0x60	; 96
    10ee:	fc 01       	movw	r30, r24
    10f0:	20 83       	st	Z, r18
	ADMUX &= ~(1<<ADLAR);								//make sure adlar is not set.
    10f2:	8c e7       	ldi	r24, 0x7C	; 124
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	2c e7       	ldi	r18, 0x7C	; 124
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	f9 01       	movw	r30, r18
    10fc:	20 81       	ld	r18, Z
    10fe:	2f 7d       	andi	r18, 0xDF	; 223
    1100:	fc 01       	movw	r30, r24
    1102:	20 83       	st	Z, r18
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Prescaler div factor = 128, 125kHz --> lowest we can go for best accuracy.
    1104:	8a e7       	ldi	r24, 0x7A	; 122
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	27 e8       	ldi	r18, 0x87	; 135
    110a:	fc 01       	movw	r30, r24
    110c:	20 83       	st	Z, r18
}
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	08 95       	ret

00001114 <ADC_read>:
uint16_t ADC_read(uint8_t channel)
{
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	00 d0       	rcall	.+0      	; 0x111a <ADC_read+0x6>
    111a:	1f 92       	push	r1
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	8b 83       	std	Y+3, r24	; 0x03
	channel = (ADMUX & 0xe0)|(channel & 0x1F); //ADMUX | 0b11100000 and channel | 0b00011111 --> this keeps all bits of ADMUX the same except for the bits signalling which channel to use.
    1122:	8c e7       	ldi	r24, 0x7C	; 124
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	fc 01       	movw	r30, r24
    1128:	80 81       	ld	r24, Z
    112a:	98 2f       	mov	r25, r24
    112c:	90 7e       	andi	r25, 0xE0	; 224
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	8f 71       	andi	r24, 0x1F	; 31
    1132:	89 2b       	or	r24, r25
    1134:	8b 83       	std	Y+3, r24	; 0x03
	ADMUX = channel;
    1136:	8c e7       	ldi	r24, 0x7C	; 124
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	2b 81       	ldd	r18, Y+3	; 0x03
    113c:	fc 01       	movw	r30, r24
    113e:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);							//ADSC (single conversion bit) is set to 1 to start the conversion process.
    1140:	8a e7       	ldi	r24, 0x7A	; 122
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	2a e7       	ldi	r18, 0x7A	; 122
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	f9 01       	movw	r30, r18
    114a:	20 81       	ld	r18, Z
    114c:	20 64       	ori	r18, 0x40	; 64
    114e:	fc 01       	movw	r30, r24
    1150:	20 83       	st	Z, r18
	while(!(ADCSRA & (1<<ADIF)));				//run a loop while the conversion is taking place.
    1152:	00 00       	nop
    1154:	8a e7       	ldi	r24, 0x7A	; 122
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	fc 01       	movw	r30, r24
    115a:	80 81       	ld	r24, Z
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	80 71       	andi	r24, 0x10	; 16
    1162:	99 27       	eor	r25, r25
    1164:	89 2b       	or	r24, r25
    1166:	b1 f3       	breq	.-20     	; 0x1154 <ADC_read+0x40>
	uint16_t result = 0;
    1168:	1a 82       	std	Y+2, r1	; 0x02
    116a:	19 82       	std	Y+1, r1	; 0x01
	result = ADCL;								//read ADCL first, ADCH after --> order is important! --> also not sure if this code is correct. other ADC examples return 'ADC' instead.
    116c:	88 e7       	ldi	r24, 0x78	; 120
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	fc 01       	movw	r30, r24
    1172:	80 81       	ld	r24, Z
    1174:	88 2f       	mov	r24, r24
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	9a 83       	std	Y+2, r25	; 0x02
    117a:	89 83       	std	Y+1, r24	; 0x01
	result |= ((3 & ADCH) << 8);
    117c:	89 e7       	ldi	r24, 0x79	; 121
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	fc 01       	movw	r30, r24
    1182:	80 81       	ld	r24, Z
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	83 70       	andi	r24, 0x03	; 3
    118a:	99 27       	eor	r25, r25
    118c:	98 2f       	mov	r25, r24
    118e:	88 27       	eor	r24, r24
    1190:	9c 01       	movw	r18, r24
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	9a 81       	ldd	r25, Y+2	; 0x02
    1196:	82 2b       	or	r24, r18
    1198:	93 2b       	or	r25, r19
    119a:	9a 83       	std	Y+2, r25	; 0x02
    119c:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA|=(1<<ADIF);							//once read and done, clear the 'complete' status by writing 1 to the ADIF bit.
    119e:	8a e7       	ldi	r24, 0x7A	; 122
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	2a e7       	ldi	r18, 0x7A	; 122
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	f9 01       	movw	r30, r18
    11a8:	20 81       	ld	r18, Z
    11aa:	20 61       	ori	r18, 0x10	; 16
    11ac:	fc 01       	movw	r30, r24
    11ae:	20 83       	st	Z, r18
	return result;								//pass the 10 bit ADC number to requesting function.
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	08 95       	ret

000011c0 <spi_init>:

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  SPI Functions
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void spi_init()
{
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
	MCUCR &= ~(1<<SPIPS);		//make sure we are getting spi not on the _A spi pins.
    11c8:	85 e5       	ldi	r24, 0x55	; 85
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	25 e5       	ldi	r18, 0x55	; 85
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	f9 01       	movw	r30, r18
    11d2:	20 81       	ld	r18, Z
    11d4:	2f 77       	andi	r18, 0x7F	; 127
    11d6:	fc 01       	movw	r30, r24
    11d8:	20 83       	st	Z, r18
	SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR0)|(0<<SPR1);  //set interrupt, enable SPI, MSB mode, set as master, low is idle, read on leading edge, Set to speed(fosc/4) SPR0=1, SPR1=0
    11da:	8c e4       	ldi	r24, 0x4C	; 76
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	20 e5       	ldi	r18, 0x50	; 80
    11e0:	fc 01       	movw	r30, r24
    11e2:	20 83       	st	Z, r18
	SPSR = (1<<SPI2X);	//set whether we want 2x speed or not (1=2x speed).
    11e4:	8d e4       	ldi	r24, 0x4D	; 77
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	21 e0       	ldi	r18, 0x01	; 1
    11ea:	fc 01       	movw	r30, r24
    11ec:	20 83       	st	Z, r18
	SPDR = 0x00;		//ensure data register has nothing in it
    11ee:	8e e4       	ldi	r24, 0x4E	; 78
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	fc 01       	movw	r30, r24
    11f4:	10 82       	st	Z, r1
}
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	08 95       	ret

000011fc <spi_send_byte>:

uint8_t spi_send_byte(uint8_t c)
{
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	1f 92       	push	r1
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	89 83       	std	Y+1, r24	; 0x01
	SPDR = c;					//write data to the transmission register. Writing to this initiates transmission.
    1208:	8e e4       	ldi	r24, 0x4E	; 78
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	29 81       	ldd	r18, Y+1	; 0x01
    120e:	fc 01       	movw	r30, r24
    1210:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    1212:	00 00       	nop
    1214:	8d e4       	ldi	r24, 0x4D	; 77
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	fc 01       	movw	r30, r24
    121a:	80 81       	ld	r24, Z
    121c:	88 23       	and	r24, r24
    121e:	d4 f7       	brge	.-12     	; 0x1214 <spi_send_byte+0x18>
	return SPDR;				//return any data that was shifted into this register upon transmission.
    1220:	8e e4       	ldi	r24, 0x4E	; 78
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	fc 01       	movw	r30, r24
    1226:	80 81       	ld	r24, Z
}
    1228:	0f 90       	pop	r0
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	08 95       	ret

00001230 <main>:

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  Main Program
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
int main()
{
    1230:	ef 92       	push	r14
    1232:	ff 92       	push	r15
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	c4 5a       	subi	r28, 0xA4	; 164
    1242:	d1 09       	sbc	r29, r1
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0b11100011;	//b7 - SCK; b1 - MOSI
    124e:	84 e2       	ldi	r24, 0x24	; 36
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	23 ee       	ldi	r18, 0xE3	; 227
    1254:	fc 01       	movw	r30, r24
    1256:	20 83       	st	Z, r18
	//DDRC &= ~(1 << PINC0);
	DDRD = 0b00001001;	//b3 - SS pin
    1258:	8a e2       	ldi	r24, 0x2A	; 42
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	29 e0       	ldi	r18, 0x09	; 9
    125e:	fc 01       	movw	r30, r24
    1260:	20 83       	st	Z, r18
	SPI_clock_high;
    1262:	85 e2       	ldi	r24, 0x25	; 37
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	25 e2       	ldi	r18, 0x25	; 37
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	f9 01       	movw	r30, r18
    126c:	20 81       	ld	r18, Z
    126e:	20 68       	ori	r18, 0x80	; 128
    1270:	fc 01       	movw	r30, r24
    1272:	20 83       	st	Z, r18
	
	CAN_init();		// Initialise CAN
    1274:	0e 94 5d 04 	call	0x8ba	; 0x8ba <CAN_init>
	CAN_RXInit(5,8,0x400000, 0x400000);
    1278:	e1 2c       	mov	r14, r1
    127a:	f1 2c       	mov	r15, r1
    127c:	00 e4       	ldi	r16, 0x40	; 64
    127e:	10 e0       	ldi	r17, 0x00	; 0
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e4       	ldi	r20, 0x40	; 64
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	68 e0       	ldi	r22, 0x08	; 8
    128a:	85 e0       	ldi	r24, 0x05	; 5
    128c:	0e 94 39 05 	call	0xa72	; 0xa72 <CAN_RXInit>
	ADC_init();		// Initialise ADC
    1290:	0e 94 70 08 	call	0x10e0	; 0x10e0 <ADC_init>
	spi_init();		// Initialise SPI (OLED screen communication)
    1294:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <spi_init>
	OLED_Init();	// Initialise the OLED screen
    1298:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <OLED_Init>
	sei();
    129c:	78 94       	sei
	
	Fill_RAM(0x00);			// Clear Screen
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	0e 94 0f 10 	call	0x201e	; 0x201e <Fill_RAM>
	
	Display_Picture(Motorsport);
    12a4:	8c e7       	ldi	r24, 0x7C	; 124
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	0e 94 a2 14 	call	0x2944	; 0x2944 <Display_Picture>
	Delay(3000);
    12ac:	88 eb       	ldi	r24, 0xB8	; 184
    12ae:	9b e0       	ldi	r25, 0x0B	; 11
    12b0:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <Delay>

	Fill_RAM(0x00);			// Clear Screen
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	0e 94 0f 10 	call	0x201e	; 0x201e <Fill_RAM>
	Draw_Rectangle(0xFF,0x01,0x00,0x3F,0x21,0x30);
	Draw_Rectangle(0xFF,0x01,0x00,0x3F,0x31,0x3F);
	*/
	
	// Globals
	unsigned char Acceleration[]= {'A','C','C','E','L','E','R','A','T','I','O','N',0x00};
    12ba:	8d e0       	ldi	r24, 0x0D	; 13
    12bc:	e0 eb       	ldi	r30, 0xB0	; 176
    12be:	f5 e0       	ldi	r31, 0x05	; 5
    12c0:	de 01       	movw	r26, r28
    12c2:	9c 96       	adiw	r26, 0x2c	; 44
    12c4:	01 90       	ld	r0, Z+
    12c6:	0d 92       	st	X+, r0
    12c8:	8a 95       	dec	r24
    12ca:	e1 f7       	brne	.-8      	; 0x12c4 <main+0x94>
	unsigned char SkidPad[]= {'S','K','I','D','P','A','D',0x00};
    12cc:	88 e0       	ldi	r24, 0x08	; 8
    12ce:	ed eb       	ldi	r30, 0xBD	; 189
    12d0:	f5 e0       	ldi	r31, 0x05	; 5
    12d2:	de 01       	movw	r26, r28
    12d4:	d9 96       	adiw	r26, 0x39	; 57
    12d6:	01 90       	ld	r0, Z+
    12d8:	0d 92       	st	X+, r0
    12da:	8a 95       	dec	r24
    12dc:	e1 f7       	brne	.-8      	; 0x12d6 <main+0xa6>
	unsigned char AutoCross[]= {'A','U','T','O','C','R','O','S','S',0x00};
    12de:	8a e0       	ldi	r24, 0x0A	; 10
    12e0:	e5 ec       	ldi	r30, 0xC5	; 197
    12e2:	f5 e0       	ldi	r31, 0x05	; 5
    12e4:	de 01       	movw	r26, r28
    12e6:	af 5b       	subi	r26, 0xBF	; 191
    12e8:	bf 4f       	sbci	r27, 0xFF	; 255
    12ea:	01 90       	ld	r0, Z+
    12ec:	0d 92       	st	X+, r0
    12ee:	8a 95       	dec	r24
    12f0:	e1 f7       	brne	.-8      	; 0x12ea <main+0xba>
	unsigned char Endurance[]= {'E','N','D','U','R','A','N,','C','E',0x00};
    12f2:	ce 01       	movw	r24, r28
    12f4:	85 5b       	subi	r24, 0xB5	; 181
    12f6:	9f 4f       	sbci	r25, 0xFF	; 255
    12f8:	2a e0       	ldi	r18, 0x0A	; 10
    12fa:	ef ec       	ldi	r30, 0xCF	; 207
    12fc:	f5 e0       	ldi	r31, 0x05	; 5
    12fe:	dc 01       	movw	r26, r24
    1300:	01 90       	ld	r0, Z+
    1302:	0d 92       	st	X+, r0
    1304:	2a 95       	dec	r18
    1306:	e1 f7       	brne	.-8      	; 0x1300 <main+0xd0>
	unsigned char SelectionRight[]= {'>','>','>','>',0x00};
    1308:	ce 01       	movw	r24, r28
    130a:	8b 5a       	subi	r24, 0xAB	; 171
    130c:	9f 4f       	sbci	r25, 0xFF	; 255
    130e:	25 e0       	ldi	r18, 0x05	; 5
    1310:	e9 ed       	ldi	r30, 0xD9	; 217
    1312:	f5 e0       	ldi	r31, 0x05	; 5
    1314:	dc 01       	movw	r26, r24
    1316:	01 90       	ld	r0, Z+
    1318:	0d 92       	st	X+, r0
    131a:	2a 95       	dec	r18
    131c:	e1 f7       	brne	.-8      	; 0x1316 <main+0xe6>
	unsigned char SelectionLeft[]= {'<','<','<','<',0x00};
    131e:	ce 01       	movw	r24, r28
    1320:	86 5a       	subi	r24, 0xA6	; 166
    1322:	9f 4f       	sbci	r25, 0xFF	; 255
    1324:	25 e0       	ldi	r18, 0x05	; 5
    1326:	ee ed       	ldi	r30, 0xDE	; 222
    1328:	f5 e0       	ldi	r31, 0x05	; 5
    132a:	dc 01       	movw	r26, r24
    132c:	01 90       	ld	r0, Z+
    132e:	0d 92       	st	X+, r0
    1330:	2a 95       	dec	r18
    1332:	e1 f7       	brne	.-8      	; 0x132c <main+0xfc>
	unsigned char Voltage[]= {'V','O','L','T','A','G','E',' ',':',0x00};
    1334:	ce 01       	movw	r24, r28
    1336:	81 5a       	subi	r24, 0xA1	; 161
    1338:	9f 4f       	sbci	r25, 0xFF	; 255
    133a:	2a e0       	ldi	r18, 0x0A	; 10
    133c:	e3 ee       	ldi	r30, 0xE3	; 227
    133e:	f5 e0       	ldi	r31, 0x05	; 5
    1340:	dc 01       	movw	r26, r24
    1342:	01 90       	ld	r0, Z+
    1344:	0d 92       	st	X+, r0
    1346:	2a 95       	dec	r18
    1348:	e1 f7       	brne	.-8      	; 0x1342 <main+0x112>
	unsigned char RPM[] = {'R','P','M',' ',':',0x00};
    134a:	ce 01       	movw	r24, r28
    134c:	87 59       	subi	r24, 0x97	; 151
    134e:	9f 4f       	sbci	r25, 0xFF	; 255
    1350:	26 e0       	ldi	r18, 0x06	; 6
    1352:	ed ee       	ldi	r30, 0xED	; 237
    1354:	f5 e0       	ldi	r31, 0x05	; 5
    1356:	dc 01       	movw	r26, r24
    1358:	01 90       	ld	r0, Z+
    135a:	0d 92       	st	X+, r0
    135c:	2a 95       	dec	r18
    135e:	e1 f7       	brne	.-8      	; 0x1358 <main+0x128>
	unsigned char GearboxTemp[] = {'G','E','A','R','B','O','X',' ','T','E','M','P',' ',':',0x00};
    1360:	ce 01       	movw	r24, r28
    1362:	81 59       	subi	r24, 0x91	; 145
    1364:	9f 4f       	sbci	r25, 0xFF	; 255
    1366:	2f e0       	ldi	r18, 0x0F	; 15
    1368:	e3 ef       	ldi	r30, 0xF3	; 243
    136a:	f5 e0       	ldi	r31, 0x05	; 5
    136c:	dc 01       	movw	r26, r24
    136e:	01 90       	ld	r0, Z+
    1370:	0d 92       	st	X+, r0
    1372:	2a 95       	dec	r18
    1374:	e1 f7       	brne	.-8      	; 0x136e <main+0x13e>
	unsigned char Throttle[]= {'T','H','R','O','T','T','L','E',' ','%',' ',':',0x00};
    1376:	ce 01       	movw	r24, r28
    1378:	82 58       	subi	r24, 0x82	; 130
    137a:	9f 4f       	sbci	r25, 0xFF	; 255
    137c:	2d e0       	ldi	r18, 0x0D	; 13
    137e:	e2 e0       	ldi	r30, 0x02	; 2
    1380:	f6 e0       	ldi	r31, 0x06	; 6
    1382:	dc 01       	movw	r26, r24
    1384:	01 90       	ld	r0, Z+
    1386:	0d 92       	st	X+, r0
    1388:	2a 95       	dec	r18
    138a:	e1 f7       	brne	.-8      	; 0x1384 <main+0x154>
	unsigned char BlankNumber[] = {' ',' ',' ',' ',' ',0x00};
    138c:	ce 01       	movw	r24, r28
    138e:	85 57       	subi	r24, 0x75	; 117
    1390:	9f 4f       	sbci	r25, 0xFF	; 255
    1392:	26 e0       	ldi	r18, 0x06	; 6
    1394:	ef e0       	ldi	r30, 0x0F	; 15
    1396:	f6 e0       	ldi	r31, 0x06	; 6
    1398:	dc 01       	movw	r26, r24
    139a:	01 90       	ld	r0, Z+
    139c:	0d 92       	st	X+, r0
    139e:	2a 95       	dec	r18
    13a0:	e1 f7       	brne	.-8      	; 0x139a <main+0x16a>
	unsigned char TempBuffer[10];
	unsigned int RPMMaxFlag = 0;
    13a2:	18 86       	std	Y+8, r1	; 0x08
    13a4:	1f 82       	std	Y+7, r1	; 0x07
	unsigned int ThrottleMaxFlag = 0;
    13a6:	1a 82       	std	Y+2, r1	; 0x02
    13a8:	19 82       	std	Y+1, r1	; 0x01
	unsigned int ThrottleGreaterThan10 = 0;
    13aa:	1c 82       	std	Y+4, r1	; 0x04
    13ac:	1b 82       	std	Y+3, r1	; 0x03
	unsigned int RPMGreaterThan100 = 0;
    13ae:	1e 82       	std	Y+6, r1	; 0x06
    13b0:	1d 82       	std	Y+5, r1	; 0x05
	unsigned int RPMGreaterThan1000 = 0;
    13b2:	1a 86       	std	Y+10, r1	; 0x0a
    13b4:	19 86       	std	Y+9, r1	; 0x09
	unsigned int GearboxTempCount = 0;
    13b6:	1c 86       	std	Y+12, r1	; 0x0c
    13b8:	1b 86       	std	Y+11, r1	; 0x0b
	unsigned int GearboxTempMaxFlag = 0;
    13ba:	1e 86       	std	Y+14, r1	; 0x0e
    13bc:	1d 86       	std	Y+13, r1	; 0x0d
	unsigned int RPMCounter = 0;
    13be:	18 8a       	std	Y+16, r1	; 0x10
    13c0:	1f 86       	std	Y+15, r1	; 0x0f
	unsigned int BootFlag = 0;
    13c2:	1a 8a       	std	Y+18, r1	; 0x12
    13c4:	19 8a       	std	Y+17, r1	; 0x11
	int ScreenFlag = 0;
    13c6:	1c 8a       	std	Y+20, r1	; 0x14
    13c8:	1b 8a       	std	Y+19, r1	; 0x13
	int ADC_Change = 11;
    13ca:	8b e0       	ldi	r24, 0x0B	; 11
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	9e 8b       	std	Y+22, r25	; 0x16
    13d0:	8d 8b       	std	Y+21, r24	; 0x15
	int ADC_Previous = 0;
    13d2:	18 8e       	std	Y+24, r1	; 0x18
    13d4:	1f 8a       	std	Y+23, r1	; 0x17
	int LeftDialADCScaled;
	uint8_t mob;

	while(1)
	{	
		readDials();
    13d6:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <readDials>
		LeftDialADC = ADC_read(2); // 3 = LEFT DIAL
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	0e 94 8a 08 	call	0x1114	; 0x1114 <ADC_read>
    13e0:	9a 8f       	std	Y+26, r25	; 0x1a
    13e2:	89 8f       	std	Y+25, r24	; 0x19
		LeftDialADCScaled = (int)(LeftDialADC >> 2) / 24;
    13e4:	89 8d       	ldd	r24, Y+25	; 0x19
    13e6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    13e8:	96 95       	lsr	r25
    13ea:	87 95       	ror	r24
    13ec:	96 95       	lsr	r25
    13ee:	87 95       	ror	r24
    13f0:	28 e1       	ldi	r18, 0x18	; 24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	b9 01       	movw	r22, r18
    13f6:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <__divmodhi4>
    13fa:	cb 01       	movw	r24, r22
    13fc:	9c 8f       	std	Y+28, r25	; 0x1c
    13fe:	8b 8f       	std	Y+27, r24	; 0x1b
		mob = CAN_findFreeTXMOB();
    1400:	0e 94 f2 06 	call	0xde4	; 0xde4 <CAN_findFreeTXMOB>
    1404:	8d 8f       	std	Y+29, r24	; 0x1d
		//if(mob > 0)
		CAN_TXMOB(0, 1, &CAN_Dial, 0x400001,0);
    1406:	e1 2c       	mov	r14, r1
    1408:	01 e0       	ldi	r16, 0x01	; 1
    140a:	10 e0       	ldi	r17, 0x00	; 0
    140c:	20 e4       	ldi	r18, 0x40	; 64
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	44 e2       	ldi	r20, 0x24	; 36
    1412:	56 e0       	ldi	r21, 0x06	; 6
    1414:	61 e0       	ldi	r22, 0x01	; 1
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	0e 94 df 05 	call	0xbbe	; 0xbbe <CAN_TXMOB>
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	a8 ec       	ldi	r26, 0xC8	; 200
    1422:	b2 e4       	ldi	r27, 0x42	; 66
    1424:	8e 8f       	std	Y+30, r24	; 0x1e
    1426:	9f 8f       	std	Y+31, r25	; 0x1f
    1428:	a8 a3       	std	Y+32, r26	; 0x20
    142a:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	4a e7       	ldi	r20, 0x7A	; 122
    1432:	55 e4       	ldi	r21, 0x45	; 69
    1434:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1436:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1438:	88 a1       	ldd	r24, Y+32	; 0x20
    143a:	99 a1       	ldd	r25, Y+33	; 0x21
    143c:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	8a a3       	std	Y+34, r24	; 0x22
    1446:	9b a3       	std	Y+35, r25	; 0x23
    1448:	ac a3       	std	Y+36, r26	; 0x24
    144a:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e8       	ldi	r20, 0x80	; 128
    1452:	5f e3       	ldi	r21, 0x3F	; 63
    1454:	6a a1       	ldd	r22, Y+34	; 0x22
    1456:	7b a1       	ldd	r23, Y+35	; 0x23
    1458:	8c a1       	ldd	r24, Y+36	; 0x24
    145a:	9d a1       	ldd	r25, Y+37	; 0x25
    145c:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__cmpsf2>
    1460:	88 23       	and	r24, r24
    1462:	2c f4       	brge	.+10     	; 0x146e <main+0x23e>
		__ticks = 1;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	9f a3       	std	Y+39, r25	; 0x27
    146a:	8e a3       	std	Y+38, r24	; 0x26
    146c:	3f c0       	rjmp	.+126    	; 0x14ec <main+0x2bc>
	else if (__tmp > 65535)
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	3f ef       	ldi	r19, 0xFF	; 255
    1472:	4f e7       	ldi	r20, 0x7F	; 127
    1474:	57 e4       	ldi	r21, 0x47	; 71
    1476:	6a a1       	ldd	r22, Y+34	; 0x22
    1478:	7b a1       	ldd	r23, Y+35	; 0x23
    147a:	8c a1       	ldd	r24, Y+36	; 0x24
    147c:	9d a1       	ldd	r25, Y+37	; 0x25
    147e:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__gesf2>
    1482:	18 16       	cp	r1, r24
    1484:	4c f5       	brge	.+82     	; 0x14d8 <main+0x2a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	40 e2       	ldi	r20, 0x20	; 32
    148c:	51 e4       	ldi	r21, 0x41	; 65
    148e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1490:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1492:	88 a1       	ldd	r24, Y+32	; 0x20
    1494:	99 a1       	ldd	r25, Y+33	; 0x21
    1496:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__mulsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	bc 01       	movw	r22, r24
    14a0:	cd 01       	movw	r24, r26
    14a2:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__fixunssfsi>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	9f a3       	std	Y+39, r25	; 0x27
    14ac:	8e a3       	std	Y+38, r24	; 0x26
    14ae:	0f c0       	rjmp	.+30     	; 0x14ce <main+0x29e>
    14b0:	80 e9       	ldi	r24, 0x90	; 144
    14b2:	91 e0       	ldi	r25, 0x01	; 1
    14b4:	99 a7       	std	Y+41, r25	; 0x29
    14b6:	88 a7       	std	Y+40, r24	; 0x28
    14b8:	88 a5       	ldd	r24, Y+40	; 0x28
    14ba:	99 a5       	ldd	r25, Y+41	; 0x29
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <main+0x28c>
    14c0:	99 a7       	std	Y+41, r25	; 0x29
    14c2:	88 a7       	std	Y+40, r24	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c4:	8e a1       	ldd	r24, Y+38	; 0x26
    14c6:	9f a1       	ldd	r25, Y+39	; 0x27
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	9f a3       	std	Y+39, r25	; 0x27
    14cc:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ce:	8e a1       	ldd	r24, Y+38	; 0x26
    14d0:	9f a1       	ldd	r25, Y+39	; 0x27
    14d2:	89 2b       	or	r24, r25
    14d4:	69 f7       	brne	.-38     	; 0x14b0 <main+0x280>
    14d6:	14 c0       	rjmp	.+40     	; 0x1500 <main+0x2d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d8:	6a a1       	ldd	r22, Y+34	; 0x22
    14da:	7b a1       	ldd	r23, Y+35	; 0x23
    14dc:	8c a1       	ldd	r24, Y+36	; 0x24
    14de:	9d a1       	ldd	r25, Y+37	; 0x25
    14e0:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__fixunssfsi>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	9f a3       	std	Y+39, r25	; 0x27
    14ea:	8e a3       	std	Y+38, r24	; 0x26
    14ec:	8e a1       	ldd	r24, Y+38	; 0x26
    14ee:	9f a1       	ldd	r25, Y+39	; 0x27
    14f0:	9b a7       	std	Y+43, r25	; 0x2b
    14f2:	8a a7       	std	Y+42, r24	; 0x2a
    14f4:	8a a5       	ldd	r24, Y+42	; 0x2a
    14f6:	9b a5       	ldd	r25, Y+43	; 0x2b
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	f1 f7       	brne	.-4      	; 0x14f8 <main+0x2c8>
    14fc:	9b a7       	std	Y+43, r25	; 0x2b
    14fe:	8a a7       	std	Y+42, r24	; 0x2a
		_delay_ms(100);
		
		if(LeftDialADCScaled == 3)
    1500:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1502:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1504:	03 97       	sbiw	r24, 0x03	; 3
    1506:	49 f4       	brne	.+18     	; 0x151a <main+0x2ea>
		{
			Show_String(1,&SelectionRight,0x31,0x05);
    1508:	ce 01       	movw	r24, r28
    150a:	8b 5a       	subi	r24, 0xAB	; 171
    150c:	9f 4f       	sbci	r25, 0xFF	; 255
    150e:	25 e0       	ldi	r18, 0x05	; 5
    1510:	41 e3       	ldi	r20, 0x31	; 49
    1512:	bc 01       	movw	r22, r24
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	0e 94 8c 13 	call	0x2718	; 0x2718 <Show_String>

		}
		if(LeftDialADCScaled == 4)
    151a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    151c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    151e:	04 97       	sbiw	r24, 0x04	; 4
    1520:	49 f4       	brne	.+18     	; 0x1534 <main+0x304>
		{
			Show_String(1,&SelectionRight,0x31,0x15);
    1522:	ce 01       	movw	r24, r28
    1524:	8b 5a       	subi	r24, 0xAB	; 171
    1526:	9f 4f       	sbci	r25, 0xFF	; 255
    1528:	25 e1       	ldi	r18, 0x15	; 21
    152a:	41 e3       	ldi	r20, 0x31	; 49
    152c:	bc 01       	movw	r22, r24
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	0e 94 8c 13 	call	0x2718	; 0x2718 <Show_String>
		}
		if(LeftDialADCScaled == 5)
    1534:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1536:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1538:	05 97       	sbiw	r24, 0x05	; 5
    153a:	49 f4       	brne	.+18     	; 0x154e <main+0x31e>
		{
			Show_String(1,&SelectionRight,0x31,0x25);
    153c:	ce 01       	movw	r24, r28
    153e:	8b 5a       	subi	r24, 0xAB	; 171
    1540:	9f 4f       	sbci	r25, 0xFF	; 255
    1542:	25 e2       	ldi	r18, 0x25	; 37
    1544:	41 e3       	ldi	r20, 0x31	; 49
    1546:	bc 01       	movw	r22, r24
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	0e 94 8c 13 	call	0x2718	; 0x2718 <Show_String>
		}
		if(LeftDialADCScaled == 6)
    154e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1550:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1552:	06 97       	sbiw	r24, 0x06	; 6
    1554:	49 f4       	brne	.+18     	; 0x1568 <main+0x338>
		{
			Show_String(1,&SelectionRight,0x31,0x35);
    1556:	ce 01       	movw	r24, r28
    1558:	8b 5a       	subi	r24, 0xAB	; 171
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	25 e3       	ldi	r18, 0x35	; 53
    155e:	41 e3       	ldi	r20, 0x31	; 49
    1560:	bc 01       	movw	r22, r24
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	0e 94 8c 13 	call	0x2718	; 0x2718 <Show_String>
		}
					
		Draw_Rectangle(0xFF,0x01,0x00,0x3F,0x00,0x10);
    1568:	68 94       	set
    156a:	ee 24       	eor	r14, r14
    156c:	e4 f8       	bld	r14, 4
    156e:	00 e0       	ldi	r16, 0x00	; 0
    1570:	2f e3       	ldi	r18, 0x3F	; 63
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	61 e0       	ldi	r22, 0x01	; 1
    1576:	8f ef       	ldi	r24, 0xFF	; 255
    1578:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <Draw_Rectangle>
		Show_String(1,&Throttle,0x0A,0x05);
    157c:	ce 01       	movw	r24, r28
    157e:	82 58       	subi	r24, 0x82	; 130
    1580:	9f 4f       	sbci	r25, 0xFF	; 255
    1582:	25 e0       	ldi	r18, 0x05	; 5
    1584:	4a e0       	ldi	r20, 0x0A	; 10
    1586:	bc 01       	movw	r22, r24
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	0e 94 8c 13 	call	0x2718	; 0x2718 <Show_String>
		Draw_Rectangle(0xFF,0x01,0x00,0x3F,0x11,0x20);
    158e:	68 94       	set
    1590:	ee 24       	eor	r14, r14
    1592:	e5 f8       	bld	r14, 5
    1594:	01 e1       	ldi	r16, 0x11	; 17
    1596:	2f e3       	ldi	r18, 0x3F	; 63
    1598:	40 e0       	ldi	r20, 0x00	; 0
    159a:	61 e0       	ldi	r22, 0x01	; 1
    159c:	8f ef       	ldi	r24, 0xFF	; 255
    159e:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <Draw_Rectangle>
		Show_String(1,&RPM,0x18,0x15);
    15a2:	ce 01       	movw	r24, r28
    15a4:	87 59       	subi	r24, 0x97	; 151
    15a6:	9f 4f       	sbci	r25, 0xFF	; 255
    15a8:	25 e1       	ldi	r18, 0x15	; 21
    15aa:	48 e1       	ldi	r20, 0x18	; 24
    15ac:	bc 01       	movw	r22, r24
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	0e 94 8c 13 	call	0x2718	; 0x2718 <Show_String>
		Draw_Rectangle(0xFF,0x01,0x00,0x3F,0x21,0x30);
    15b4:	0f 2e       	mov	r0, r31
    15b6:	f0 e3       	ldi	r31, 0x30	; 48
    15b8:	ef 2e       	mov	r14, r31
    15ba:	f0 2d       	mov	r31, r0
    15bc:	01 e2       	ldi	r16, 0x21	; 33
    15be:	2f e3       	ldi	r18, 0x3F	; 63
    15c0:	40 e0       	ldi	r20, 0x00	; 0
    15c2:	61 e0       	ldi	r22, 0x01	; 1
    15c4:	8f ef       	ldi	r24, 0xFF	; 255
    15c6:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <Draw_Rectangle>
		Show_String(1,&GearboxTemp,0x06,0x25);
    15ca:	ce 01       	movw	r24, r28
    15cc:	81 59       	subi	r24, 0x91	; 145
    15ce:	9f 4f       	sbci	r25, 0xFF	; 255
    15d0:	25 e2       	ldi	r18, 0x25	; 37
    15d2:	46 e0       	ldi	r20, 0x06	; 6
    15d4:	bc 01       	movw	r22, r24
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	0e 94 8c 13 	call	0x2718	; 0x2718 <Show_String>
		Draw_Rectangle(0xFF,0x01,0x00,0x3F,0x31,0x3F);
    15dc:	0f 2e       	mov	r0, r31
    15de:	ff e3       	ldi	r31, 0x3F	; 63
    15e0:	ef 2e       	mov	r14, r31
    15e2:	f0 2d       	mov	r31, r0
    15e4:	01 e3       	ldi	r16, 0x31	; 49
    15e6:	2f e3       	ldi	r18, 0x3F	; 63
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	61 e0       	ldi	r22, 0x01	; 1
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <Draw_Rectangle>
		Show_String(1,&Voltage,0x10,0x35);
    15f2:	ce 01       	movw	r24, r28
    15f4:	81 5a       	subi	r24, 0xA1	; 161
    15f6:	9f 4f       	sbci	r25, 0xFF	; 255
    15f8:	25 e3       	ldi	r18, 0x35	; 53
    15fa:	40 e1       	ldi	r20, 0x10	; 16
    15fc:	bc 01       	movw	r22, r24
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	0e 94 8c 13 	call	0x2718	; 0x2718 <Show_String>
		
		
		// If throttle is at 100%, when the throttle goes down, a trailing 0 will be left
		// This needs to be cleared 
		
		if(ThrottleMaxFlag == 1)
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	9a 81       	ldd	r25, Y+2	; 0x02
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	59 f4       	brne	.+22     	; 0x1622 <main+0x3f2>
		{
			Show_String(1,&BlankNumber,0x28,0x05);
    160c:	ce 01       	movw	r24, r28
    160e:	85 57       	subi	r24, 0x75	; 117
    1610:	9f 4f       	sbci	r25, 0xFF	; 255
    1612:	25 e0       	ldi	r18, 0x05	; 5
    1614:	48 e2       	ldi	r20, 0x28	; 40
    1616:	bc 01       	movw	r22, r24
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	0e 94 8c 13 	call	0x2718	; 0x2718 <Show_String>
			ThrottleMaxFlag = 0;
    161e:	1a 82       	std	Y+2, r1	; 0x02
    1620:	19 82       	std	Y+1, r1	; 0x01
		}
		if(ThrottlePercentageData == 100)
    1622:	80 91 16 06 	lds	r24, 0x0616
    1626:	90 91 17 06 	lds	r25, 0x0617
    162a:	84 36       	cpi	r24, 0x64	; 100
    162c:	91 05       	cpc	r25, r1
    162e:	21 f4       	brne	.+8      	; 0x1638 <main+0x408>
		{
			ThrottleMaxFlag = 1;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	9a 83       	std	Y+2, r25	; 0x02
    1636:	89 83       	std	Y+1, r24	; 0x01
		}
			
		// If throttle is at 10%, when the throttle goes down, a trailing 0 will be left
		// This needs to be cleared		
		if(ThrottlePercentageData < 10)
    1638:	80 91 16 06 	lds	r24, 0x0616
    163c:	90 91 17 06 	lds	r25, 0x0617
    1640:	0a 97       	sbiw	r24, 0x0a	; 10
    1642:	20 f4       	brcc	.+8      	; 0x164c <main+0x41c>
		{
			ThrottleGreaterThan10 = 1;
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	9c 83       	std	Y+4, r25	; 0x04
    164a:	8b 83       	std	Y+3, r24	; 0x03
		}
		if(ThrottleGreaterThan10 == 1)
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	9c 81       	ldd	r25, Y+4	; 0x04
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	59 f4       	brne	.+22     	; 0x166a <main+0x43a>
		{
			Show_String(1,&BlankNumber,0x28,0x05);
    1654:	ce 01       	movw	r24, r28
    1656:	85 57       	subi	r24, 0x75	; 117
    1658:	9f 4f       	sbci	r25, 0xFF	; 255
    165a:	25 e0       	ldi	r18, 0x05	; 5
    165c:	48 e2       	ldi	r20, 0x28	; 40
    165e:	bc 01       	movw	r22, r24
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	0e 94 8c 13 	call	0x2718	; 0x2718 <Show_String>
			ThrottleGreaterThan10 = 0;
    1666:	1c 82       	std	Y+4, r1	; 0x04
    1668:	1b 82       	std	Y+3, r1	; 0x03
		}

		itoa(ThrottlePercentageData,TempBuffer,10);
    166a:	80 91 16 06 	lds	r24, 0x0616
    166e:	90 91 17 06 	lds	r25, 0x0617
    1672:	9c 01       	movw	r18, r24
    1674:	ce 01       	movw	r24, r28
    1676:	8f 56       	subi	r24, 0x6F	; 111
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	4a e0       	ldi	r20, 0x0A	; 10
    167c:	50 e0       	ldi	r21, 0x00	; 0
    167e:	bc 01       	movw	r22, r24
    1680:	c9 01       	movw	r24, r18
    1682:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <itoa>
		Show_String(1,TempBuffer,0x28,0x05); // Print the current throttle percentage
    1686:	ce 01       	movw	r24, r28
    1688:	8f 56       	subi	r24, 0x6F	; 111
    168a:	9f 4f       	sbci	r25, 0xFF	; 255
    168c:	25 e0       	ldi	r18, 0x05	; 5
    168e:	48 e2       	ldi	r20, 0x28	; 40
    1690:	bc 01       	movw	r22, r24
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	0e 94 8c 13 	call	0x2718	; 0x2718 <Show_String>

		// If RPM is greater than 100 (or 1000), when the throttle goes down, a trailing 0 will be left
		// This needs to be cleared
		if(RPMData < 99)
    1698:	80 91 18 06 	lds	r24, 0x0618
    169c:	90 91 19 06 	lds	r25, 0x0619
    16a0:	a0 91 1a 06 	lds	r26, 0x061A
    16a4:	b0 91 1b 06 	lds	r27, 0x061B
    16a8:	83 36       	cpi	r24, 0x63	; 99
    16aa:	91 05       	cpc	r25, r1
    16ac:	a1 05       	cpc	r26, r1
    16ae:	b1 05       	cpc	r27, r1
    16b0:	20 f4       	brcc	.+8      	; 0x16ba <main+0x48a>
		{
			RPMGreaterThan100 = 1;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	9e 83       	std	Y+6, r25	; 0x06
    16b8:	8d 83       	std	Y+5, r24	; 0x05
		}
		if(RPMData < 999)
    16ba:	80 91 18 06 	lds	r24, 0x0618
    16be:	90 91 19 06 	lds	r25, 0x0619
    16c2:	a0 91 1a 06 	lds	r26, 0x061A
    16c6:	b0 91 1b 06 	lds	r27, 0x061B
    16ca:	87 3e       	cpi	r24, 0xE7	; 231
    16cc:	93 40       	sbci	r25, 0x03	; 3
    16ce:	a1 05       	cpc	r26, r1
    16d0:	b1 05       	cpc	r27, r1
    16d2:	20 f4       	brcc	.+8      	; 0x16dc <main+0x4ac>
		{
			RPMGreaterThan100 = 1;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	9e 83       	std	Y+6, r25	; 0x06
    16da:	8d 83       	std	Y+5, r24	; 0x05
		}
		if(RPMGreaterThan100 == 1)
    16dc:	8d 81       	ldd	r24, Y+5	; 0x05
    16de:	9e 81       	ldd	r25, Y+6	; 0x06
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	59 f4       	brne	.+22     	; 0x16fa <main+0x4ca>
		{
			Show_String(1,&BlankNumber,0x28,0x15);
    16e4:	ce 01       	movw	r24, r28
    16e6:	85 57       	subi	r24, 0x75	; 117
    16e8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ea:	25 e1       	ldi	r18, 0x15	; 21
    16ec:	48 e2       	ldi	r20, 0x28	; 40
    16ee:	bc 01       	movw	r22, r24
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	0e 94 8c 13 	call	0x2718	; 0x2718 <Show_String>
			RPMGreaterThan100 = 0;
    16f6:	1e 82       	std	Y+6, r1	; 0x06
    16f8:	1d 82       	std	Y+5, r1	; 0x05
		}
		
		itoa(RPMData,TempBuffer,10);
    16fa:	80 91 18 06 	lds	r24, 0x0618
    16fe:	90 91 19 06 	lds	r25, 0x0619
    1702:	a0 91 1a 06 	lds	r26, 0x061A
    1706:	b0 91 1b 06 	lds	r27, 0x061B
    170a:	9c 01       	movw	r18, r24
    170c:	ce 01       	movw	r24, r28
    170e:	8f 56       	subi	r24, 0x6F	; 111
    1710:	9f 4f       	sbci	r25, 0xFF	; 255
    1712:	4a e0       	ldi	r20, 0x0A	; 10
    1714:	50 e0       	ldi	r21, 0x00	; 0
    1716:	bc 01       	movw	r22, r24
    1718:	c9 01       	movw	r24, r18
    171a:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <itoa>
		Show_String(1,TempBuffer,0x28,0x15);
    171e:	ce 01       	movw	r24, r28
    1720:	8f 56       	subi	r24, 0x6F	; 111
    1722:	9f 4f       	sbci	r25, 0xFF	; 255
    1724:	25 e1       	ldi	r18, 0x15	; 21
    1726:	48 e2       	ldi	r20, 0x28	; 40
    1728:	bc 01       	movw	r22, r24
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	0e 94 8c 13 	call	0x2718	; 0x2718 <Show_String>
		itoa(GearboxTempData,TempBuffer,10);
    1730:	80 91 1c 06 	lds	r24, 0x061C
    1734:	90 91 1d 06 	lds	r25, 0x061D
    1738:	a0 91 1e 06 	lds	r26, 0x061E
    173c:	b0 91 1f 06 	lds	r27, 0x061F
    1740:	9c 01       	movw	r18, r24
    1742:	ce 01       	movw	r24, r28
    1744:	8f 56       	subi	r24, 0x6F	; 111
    1746:	9f 4f       	sbci	r25, 0xFF	; 255
    1748:	4a e0       	ldi	r20, 0x0A	; 10
    174a:	50 e0       	ldi	r21, 0x00	; 0
    174c:	bc 01       	movw	r22, r24
    174e:	c9 01       	movw	r24, r18
    1750:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <itoa>
		Show_String(1,TempBuffer,0x28,0x25);
    1754:	ce 01       	movw	r24, r28
    1756:	8f 56       	subi	r24, 0x6F	; 111
    1758:	9f 4f       	sbci	r25, 0xFF	; 255
    175a:	25 e2       	ldi	r18, 0x25	; 37
    175c:	48 e2       	ldi	r20, 0x28	; 40
    175e:	bc 01       	movw	r22, r24
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	0e 94 8c 13 	call	0x2718	; 0x2718 <Show_String>
		
		itoa(VoltageData/1000, TempBuffer, 10);		//display the average cell voltage in Volts instead of millivolts (find the whole volts in the value)
    1766:	80 91 20 06 	lds	r24, 0x0620
    176a:	90 91 21 06 	lds	r25, 0x0621
    176e:	a0 91 22 06 	lds	r26, 0x0622
    1772:	b0 91 23 06 	lds	r27, 0x0623
    1776:	28 ee       	ldi	r18, 0xE8	; 232
    1778:	33 e0       	ldi	r19, 0x03	; 3
    177a:	40 e0       	ldi	r20, 0x00	; 0
    177c:	50 e0       	ldi	r21, 0x00	; 0
    177e:	bc 01       	movw	r22, r24
    1780:	cd 01       	movw	r24, r26
    1782:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__udivmodsi4>
    1786:	da 01       	movw	r26, r20
    1788:	c9 01       	movw	r24, r18
    178a:	9c 01       	movw	r18, r24
    178c:	ce 01       	movw	r24, r28
    178e:	8f 56       	subi	r24, 0x6F	; 111
    1790:	9f 4f       	sbci	r25, 0xFF	; 255
    1792:	4a e0       	ldi	r20, 0x0A	; 10
    1794:	50 e0       	ldi	r21, 0x00	; 0
    1796:	bc 01       	movw	r22, r24
    1798:	c9 01       	movw	r24, r18
    179a:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <itoa>
		TempBuffer[1] = '.';						//add the decimal point
    179e:	ce 01       	movw	r24, r28
    17a0:	8f 56       	subi	r24, 0x6F	; 111
    17a2:	9f 4f       	sbci	r25, 0xFF	; 255
    17a4:	2e e2       	ldi	r18, 0x2E	; 46
    17a6:	fc 01       	movw	r30, r24
    17a8:	21 83       	std	Z+1, r18	; 0x01
		itoa(VoltageData-((VoltageData/1000)*1000), TempBuffer+2, 10);	//add the remaining millivolts
    17aa:	80 91 20 06 	lds	r24, 0x0620
    17ae:	90 91 21 06 	lds	r25, 0x0621
    17b2:	a0 91 22 06 	lds	r26, 0x0622
    17b6:	b0 91 23 06 	lds	r27, 0x0623
    17ba:	28 ee       	ldi	r18, 0xE8	; 232
    17bc:	33 e0       	ldi	r19, 0x03	; 3
    17be:	40 e0       	ldi	r20, 0x00	; 0
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	bc 01       	movw	r22, r24
    17c4:	cd 01       	movw	r24, r26
    17c6:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__udivmodsi4>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	9c 01       	movw	r18, r24
    17d0:	ce 01       	movw	r24, r28
    17d2:	8f 56       	subi	r24, 0x6F	; 111
    17d4:	9f 4f       	sbci	r25, 0xFF	; 255
    17d6:	02 96       	adiw	r24, 0x02	; 2
    17d8:	4a e0       	ldi	r20, 0x0A	; 10
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	bc 01       	movw	r22, r24
    17de:	c9 01       	movw	r24, r18
    17e0:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <itoa>
		Show_String(1,TempBuffer,0x28,0x35);		//display the result.
    17e4:	ce 01       	movw	r24, r28
    17e6:	8f 56       	subi	r24, 0x6F	; 111
    17e8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ea:	25 e3       	ldi	r18, 0x35	; 53
    17ec:	48 e2       	ldi	r20, 0x28	; 40
    17ee:	bc 01       	movw	r22, r24
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	0e 94 8c 13 	call	0x2718	; 0x2718 <Show_String>

		//_delay_ms(5); 
		
	}	
    17f6:	ef cd       	rjmp	.-1058   	; 0x13d6 <main+0x1a6>

000017f8 <readDials>:

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  Read Dials
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void readDials(void)
{
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	6d 97       	sbiw	r28, 0x1d	; 29
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
	uint8_t counter = 0;
    180c:	19 82       	std	Y+1, r1	; 0x01
	uint16_t SwitchRight;
	uint16_t SwitchLeft;
	uint16_t SwitchRight2;
	uint16_t SwitchLeft2;
	SwitchRight = ADC_read(2);
    180e:	82 e0       	ldi	r24, 0x02	; 2
    1810:	0e 94 8a 08 	call	0x1114	; 0x1114 <ADC_read>
    1814:	9b 83       	std	Y+3, r25	; 0x03
    1816:	8a 83       	std	Y+2, r24	; 0x02
	SwitchLeft = ADC_read(3);
    1818:	83 e0       	ldi	r24, 0x03	; 3
    181a:	0e 94 8a 08 	call	0x1114	; 0x1114 <ADC_read>
    181e:	9d 83       	std	Y+5, r25	; 0x05
    1820:	8c 83       	std	Y+4, r24	; 0x04
		{
			break;
		}
	}*/
	
	int intSwitchLeft = (SwitchLeft >> 2) / 24;
    1822:	8c 81       	ldd	r24, Y+4	; 0x04
    1824:	9d 81       	ldd	r25, Y+5	; 0x05
    1826:	96 95       	lsr	r25
    1828:	87 95       	ror	r24
    182a:	96 95       	lsr	r25
    182c:	87 95       	ror	r24
    182e:	9c 01       	movw	r18, r24
    1830:	ab ea       	ldi	r26, 0xAB	; 171
    1832:	ba ea       	ldi	r27, 0xAA	; 170
    1834:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__umulhisi3>
    1838:	92 95       	swap	r25
    183a:	82 95       	swap	r24
    183c:	8f 70       	andi	r24, 0x0F	; 15
    183e:	89 27       	eor	r24, r25
    1840:	9f 70       	andi	r25, 0x0F	; 15
    1842:	89 27       	eor	r24, r25
    1844:	9f 83       	std	Y+7, r25	; 0x07
    1846:	8e 83       	std	Y+6, r24	; 0x06
	int intSwitchRight = (SwitchRight >> 2) / 24;
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	9b 81       	ldd	r25, Y+3	; 0x03
    184c:	96 95       	lsr	r25
    184e:	87 95       	ror	r24
    1850:	96 95       	lsr	r25
    1852:	87 95       	ror	r24
    1854:	9c 01       	movw	r18, r24
    1856:	ab ea       	ldi	r26, 0xAB	; 171
    1858:	ba ea       	ldi	r27, 0xAA	; 170
    185a:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__umulhisi3>
    185e:	92 95       	swap	r25
    1860:	82 95       	swap	r24
    1862:	8f 70       	andi	r24, 0x0F	; 15
    1864:	89 27       	eor	r24, r25
    1866:	9f 70       	andi	r25, 0x0F	; 15
    1868:	89 27       	eor	r24, r25
    186a:	99 87       	std	Y+9, r25	; 0x09
    186c:	88 87       	std	Y+8, r24	; 0x08
	unsigned char SwitchLeftBuffer[10];
	unsigned char SwitchRightBuffer[10];
	itoa(intSwitchRight,SwitchRightBuffer,10);
    186e:	9e 01       	movw	r18, r28
    1870:	2c 5e       	subi	r18, 0xEC	; 236
    1872:	3f 4f       	sbci	r19, 0xFF	; 255
    1874:	88 85       	ldd	r24, Y+8	; 0x08
    1876:	99 85       	ldd	r25, Y+9	; 0x09
    1878:	4a e0       	ldi	r20, 0x0A	; 10
    187a:	50 e0       	ldi	r21, 0x00	; 0
    187c:	b9 01       	movw	r22, r18
    187e:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <itoa>
	itoa(intSwitchLeft,SwitchLeftBuffer,10);
    1882:	9e 01       	movw	r18, r28
    1884:	26 5f       	subi	r18, 0xF6	; 246
    1886:	3f 4f       	sbci	r19, 0xFF	; 255
    1888:	8e 81       	ldd	r24, Y+6	; 0x06
    188a:	9f 81       	ldd	r25, Y+7	; 0x07
    188c:	4a e0       	ldi	r20, 0x0A	; 10
    188e:	50 e0       	ldi	r21, 0x00	; 0
    1890:	b9 01       	movw	r22, r18
    1892:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <itoa>
	strcat(SwitchLeftBuffer,SwitchRightBuffer);
    1896:	9e 01       	movw	r18, r28
    1898:	2c 5e       	subi	r18, 0xEC	; 236
    189a:	3f 4f       	sbci	r19, 0xFF	; 255
    189c:	ce 01       	movw	r24, r28
    189e:	0a 96       	adiw	r24, 0x0a	; 10
    18a0:	b9 01       	movw	r22, r18
    18a2:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <strcat>
	//Show_String(1,&SwitchLeftBuffer,0x28,0x05);
	CAN_Dial = intSwitchRight | (intSwitchLeft<<4);
    18a6:	8e 81       	ldd	r24, Y+6	; 0x06
    18a8:	9f 81       	ldd	r25, Y+7	; 0x07
    18aa:	82 95       	swap	r24
    18ac:	92 95       	swap	r25
    18ae:	90 7f       	andi	r25, 0xF0	; 240
    18b0:	98 27       	eor	r25, r24
    18b2:	80 7f       	andi	r24, 0xF0	; 240
    18b4:	98 27       	eor	r25, r24
    18b6:	98 2f       	mov	r25, r24
    18b8:	88 85       	ldd	r24, Y+8	; 0x08
    18ba:	89 2b       	or	r24, r25
    18bc:	80 93 24 06 	sts	0x0624, r24
}
    18c0:	6d 96       	adiw	r28, 0x1d	; 29
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	08 95       	ret

000018d2 <uDelay>:
	Write_Data(0x9C);			//   Gray Scale Level 13
	Write_Data(0xA8);			//   Gray Scale Level 14
	Write_Data(0xB4);			//   Gray Scale Level 15

	Write_Command(0x00);			// Enable Gray Scale Table
}
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <uDelay+0x6>
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	9a 83       	std	Y+2, r25	; 0x02
    18de:	89 83       	std	Y+1, r24	; 0x01
    18e0:	00 00       	nop
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	9a 81       	ldd	r25, Y+2	; 0x02
    18e6:	9c 01       	movw	r18, r24
    18e8:	21 50       	subi	r18, 0x01	; 1
    18ea:	31 09       	sbc	r19, r1
    18ec:	3a 83       	std	Y+2, r19	; 0x02
    18ee:	29 83       	std	Y+1, r18	; 0x01
    18f0:	89 2b       	or	r24, r25
    18f2:	b9 f7       	brne	.-18     	; 0x18e2 <uDelay+0x10>
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	08 95       	ret

000018fe <Delay>:
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	00 d0       	rcall	.+0      	; 0x1904 <Delay+0x6>
    1904:	00 d0       	rcall	.+0      	; 0x1906 <Delay+0x8>
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	9c 83       	std	Y+4, r25	; 0x04
    190c:	8b 83       	std	Y+3, r24	; 0x03
    190e:	1a 82       	std	Y+2, r1	; 0x02
    1910:	19 82       	std	Y+1, r1	; 0x01
    1912:	09 c0       	rjmp	.+18     	; 0x1926 <Delay+0x28>
    1914:	80 e6       	ldi	r24, 0x60	; 96
    1916:	94 e0       	ldi	r25, 0x04	; 4
    1918:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <uDelay>
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	9a 81       	ldd	r25, Y+2	; 0x02
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	9a 83       	std	Y+2, r25	; 0x02
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	29 81       	ldd	r18, Y+1	; 0x01
    1928:	3a 81       	ldd	r19, Y+2	; 0x02
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	9c 81       	ldd	r25, Y+4	; 0x04
    192e:	28 17       	cp	r18, r24
    1930:	39 07       	cpc	r19, r25
    1932:	80 f3       	brcs	.-32     	; 0x1914 <Delay+0x16>
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	08 95       	ret

00001942 <Write_Command>:
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
    1946:	1f 92       	push	r1
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	89 83       	std	Y+1, r24	; 0x01
    194e:	85 e2       	ldi	r24, 0x25	; 37
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	25 e2       	ldi	r18, 0x25	; 37
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	f9 01       	movw	r30, r18
    1958:	20 81       	ld	r18, Z
    195a:	2f 7d       	andi	r18, 0xDF	; 223
    195c:	fc 01       	movw	r30, r24
    195e:	20 83       	st	Z, r18
    1960:	8b e2       	ldi	r24, 0x2B	; 43
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	2b e2       	ldi	r18, 0x2B	; 43
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	f9 01       	movw	r30, r18
    196a:	20 81       	ld	r18, Z
    196c:	2e 7f       	andi	r18, 0xFE	; 254
    196e:	fc 01       	movw	r30, r24
    1970:	20 83       	st	Z, r18
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	88 2f       	mov	r24, r24
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	0e 94 fe 08 	call	0x11fc	; 0x11fc <spi_send_byte>
    197c:	85 e2       	ldi	r24, 0x25	; 37
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	25 e2       	ldi	r18, 0x25	; 37
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	f9 01       	movw	r30, r18
    1986:	20 81       	ld	r18, Z
    1988:	20 62       	ori	r18, 0x20	; 32
    198a:	fc 01       	movw	r30, r24
    198c:	20 83       	st	Z, r18
    198e:	8b e2       	ldi	r24, 0x2B	; 43
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	2b e2       	ldi	r18, 0x2B	; 43
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	f9 01       	movw	r30, r18
    1998:	20 81       	ld	r18, Z
    199a:	21 60       	ori	r18, 0x01	; 1
    199c:	fc 01       	movw	r30, r24
    199e:	20 83       	st	Z, r18
    19a0:	0f 90       	pop	r0
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	08 95       	ret

000019a8 <Write_Data>:
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
    19ac:	1f 92       	push	r1
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	8b e2       	ldi	r24, 0x2B	; 43
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	2b e2       	ldi	r18, 0x2B	; 43
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	f9 01       	movw	r30, r18
    19be:	20 81       	ld	r18, Z
    19c0:	2e 7f       	andi	r18, 0xFE	; 254
    19c2:	fc 01       	movw	r30, r24
    19c4:	20 83       	st	Z, r18
    19c6:	85 e2       	ldi	r24, 0x25	; 37
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	25 e2       	ldi	r18, 0x25	; 37
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	f9 01       	movw	r30, r18
    19d0:	20 81       	ld	r18, Z
    19d2:	20 62       	ori	r18, 0x20	; 32
    19d4:	fc 01       	movw	r30, r24
    19d6:	20 83       	st	Z, r18
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	88 2f       	mov	r24, r24
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	0e 94 fe 08 	call	0x11fc	; 0x11fc <spi_send_byte>
    19e2:	85 e2       	ldi	r24, 0x25	; 37
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	25 e2       	ldi	r18, 0x25	; 37
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	f9 01       	movw	r30, r18
    19ec:	20 81       	ld	r18, Z
    19ee:	20 62       	ori	r18, 0x20	; 32
    19f0:	fc 01       	movw	r30, r24
    19f2:	20 83       	st	Z, r18
    19f4:	8b e2       	ldi	r24, 0x2B	; 43
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	2b e2       	ldi	r18, 0x2B	; 43
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	f9 01       	movw	r30, r18
    19fe:	20 81       	ld	r18, Z
    1a00:	21 60       	ori	r18, 0x01	; 1
    1a02:	fc 01       	movw	r30, r24
    1a04:	20 83       	st	Z, r18
    1a06:	0f 90       	pop	r0
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	08 95       	ret

00001a0e <Set_Column_Address>:
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <Set_Column_Address+0x6>
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	6a 83       	std	Y+2, r22	; 0x02
    1a1c:	85 e1       	ldi	r24, 0x15	; 21
    1a1e:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	08 95       	ret

00001a38 <Set_Row_Address>:
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <Set_Row_Address+0x6>
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	89 83       	std	Y+1, r24	; 0x01
    1a44:	6a 83       	std	Y+2, r22	; 0x02
    1a46:	85 e7       	ldi	r24, 0x75	; 117
    1a48:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	08 95       	ret

00001a62 <Set_Write_RAM>:
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	8c e5       	ldi	r24, 0x5C	; 92
    1a6c:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	08 95       	ret

00001a76 <Set_Remap_Format>:
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	1f 92       	push	r1
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	89 83       	std	Y+1, r24	; 0x01
    1a82:	80 ea       	ldi	r24, 0xA0	; 160
    1a84:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1a8e:	81 e1       	ldi	r24, 0x11	; 17
    1a90:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1a94:	0f 90       	pop	r0
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	08 95       	ret

00001a9c <Set_Start_Line>:
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    1aa0:	1f 92       	push	r1
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	81 ea       	ldi	r24, 0xA1	; 161
    1aaa:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1ab4:	0f 90       	pop	r0
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	08 95       	ret

00001abc <Set_Display_Offset>:
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	1f 92       	push	r1
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	82 ea       	ldi	r24, 0xA2	; 162
    1aca:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1ad4:	0f 90       	pop	r0
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	08 95       	ret

00001adc <Set_Display_Mode>:
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	1f 92       	push	r1
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	84 6a       	ori	r24, 0xA4	; 164
    1aec:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1af0:	0f 90       	pop	r0
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	08 95       	ret

00001af8 <Set_Partial_Display>:
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <Set_Partial_Display+0x6>
    1afe:	1f 92       	push	r1
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	6a 83       	std	Y+2, r22	; 0x02
    1b08:	4b 83       	std	Y+3, r20	; 0x03
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	88 6a       	ori	r24, 0xA8	; 168
    1b0e:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	88 23       	and	r24, r24
    1b16:	31 f4       	brne	.+12     	; 0x1b24 <Set_Partial_Display+0x2c>
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	08 95       	ret

00001b30 <Set_Function_Selection>:
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	1f 92       	push	r1
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	8b ea       	ldi	r24, 0xAB	; 171
    1b3e:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1b48:	0f 90       	pop	r0
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	08 95       	ret

00001b50 <Set_Display_On_Off>:
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
    1b54:	1f 92       	push	r1
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	8e 6a       	ori	r24, 0xAE	; 174
    1b60:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1b64:	0f 90       	pop	r0
    1b66:	df 91       	pop	r29
    1b68:	cf 91       	pop	r28
    1b6a:	08 95       	ret

00001b6c <Set_Phase_Length>:
    1b6c:	cf 93       	push	r28
    1b6e:	df 93       	push	r29
    1b70:	1f 92       	push	r1
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	81 eb       	ldi	r24, 0xB1	; 177
    1b7a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1b84:	0f 90       	pop	r0
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	08 95       	ret

00001b8c <Set_Display_Clock>:
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	1f 92       	push	r1
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	83 eb       	ldi	r24, 0xB3	; 179
    1b9a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1ba4:	0f 90       	pop	r0
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	08 95       	ret

00001bac <Set_Display_Enhancement_A>:
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	00 d0       	rcall	.+0      	; 0x1bb2 <Set_Display_Enhancement_A+0x6>
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    1bb8:	6a 83       	std	Y+2, r22	; 0x02
    1bba:	84 eb       	ldi	r24, 0xB4	; 180
    1bbc:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	80 6a       	ori	r24, 0xA0	; 160
    1bc4:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	85 60       	ori	r24, 0x05	; 5
    1bcc:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	08 95       	ret

00001bda <Set_GPIO>:
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	1f 92       	push	r1
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	89 83       	std	Y+1, r24	; 0x01
    1be6:	85 eb       	ldi	r24, 0xB5	; 181
    1be8:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1bf2:	0f 90       	pop	r0
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	08 95       	ret

00001bfa <Set_Precharge_Period>:
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	1f 92       	push	r1
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	89 83       	std	Y+1, r24	; 0x01
    1c06:	86 eb       	ldi	r24, 0xB6	; 182
    1c08:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1c12:	0f 90       	pop	r0
    1c14:	df 91       	pop	r29
    1c16:	cf 91       	pop	r28
    1c18:	08 95       	ret

00001c1a <Set_Precharge_Voltage>:
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
    1c1e:	1f 92       	push	r1
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	8b eb       	ldi	r24, 0xBB	; 187
    1c28:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1c32:	0f 90       	pop	r0
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	08 95       	ret

00001c3a <Set_VCOMH>:
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	1f 92       	push	r1
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	8e eb       	ldi	r24, 0xBE	; 190
    1c48:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1c52:	0f 90       	pop	r0
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	08 95       	ret

00001c5a <Set_Contrast_Current>:
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	1f 92       	push	r1
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	89 83       	std	Y+1, r24	; 0x01
    1c66:	81 ec       	ldi	r24, 0xC1	; 193
    1c68:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1c72:	0f 90       	pop	r0
    1c74:	df 91       	pop	r29
    1c76:	cf 91       	pop	r28
    1c78:	08 95       	ret

00001c7a <Set_Master_Current>:
    1c7a:	cf 93       	push	r28
    1c7c:	df 93       	push	r29
    1c7e:	1f 92       	push	r1
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	89 83       	std	Y+1, r24	; 0x01
    1c86:	87 ec       	ldi	r24, 0xC7	; 199
    1c88:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1c92:	0f 90       	pop	r0
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	08 95       	ret

00001c9a <Set_Multiplex_Ratio>:
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	1f 92       	push	r1
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	89 83       	std	Y+1, r24	; 0x01
    1ca6:	8a ec       	ldi	r24, 0xCA	; 202
    1ca8:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1cb2:	0f 90       	pop	r0
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	08 95       	ret

00001cba <Set_Display_Enhancement_B>:
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	1f 92       	push	r1
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	81 ed       	ldi	r24, 0xD1	; 209
    1cc8:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	82 68       	ori	r24, 0x82	; 130
    1cd0:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1cd4:	80 e2       	ldi	r24, 0x20	; 32
    1cd6:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1cda:	0f 90       	pop	r0
    1cdc:	df 91       	pop	r29
    1cde:	cf 91       	pop	r28
    1ce0:	08 95       	ret

00001ce2 <Set_Command_Lock>:
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	1f 92       	push	r1
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	89 83       	std	Y+1, r24	; 0x01
    1cee:	8d ef       	ldi	r24, 0xFD	; 253
    1cf0:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	82 61       	ori	r24, 0x12	; 18
    1cf8:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1cfc:	0f 90       	pop	r0
    1cfe:	df 91       	pop	r29
    1d00:	cf 91       	pop	r28
    1d02:	08 95       	ret

00001d04 <Draw_Rectangle>:
    1d04:	ef 92       	push	r14
    1d06:	0f 93       	push	r16
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	2a 97       	sbiw	r28, 0x0a	; 10
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	8d 83       	std	Y+5, r24	; 0x05
    1d1e:	6e 83       	std	Y+6, r22	; 0x06
    1d20:	4f 83       	std	Y+7, r20	; 0x07
    1d22:	28 87       	std	Y+8, r18	; 0x08
    1d24:	09 87       	std	Y+9, r16	; 0x09
    1d26:	ea 86       	std	Y+10, r14	; 0x0a
    1d28:	8e 81       	ldd	r24, Y+6	; 0x06
    1d2a:	83 70       	andi	r24, 0x03	; 3
    1d2c:	8c 83       	std	Y+4, r24	; 0x04
    1d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d30:	88 23       	and	r24, r24
    1d32:	31 f4       	brne	.+12     	; 0x1d40 <Draw_Rectangle+0x3c>
    1d34:	8e 81       	ldd	r24, Y+6	; 0x06
    1d36:	86 95       	lsr	r24
    1d38:	86 95       	lsr	r24
    1d3a:	81 50       	subi	r24, 0x01	; 1
    1d3c:	8b 83       	std	Y+3, r24	; 0x03
    1d3e:	04 c0       	rjmp	.+8      	; 0x1d48 <Draw_Rectangle+0x44>
    1d40:	8e 81       	ldd	r24, Y+6	; 0x06
    1d42:	86 95       	lsr	r24
    1d44:	86 95       	lsr	r24
    1d46:	8b 83       	std	Y+3, r24	; 0x03
    1d48:	88 85       	ldd	r24, Y+8	; 0x08
    1d4a:	9c e1       	ldi	r25, 0x1C	; 28
    1d4c:	98 0f       	add	r25, r24
    1d4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d50:	84 5e       	subi	r24, 0xE4	; 228
    1d52:	69 2f       	mov	r22, r25
    1d54:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Set_Column_Address>
    1d58:	99 85       	ldd	r25, Y+9	; 0x09
    1d5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d5c:	89 0f       	add	r24, r25
    1d5e:	81 50       	subi	r24, 0x01	; 1
    1d60:	68 2f       	mov	r22, r24
    1d62:	89 85       	ldd	r24, Y+9	; 0x09
    1d64:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <Set_Row_Address>
    1d68:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <Set_Write_RAM>
    1d6c:	19 82       	std	Y+1, r1	; 0x01
    1d6e:	12 c0       	rjmp	.+36     	; 0x1d94 <Draw_Rectangle+0x90>
    1d70:	1a 82       	std	Y+2, r1	; 0x02
    1d72:	09 c0       	rjmp	.+18     	; 0x1d86 <Draw_Rectangle+0x82>
    1d74:	8d 81       	ldd	r24, Y+5	; 0x05
    1d76:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	8f 5f       	subi	r24, 0xFF	; 255
    1d84:	8a 83       	std	Y+2, r24	; 0x02
    1d86:	9a 81       	ldd	r25, Y+2	; 0x02
    1d88:	8e 81       	ldd	r24, Y+6	; 0x06
    1d8a:	98 17       	cp	r25, r24
    1d8c:	98 f3       	brcs	.-26     	; 0x1d74 <Draw_Rectangle+0x70>
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	8f 5f       	subi	r24, 0xFF	; 255
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	88 85       	ldd	r24, Y+8	; 0x08
    1d9c:	48 2f       	mov	r20, r24
    1d9e:	50 e0       	ldi	r21, 0x00	; 0
    1da0:	8f 81       	ldd	r24, Y+7	; 0x07
    1da2:	88 2f       	mov	r24, r24
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	ba 01       	movw	r22, r20
    1da8:	68 1b       	sub	r22, r24
    1daa:	79 0b       	sbc	r23, r25
    1dac:	cb 01       	movw	r24, r22
    1dae:	01 96       	adiw	r24, 0x01	; 1
    1db0:	28 17       	cp	r18, r24
    1db2:	39 07       	cpc	r19, r25
    1db4:	ec f2       	brlt	.-70     	; 0x1d70 <Draw_Rectangle+0x6c>
    1db6:	88 85       	ldd	r24, Y+8	; 0x08
    1db8:	2c e1       	ldi	r18, 0x1C	; 28
    1dba:	28 0f       	add	r18, r24
    1dbc:	98 85       	ldd	r25, Y+8	; 0x08
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	79 2f       	mov	r23, r25
    1dc2:	78 1b       	sub	r23, r24
    1dc4:	87 2f       	mov	r24, r23
    1dc6:	84 5e       	subi	r24, 0xE4	; 228
    1dc8:	62 2f       	mov	r22, r18
    1dca:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Set_Column_Address>
    1dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd0:	8e 81       	ldd	r24, Y+6	; 0x06
    1dd2:	29 2f       	mov	r18, r25
    1dd4:	28 1b       	sub	r18, r24
    1dd6:	99 85       	ldd	r25, Y+9	; 0x09
    1dd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dda:	89 0f       	add	r24, r25
    1ddc:	62 2f       	mov	r22, r18
    1dde:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <Set_Row_Address>
    1de2:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <Set_Write_RAM>
    1de6:	19 82       	std	Y+1, r1	; 0x01
    1de8:	4d c0       	rjmp	.+154    	; 0x1e84 <Draw_Rectangle+0x180>
    1dea:	1a 82       	std	Y+2, r1	; 0x02
    1dec:	3d c0       	rjmp	.+122    	; 0x1e68 <Draw_Rectangle+0x164>
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	88 23       	and	r24, r24
    1df2:	89 f5       	brne	.+98     	; 0x1e56 <Draw_Rectangle+0x152>
    1df4:	8c 81       	ldd	r24, Y+4	; 0x04
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	81 30       	cpi	r24, 0x01	; 1
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	99 f0       	breq	.+38     	; 0x1e26 <Draw_Rectangle+0x122>
    1e00:	82 30       	cpi	r24, 0x02	; 2
    1e02:	91 05       	cpc	r25, r1
    1e04:	1c f4       	brge	.+6      	; 0x1e0c <Draw_Rectangle+0x108>
    1e06:	89 2b       	or	r24, r25
    1e08:	39 f0       	breq	.+14     	; 0x1e18 <Draw_Rectangle+0x114>
    1e0a:	2b c0       	rjmp	.+86     	; 0x1e62 <Draw_Rectangle+0x15e>
    1e0c:	82 30       	cpi	r24, 0x02	; 2
    1e0e:	91 05       	cpc	r25, r1
    1e10:	91 f0       	breq	.+36     	; 0x1e36 <Draw_Rectangle+0x132>
    1e12:	03 97       	sbiw	r24, 0x03	; 3
    1e14:	b9 f0       	breq	.+46     	; 0x1e44 <Draw_Rectangle+0x140>
    1e16:	25 c0       	rjmp	.+74     	; 0x1e62 <Draw_Rectangle+0x15e>
    1e18:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e20:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1e24:	17 c0       	rjmp	.+46     	; 0x1e54 <Draw_Rectangle+0x150>
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2e:	8f 70       	andi	r24, 0x0F	; 15
    1e30:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1e34:	0f c0       	rjmp	.+30     	; 0x1e54 <Draw_Rectangle+0x150>
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1e42:	08 c0       	rjmp	.+16     	; 0x1e54 <Draw_Rectangle+0x150>
    1e44:	8d 81       	ldd	r24, Y+5	; 0x05
    1e46:	8f 70       	andi	r24, 0x0F	; 15
    1e48:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1e52:	00 00       	nop
    1e54:	06 c0       	rjmp	.+12     	; 0x1e62 <Draw_Rectangle+0x15e>
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	8f 5f       	subi	r24, 0xFF	; 255
    1e66:	8a 83       	std	Y+2, r24	; 0x02
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	88 2f       	mov	r24, r24
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	01 96       	adiw	r24, 0x01	; 1
    1e76:	28 17       	cp	r18, r24
    1e78:	39 07       	cpc	r19, r25
    1e7a:	0c f4       	brge	.+2      	; 0x1e7e <Draw_Rectangle+0x17a>
    1e7c:	b8 cf       	rjmp	.-144    	; 0x1dee <Draw_Rectangle+0xea>
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	8f 5f       	subi	r24, 0xFF	; 255
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	28 2f       	mov	r18, r24
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	50 e0       	ldi	r21, 0x00	; 0
    1e90:	89 85       	ldd	r24, Y+9	; 0x09
    1e92:	88 2f       	mov	r24, r24
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	ba 01       	movw	r22, r20
    1e98:	68 1b       	sub	r22, r24
    1e9a:	79 0b       	sbc	r23, r25
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	28 17       	cp	r18, r24
    1ea2:	39 07       	cpc	r19, r25
    1ea4:	0c f4       	brge	.+2      	; 0x1ea8 <Draw_Rectangle+0x1a4>
    1ea6:	a1 cf       	rjmp	.-190    	; 0x1dea <Draw_Rectangle+0xe6>
    1ea8:	88 85       	ldd	r24, Y+8	; 0x08
    1eaa:	9c e1       	ldi	r25, 0x1C	; 28
    1eac:	98 0f       	add	r25, r24
    1eae:	8f 81       	ldd	r24, Y+7	; 0x07
    1eb0:	84 5e       	subi	r24, 0xE4	; 228
    1eb2:	69 2f       	mov	r22, r25
    1eb4:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Set_Column_Address>
    1eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eba:	8e 81       	ldd	r24, Y+6	; 0x06
    1ebc:	79 2f       	mov	r23, r25
    1ebe:	78 1b       	sub	r23, r24
    1ec0:	87 2f       	mov	r24, r23
    1ec2:	8f 5f       	subi	r24, 0xFF	; 255
    1ec4:	6a 85       	ldd	r22, Y+10	; 0x0a
    1ec6:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <Set_Row_Address>
    1eca:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <Set_Write_RAM>
    1ece:	19 82       	std	Y+1, r1	; 0x01
    1ed0:	12 c0       	rjmp	.+36     	; 0x1ef6 <Draw_Rectangle+0x1f2>
    1ed2:	1a 82       	std	Y+2, r1	; 0x02
    1ed4:	09 c0       	rjmp	.+18     	; 0x1ee8 <Draw_Rectangle+0x1e4>
    1ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed8:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1edc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ede:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	8f 5f       	subi	r24, 0xFF	; 255
    1ee6:	8a 83       	std	Y+2, r24	; 0x02
    1ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eea:	8e 81       	ldd	r24, Y+6	; 0x06
    1eec:	98 17       	cp	r25, r24
    1eee:	98 f3       	brcs	.-26     	; 0x1ed6 <Draw_Rectangle+0x1d2>
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	8f 5f       	subi	r24, 0xFF	; 255
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	88 85       	ldd	r24, Y+8	; 0x08
    1efe:	48 2f       	mov	r20, r24
    1f00:	50 e0       	ldi	r21, 0x00	; 0
    1f02:	8f 81       	ldd	r24, Y+7	; 0x07
    1f04:	88 2f       	mov	r24, r24
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	ba 01       	movw	r22, r20
    1f0a:	68 1b       	sub	r22, r24
    1f0c:	79 0b       	sbc	r23, r25
    1f0e:	cb 01       	movw	r24, r22
    1f10:	01 96       	adiw	r24, 0x01	; 1
    1f12:	28 17       	cp	r18, r24
    1f14:	39 07       	cpc	r19, r25
    1f16:	ec f2       	brlt	.-70     	; 0x1ed2 <Draw_Rectangle+0x1ce>
    1f18:	9f 81       	ldd	r25, Y+7	; 0x07
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	89 0f       	add	r24, r25
    1f1e:	9c e1       	ldi	r25, 0x1C	; 28
    1f20:	98 0f       	add	r25, r24
    1f22:	8f 81       	ldd	r24, Y+7	; 0x07
    1f24:	84 5e       	subi	r24, 0xE4	; 228
    1f26:	69 2f       	mov	r22, r25
    1f28:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Set_Column_Address>
    1f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f30:	29 2f       	mov	r18, r25
    1f32:	28 1b       	sub	r18, r24
    1f34:	99 85       	ldd	r25, Y+9	; 0x09
    1f36:	8e 81       	ldd	r24, Y+6	; 0x06
    1f38:	89 0f       	add	r24, r25
    1f3a:	62 2f       	mov	r22, r18
    1f3c:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <Set_Row_Address>
    1f40:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <Set_Write_RAM>
    1f44:	19 82       	std	Y+1, r1	; 0x01
    1f46:	4e c0       	rjmp	.+156    	; 0x1fe4 <Draw_Rectangle+0x2e0>
    1f48:	1a 82       	std	Y+2, r1	; 0x02
    1f4a:	3e c0       	rjmp	.+124    	; 0x1fc8 <Draw_Rectangle+0x2c4>
    1f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	98 17       	cp	r25, r24
    1f52:	89 f5       	brne	.+98     	; 0x1fb6 <Draw_Rectangle+0x2b2>
    1f54:	8c 81       	ldd	r24, Y+4	; 0x04
    1f56:	88 2f       	mov	r24, r24
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	91 05       	cpc	r25, r1
    1f5e:	99 f0       	breq	.+38     	; 0x1f86 <Draw_Rectangle+0x282>
    1f60:	82 30       	cpi	r24, 0x02	; 2
    1f62:	91 05       	cpc	r25, r1
    1f64:	1c f4       	brge	.+6      	; 0x1f6c <Draw_Rectangle+0x268>
    1f66:	89 2b       	or	r24, r25
    1f68:	39 f0       	breq	.+14     	; 0x1f78 <Draw_Rectangle+0x274>
    1f6a:	2b c0       	rjmp	.+86     	; 0x1fc2 <Draw_Rectangle+0x2be>
    1f6c:	82 30       	cpi	r24, 0x02	; 2
    1f6e:	91 05       	cpc	r25, r1
    1f70:	91 f0       	breq	.+36     	; 0x1f96 <Draw_Rectangle+0x292>
    1f72:	03 97       	sbiw	r24, 0x03	; 3
    1f74:	b9 f0       	breq	.+46     	; 0x1fa4 <Draw_Rectangle+0x2a0>
    1f76:	25 c0       	rjmp	.+74     	; 0x1fc2 <Draw_Rectangle+0x2be>
    1f78:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f80:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1f84:	17 c0       	rjmp	.+46     	; 0x1fb4 <Draw_Rectangle+0x2b0>
    1f86:	8d 81       	ldd	r24, Y+5	; 0x05
    1f88:	80 7f       	andi	r24, 0xF0	; 240
    1f8a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1f94:	0f c0       	rjmp	.+30     	; 0x1fb4 <Draw_Rectangle+0x2b0>
    1f96:	8d 81       	ldd	r24, Y+5	; 0x05
    1f98:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1fa2:	08 c0       	rjmp	.+16     	; 0x1fb4 <Draw_Rectangle+0x2b0>
    1fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa6:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	80 7f       	andi	r24, 0xF0	; 240
    1fae:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1fb2:	00 00       	nop
    1fb4:	06 c0       	rjmp	.+12     	; 0x1fc2 <Draw_Rectangle+0x2be>
    1fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb8:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	8f 5f       	subi	r24, 0xFF	; 255
    1fc6:	8a 83       	std	Y+2, r24	; 0x02
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	28 2f       	mov	r18, r24
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	88 2f       	mov	r24, r24
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	01 96       	adiw	r24, 0x01	; 1
    1fd6:	28 17       	cp	r18, r24
    1fd8:	39 07       	cpc	r19, r25
    1fda:	0c f4       	brge	.+2      	; 0x1fde <Draw_Rectangle+0x2da>
    1fdc:	b7 cf       	rjmp	.-146    	; 0x1f4c <Draw_Rectangle+0x248>
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	8f 5f       	subi	r24, 0xFF	; 255
    1fe2:	89 83       	std	Y+1, r24	; 0x01
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fec:	48 2f       	mov	r20, r24
    1fee:	50 e0       	ldi	r21, 0x00	; 0
    1ff0:	89 85       	ldd	r24, Y+9	; 0x09
    1ff2:	88 2f       	mov	r24, r24
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	ba 01       	movw	r22, r20
    1ff8:	68 1b       	sub	r22, r24
    1ffa:	79 0b       	sbc	r23, r25
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	28 17       	cp	r18, r24
    2002:	39 07       	cpc	r19, r25
    2004:	0c f4       	brge	.+2      	; 0x2008 <Draw_Rectangle+0x304>
    2006:	a0 cf       	rjmp	.-192    	; 0x1f48 <Draw_Rectangle+0x244>
    2008:	2a 96       	adiw	r28, 0x0a	; 10
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	0f 91       	pop	r16
    201a:	ef 90       	pop	r14
    201c:	08 95       	ret

0000201e <Fill_RAM>:
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29
    2022:	00 d0       	rcall	.+0      	; 0x2024 <Fill_RAM+0x6>
    2024:	1f 92       	push	r1
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	8b 83       	std	Y+3, r24	; 0x03
    202c:	67 e7       	ldi	r22, 0x77	; 119
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Set_Column_Address>
    2034:	6f e7       	ldi	r22, 0x7F	; 127
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <Set_Row_Address>
    203c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <Set_Write_RAM>
    2040:	19 82       	std	Y+1, r1	; 0x01
    2042:	0e c0       	rjmp	.+28     	; 0x2060 <Fill_RAM+0x42>
    2044:	1a 82       	std	Y+2, r1	; 0x02
    2046:	06 c0       	rjmp	.+12     	; 0x2054 <Fill_RAM+0x36>
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	8f 5f       	subi	r24, 0xFF	; 255
    2052:	8a 83       	std	Y+2, r24	; 0x02
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	88 37       	cpi	r24, 0x78	; 120
    2058:	b8 f3       	brcs	.-18     	; 0x2048 <Fill_RAM+0x2a>
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	8f 5f       	subi	r24, 0xFF	; 255
    205e:	89 83       	std	Y+1, r24	; 0x01
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	88 23       	and	r24, r24
    2064:	7c f7       	brge	.-34     	; 0x2044 <Fill_RAM+0x26>
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	08 95       	ret

00002072 <Show_Font57>:
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	2d 97       	sbiw	r28, 0x0d	; 13
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	f8 94       	cli
    2080:	de bf       	out	0x3e, r29	; 62
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	cd bf       	out	0x3d, r28	; 61
    2086:	8a 87       	std	Y+10, r24	; 0x0a
    2088:	6b 87       	std	Y+11, r22	; 0x0b
    208a:	4c 87       	std	Y+12, r20	; 0x0c
    208c:	2d 87       	std	Y+13, r18	; 0x0d
    208e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2090:	80 32       	cpi	r24, 0x20	; 32
    2092:	19 f4       	brne	.+6      	; 0x209a <Show_Font57+0x28>
    2094:	80 e6       	ldi	r24, 0x60	; 96
    2096:	8b 87       	std	Y+11, r24	; 0x0b
    2098:	03 c0       	rjmp	.+6      	; 0x20a0 <Show_Font57+0x2e>
    209a:	8b 85       	ldd	r24, Y+11	; 0x0b
    209c:	80 52       	subi	r24, 0x20	; 32
    209e:	8b 87       	std	Y+11, r24	; 0x0b
    20a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a2:	80 5f       	subi	r24, 0xF0	; 240
    20a4:	8f 83       	std	Y+7, r24	; 0x07
    20a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    20a8:	88 2f       	mov	r24, r24
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	91 f4       	brne	.+36     	; 0x20d4 <Show_Font57+0x62>
    20b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    20b2:	88 2f       	mov	r24, r24
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	9c 01       	movw	r18, r24
    20b8:	21 50       	subi	r18, 0x01	; 1
    20ba:	31 09       	sbc	r19, r1
    20bc:	c9 01       	movw	r24, r18
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	88 0f       	add	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	82 0f       	add	r24, r18
    20c8:	93 1f       	adc	r25, r19
    20ca:	80 50       	subi	r24, 0x00	; 0
    20cc:	9f 4f       	sbci	r25, 0xFF	; 255
    20ce:	9a 83       	std	Y+2, r25	; 0x02
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	00 00       	nop
    20d4:	85 e1       	ldi	r24, 0x15	; 21
    20d6:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <Set_Remap_Format>
    20da:	1b 82       	std	Y+3, r1	; 0x03
    20dc:	0d c3       	rjmp	.+1562   	; 0x26f8 <Show_Font57+0x686>
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	9a 81       	ldd	r25, Y+2	; 0x02
    20e2:	fc 01       	movw	r30, r24
    20e4:	80 81       	ld	r24, Z
    20e6:	88 87       	std	Y+8, r24	; 0x08
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	9a 81       	ldd	r25, Y+2	; 0x02
    20ec:	01 96       	adiw	r24, 0x01	; 1
    20ee:	9a 83       	std	Y+2, r25	; 0x02
    20f0:	89 83       	std	Y+1, r24	; 0x01
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	81 30       	cpi	r24, 0x01	; 1
    20f6:	21 f4       	brne	.+8      	; 0x2100 <Show_Font57+0x8e>
    20f8:	1c 82       	std	Y+4, r1	; 0x04
    20fa:	1d 82       	std	Y+5, r1	; 0x05
    20fc:	1e 82       	std	Y+6, r1	; 0x06
    20fe:	1e c0       	rjmp	.+60     	; 0x213c <Show_Font57+0xca>
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	9a 81       	ldd	r25, Y+2	; 0x02
    2104:	fc 01       	movw	r30, r24
    2106:	80 81       	ld	r24, Z
    2108:	8c 83       	std	Y+4, r24	; 0x04
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	9a 81       	ldd	r25, Y+2	; 0x02
    210e:	01 96       	adiw	r24, 0x01	; 1
    2110:	9a 83       	std	Y+2, r25	; 0x02
    2112:	89 83       	std	Y+1, r24	; 0x01
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	9a 81       	ldd	r25, Y+2	; 0x02
    2118:	fc 01       	movw	r30, r24
    211a:	80 81       	ld	r24, Z
    211c:	8d 83       	std	Y+5, r24	; 0x05
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	9a 81       	ldd	r25, Y+2	; 0x02
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	9a 83       	std	Y+2, r25	; 0x02
    2126:	89 83       	std	Y+1, r24	; 0x01
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	9a 81       	ldd	r25, Y+2	; 0x02
    212c:	fc 01       	movw	r30, r24
    212e:	80 81       	ld	r24, Z
    2130:	8e 83       	std	Y+6, r24	; 0x06
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	9a 81       	ldd	r25, Y+2	; 0x02
    2136:	01 96       	adiw	r24, 0x01	; 1
    2138:	9a 83       	std	Y+2, r25	; 0x02
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	8c 85       	ldd	r24, Y+12	; 0x0c
    213e:	9c e1       	ldi	r25, 0x1C	; 28
    2140:	98 0f       	add	r25, r24
    2142:	8c 85       	ldd	r24, Y+12	; 0x0c
    2144:	84 5e       	subi	r24, 0xE4	; 228
    2146:	69 2f       	mov	r22, r25
    2148:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Set_Column_Address>
    214c:	8d 85       	ldd	r24, Y+13	; 0x0d
    214e:	89 5f       	subi	r24, 0xF9	; 249
    2150:	68 2f       	mov	r22, r24
    2152:	8d 85       	ldd	r24, Y+13	; 0x0d
    2154:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <Set_Row_Address>
    2158:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <Set_Write_RAM>
    215c:	88 85       	ldd	r24, Y+8	; 0x08
    215e:	88 2f       	mov	r24, r24
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	81 70       	andi	r24, 0x01	; 1
    2164:	99 27       	eor	r25, r25
    2166:	82 95       	swap	r24
    2168:	92 95       	swap	r25
    216a:	90 7f       	andi	r25, 0xF0	; 240
    216c:	98 27       	eor	r25, r24
    216e:	80 7f       	andi	r24, 0xF0	; 240
    2170:	98 27       	eor	r25, r24
    2172:	98 2f       	mov	r25, r24
    2174:	8c 81       	ldd	r24, Y+4	; 0x04
    2176:	81 70       	andi	r24, 0x01	; 1
    2178:	89 2b       	or	r24, r25
    217a:	89 87       	std	Y+9, r24	; 0x09
    217c:	89 85       	ldd	r24, Y+9	; 0x09
    217e:	88 2f       	mov	r24, r24
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	88 0f       	add	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	98 2f       	mov	r25, r24
    2188:	89 85       	ldd	r24, Y+9	; 0x09
    218a:	29 2f       	mov	r18, r25
    218c:	28 2b       	or	r18, r24
    218e:	89 85       	ldd	r24, Y+9	; 0x09
    2190:	88 2f       	mov	r24, r24
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	28 2b       	or	r18, r24
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	88 2f       	mov	r24, r24
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	88 0f       	add	r24, r24
    21a6:	99 1f       	adc	r25, r25
    21a8:	88 0f       	add	r24, r24
    21aa:	99 1f       	adc	r25, r25
    21ac:	88 0f       	add	r24, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	82 2b       	or	r24, r18
    21b2:	89 87       	std	Y+9, r24	; 0x09
    21b4:	89 85       	ldd	r24, Y+9	; 0x09
    21b6:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	88 2f       	mov	r24, r24
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	81 70       	andi	r24, 0x01	; 1
    21c2:	99 27       	eor	r25, r25
    21c4:	82 95       	swap	r24
    21c6:	92 95       	swap	r25
    21c8:	90 7f       	andi	r25, 0xF0	; 240
    21ca:	98 27       	eor	r25, r24
    21cc:	80 7f       	andi	r24, 0xF0	; 240
    21ce:	98 27       	eor	r25, r24
    21d0:	98 2f       	mov	r25, r24
    21d2:	8e 81       	ldd	r24, Y+6	; 0x06
    21d4:	81 70       	andi	r24, 0x01	; 1
    21d6:	89 2b       	or	r24, r25
    21d8:	89 87       	std	Y+9, r24	; 0x09
    21da:	89 85       	ldd	r24, Y+9	; 0x09
    21dc:	88 2f       	mov	r24, r24
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	98 2f       	mov	r25, r24
    21e6:	89 85       	ldd	r24, Y+9	; 0x09
    21e8:	29 2f       	mov	r18, r25
    21ea:	28 2b       	or	r18, r24
    21ec:	89 85       	ldd	r24, Y+9	; 0x09
    21ee:	88 2f       	mov	r24, r24
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	28 2b       	or	r18, r24
    21fc:	89 85       	ldd	r24, Y+9	; 0x09
    21fe:	88 2f       	mov	r24, r24
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	88 0f       	add	r24, r24
    2208:	99 1f       	adc	r25, r25
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	82 2b       	or	r24, r18
    2210:	89 87       	std	Y+9, r24	; 0x09
    2212:	89 85       	ldd	r24, Y+9	; 0x09
    2214:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    2218:	88 85       	ldd	r24, Y+8	; 0x08
    221a:	88 2f       	mov	r24, r24
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	82 70       	andi	r24, 0x02	; 2
    2220:	99 27       	eor	r25, r25
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	28 2f       	mov	r18, r24
    2230:	8c 81       	ldd	r24, Y+4	; 0x04
    2232:	88 2f       	mov	r24, r24
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	82 70       	andi	r24, 0x02	; 2
    2238:	99 27       	eor	r25, r25
    223a:	95 95       	asr	r25
    223c:	87 95       	ror	r24
    223e:	82 2b       	or	r24, r18
    2240:	89 87       	std	Y+9, r24	; 0x09
    2242:	89 85       	ldd	r24, Y+9	; 0x09
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	88 0f       	add	r24, r24
    224a:	99 1f       	adc	r25, r25
    224c:	98 2f       	mov	r25, r24
    224e:	89 85       	ldd	r24, Y+9	; 0x09
    2250:	29 2f       	mov	r18, r25
    2252:	28 2b       	or	r18, r24
    2254:	89 85       	ldd	r24, Y+9	; 0x09
    2256:	88 2f       	mov	r24, r24
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	88 0f       	add	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	28 2b       	or	r18, r24
    2264:	89 85       	ldd	r24, Y+9	; 0x09
    2266:	88 2f       	mov	r24, r24
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	88 0f       	add	r24, r24
    226c:	99 1f       	adc	r25, r25
    226e:	88 0f       	add	r24, r24
    2270:	99 1f       	adc	r25, r25
    2272:	88 0f       	add	r24, r24
    2274:	99 1f       	adc	r25, r25
    2276:	82 2b       	or	r24, r18
    2278:	89 87       	std	Y+9, r24	; 0x09
    227a:	89 85       	ldd	r24, Y+9	; 0x09
    227c:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    2280:	8d 81       	ldd	r24, Y+5	; 0x05
    2282:	88 2f       	mov	r24, r24
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	82 70       	andi	r24, 0x02	; 2
    2288:	99 27       	eor	r25, r25
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	28 2f       	mov	r18, r24
    2298:	8e 81       	ldd	r24, Y+6	; 0x06
    229a:	88 2f       	mov	r24, r24
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	82 70       	andi	r24, 0x02	; 2
    22a0:	99 27       	eor	r25, r25
    22a2:	95 95       	asr	r25
    22a4:	87 95       	ror	r24
    22a6:	82 2b       	or	r24, r18
    22a8:	89 87       	std	Y+9, r24	; 0x09
    22aa:	89 85       	ldd	r24, Y+9	; 0x09
    22ac:	88 2f       	mov	r24, r24
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	88 0f       	add	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	98 2f       	mov	r25, r24
    22b6:	89 85       	ldd	r24, Y+9	; 0x09
    22b8:	29 2f       	mov	r18, r25
    22ba:	28 2b       	or	r18, r24
    22bc:	89 85       	ldd	r24, Y+9	; 0x09
    22be:	88 2f       	mov	r24, r24
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	88 0f       	add	r24, r24
    22c4:	99 1f       	adc	r25, r25
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	28 2b       	or	r18, r24
    22cc:	89 85       	ldd	r24, Y+9	; 0x09
    22ce:	88 2f       	mov	r24, r24
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	88 0f       	add	r24, r24
    22d4:	99 1f       	adc	r25, r25
    22d6:	88 0f       	add	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	82 2b       	or	r24, r18
    22e0:	89 87       	std	Y+9, r24	; 0x09
    22e2:	89 85       	ldd	r24, Y+9	; 0x09
    22e4:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    22e8:	88 85       	ldd	r24, Y+8	; 0x08
    22ea:	88 2f       	mov	r24, r24
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	84 70       	andi	r24, 0x04	; 4
    22f0:	99 27       	eor	r25, r25
    22f2:	88 0f       	add	r24, r24
    22f4:	99 1f       	adc	r25, r25
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	28 2f       	mov	r18, r24
    22fc:	8c 81       	ldd	r24, Y+4	; 0x04
    22fe:	88 2f       	mov	r24, r24
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	84 70       	andi	r24, 0x04	; 4
    2304:	99 27       	eor	r25, r25
    2306:	95 95       	asr	r25
    2308:	87 95       	ror	r24
    230a:	95 95       	asr	r25
    230c:	87 95       	ror	r24
    230e:	82 2b       	or	r24, r18
    2310:	89 87       	std	Y+9, r24	; 0x09
    2312:	89 85       	ldd	r24, Y+9	; 0x09
    2314:	88 2f       	mov	r24, r24
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	88 0f       	add	r24, r24
    231a:	99 1f       	adc	r25, r25
    231c:	98 2f       	mov	r25, r24
    231e:	89 85       	ldd	r24, Y+9	; 0x09
    2320:	29 2f       	mov	r18, r25
    2322:	28 2b       	or	r18, r24
    2324:	89 85       	ldd	r24, Y+9	; 0x09
    2326:	88 2f       	mov	r24, r24
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	88 0f       	add	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	28 2b       	or	r18, r24
    2334:	89 85       	ldd	r24, Y+9	; 0x09
    2336:	88 2f       	mov	r24, r24
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	88 0f       	add	r24, r24
    2340:	99 1f       	adc	r25, r25
    2342:	88 0f       	add	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	82 2b       	or	r24, r18
    2348:	89 87       	std	Y+9, r24	; 0x09
    234a:	89 85       	ldd	r24, Y+9	; 0x09
    234c:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    2350:	8d 81       	ldd	r24, Y+5	; 0x05
    2352:	88 2f       	mov	r24, r24
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	84 70       	andi	r24, 0x04	; 4
    2358:	99 27       	eor	r25, r25
    235a:	88 0f       	add	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	88 0f       	add	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	28 2f       	mov	r18, r24
    2364:	8e 81       	ldd	r24, Y+6	; 0x06
    2366:	88 2f       	mov	r24, r24
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	84 70       	andi	r24, 0x04	; 4
    236c:	99 27       	eor	r25, r25
    236e:	95 95       	asr	r25
    2370:	87 95       	ror	r24
    2372:	95 95       	asr	r25
    2374:	87 95       	ror	r24
    2376:	82 2b       	or	r24, r18
    2378:	89 87       	std	Y+9, r24	; 0x09
    237a:	89 85       	ldd	r24, Y+9	; 0x09
    237c:	88 2f       	mov	r24, r24
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	98 2f       	mov	r25, r24
    2386:	89 85       	ldd	r24, Y+9	; 0x09
    2388:	29 2f       	mov	r18, r25
    238a:	28 2b       	or	r18, r24
    238c:	89 85       	ldd	r24, Y+9	; 0x09
    238e:	88 2f       	mov	r24, r24
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	88 0f       	add	r24, r24
    2394:	99 1f       	adc	r25, r25
    2396:	88 0f       	add	r24, r24
    2398:	99 1f       	adc	r25, r25
    239a:	28 2b       	or	r18, r24
    239c:	89 85       	ldd	r24, Y+9	; 0x09
    239e:	88 2f       	mov	r24, r24
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	82 2b       	or	r24, r18
    23b0:	89 87       	std	Y+9, r24	; 0x09
    23b2:	89 85       	ldd	r24, Y+9	; 0x09
    23b4:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    23b8:	88 85       	ldd	r24, Y+8	; 0x08
    23ba:	88 2f       	mov	r24, r24
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	88 70       	andi	r24, 0x08	; 8
    23c0:	99 27       	eor	r25, r25
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	28 2f       	mov	r18, r24
    23c8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ca:	88 2f       	mov	r24, r24
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	88 70       	andi	r24, 0x08	; 8
    23d0:	99 27       	eor	r25, r25
    23d2:	95 95       	asr	r25
    23d4:	87 95       	ror	r24
    23d6:	95 95       	asr	r25
    23d8:	87 95       	ror	r24
    23da:	95 95       	asr	r25
    23dc:	87 95       	ror	r24
    23de:	82 2b       	or	r24, r18
    23e0:	89 87       	std	Y+9, r24	; 0x09
    23e2:	89 85       	ldd	r24, Y+9	; 0x09
    23e4:	88 2f       	mov	r24, r24
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	88 0f       	add	r24, r24
    23ea:	99 1f       	adc	r25, r25
    23ec:	98 2f       	mov	r25, r24
    23ee:	89 85       	ldd	r24, Y+9	; 0x09
    23f0:	29 2f       	mov	r18, r25
    23f2:	28 2b       	or	r18, r24
    23f4:	89 85       	ldd	r24, Y+9	; 0x09
    23f6:	88 2f       	mov	r24, r24
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	88 0f       	add	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	88 0f       	add	r24, r24
    2400:	99 1f       	adc	r25, r25
    2402:	28 2b       	or	r18, r24
    2404:	89 85       	ldd	r24, Y+9	; 0x09
    2406:	88 2f       	mov	r24, r24
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	88 0f       	add	r24, r24
    240c:	99 1f       	adc	r25, r25
    240e:	88 0f       	add	r24, r24
    2410:	99 1f       	adc	r25, r25
    2412:	88 0f       	add	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	82 2b       	or	r24, r18
    2418:	89 87       	std	Y+9, r24	; 0x09
    241a:	89 85       	ldd	r24, Y+9	; 0x09
    241c:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    2420:	8d 81       	ldd	r24, Y+5	; 0x05
    2422:	88 2f       	mov	r24, r24
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	88 70       	andi	r24, 0x08	; 8
    2428:	99 27       	eor	r25, r25
    242a:	88 0f       	add	r24, r24
    242c:	99 1f       	adc	r25, r25
    242e:	28 2f       	mov	r18, r24
    2430:	8e 81       	ldd	r24, Y+6	; 0x06
    2432:	88 2f       	mov	r24, r24
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	88 70       	andi	r24, 0x08	; 8
    2438:	99 27       	eor	r25, r25
    243a:	95 95       	asr	r25
    243c:	87 95       	ror	r24
    243e:	95 95       	asr	r25
    2440:	87 95       	ror	r24
    2442:	95 95       	asr	r25
    2444:	87 95       	ror	r24
    2446:	82 2b       	or	r24, r18
    2448:	89 87       	std	Y+9, r24	; 0x09
    244a:	89 85       	ldd	r24, Y+9	; 0x09
    244c:	88 2f       	mov	r24, r24
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	88 0f       	add	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	98 2f       	mov	r25, r24
    2456:	89 85       	ldd	r24, Y+9	; 0x09
    2458:	29 2f       	mov	r18, r25
    245a:	28 2b       	or	r18, r24
    245c:	89 85       	ldd	r24, Y+9	; 0x09
    245e:	88 2f       	mov	r24, r24
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	88 0f       	add	r24, r24
    2464:	99 1f       	adc	r25, r25
    2466:	88 0f       	add	r24, r24
    2468:	99 1f       	adc	r25, r25
    246a:	28 2b       	or	r18, r24
    246c:	89 85       	ldd	r24, Y+9	; 0x09
    246e:	88 2f       	mov	r24, r24
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	88 0f       	add	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	88 0f       	add	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	82 2b       	or	r24, r18
    2480:	89 87       	std	Y+9, r24	; 0x09
    2482:	89 85       	ldd	r24, Y+9	; 0x09
    2484:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    2488:	88 85       	ldd	r24, Y+8	; 0x08
    248a:	88 2f       	mov	r24, r24
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	80 71       	andi	r24, 0x10	; 16
    2490:	99 27       	eor	r25, r25
    2492:	88 0f       	add	r24, r24
    2494:	99 1f       	adc	r25, r25
    2496:	88 0f       	add	r24, r24
    2498:	99 1f       	adc	r25, r25
    249a:	88 0f       	add	r24, r24
    249c:	99 1f       	adc	r25, r25
    249e:	28 2f       	mov	r18, r24
    24a0:	8c 81       	ldd	r24, Y+4	; 0x04
    24a2:	88 2f       	mov	r24, r24
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	80 71       	andi	r24, 0x10	; 16
    24a8:	99 27       	eor	r25, r25
    24aa:	95 95       	asr	r25
    24ac:	87 95       	ror	r24
    24ae:	82 2b       	or	r24, r18
    24b0:	89 87       	std	Y+9, r24	; 0x09
    24b2:	89 85       	ldd	r24, Y+9	; 0x09
    24b4:	98 2f       	mov	r25, r24
    24b6:	96 95       	lsr	r25
    24b8:	89 85       	ldd	r24, Y+9	; 0x09
    24ba:	98 2b       	or	r25, r24
    24bc:	89 85       	ldd	r24, Y+9	; 0x09
    24be:	86 95       	lsr	r24
    24c0:	86 95       	lsr	r24
    24c2:	98 2b       	or	r25, r24
    24c4:	89 85       	ldd	r24, Y+9	; 0x09
    24c6:	86 95       	lsr	r24
    24c8:	86 95       	lsr	r24
    24ca:	86 95       	lsr	r24
    24cc:	89 2b       	or	r24, r25
    24ce:	89 87       	std	Y+9, r24	; 0x09
    24d0:	89 85       	ldd	r24, Y+9	; 0x09
    24d2:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	88 2f       	mov	r24, r24
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	80 71       	andi	r24, 0x10	; 16
    24de:	99 27       	eor	r25, r25
    24e0:	88 0f       	add	r24, r24
    24e2:	99 1f       	adc	r25, r25
    24e4:	88 0f       	add	r24, r24
    24e6:	99 1f       	adc	r25, r25
    24e8:	88 0f       	add	r24, r24
    24ea:	99 1f       	adc	r25, r25
    24ec:	28 2f       	mov	r18, r24
    24ee:	8e 81       	ldd	r24, Y+6	; 0x06
    24f0:	88 2f       	mov	r24, r24
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	80 71       	andi	r24, 0x10	; 16
    24f6:	99 27       	eor	r25, r25
    24f8:	95 95       	asr	r25
    24fa:	87 95       	ror	r24
    24fc:	82 2b       	or	r24, r18
    24fe:	89 87       	std	Y+9, r24	; 0x09
    2500:	89 85       	ldd	r24, Y+9	; 0x09
    2502:	98 2f       	mov	r25, r24
    2504:	96 95       	lsr	r25
    2506:	89 85       	ldd	r24, Y+9	; 0x09
    2508:	98 2b       	or	r25, r24
    250a:	89 85       	ldd	r24, Y+9	; 0x09
    250c:	86 95       	lsr	r24
    250e:	86 95       	lsr	r24
    2510:	98 2b       	or	r25, r24
    2512:	89 85       	ldd	r24, Y+9	; 0x09
    2514:	86 95       	lsr	r24
    2516:	86 95       	lsr	r24
    2518:	86 95       	lsr	r24
    251a:	89 2b       	or	r24, r25
    251c:	89 87       	std	Y+9, r24	; 0x09
    251e:	89 85       	ldd	r24, Y+9	; 0x09
    2520:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    2524:	88 85       	ldd	r24, Y+8	; 0x08
    2526:	88 2f       	mov	r24, r24
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	80 72       	andi	r24, 0x20	; 32
    252c:	99 27       	eor	r25, r25
    252e:	88 0f       	add	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	28 2f       	mov	r18, r24
    2538:	8c 81       	ldd	r24, Y+4	; 0x04
    253a:	88 2f       	mov	r24, r24
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	80 72       	andi	r24, 0x20	; 32
    2540:	99 27       	eor	r25, r25
    2542:	95 95       	asr	r25
    2544:	87 95       	ror	r24
    2546:	95 95       	asr	r25
    2548:	87 95       	ror	r24
    254a:	82 2b       	or	r24, r18
    254c:	89 87       	std	Y+9, r24	; 0x09
    254e:	89 85       	ldd	r24, Y+9	; 0x09
    2550:	98 2f       	mov	r25, r24
    2552:	96 95       	lsr	r25
    2554:	89 85       	ldd	r24, Y+9	; 0x09
    2556:	98 2b       	or	r25, r24
    2558:	89 85       	ldd	r24, Y+9	; 0x09
    255a:	86 95       	lsr	r24
    255c:	86 95       	lsr	r24
    255e:	98 2b       	or	r25, r24
    2560:	89 85       	ldd	r24, Y+9	; 0x09
    2562:	86 95       	lsr	r24
    2564:	86 95       	lsr	r24
    2566:	86 95       	lsr	r24
    2568:	89 2b       	or	r24, r25
    256a:	89 87       	std	Y+9, r24	; 0x09
    256c:	89 85       	ldd	r24, Y+9	; 0x09
    256e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    2572:	8d 81       	ldd	r24, Y+5	; 0x05
    2574:	88 2f       	mov	r24, r24
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	80 72       	andi	r24, 0x20	; 32
    257a:	99 27       	eor	r25, r25
    257c:	88 0f       	add	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	88 0f       	add	r24, r24
    2582:	99 1f       	adc	r25, r25
    2584:	28 2f       	mov	r18, r24
    2586:	8e 81       	ldd	r24, Y+6	; 0x06
    2588:	88 2f       	mov	r24, r24
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	80 72       	andi	r24, 0x20	; 32
    258e:	99 27       	eor	r25, r25
    2590:	95 95       	asr	r25
    2592:	87 95       	ror	r24
    2594:	95 95       	asr	r25
    2596:	87 95       	ror	r24
    2598:	82 2b       	or	r24, r18
    259a:	89 87       	std	Y+9, r24	; 0x09
    259c:	89 85       	ldd	r24, Y+9	; 0x09
    259e:	98 2f       	mov	r25, r24
    25a0:	96 95       	lsr	r25
    25a2:	89 85       	ldd	r24, Y+9	; 0x09
    25a4:	98 2b       	or	r25, r24
    25a6:	89 85       	ldd	r24, Y+9	; 0x09
    25a8:	86 95       	lsr	r24
    25aa:	86 95       	lsr	r24
    25ac:	98 2b       	or	r25, r24
    25ae:	89 85       	ldd	r24, Y+9	; 0x09
    25b0:	86 95       	lsr	r24
    25b2:	86 95       	lsr	r24
    25b4:	86 95       	lsr	r24
    25b6:	89 2b       	or	r24, r25
    25b8:	89 87       	std	Y+9, r24	; 0x09
    25ba:	89 85       	ldd	r24, Y+9	; 0x09
    25bc:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    25c0:	88 85       	ldd	r24, Y+8	; 0x08
    25c2:	88 2f       	mov	r24, r24
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	80 74       	andi	r24, 0x40	; 64
    25c8:	99 27       	eor	r25, r25
    25ca:	88 0f       	add	r24, r24
    25cc:	99 1f       	adc	r25, r25
    25ce:	28 2f       	mov	r18, r24
    25d0:	8c 81       	ldd	r24, Y+4	; 0x04
    25d2:	88 2f       	mov	r24, r24
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	80 74       	andi	r24, 0x40	; 64
    25d8:	99 27       	eor	r25, r25
    25da:	95 95       	asr	r25
    25dc:	87 95       	ror	r24
    25de:	95 95       	asr	r25
    25e0:	87 95       	ror	r24
    25e2:	95 95       	asr	r25
    25e4:	87 95       	ror	r24
    25e6:	82 2b       	or	r24, r18
    25e8:	89 87       	std	Y+9, r24	; 0x09
    25ea:	89 85       	ldd	r24, Y+9	; 0x09
    25ec:	98 2f       	mov	r25, r24
    25ee:	96 95       	lsr	r25
    25f0:	89 85       	ldd	r24, Y+9	; 0x09
    25f2:	98 2b       	or	r25, r24
    25f4:	89 85       	ldd	r24, Y+9	; 0x09
    25f6:	86 95       	lsr	r24
    25f8:	86 95       	lsr	r24
    25fa:	98 2b       	or	r25, r24
    25fc:	89 85       	ldd	r24, Y+9	; 0x09
    25fe:	86 95       	lsr	r24
    2600:	86 95       	lsr	r24
    2602:	86 95       	lsr	r24
    2604:	89 2b       	or	r24, r25
    2606:	89 87       	std	Y+9, r24	; 0x09
    2608:	89 85       	ldd	r24, Y+9	; 0x09
    260a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    260e:	8d 81       	ldd	r24, Y+5	; 0x05
    2610:	88 2f       	mov	r24, r24
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	80 74       	andi	r24, 0x40	; 64
    2616:	99 27       	eor	r25, r25
    2618:	88 0f       	add	r24, r24
    261a:	99 1f       	adc	r25, r25
    261c:	28 2f       	mov	r18, r24
    261e:	8e 81       	ldd	r24, Y+6	; 0x06
    2620:	88 2f       	mov	r24, r24
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	80 74       	andi	r24, 0x40	; 64
    2626:	99 27       	eor	r25, r25
    2628:	95 95       	asr	r25
    262a:	87 95       	ror	r24
    262c:	95 95       	asr	r25
    262e:	87 95       	ror	r24
    2630:	95 95       	asr	r25
    2632:	87 95       	ror	r24
    2634:	82 2b       	or	r24, r18
    2636:	89 87       	std	Y+9, r24	; 0x09
    2638:	89 85       	ldd	r24, Y+9	; 0x09
    263a:	98 2f       	mov	r25, r24
    263c:	96 95       	lsr	r25
    263e:	89 85       	ldd	r24, Y+9	; 0x09
    2640:	98 2b       	or	r25, r24
    2642:	89 85       	ldd	r24, Y+9	; 0x09
    2644:	86 95       	lsr	r24
    2646:	86 95       	lsr	r24
    2648:	98 2b       	or	r25, r24
    264a:	89 85       	ldd	r24, Y+9	; 0x09
    264c:	86 95       	lsr	r24
    264e:	86 95       	lsr	r24
    2650:	86 95       	lsr	r24
    2652:	89 2b       	or	r24, r25
    2654:	89 87       	std	Y+9, r24	; 0x09
    2656:	89 85       	ldd	r24, Y+9	; 0x09
    2658:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    265c:	88 85       	ldd	r24, Y+8	; 0x08
    265e:	28 2f       	mov	r18, r24
    2660:	20 78       	andi	r18, 0x80	; 128
    2662:	8c 81       	ldd	r24, Y+4	; 0x04
    2664:	88 2f       	mov	r24, r24
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	80 78       	andi	r24, 0x80	; 128
    266a:	99 27       	eor	r25, r25
    266c:	95 95       	asr	r25
    266e:	87 95       	ror	r24
    2670:	95 95       	asr	r25
    2672:	87 95       	ror	r24
    2674:	95 95       	asr	r25
    2676:	87 95       	ror	r24
    2678:	95 95       	asr	r25
    267a:	87 95       	ror	r24
    267c:	82 2b       	or	r24, r18
    267e:	89 87       	std	Y+9, r24	; 0x09
    2680:	89 85       	ldd	r24, Y+9	; 0x09
    2682:	98 2f       	mov	r25, r24
    2684:	96 95       	lsr	r25
    2686:	89 85       	ldd	r24, Y+9	; 0x09
    2688:	98 2b       	or	r25, r24
    268a:	89 85       	ldd	r24, Y+9	; 0x09
    268c:	86 95       	lsr	r24
    268e:	86 95       	lsr	r24
    2690:	98 2b       	or	r25, r24
    2692:	89 85       	ldd	r24, Y+9	; 0x09
    2694:	86 95       	lsr	r24
    2696:	86 95       	lsr	r24
    2698:	86 95       	lsr	r24
    269a:	89 2b       	or	r24, r25
    269c:	89 87       	std	Y+9, r24	; 0x09
    269e:	89 85       	ldd	r24, Y+9	; 0x09
    26a0:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    26a4:	8d 81       	ldd	r24, Y+5	; 0x05
    26a6:	28 2f       	mov	r18, r24
    26a8:	20 78       	andi	r18, 0x80	; 128
    26aa:	8e 81       	ldd	r24, Y+6	; 0x06
    26ac:	88 2f       	mov	r24, r24
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	80 78       	andi	r24, 0x80	; 128
    26b2:	99 27       	eor	r25, r25
    26b4:	95 95       	asr	r25
    26b6:	87 95       	ror	r24
    26b8:	95 95       	asr	r25
    26ba:	87 95       	ror	r24
    26bc:	95 95       	asr	r25
    26be:	87 95       	ror	r24
    26c0:	95 95       	asr	r25
    26c2:	87 95       	ror	r24
    26c4:	82 2b       	or	r24, r18
    26c6:	89 87       	std	Y+9, r24	; 0x09
    26c8:	89 85       	ldd	r24, Y+9	; 0x09
    26ca:	98 2f       	mov	r25, r24
    26cc:	96 95       	lsr	r25
    26ce:	89 85       	ldd	r24, Y+9	; 0x09
    26d0:	98 2b       	or	r25, r24
    26d2:	89 85       	ldd	r24, Y+9	; 0x09
    26d4:	86 95       	lsr	r24
    26d6:	86 95       	lsr	r24
    26d8:	98 2b       	or	r25, r24
    26da:	89 85       	ldd	r24, Y+9	; 0x09
    26dc:	86 95       	lsr	r24
    26de:	86 95       	lsr	r24
    26e0:	86 95       	lsr	r24
    26e2:	89 2b       	or	r24, r25
    26e4:	89 87       	std	Y+9, r24	; 0x09
    26e6:	89 85       	ldd	r24, Y+9	; 0x09
    26e8:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    26ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    26ee:	8f 5f       	subi	r24, 0xFF	; 255
    26f0:	8c 87       	std	Y+12, r24	; 0x0c
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	8f 5f       	subi	r24, 0xFF	; 255
    26f6:	8b 83       	std	Y+3, r24	; 0x03
    26f8:	8b 81       	ldd	r24, Y+3	; 0x03
    26fa:	82 30       	cpi	r24, 0x02	; 2
    26fc:	08 f4       	brcc	.+2      	; 0x2700 <Show_Font57+0x68e>
    26fe:	ef cc       	rjmp	.-1570   	; 0x20de <Show_Font57+0x6c>
    2700:	84 e1       	ldi	r24, 0x14	; 20
    2702:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <Set_Remap_Format>
    2706:	2d 96       	adiw	r28, 0x0d	; 13
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	f8 94       	cli
    270c:	de bf       	out	0x3e, r29	; 62
    270e:	0f be       	out	0x3f, r0	; 63
    2710:	cd bf       	out	0x3d, r28	; 61
    2712:	df 91       	pop	r29
    2714:	cf 91       	pop	r28
    2716:	08 95       	ret

00002718 <Show_String>:
    2718:	cf 93       	push	r28
    271a:	df 93       	push	r29
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	27 97       	sbiw	r28, 0x07	; 7
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	f8 94       	cli
    2726:	de bf       	out	0x3e, r29	; 62
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	cd bf       	out	0x3d, r28	; 61
    272c:	8b 83       	std	Y+3, r24	; 0x03
    272e:	7d 83       	std	Y+5, r23	; 0x05
    2730:	6c 83       	std	Y+4, r22	; 0x04
    2732:	4e 83       	std	Y+6, r20	; 0x06
    2734:	2f 83       	std	Y+7, r18	; 0x07
    2736:	8c 81       	ldd	r24, Y+4	; 0x04
    2738:	9d 81       	ldd	r25, Y+5	; 0x05
    273a:	9a 83       	std	Y+2, r25	; 0x02
    273c:	89 83       	std	Y+1, r24	; 0x01
    273e:	2f 81       	ldd	r18, Y+7	; 0x07
    2740:	4e 81       	ldd	r20, Y+6	; 0x06
    2742:	60 e6       	ldi	r22, 0x60	; 96
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	0e 94 39 10 	call	0x2072	; 0x2072 <Show_Font57>
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	9a 81       	ldd	r25, Y+2	; 0x02
    274e:	fc 01       	movw	r30, r24
    2750:	80 81       	ld	r24, Z
    2752:	2f 81       	ldd	r18, Y+7	; 0x07
    2754:	4e 81       	ldd	r20, Y+6	; 0x06
    2756:	68 2f       	mov	r22, r24
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	0e 94 39 10 	call	0x2072	; 0x2072 <Show_Font57>
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	9a 81       	ldd	r25, Y+2	; 0x02
    2762:	01 96       	adiw	r24, 0x01	; 1
    2764:	9a 83       	std	Y+2, r25	; 0x02
    2766:	89 83       	std	Y+1, r24	; 0x01
    2768:	8e 81       	ldd	r24, Y+6	; 0x06
    276a:	8e 5f       	subi	r24, 0xFE	; 254
    276c:	8e 83       	std	Y+6, r24	; 0x06
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	9a 81       	ldd	r25, Y+2	; 0x02
    2772:	fc 01       	movw	r30, r24
    2774:	80 81       	ld	r24, Z
    2776:	88 23       	and	r24, r24
    2778:	09 f4       	brne	.+2      	; 0x277c <Show_String+0x64>
    277a:	01 c0       	rjmp	.+2      	; 0x277e <Show_String+0x66>
    277c:	e6 cf       	rjmp	.-52     	; 0x274a <Show_String+0x32>
    277e:	27 96       	adiw	r28, 0x07	; 7
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	de bf       	out	0x3e, r29	; 62
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	cd bf       	out	0x3d, r28	; 61
    278a:	df 91       	pop	r29
    278c:	cf 91       	pop	r28
    278e:	08 95       	ret

00002790 <Data_processing>:
    2790:	cf 93       	push	r28
    2792:	df 93       	push	r29
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	65 97       	sbiw	r28, 0x15	; 21
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	8d 8b       	std	Y+21, r24	; 0x15
    27a6:	8d 89       	ldd	r24, Y+21	; 0x15
    27a8:	80 78       	andi	r24, 0x80	; 128
    27aa:	89 83       	std	Y+1, r24	; 0x01
    27ac:	8d 89       	ldd	r24, Y+21	; 0x15
    27ae:	88 2f       	mov	r24, r24
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	80 74       	andi	r24, 0x40	; 64
    27b4:	99 27       	eor	r25, r25
    27b6:	95 95       	asr	r25
    27b8:	87 95       	ror	r24
    27ba:	95 95       	asr	r25
    27bc:	87 95       	ror	r24
    27be:	95 95       	asr	r25
    27c0:	87 95       	ror	r24
    27c2:	8a 83       	std	Y+2, r24	; 0x02
    27c4:	8d 89       	ldd	r24, Y+21	; 0x15
    27c6:	80 72       	andi	r24, 0x20	; 32
    27c8:	88 0f       	add	r24, r24
    27ca:	88 0f       	add	r24, r24
    27cc:	8b 83       	std	Y+3, r24	; 0x03
    27ce:	8d 89       	ldd	r24, Y+21	; 0x15
    27d0:	88 2f       	mov	r24, r24
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	80 71       	andi	r24, 0x10	; 16
    27d6:	99 27       	eor	r25, r25
    27d8:	95 95       	asr	r25
    27da:	87 95       	ror	r24
    27dc:	8c 83       	std	Y+4, r24	; 0x04
    27de:	8d 89       	ldd	r24, Y+21	; 0x15
    27e0:	88 70       	andi	r24, 0x08	; 8
    27e2:	82 95       	swap	r24
    27e4:	80 7f       	andi	r24, 0xF0	; 240
    27e6:	8d 83       	std	Y+5, r24	; 0x05
    27e8:	8d 89       	ldd	r24, Y+21	; 0x15
    27ea:	84 70       	andi	r24, 0x04	; 4
    27ec:	88 0f       	add	r24, r24
    27ee:	8e 83       	std	Y+6, r24	; 0x06
    27f0:	8d 89       	ldd	r24, Y+21	; 0x15
    27f2:	82 70       	andi	r24, 0x02	; 2
    27f4:	82 95       	swap	r24
    27f6:	88 0f       	add	r24, r24
    27f8:	88 0f       	add	r24, r24
    27fa:	80 7c       	andi	r24, 0xC0	; 192
    27fc:	8f 83       	std	Y+7, r24	; 0x07
    27fe:	8d 89       	ldd	r24, Y+21	; 0x15
    2800:	81 70       	andi	r24, 0x01	; 1
    2802:	88 0f       	add	r24, r24
    2804:	88 0f       	add	r24, r24
    2806:	88 0f       	add	r24, r24
    2808:	88 87       	std	Y+8, r24	; 0x08
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	98 2f       	mov	r25, r24
    280e:	96 95       	lsr	r25
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	98 2b       	or	r25, r24
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	86 95       	lsr	r24
    2818:	86 95       	lsr	r24
    281a:	98 2b       	or	r25, r24
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	86 95       	lsr	r24
    2820:	86 95       	lsr	r24
    2822:	86 95       	lsr	r24
    2824:	89 2b       	or	r24, r25
    2826:	89 87       	std	Y+9, r24	; 0x09
    2828:	8a 81       	ldd	r24, Y+2	; 0x02
    282a:	98 2f       	mov	r25, r24
    282c:	96 95       	lsr	r25
    282e:	8a 81       	ldd	r24, Y+2	; 0x02
    2830:	98 2b       	or	r25, r24
    2832:	8a 81       	ldd	r24, Y+2	; 0x02
    2834:	86 95       	lsr	r24
    2836:	86 95       	lsr	r24
    2838:	98 2b       	or	r25, r24
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	86 95       	lsr	r24
    283e:	86 95       	lsr	r24
    2840:	86 95       	lsr	r24
    2842:	89 2b       	or	r24, r25
    2844:	8a 87       	std	Y+10, r24	; 0x0a
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	98 2f       	mov	r25, r24
    284a:	96 95       	lsr	r25
    284c:	8b 81       	ldd	r24, Y+3	; 0x03
    284e:	98 2b       	or	r25, r24
    2850:	8b 81       	ldd	r24, Y+3	; 0x03
    2852:	86 95       	lsr	r24
    2854:	86 95       	lsr	r24
    2856:	98 2b       	or	r25, r24
    2858:	8b 81       	ldd	r24, Y+3	; 0x03
    285a:	86 95       	lsr	r24
    285c:	86 95       	lsr	r24
    285e:	86 95       	lsr	r24
    2860:	89 2b       	or	r24, r25
    2862:	8b 87       	std	Y+11, r24	; 0x0b
    2864:	8c 81       	ldd	r24, Y+4	; 0x04
    2866:	98 2f       	mov	r25, r24
    2868:	96 95       	lsr	r25
    286a:	8c 81       	ldd	r24, Y+4	; 0x04
    286c:	98 2b       	or	r25, r24
    286e:	8c 81       	ldd	r24, Y+4	; 0x04
    2870:	86 95       	lsr	r24
    2872:	86 95       	lsr	r24
    2874:	98 2b       	or	r25, r24
    2876:	8c 81       	ldd	r24, Y+4	; 0x04
    2878:	86 95       	lsr	r24
    287a:	86 95       	lsr	r24
    287c:	86 95       	lsr	r24
    287e:	89 2b       	or	r24, r25
    2880:	8c 87       	std	Y+12, r24	; 0x0c
    2882:	8d 81       	ldd	r24, Y+5	; 0x05
    2884:	98 2f       	mov	r25, r24
    2886:	96 95       	lsr	r25
    2888:	8d 81       	ldd	r24, Y+5	; 0x05
    288a:	98 2b       	or	r25, r24
    288c:	8d 81       	ldd	r24, Y+5	; 0x05
    288e:	86 95       	lsr	r24
    2890:	86 95       	lsr	r24
    2892:	98 2b       	or	r25, r24
    2894:	8d 81       	ldd	r24, Y+5	; 0x05
    2896:	86 95       	lsr	r24
    2898:	86 95       	lsr	r24
    289a:	86 95       	lsr	r24
    289c:	89 2b       	or	r24, r25
    289e:	8d 87       	std	Y+13, r24	; 0x0d
    28a0:	8e 81       	ldd	r24, Y+6	; 0x06
    28a2:	98 2f       	mov	r25, r24
    28a4:	96 95       	lsr	r25
    28a6:	8e 81       	ldd	r24, Y+6	; 0x06
    28a8:	98 2b       	or	r25, r24
    28aa:	8e 81       	ldd	r24, Y+6	; 0x06
    28ac:	86 95       	lsr	r24
    28ae:	86 95       	lsr	r24
    28b0:	98 2b       	or	r25, r24
    28b2:	8e 81       	ldd	r24, Y+6	; 0x06
    28b4:	86 95       	lsr	r24
    28b6:	86 95       	lsr	r24
    28b8:	86 95       	lsr	r24
    28ba:	89 2b       	or	r24, r25
    28bc:	8e 87       	std	Y+14, r24	; 0x0e
    28be:	8f 81       	ldd	r24, Y+7	; 0x07
    28c0:	98 2f       	mov	r25, r24
    28c2:	96 95       	lsr	r25
    28c4:	8f 81       	ldd	r24, Y+7	; 0x07
    28c6:	98 2b       	or	r25, r24
    28c8:	8f 81       	ldd	r24, Y+7	; 0x07
    28ca:	86 95       	lsr	r24
    28cc:	86 95       	lsr	r24
    28ce:	98 2b       	or	r25, r24
    28d0:	8f 81       	ldd	r24, Y+7	; 0x07
    28d2:	86 95       	lsr	r24
    28d4:	86 95       	lsr	r24
    28d6:	86 95       	lsr	r24
    28d8:	89 2b       	or	r24, r25
    28da:	8f 87       	std	Y+15, r24	; 0x0f
    28dc:	88 85       	ldd	r24, Y+8	; 0x08
    28de:	98 2f       	mov	r25, r24
    28e0:	96 95       	lsr	r25
    28e2:	88 85       	ldd	r24, Y+8	; 0x08
    28e4:	98 2b       	or	r25, r24
    28e6:	88 85       	ldd	r24, Y+8	; 0x08
    28e8:	86 95       	lsr	r24
    28ea:	86 95       	lsr	r24
    28ec:	98 2b       	or	r25, r24
    28ee:	88 85       	ldd	r24, Y+8	; 0x08
    28f0:	86 95       	lsr	r24
    28f2:	86 95       	lsr	r24
    28f4:	86 95       	lsr	r24
    28f6:	89 2b       	or	r24, r25
    28f8:	88 8b       	std	Y+16, r24	; 0x10
    28fa:	99 85       	ldd	r25, Y+9	; 0x09
    28fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    28fe:	89 2b       	or	r24, r25
    2900:	89 8b       	std	Y+17, r24	; 0x11
    2902:	9b 85       	ldd	r25, Y+11	; 0x0b
    2904:	8c 85       	ldd	r24, Y+12	; 0x0c
    2906:	89 2b       	or	r24, r25
    2908:	8a 8b       	std	Y+18, r24	; 0x12
    290a:	9d 85       	ldd	r25, Y+13	; 0x0d
    290c:	8e 85       	ldd	r24, Y+14	; 0x0e
    290e:	89 2b       	or	r24, r25
    2910:	8b 8b       	std	Y+19, r24	; 0x13
    2912:	9f 85       	ldd	r25, Y+15	; 0x0f
    2914:	88 89       	ldd	r24, Y+16	; 0x10
    2916:	89 2b       	or	r24, r25
    2918:	8c 8b       	std	Y+20, r24	; 0x14
    291a:	89 89       	ldd	r24, Y+17	; 0x11
    291c:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    2920:	8a 89       	ldd	r24, Y+18	; 0x12
    2922:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    2926:	8b 89       	ldd	r24, Y+19	; 0x13
    2928:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    292c:	8c 89       	ldd	r24, Y+20	; 0x14
    292e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Write_Data>
    2932:	65 96       	adiw	r28, 0x15	; 21
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	df 91       	pop	r29
    2940:	cf 91       	pop	r28
    2942:	08 95       	ret

00002944 <Display_Picture>:
    2944:	cf 93       	push	r28
    2946:	df 93       	push	r29
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	27 97       	sbiw	r28, 0x07	; 7
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	f8 94       	cli
    2952:	de bf       	out	0x3e, r29	; 62
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	cd bf       	out	0x3d, r28	; 61
    2958:	9f 83       	std	Y+7, r25	; 0x07
    295a:	8e 83       	std	Y+6, r24	; 0x06
    295c:	63 e9       	ldi	r22, 0x93	; 147
    295e:	8c e1       	ldi	r24, 0x1C	; 28
    2960:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Set_Column_Address>
    2964:	6f e7       	ldi	r22, 0x7F	; 127
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <Set_Row_Address>
    296c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <Set_Write_RAM>
    2970:	19 82       	std	Y+1, r1	; 0x01
    2972:	2b c0       	rjmp	.+86     	; 0x29ca <Display_Picture+0x86>
    2974:	1a 82       	std	Y+2, r1	; 0x02
    2976:	23 c0       	rjmp	.+70     	; 0x29be <Display_Picture+0x7a>
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	88 2f       	mov	r24, r24
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	9c 01       	movw	r18, r24
    2980:	22 0f       	add	r18, r18
    2982:	33 1f       	adc	r19, r19
    2984:	22 95       	swap	r18
    2986:	32 95       	swap	r19
    2988:	30 7f       	andi	r19, 0xF0	; 240
    298a:	32 27       	eor	r19, r18
    298c:	20 7f       	andi	r18, 0xF0	; 240
    298e:	32 27       	eor	r19, r18
    2990:	8a 81       	ldd	r24, Y+2	; 0x02
    2992:	88 2f       	mov	r24, r24
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	82 0f       	add	r24, r18
    2998:	93 1f       	adc	r25, r19
    299a:	9c 01       	movw	r18, r24
    299c:	8e 81       	ldd	r24, Y+6	; 0x06
    299e:	9f 81       	ldd	r25, Y+7	; 0x07
    29a0:	82 0f       	add	r24, r18
    29a2:	93 1f       	adc	r25, r19
    29a4:	9c 83       	std	Y+4, r25	; 0x04
    29a6:	8b 83       	std	Y+3, r24	; 0x03
    29a8:	8b 81       	ldd	r24, Y+3	; 0x03
    29aa:	9c 81       	ldd	r25, Y+4	; 0x04
    29ac:	fc 01       	movw	r30, r24
    29ae:	84 91       	lpm	r24, Z
    29b0:	8d 83       	std	Y+5, r24	; 0x05
    29b2:	8d 81       	ldd	r24, Y+5	; 0x05
    29b4:	0e 94 c8 13 	call	0x2790	; 0x2790 <Data_processing>
    29b8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ba:	8f 5f       	subi	r24, 0xFF	; 255
    29bc:	8a 83       	std	Y+2, r24	; 0x02
    29be:	8a 81       	ldd	r24, Y+2	; 0x02
    29c0:	8c 33       	cpi	r24, 0x3C	; 60
    29c2:	d0 f2       	brcs	.-76     	; 0x2978 <Display_Picture+0x34>
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	8f 5f       	subi	r24, 0xFF	; 255
    29c8:	89 83       	std	Y+1, r24	; 0x01
    29ca:	89 81       	ldd	r24, Y+1	; 0x01
    29cc:	80 34       	cpi	r24, 0x40	; 64
    29ce:	90 f2       	brcs	.-92     	; 0x2974 <Display_Picture+0x30>
    29d0:	00 00       	nop
    29d2:	27 96       	adiw	r28, 0x07	; 7
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	f8 94       	cli
    29d8:	de bf       	out	0x3e, r29	; 62
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	cd bf       	out	0x3d, r28	; 61
    29de:	df 91       	pop	r29
    29e0:	cf 91       	pop	r28
    29e2:	08 95       	ret

000029e4 <Set_Linear_Gray_Scale_Table>:


void Set_Linear_Gray_Scale_Table()
{
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
	Write_Command(0xB9);			// Set Default Linear Gray Scale Table
    29ec:	89 eb       	ldi	r24, 0xB9	; 185
    29ee:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Write_Command>
}
    29f2:	df 91       	pop	r29
    29f4:	cf 91       	pop	r28
    29f6:	08 95       	ret

000029f8 <OLED_Init>:

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  Initialization
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void OLED_Init()
{
    29f8:	cf 93       	push	r28
    29fa:	df 93       	push	r29
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
	
	
	unsigned char i;

	RESET_low;
    2a00:	85 e2       	ldi	r24, 0x25	; 37
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	25 e2       	ldi	r18, 0x25	; 37
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	f9 01       	movw	r30, r18
    2a0a:	20 81       	ld	r18, Z
    2a0c:	2f 7b       	andi	r18, 0xBF	; 191
    2a0e:	fc 01       	movw	r30, r24
    2a10:	20 83       	st	Z, r18
	Delay(10);
    2a12:	8a e0       	ldi	r24, 0x0A	; 10
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <Delay>
	
	RESET_high;
    2a1a:	85 e2       	ldi	r24, 0x25	; 37
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	25 e2       	ldi	r18, 0x25	; 37
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	f9 01       	movw	r30, r18
    2a24:	20 81       	ld	r18, Z
    2a26:	20 64       	ori	r18, 0x40	; 64
    2a28:	fc 01       	movw	r30, r24
    2a2a:	20 83       	st	Z, r18


	Set_Command_Lock(0x12);			// Unlock Basic Commands (0x12/0x16)
    2a2c:	82 e1       	ldi	r24, 0x12	; 18
    2a2e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <Set_Command_Lock>
	Set_Display_On_Off(0x00);		// Display Off (0x00/0x01)
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <Set_Display_On_Off>
	Set_Display_Clock(0x91);		// Set Clock as 80 Frames/Sec
    2a38:	81 e9       	ldi	r24, 0x91	; 145
    2a3a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <Set_Display_Clock>
	Set_Multiplex_Ratio(0x3F);		// 1/64 Duty (0x0F~0x3F)
    2a3e:	8f e3       	ldi	r24, 0x3F	; 63
    2a40:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Set_Multiplex_Ratio>
	Set_Display_Offset(0x00);		// Shift Mapping RAM Counter (0x00~0x3F)
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <Set_Display_Offset>
	Set_Start_Line(0x00);			// Set Mapping RAM Display Start Line (0x00~0x7F)
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <Set_Start_Line>
	Set_Remap_Format(0x14);			// Set Horizontal Address Increment
    2a50:	84 e1       	ldi	r24, 0x14	; 20
    2a52:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <Set_Remap_Format>
	//     Column Address 0 Mapped to SEG0
	//     Disable Nibble Remap
	//     Scan from COM[N-1] to COM0
	//     Disable COM Split Odd Even
	//     Enable Dual COM Line Mode
	Set_GPIO(0x00);				// Disable GPIO Pins Input
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Set_GPIO>
	Set_Function_Selection(0x01);		// Enable Internal VDD Regulator
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <Set_Function_Selection>
	Set_Display_Enhancement_A(0xA0,0xFD);	// Enable External VSL
    2a62:	6d ef       	ldi	r22, 0xFD	; 253
    2a64:	80 ea       	ldi	r24, 0xA0	; 160
    2a66:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <Set_Display_Enhancement_A>
	// Set Low Gray Scale Enhancement
	Set_Contrast_Current(0x7F);		// Set Segment Output Current
    2a6a:	8f e7       	ldi	r24, 0x7F	; 127
    2a6c:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <Set_Contrast_Current>
	Set_Master_Current(Brightness);		// Set Scale Factor of Segment Output Current Control
    2a70:	8f e0       	ldi	r24, 0x0F	; 15
    2a72:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <Set_Master_Current>
	//Set_Gray_Scale_Table();			// Set Pulse Width for Gray Scale Table
	Set_Linear_Gray_Scale_Table();
    2a76:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <Set_Linear_Gray_Scale_Table>
	Set_Phase_Length(0xE2);			// Set Phase 1 as 5 Clocks & Phase 2 as 14 Clocks
    2a7a:	82 ee       	ldi	r24, 0xE2	; 226
    2a7c:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <Set_Phase_Length>
	Set_Display_Enhancement_B(0x20);	// Enhance Driving Scheme Capability (0x00/0x20)
    2a80:	80 e2       	ldi	r24, 0x20	; 32
    2a82:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <Set_Display_Enhancement_B>
	Set_Precharge_Voltage(0x1F);		// Set Pre-Charge Voltage Level as 0.60*VCC
    2a86:	8f e1       	ldi	r24, 0x1F	; 31
    2a88:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Set_Precharge_Voltage>
	Set_Precharge_Period(0x08);		// Set Second Pre-Charge Period as 8 Clocks
    2a8c:	88 e0       	ldi	r24, 0x08	; 8
    2a8e:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <Set_Precharge_Period>
	Set_VCOMH(0x07);			// Set Common Pins Deselect Voltage Level as 0.86*VCC
    2a92:	87 e0       	ldi	r24, 0x07	; 7
    2a94:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <Set_VCOMH>
	Set_Display_Mode(0x02);			// Normal Display Mode (0x00/0x01/0x02/0x03)
    2a98:	82 e0       	ldi	r24, 0x02	; 2
    2a9a:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <Set_Display_Mode>
	Set_Partial_Display(0x01,0x00,0x00);	// Disable Partial Display
    2a9e:	40 e0       	ldi	r20, 0x00	; 0
    2aa0:	60 e0       	ldi	r22, 0x00	; 0
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <Set_Partial_Display>

	Fill_RAM(0x00);				// Clear Screen
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	0e 94 0f 10 	call	0x201e	; 0x201e <Fill_RAM>

	Set_Display_On_Off(0x01);		// Display On (0x00/0x01)
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <Set_Display_On_Off>
	
	
    2ab4:	df 91       	pop	r29
    2ab6:	cf 91       	pop	r28
    2ab8:	08 95       	ret

00002aba <__cmpsf2>:
    2aba:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__fp_cmp>
    2abe:	08 f4       	brcc	.+2      	; 0x2ac2 <__cmpsf2+0x8>
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	08 95       	ret

00002ac4 <__fixunssfsi>:
    2ac4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__fp_splitA>
    2ac8:	88 f0       	brcs	.+34     	; 0x2aec <__fixunssfsi+0x28>
    2aca:	9f 57       	subi	r25, 0x7F	; 127
    2acc:	98 f0       	brcs	.+38     	; 0x2af4 <__fixunssfsi+0x30>
    2ace:	b9 2f       	mov	r27, r25
    2ad0:	99 27       	eor	r25, r25
    2ad2:	b7 51       	subi	r27, 0x17	; 23
    2ad4:	b0 f0       	brcs	.+44     	; 0x2b02 <__fixunssfsi+0x3e>
    2ad6:	e1 f0       	breq	.+56     	; 0x2b10 <__fixunssfsi+0x4c>
    2ad8:	66 0f       	add	r22, r22
    2ada:	77 1f       	adc	r23, r23
    2adc:	88 1f       	adc	r24, r24
    2ade:	99 1f       	adc	r25, r25
    2ae0:	1a f0       	brmi	.+6      	; 0x2ae8 <__fixunssfsi+0x24>
    2ae2:	ba 95       	dec	r27
    2ae4:	c9 f7       	brne	.-14     	; 0x2ad8 <__fixunssfsi+0x14>
    2ae6:	14 c0       	rjmp	.+40     	; 0x2b10 <__fixunssfsi+0x4c>
    2ae8:	b1 30       	cpi	r27, 0x01	; 1
    2aea:	91 f0       	breq	.+36     	; 0x2b10 <__fixunssfsi+0x4c>
    2aec:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__fp_zero>
    2af0:	b1 e0       	ldi	r27, 0x01	; 1
    2af2:	08 95       	ret
    2af4:	0c 94 ff 15 	jmp	0x2bfe	; 0x2bfe <__fp_zero>
    2af8:	67 2f       	mov	r22, r23
    2afa:	78 2f       	mov	r23, r24
    2afc:	88 27       	eor	r24, r24
    2afe:	b8 5f       	subi	r27, 0xF8	; 248
    2b00:	39 f0       	breq	.+14     	; 0x2b10 <__fixunssfsi+0x4c>
    2b02:	b9 3f       	cpi	r27, 0xF9	; 249
    2b04:	cc f3       	brlt	.-14     	; 0x2af8 <__fixunssfsi+0x34>
    2b06:	86 95       	lsr	r24
    2b08:	77 95       	ror	r23
    2b0a:	67 95       	ror	r22
    2b0c:	b3 95       	inc	r27
    2b0e:	d9 f7       	brne	.-10     	; 0x2b06 <__fixunssfsi+0x42>
    2b10:	3e f4       	brtc	.+14     	; 0x2b20 <__fixunssfsi+0x5c>
    2b12:	90 95       	com	r25
    2b14:	80 95       	com	r24
    2b16:	70 95       	com	r23
    2b18:	61 95       	neg	r22
    2b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b20:	08 95       	ret

00002b22 <__fp_cmp>:
    2b22:	99 0f       	add	r25, r25
    2b24:	00 08       	sbc	r0, r0
    2b26:	55 0f       	add	r21, r21
    2b28:	aa 0b       	sbc	r26, r26
    2b2a:	e0 e8       	ldi	r30, 0x80	; 128
    2b2c:	fe ef       	ldi	r31, 0xFE	; 254
    2b2e:	16 16       	cp	r1, r22
    2b30:	17 06       	cpc	r1, r23
    2b32:	e8 07       	cpc	r30, r24
    2b34:	f9 07       	cpc	r31, r25
    2b36:	c0 f0       	brcs	.+48     	; 0x2b68 <__fp_cmp+0x46>
    2b38:	12 16       	cp	r1, r18
    2b3a:	13 06       	cpc	r1, r19
    2b3c:	e4 07       	cpc	r30, r20
    2b3e:	f5 07       	cpc	r31, r21
    2b40:	98 f0       	brcs	.+38     	; 0x2b68 <__fp_cmp+0x46>
    2b42:	62 1b       	sub	r22, r18
    2b44:	73 0b       	sbc	r23, r19
    2b46:	84 0b       	sbc	r24, r20
    2b48:	95 0b       	sbc	r25, r21
    2b4a:	39 f4       	brne	.+14     	; 0x2b5a <__fp_cmp+0x38>
    2b4c:	0a 26       	eor	r0, r26
    2b4e:	61 f0       	breq	.+24     	; 0x2b68 <__fp_cmp+0x46>
    2b50:	23 2b       	or	r18, r19
    2b52:	24 2b       	or	r18, r20
    2b54:	25 2b       	or	r18, r21
    2b56:	21 f4       	brne	.+8      	; 0x2b60 <__fp_cmp+0x3e>
    2b58:	08 95       	ret
    2b5a:	0a 26       	eor	r0, r26
    2b5c:	09 f4       	brne	.+2      	; 0x2b60 <__fp_cmp+0x3e>
    2b5e:	a1 40       	sbci	r26, 0x01	; 1
    2b60:	a6 95       	lsr	r26
    2b62:	8f ef       	ldi	r24, 0xFF	; 255
    2b64:	81 1d       	adc	r24, r1
    2b66:	81 1d       	adc	r24, r1
    2b68:	08 95       	ret

00002b6a <__fp_inf>:
    2b6a:	97 f9       	bld	r25, 7
    2b6c:	9f 67       	ori	r25, 0x7F	; 127
    2b6e:	80 e8       	ldi	r24, 0x80	; 128
    2b70:	70 e0       	ldi	r23, 0x00	; 0
    2b72:	60 e0       	ldi	r22, 0x00	; 0
    2b74:	08 95       	ret

00002b76 <__fp_nan>:
    2b76:	9f ef       	ldi	r25, 0xFF	; 255
    2b78:	80 ec       	ldi	r24, 0xC0	; 192
    2b7a:	08 95       	ret

00002b7c <__fp_pscA>:
    2b7c:	00 24       	eor	r0, r0
    2b7e:	0a 94       	dec	r0
    2b80:	16 16       	cp	r1, r22
    2b82:	17 06       	cpc	r1, r23
    2b84:	18 06       	cpc	r1, r24
    2b86:	09 06       	cpc	r0, r25
    2b88:	08 95       	ret

00002b8a <__fp_pscB>:
    2b8a:	00 24       	eor	r0, r0
    2b8c:	0a 94       	dec	r0
    2b8e:	12 16       	cp	r1, r18
    2b90:	13 06       	cpc	r1, r19
    2b92:	14 06       	cpc	r1, r20
    2b94:	05 06       	cpc	r0, r21
    2b96:	08 95       	ret

00002b98 <__fp_round>:
    2b98:	09 2e       	mov	r0, r25
    2b9a:	03 94       	inc	r0
    2b9c:	00 0c       	add	r0, r0
    2b9e:	11 f4       	brne	.+4      	; 0x2ba4 <__fp_round+0xc>
    2ba0:	88 23       	and	r24, r24
    2ba2:	52 f0       	brmi	.+20     	; 0x2bb8 <__fp_round+0x20>
    2ba4:	bb 0f       	add	r27, r27
    2ba6:	40 f4       	brcc	.+16     	; 0x2bb8 <__fp_round+0x20>
    2ba8:	bf 2b       	or	r27, r31
    2baa:	11 f4       	brne	.+4      	; 0x2bb0 <__fp_round+0x18>
    2bac:	60 ff       	sbrs	r22, 0
    2bae:	04 c0       	rjmp	.+8      	; 0x2bb8 <__fp_round+0x20>
    2bb0:	6f 5f       	subi	r22, 0xFF	; 255
    2bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    2bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb8:	08 95       	ret

00002bba <__fp_split3>:
    2bba:	57 fd       	sbrc	r21, 7
    2bbc:	90 58       	subi	r25, 0x80	; 128
    2bbe:	44 0f       	add	r20, r20
    2bc0:	55 1f       	adc	r21, r21
    2bc2:	59 f0       	breq	.+22     	; 0x2bda <__fp_splitA+0x10>
    2bc4:	5f 3f       	cpi	r21, 0xFF	; 255
    2bc6:	71 f0       	breq	.+28     	; 0x2be4 <__fp_splitA+0x1a>
    2bc8:	47 95       	ror	r20

00002bca <__fp_splitA>:
    2bca:	88 0f       	add	r24, r24
    2bcc:	97 fb       	bst	r25, 7
    2bce:	99 1f       	adc	r25, r25
    2bd0:	61 f0       	breq	.+24     	; 0x2bea <__fp_splitA+0x20>
    2bd2:	9f 3f       	cpi	r25, 0xFF	; 255
    2bd4:	79 f0       	breq	.+30     	; 0x2bf4 <__fp_splitA+0x2a>
    2bd6:	87 95       	ror	r24
    2bd8:	08 95       	ret
    2bda:	12 16       	cp	r1, r18
    2bdc:	13 06       	cpc	r1, r19
    2bde:	14 06       	cpc	r1, r20
    2be0:	55 1f       	adc	r21, r21
    2be2:	f2 cf       	rjmp	.-28     	; 0x2bc8 <__fp_split3+0xe>
    2be4:	46 95       	lsr	r20
    2be6:	f1 df       	rcall	.-30     	; 0x2bca <__fp_splitA>
    2be8:	08 c0       	rjmp	.+16     	; 0x2bfa <__fp_splitA+0x30>
    2bea:	16 16       	cp	r1, r22
    2bec:	17 06       	cpc	r1, r23
    2bee:	18 06       	cpc	r1, r24
    2bf0:	99 1f       	adc	r25, r25
    2bf2:	f1 cf       	rjmp	.-30     	; 0x2bd6 <__fp_splitA+0xc>
    2bf4:	86 95       	lsr	r24
    2bf6:	71 05       	cpc	r23, r1
    2bf8:	61 05       	cpc	r22, r1
    2bfa:	08 94       	sec
    2bfc:	08 95       	ret

00002bfe <__fp_zero>:
    2bfe:	e8 94       	clt

00002c00 <__fp_szero>:
    2c00:	bb 27       	eor	r27, r27
    2c02:	66 27       	eor	r22, r22
    2c04:	77 27       	eor	r23, r23
    2c06:	cb 01       	movw	r24, r22
    2c08:	97 f9       	bld	r25, 7
    2c0a:	08 95       	ret

00002c0c <__gesf2>:
    2c0c:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__fp_cmp>
    2c10:	08 f4       	brcc	.+2      	; 0x2c14 <__gesf2+0x8>
    2c12:	8f ef       	ldi	r24, 0xFF	; 255
    2c14:	08 95       	ret

00002c16 <__mulsf3>:
    2c16:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <__mulsf3x>
    2c1a:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <__fp_round>
    2c1e:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__fp_pscA>
    2c22:	38 f0       	brcs	.+14     	; 0x2c32 <__mulsf3+0x1c>
    2c24:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <__fp_pscB>
    2c28:	20 f0       	brcs	.+8      	; 0x2c32 <__mulsf3+0x1c>
    2c2a:	95 23       	and	r25, r21
    2c2c:	11 f0       	breq	.+4      	; 0x2c32 <__mulsf3+0x1c>
    2c2e:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__fp_inf>
    2c32:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__fp_nan>
    2c36:	11 24       	eor	r1, r1
    2c38:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__fp_szero>

00002c3c <__mulsf3x>:
    2c3c:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__fp_split3>
    2c40:	70 f3       	brcs	.-36     	; 0x2c1e <__mulsf3+0x8>

00002c42 <__mulsf3_pse>:
    2c42:	95 9f       	mul	r25, r21
    2c44:	c1 f3       	breq	.-16     	; 0x2c36 <__mulsf3+0x20>
    2c46:	95 0f       	add	r25, r21
    2c48:	50 e0       	ldi	r21, 0x00	; 0
    2c4a:	55 1f       	adc	r21, r21
    2c4c:	62 9f       	mul	r22, r18
    2c4e:	f0 01       	movw	r30, r0
    2c50:	72 9f       	mul	r23, r18
    2c52:	bb 27       	eor	r27, r27
    2c54:	f0 0d       	add	r31, r0
    2c56:	b1 1d       	adc	r27, r1
    2c58:	63 9f       	mul	r22, r19
    2c5a:	aa 27       	eor	r26, r26
    2c5c:	f0 0d       	add	r31, r0
    2c5e:	b1 1d       	adc	r27, r1
    2c60:	aa 1f       	adc	r26, r26
    2c62:	64 9f       	mul	r22, r20
    2c64:	66 27       	eor	r22, r22
    2c66:	b0 0d       	add	r27, r0
    2c68:	a1 1d       	adc	r26, r1
    2c6a:	66 1f       	adc	r22, r22
    2c6c:	82 9f       	mul	r24, r18
    2c6e:	22 27       	eor	r18, r18
    2c70:	b0 0d       	add	r27, r0
    2c72:	a1 1d       	adc	r26, r1
    2c74:	62 1f       	adc	r22, r18
    2c76:	73 9f       	mul	r23, r19
    2c78:	b0 0d       	add	r27, r0
    2c7a:	a1 1d       	adc	r26, r1
    2c7c:	62 1f       	adc	r22, r18
    2c7e:	83 9f       	mul	r24, r19
    2c80:	a0 0d       	add	r26, r0
    2c82:	61 1d       	adc	r22, r1
    2c84:	22 1f       	adc	r18, r18
    2c86:	74 9f       	mul	r23, r20
    2c88:	33 27       	eor	r19, r19
    2c8a:	a0 0d       	add	r26, r0
    2c8c:	61 1d       	adc	r22, r1
    2c8e:	23 1f       	adc	r18, r19
    2c90:	84 9f       	mul	r24, r20
    2c92:	60 0d       	add	r22, r0
    2c94:	21 1d       	adc	r18, r1
    2c96:	82 2f       	mov	r24, r18
    2c98:	76 2f       	mov	r23, r22
    2c9a:	6a 2f       	mov	r22, r26
    2c9c:	11 24       	eor	r1, r1
    2c9e:	9f 57       	subi	r25, 0x7F	; 127
    2ca0:	50 40       	sbci	r21, 0x00	; 0
    2ca2:	9a f0       	brmi	.+38     	; 0x2cca <__mulsf3_pse+0x88>
    2ca4:	f1 f0       	breq	.+60     	; 0x2ce2 <__mulsf3_pse+0xa0>
    2ca6:	88 23       	and	r24, r24
    2ca8:	4a f0       	brmi	.+18     	; 0x2cbc <__mulsf3_pse+0x7a>
    2caa:	ee 0f       	add	r30, r30
    2cac:	ff 1f       	adc	r31, r31
    2cae:	bb 1f       	adc	r27, r27
    2cb0:	66 1f       	adc	r22, r22
    2cb2:	77 1f       	adc	r23, r23
    2cb4:	88 1f       	adc	r24, r24
    2cb6:	91 50       	subi	r25, 0x01	; 1
    2cb8:	50 40       	sbci	r21, 0x00	; 0
    2cba:	a9 f7       	brne	.-22     	; 0x2ca6 <__mulsf3_pse+0x64>
    2cbc:	9e 3f       	cpi	r25, 0xFE	; 254
    2cbe:	51 05       	cpc	r21, r1
    2cc0:	80 f0       	brcs	.+32     	; 0x2ce2 <__mulsf3_pse+0xa0>
    2cc2:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__fp_inf>
    2cc6:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__fp_szero>
    2cca:	5f 3f       	cpi	r21, 0xFF	; 255
    2ccc:	e4 f3       	brlt	.-8      	; 0x2cc6 <__mulsf3_pse+0x84>
    2cce:	98 3e       	cpi	r25, 0xE8	; 232
    2cd0:	d4 f3       	brlt	.-12     	; 0x2cc6 <__mulsf3_pse+0x84>
    2cd2:	86 95       	lsr	r24
    2cd4:	77 95       	ror	r23
    2cd6:	67 95       	ror	r22
    2cd8:	b7 95       	ror	r27
    2cda:	f7 95       	ror	r31
    2cdc:	e7 95       	ror	r30
    2cde:	9f 5f       	subi	r25, 0xFF	; 255
    2ce0:	c1 f7       	brne	.-16     	; 0x2cd2 <__mulsf3_pse+0x90>
    2ce2:	fe 2b       	or	r31, r30
    2ce4:	88 0f       	add	r24, r24
    2ce6:	91 1d       	adc	r25, r1
    2ce8:	96 95       	lsr	r25
    2cea:	87 95       	ror	r24
    2cec:	97 f9       	bld	r25, 7
    2cee:	08 95       	ret

00002cf0 <__udivmodhi4>:
    2cf0:	aa 1b       	sub	r26, r26
    2cf2:	bb 1b       	sub	r27, r27
    2cf4:	51 e1       	ldi	r21, 0x11	; 17
    2cf6:	07 c0       	rjmp	.+14     	; 0x2d06 <__udivmodhi4_ep>

00002cf8 <__udivmodhi4_loop>:
    2cf8:	aa 1f       	adc	r26, r26
    2cfa:	bb 1f       	adc	r27, r27
    2cfc:	a6 17       	cp	r26, r22
    2cfe:	b7 07       	cpc	r27, r23
    2d00:	10 f0       	brcs	.+4      	; 0x2d06 <__udivmodhi4_ep>
    2d02:	a6 1b       	sub	r26, r22
    2d04:	b7 0b       	sbc	r27, r23

00002d06 <__udivmodhi4_ep>:
    2d06:	88 1f       	adc	r24, r24
    2d08:	99 1f       	adc	r25, r25
    2d0a:	5a 95       	dec	r21
    2d0c:	a9 f7       	brne	.-22     	; 0x2cf8 <__udivmodhi4_loop>
    2d0e:	80 95       	com	r24
    2d10:	90 95       	com	r25
    2d12:	bc 01       	movw	r22, r24
    2d14:	cd 01       	movw	r24, r26
    2d16:	08 95       	ret

00002d18 <__divmodhi4>:
    2d18:	97 fb       	bst	r25, 7
    2d1a:	07 2e       	mov	r0, r23
    2d1c:	16 f4       	brtc	.+4      	; 0x2d22 <__divmodhi4+0xa>
    2d1e:	00 94       	com	r0
    2d20:	07 d0       	rcall	.+14     	; 0x2d30 <__divmodhi4_neg1>
    2d22:	77 fd       	sbrc	r23, 7
    2d24:	09 d0       	rcall	.+18     	; 0x2d38 <__divmodhi4_neg2>
    2d26:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__udivmodhi4>
    2d2a:	07 fc       	sbrc	r0, 7
    2d2c:	05 d0       	rcall	.+10     	; 0x2d38 <__divmodhi4_neg2>
    2d2e:	3e f4       	brtc	.+14     	; 0x2d3e <__divmodhi4_exit>

00002d30 <__divmodhi4_neg1>:
    2d30:	90 95       	com	r25
    2d32:	81 95       	neg	r24
    2d34:	9f 4f       	sbci	r25, 0xFF	; 255
    2d36:	08 95       	ret

00002d38 <__divmodhi4_neg2>:
    2d38:	70 95       	com	r23
    2d3a:	61 95       	neg	r22
    2d3c:	7f 4f       	sbci	r23, 0xFF	; 255

00002d3e <__divmodhi4_exit>:
    2d3e:	08 95       	ret

00002d40 <__udivmodsi4>:
    2d40:	a1 e2       	ldi	r26, 0x21	; 33
    2d42:	1a 2e       	mov	r1, r26
    2d44:	aa 1b       	sub	r26, r26
    2d46:	bb 1b       	sub	r27, r27
    2d48:	fd 01       	movw	r30, r26
    2d4a:	0d c0       	rjmp	.+26     	; 0x2d66 <__udivmodsi4_ep>

00002d4c <__udivmodsi4_loop>:
    2d4c:	aa 1f       	adc	r26, r26
    2d4e:	bb 1f       	adc	r27, r27
    2d50:	ee 1f       	adc	r30, r30
    2d52:	ff 1f       	adc	r31, r31
    2d54:	a2 17       	cp	r26, r18
    2d56:	b3 07       	cpc	r27, r19
    2d58:	e4 07       	cpc	r30, r20
    2d5a:	f5 07       	cpc	r31, r21
    2d5c:	20 f0       	brcs	.+8      	; 0x2d66 <__udivmodsi4_ep>
    2d5e:	a2 1b       	sub	r26, r18
    2d60:	b3 0b       	sbc	r27, r19
    2d62:	e4 0b       	sbc	r30, r20
    2d64:	f5 0b       	sbc	r31, r21

00002d66 <__udivmodsi4_ep>:
    2d66:	66 1f       	adc	r22, r22
    2d68:	77 1f       	adc	r23, r23
    2d6a:	88 1f       	adc	r24, r24
    2d6c:	99 1f       	adc	r25, r25
    2d6e:	1a 94       	dec	r1
    2d70:	69 f7       	brne	.-38     	; 0x2d4c <__udivmodsi4_loop>
    2d72:	60 95       	com	r22
    2d74:	70 95       	com	r23
    2d76:	80 95       	com	r24
    2d78:	90 95       	com	r25
    2d7a:	9b 01       	movw	r18, r22
    2d7c:	ac 01       	movw	r20, r24
    2d7e:	bd 01       	movw	r22, r26
    2d80:	cf 01       	movw	r24, r30
    2d82:	08 95       	ret

00002d84 <__umulhisi3>:
    2d84:	a2 9f       	mul	r26, r18
    2d86:	b0 01       	movw	r22, r0
    2d88:	b3 9f       	mul	r27, r19
    2d8a:	c0 01       	movw	r24, r0
    2d8c:	a3 9f       	mul	r26, r19
    2d8e:	70 0d       	add	r23, r0
    2d90:	81 1d       	adc	r24, r1
    2d92:	11 24       	eor	r1, r1
    2d94:	91 1d       	adc	r25, r1
    2d96:	b2 9f       	mul	r27, r18
    2d98:	70 0d       	add	r23, r0
    2d9a:	81 1d       	adc	r24, r1
    2d9c:	11 24       	eor	r1, r1
    2d9e:	91 1d       	adc	r25, r1
    2da0:	08 95       	ret

00002da2 <strcat>:
    2da2:	fb 01       	movw	r30, r22
    2da4:	dc 01       	movw	r26, r24
    2da6:	0d 90       	ld	r0, X+
    2da8:	00 20       	and	r0, r0
    2daa:	e9 f7       	brne	.-6      	; 0x2da6 <strcat+0x4>
    2dac:	11 97       	sbiw	r26, 0x01	; 1
    2dae:	01 90       	ld	r0, Z+
    2db0:	0d 92       	st	X+, r0
    2db2:	00 20       	and	r0, r0
    2db4:	e1 f7       	brne	.-8      	; 0x2dae <strcat+0xc>
    2db6:	08 95       	ret

00002db8 <itoa>:
    2db8:	45 32       	cpi	r20, 0x25	; 37
    2dba:	51 05       	cpc	r21, r1
    2dbc:	20 f4       	brcc	.+8      	; 0x2dc6 <itoa+0xe>
    2dbe:	42 30       	cpi	r20, 0x02	; 2
    2dc0:	10 f0       	brcs	.+4      	; 0x2dc6 <itoa+0xe>
    2dc2:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <__itoa_ncheck>
    2dc6:	fb 01       	movw	r30, r22
    2dc8:	10 82       	st	Z, r1
    2dca:	cb 01       	movw	r24, r22
    2dcc:	08 95       	ret

00002dce <__itoa_ncheck>:
    2dce:	bb 27       	eor	r27, r27
    2dd0:	4a 30       	cpi	r20, 0x0A	; 10
    2dd2:	31 f4       	brne	.+12     	; 0x2de0 <__itoa_ncheck+0x12>
    2dd4:	99 23       	and	r25, r25
    2dd6:	22 f4       	brpl	.+8      	; 0x2de0 <__itoa_ncheck+0x12>
    2dd8:	bd e2       	ldi	r27, 0x2D	; 45
    2dda:	90 95       	com	r25
    2ddc:	81 95       	neg	r24
    2dde:	9f 4f       	sbci	r25, 0xFF	; 255
    2de0:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__utoa_common>

00002de4 <__utoa_ncheck>:
    2de4:	bb 27       	eor	r27, r27

00002de6 <__utoa_common>:
    2de6:	fb 01       	movw	r30, r22
    2de8:	55 27       	eor	r21, r21
    2dea:	aa 27       	eor	r26, r26
    2dec:	88 0f       	add	r24, r24
    2dee:	99 1f       	adc	r25, r25
    2df0:	aa 1f       	adc	r26, r26
    2df2:	a4 17       	cp	r26, r20
    2df4:	10 f0       	brcs	.+4      	; 0x2dfa <__utoa_common+0x14>
    2df6:	a4 1b       	sub	r26, r20
    2df8:	83 95       	inc	r24
    2dfa:	50 51       	subi	r21, 0x10	; 16
    2dfc:	b9 f7       	brne	.-18     	; 0x2dec <__utoa_common+0x6>
    2dfe:	a0 5d       	subi	r26, 0xD0	; 208
    2e00:	aa 33       	cpi	r26, 0x3A	; 58
    2e02:	08 f0       	brcs	.+2      	; 0x2e06 <__utoa_common+0x20>
    2e04:	a9 5d       	subi	r26, 0xD9	; 217
    2e06:	a1 93       	st	Z+, r26
    2e08:	00 97       	sbiw	r24, 0x00	; 0
    2e0a:	79 f7       	brne	.-34     	; 0x2dea <__utoa_common+0x4>
    2e0c:	b1 11       	cpse	r27, r1
    2e0e:	b1 93       	st	Z+, r27
    2e10:	11 92       	st	Z+, r1
    2e12:	cb 01       	movw	r24, r22
    2e14:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <strrev>

00002e18 <strrev>:
    2e18:	dc 01       	movw	r26, r24
    2e1a:	fc 01       	movw	r30, r24
    2e1c:	67 2f       	mov	r22, r23
    2e1e:	71 91       	ld	r23, Z+
    2e20:	77 23       	and	r23, r23
    2e22:	e1 f7       	brne	.-8      	; 0x2e1c <strrev+0x4>
    2e24:	32 97       	sbiw	r30, 0x02	; 2
    2e26:	04 c0       	rjmp	.+8      	; 0x2e30 <strrev+0x18>
    2e28:	7c 91       	ld	r23, X
    2e2a:	6d 93       	st	X+, r22
    2e2c:	70 83       	st	Z, r23
    2e2e:	62 91       	ld	r22, -Z
    2e30:	ae 17       	cp	r26, r30
    2e32:	bf 07       	cpc	r27, r31
    2e34:	c8 f3       	brcs	.-14     	; 0x2e28 <strrev+0x10>
    2e36:	08 95       	ret

00002e38 <_exit>:
    2e38:	f8 94       	cli

00002e3a <__stop_program>:
    2e3a:	ff cf       	rjmp	.-2      	; 0x2e3a <__stop_program>
