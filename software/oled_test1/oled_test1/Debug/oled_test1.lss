
oled_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000ed4  00800100  00001158  000011cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001a8  00000000  00000000  00002110  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d4d  00000000  00000000  000022b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001cf  00000000  00000000  00003005  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008fd  00000000  00000000  000031d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000674  00000000  00000000  00003ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e7  00000000  00000000  00004148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000de2  00000000  00000000  0000462f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  00005411  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d0 e1       	ldi	r29, 0x10	; 16
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	1f e0       	ldi	r17, 0x0F	; 15
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e8 e5       	ldi	r30, 0x58	; 88
      90:	f1 e1       	ldi	r31, 0x11	; 17
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a4 3d       	cpi	r26, 0xD4	; 212
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
      9e:	0e 94 1e 08 	call	0x103c	; 0x103c <main>
      a2:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <_exit>

000000a6 <__bad_interrupt>:
      a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <spi_init>:
	}

	Set_Column_Address(Shift+b,Shift+c);
	Set_Row_Address(d,(d+a-1));
	Set_Write_RAM();
	for(i=0;i<(c-b+1);i++)
      aa:	cf 93       	push	r28
      ac:	df 93       	push	r29
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
			Write_Data(Data);
			Write_Data(Data);
		}
	}

	Set_Column_Address(Shift+(c-l),Shift+c);
      b2:	85 e5       	ldi	r24, 0x55	; 85
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	25 e5       	ldi	r18, 0x55	; 85
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	f9 01       	movw	r30, r18
      bc:	20 81       	ld	r18, Z
      be:	2f 77       	andi	r18, 0x7F	; 127
      c0:	fc 01       	movw	r30, r24
      c2:	20 83       	st	Z, r18
      c4:	8c e4       	ldi	r24, 0x4C	; 76
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	20 e5       	ldi	r18, 0x50	; 80
	Set_Row_Address(d+a,e-a);
      ca:	fc 01       	movw	r30, r24
      cc:	20 83       	st	Z, r18
      ce:	8d e4       	ldi	r24, 0x4D	; 77
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	21 e0       	ldi	r18, 0x01	; 1
      d4:	fc 01       	movw	r30, r24
      d6:	20 83       	st	Z, r18
      d8:	8e e4       	ldi	r24, 0x4E	; 78
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	fc 01       	movw	r30, r24
	Set_Write_RAM();
      de:	10 82       	st	Z, r1
      e0:	df 91       	pop	r29
	for(i=0;i<(e-d+1);i++)
      e2:	cf 91       	pop	r28
      e4:	08 95       	ret

000000e6 <spi_send_byte>:
	{
		for(j=0;j<(l+1);j++)
      e6:	cf 93       	push	r28
      e8:	df 93       	push	r29
		{
			if(j == 0)
      ea:	1f 92       	push	r1
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
			{
				switch(k)
      f0:	89 83       	std	Y+1, r24	; 0x01
      f2:	8e e4       	ldi	r24, 0x4E	; 78
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	29 81       	ldd	r18, Y+1	; 0x01
      f8:	fc 01       	movw	r30, r24
      fa:	20 83       	st	Z, r18
      fc:	00 00       	nop
      fe:	8d e4       	ldi	r24, 0x4D	; 77
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	fc 01       	movw	r30, r24
     104:	80 81       	ld	r24, Z
     106:	88 23       	and	r24, r24
     108:	d4 f7       	brge	.-12     	; 0xfe <spi_send_byte+0x18>
     10a:	8e e4       	ldi	r24, 0x4E	; 78
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	fc 01       	movw	r30, r24
     110:	80 81       	ld	r24, Z
     112:	0f 90       	pop	r0
				{
					case 0:
					Write_Data(Data);
     114:	df 91       	pop	r29
     116:	cf 91       	pop	r28
     118:	08 95       	ret

0000011a <uDelay>:
					Write_Data(Data);
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
     11e:	00 d0       	rcall	.+0      	; 0x120 <uDelay+0x6>
					break;
     120:	cd b7       	in	r28, 0x3d	; 61
					case 1:
					Write_Data(0x00);
     122:	de b7       	in	r29, 0x3e	; 62
     124:	9a 83       	std	Y+2, r25	; 0x02
     126:	89 83       	std	Y+1, r24	; 0x01
					Write_Data(Data&0x0F);
     128:	00 00       	nop
     12a:	89 81       	ldd	r24, Y+1	; 0x01
     12c:	9a 81       	ldd	r25, Y+2	; 0x02
     12e:	9c 01       	movw	r18, r24
					break;
     130:	21 50       	subi	r18, 0x01	; 1
					case 2:
					Write_Data(0x00);
     132:	31 09       	sbc	r19, r1
     134:	3a 83       	std	Y+2, r19	; 0x02
     136:	29 83       	std	Y+1, r18	; 0x01
					Write_Data(Data);
     138:	89 2b       	or	r24, r25
     13a:	b9 f7       	brne	.-18     	; 0x12a <uDelay+0x10>
     13c:	0f 90       	pop	r0
					break;
     13e:	0f 90       	pop	r0
					case 3:
					Write_Data(Data&0x0F);
     140:	df 91       	pop	r29
     142:	cf 91       	pop	r28
     144:	08 95       	ret

00000146 <Delay>:
     146:	cf 93       	push	r28
					Write_Data(Data);
     148:	df 93       	push	r29
     14a:	00 d0       	rcall	.+0      	; 0x14c <Delay+0x6>
     14c:	00 d0       	rcall	.+0      	; 0x14e <Delay+0x8>
					break;
     14e:	cd b7       	in	r28, 0x3d	; 61
     150:	de b7       	in	r29, 0x3e	; 62
				}
			}
			else
			{
				Write_Data(Data);
     152:	9c 83       	std	Y+4, r25	; 0x04
     154:	8b 83       	std	Y+3, r24	; 0x03
     156:	1a 82       	std	Y+2, r1	; 0x02
				Write_Data(Data);
     158:	19 82       	std	Y+1, r1	; 0x01
     15a:	09 c0       	rjmp	.+18     	; 0x16e <Delay+0x28>
     15c:	80 e6       	ldi	r24, 0x60	; 96
	Set_Column_Address(Shift+(c-l),Shift+c);
	Set_Row_Address(d+a,e-a);
	Set_Write_RAM();
	for(i=0;i<(e-d+1);i++)
	{
		for(j=0;j<(l+1);j++)
     15e:	94 e0       	ldi	r25, 0x04	; 4
     160:	0e 94 8d 00 	call	0x11a	; 0x11a <uDelay>
     164:	89 81       	ldd	r24, Y+1	; 0x01
     166:	9a 81       	ldd	r25, Y+2	; 0x02
     168:	01 96       	adiw	r24, 0x01	; 1
     16a:	9a 83       	std	Y+2, r25	; 0x02
     16c:	89 83       	std	Y+1, r24	; 0x01
     16e:	29 81       	ldd	r18, Y+1	; 0x01
     170:	3a 81       	ldd	r19, Y+2	; 0x02
     172:	8b 81       	ldd	r24, Y+3	; 0x03
     174:	9c 81       	ldd	r25, Y+4	; 0x04
     176:	28 17       	cp	r18, r24
     178:	39 07       	cpc	r19, r25
	}

	Set_Column_Address(Shift+(c-l),Shift+c);
	Set_Row_Address(d+a,e-a);
	Set_Write_RAM();
	for(i=0;i<(e-d+1);i++)
     17a:	80 f3       	brcs	.-32     	; 0x15c <Delay+0x16>
     17c:	0f 90       	pop	r0
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
     182:	0f 90       	pop	r0
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <Write_Command>:
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	1f 92       	push	r1
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
     194:	89 83       	std	Y+1, r24	; 0x01
     196:	85 e2       	ldi	r24, 0x25	; 37
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	25 e2       	ldi	r18, 0x25	; 37
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	f9 01       	movw	r30, r18
     1a0:	20 81       	ld	r18, Z
     1a2:	2f 7d       	andi	r18, 0xDF	; 223
				Write_Data(Data);
			}
		}
	}

	Set_Column_Address(Shift+b,Shift+c);
     1a4:	fc 01       	movw	r30, r24
     1a6:	20 83       	st	Z, r18
     1a8:	8b e2       	ldi	r24, 0x2B	; 43
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	2b e2       	ldi	r18, 0x2B	; 43
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	f9 01       	movw	r30, r18
     1b2:	20 81       	ld	r18, Z
	Set_Row_Address((e-a+1),e);
     1b4:	2e 7f       	andi	r18, 0xFE	; 254
     1b6:	fc 01       	movw	r30, r24
     1b8:	20 83       	st	Z, r18
     1ba:	89 81       	ldd	r24, Y+1	; 0x01
     1bc:	0e 94 73 00 	call	0xe6	; 0xe6 <spi_send_byte>
     1c0:	85 e2       	ldi	r24, 0x25	; 37
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	25 e2       	ldi	r18, 0x25	; 37
	Set_Write_RAM();
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	f9 01       	movw	r30, r18
	for(i=0;i<(c-b+1);i++)
     1ca:	20 81       	ld	r18, Z
     1cc:	20 62       	ori	r18, 0x20	; 32
	{
		for(j=0;j<a;j++)
     1ce:	fc 01       	movw	r30, r24
     1d0:	20 83       	st	Z, r18
		{
			Write_Data(Data);
     1d2:	8b e2       	ldi	r24, 0x2B	; 43
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	2b e2       	ldi	r18, 0x2B	; 43
			Write_Data(Data);
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	f9 01       	movw	r30, r18
     1dc:	20 81       	ld	r18, Z
	Set_Column_Address(Shift+b,Shift+c);
	Set_Row_Address((e-a+1),e);
	Set_Write_RAM();
	for(i=0;i<(c-b+1);i++)
	{
		for(j=0;j<a;j++)
     1de:	21 60       	ori	r18, 0x01	; 1
     1e0:	fc 01       	movw	r30, r24
     1e2:	20 83       	st	Z, r18
     1e4:	0f 90       	pop	r0
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	08 95       	ret

000001ec <Write_Data>:
	}

	Set_Column_Address(Shift+b,Shift+c);
	Set_Row_Address((e-a+1),e);
	Set_Write_RAM();
	for(i=0;i<(c-b+1);i++)
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	1f 92       	push	r1
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
     1f6:	89 83       	std	Y+1, r24	; 0x01
     1f8:	8b e2       	ldi	r24, 0x2B	; 43
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	2b e2       	ldi	r18, 0x2B	; 43
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	f9 01       	movw	r30, r18
     202:	20 81       	ld	r18, Z
     204:	2e 7f       	andi	r18, 0xFE	; 254
     206:	fc 01       	movw	r30, r24
     208:	20 83       	st	Z, r18
     20a:	85 e2       	ldi	r24, 0x25	; 37
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	25 e2       	ldi	r18, 0x25	; 37
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	f9 01       	movw	r30, r18
			Write_Data(Data);
			Write_Data(Data);
		}
	}

	Set_Column_Address(Shift+b,Shift+(b+l));
     214:	20 81       	ld	r18, Z
     216:	20 62       	ori	r18, 0x20	; 32
     218:	fc 01       	movw	r30, r24
     21a:	20 83       	st	Z, r18
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	0e 94 73 00 	call	0xe6	; 0xe6 <spi_send_byte>
     222:	85 e2       	ldi	r24, 0x25	; 37
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	25 e2       	ldi	r18, 0x25	; 37
	Set_Row_Address(d+a,e-a);
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	f9 01       	movw	r30, r18
     22c:	20 81       	ld	r18, Z
     22e:	20 62       	ori	r18, 0x20	; 32
     230:	fc 01       	movw	r30, r24
     232:	20 83       	st	Z, r18
     234:	8b e2       	ldi	r24, 0x2B	; 43
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	2b e2       	ldi	r18, 0x2B	; 43
     23a:	30 e0       	ldi	r19, 0x00	; 0
	Set_Write_RAM();
     23c:	f9 01       	movw	r30, r18
     23e:	20 81       	ld	r18, Z
	for(i=0;i<(e-d+1);i++)
     240:	21 60       	ori	r18, 0x01	; 1
     242:	fc 01       	movw	r30, r24
	{
		for(j=0;j<(l+1);j++)
     244:	20 83       	st	Z, r18
     246:	0f 90       	pop	r0
		{
			if(j == l)
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <Set_Column_Address>:
     24e:	cf 93       	push	r28
			{
				switch(k)
     250:	df 93       	push	r29
     252:	00 d0       	rcall	.+0      	; 0x254 <Set_Column_Address+0x6>
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	89 83       	std	Y+1, r24	; 0x01
     25a:	6a 83       	std	Y+2, r22	; 0x02
     25c:	85 e1       	ldi	r24, 0x15	; 21
     25e:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
     268:	8a 81       	ldd	r24, Y+2	; 0x02
     26a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
     26e:	0f 90       	pop	r0
     270:	0f 90       	pop	r0
     272:	df 91       	pop	r29
				{
					case 0:
					Write_Data(Data);
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <Set_Row_Address>:
     278:	cf 93       	push	r28
					Write_Data(Data);
     27a:	df 93       	push	r29
     27c:	00 d0       	rcall	.+0      	; 0x27e <Set_Row_Address+0x6>
     27e:	cd b7       	in	r28, 0x3d	; 61
					break;
     280:	de b7       	in	r29, 0x3e	; 62
					case 1:
					Write_Data(Data&0xF0);
     282:	89 83       	std	Y+1, r24	; 0x01
     284:	6a 83       	std	Y+2, r22	; 0x02
     286:	85 e7       	ldi	r24, 0x75	; 117
     288:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
					Write_Data(0x00);
     28c:	89 81       	ldd	r24, Y+1	; 0x01
     28e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
					break;
					case 2:
					Write_Data(Data);
     292:	8a 81       	ldd	r24, Y+2	; 0x02
     294:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
					Write_Data(0x00);
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
     29c:	df 91       	pop	r29
					break;
     29e:	cf 91       	pop	r28
					case 3:
					Write_Data(Data);
     2a0:	08 95       	ret

000002a2 <Set_Write_RAM>:
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
					Write_Data(Data&0xF0);
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	8c e5       	ldi	r24, 0x5C	; 92
     2ac:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
					break;
     2b0:	df 91       	pop	r29
				}
			}
			else
			{
				Write_Data(Data);
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <Set_Remap_Format>:
     2b6:	cf 93       	push	r28
				Write_Data(Data);
     2b8:	df 93       	push	r29
     2ba:	1f 92       	push	r1
     2bc:	cd b7       	in	r28, 0x3d	; 61
	Set_Column_Address(Shift+b,Shift+(b+l));
	Set_Row_Address(d+a,e-a);
	Set_Write_RAM();
	for(i=0;i<(e-d+1);i++)
	{
		for(j=0;j<(l+1);j++)
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	89 83       	std	Y+1, r24	; 0x01
     2c2:	80 ea       	ldi	r24, 0xA0	; 160
     2c4:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
     2ce:	81 e1       	ldi	r24, 0x11	; 17
     2d0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
     2d4:	0f 90       	pop	r0
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
	}

	Set_Column_Address(Shift+b,Shift+(b+l));
	Set_Row_Address(d+a,e-a);
	Set_Write_RAM();
	for(i=0;i<(e-d+1);i++)
     2da:	08 95       	ret

000002dc <Set_Start_Line>:
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	1f 92       	push	r1
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	89 83       	std	Y+1, r24	; 0x01
     2e8:	81 ea       	ldi	r24, 0xA1	; 161
     2ea:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
     2f4:	0f 90       	pop	r0
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	08 95       	ret

000002fc <Set_Display_Offset>:
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	1f 92       	push	r1
     302:	cd b7       	in	r28, 0x3d	; 61
				Write_Data(Data);
				Write_Data(Data);
			}
		}
	}
}
     304:	de b7       	in	r29, 0x3e	; 62
     306:	89 83       	std	Y+1, r24	; 0x01
     308:	82 ea       	ldi	r24, 0xA2	; 162
     30a:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
     314:	0f 90       	pop	r0
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28

void Set_Display_Offset(unsigned char d)
{
	Write_Command(0xA2);			// Set Vertical Scroll by Row
	Write_Data(d);				//   Default => 0x00
}
     31a:	08 95       	ret

0000031c <Set_Display_Mode>:


void Set_Display_Mode(unsigned char d)
{
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	1f 92       	push	r1
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	89 83       	std	Y+1, r24	; 0x01
	Write_Command(0xA4|d);			// Set Display Mode
     328:	89 81       	ldd	r24, Y+1	; 0x01
     32a:	84 6a       	ori	r24, 0xA4	; 164
     32c:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
	//   Default => 0xA4
	//     0xA4 (0x00) => Entire Display Off, All Pixels Turn Off
	//     0xA5 (0x01) => Entire Display On, All Pixels Turn On at GS Level 15
	//     0xA6 (0x02) => Normal Display
	//     0xA7 (0x03) => Inverse Display
}
     330:	0f 90       	pop	r0
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	08 95       	ret

00000338 <Set_Partial_Display>:


void Set_Partial_Display(unsigned char a, unsigned char b, unsigned char c)
{
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
     33c:	00 d0       	rcall	.+0      	; 0x33e <Set_Partial_Display+0x6>
     33e:	1f 92       	push	r1
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
     344:	89 83       	std	Y+1, r24	; 0x01
     346:	6a 83       	std	Y+2, r22	; 0x02
     348:	4b 83       	std	Y+3, r20	; 0x03
	Write_Command(0xA8|a);
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	88 6a       	ori	r24, 0xA8	; 168
     34e:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
	// Default => 0x8F
	//   Select Internal Booster at Display On
	if(a == 0x00)
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	88 23       	and	r24, r24
     356:	31 f4       	brne	.+12     	; 0x364 <Set_Partial_Display+0x2c>
	{
		Write_Data(b);
     358:	8a 81       	ldd	r24, Y+2	; 0x02
     35a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
		Write_Data(c);
     35e:	8b 81       	ldd	r24, Y+3	; 0x03
     360:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	}
}
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	08 95       	ret

00000370 <Set_Function_Selection>:


void Set_Function_Selection(unsigned char d)
{
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	1f 92       	push	r1
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	89 83       	std	Y+1, r24	; 0x01
	Write_Command(0xAB);			// Function Selection
     37c:	8b ea       	ldi	r24, 0xAB	; 171
     37e:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
	Write_Data(d);				//   Default => 0x01
     382:	89 81       	ldd	r24, Y+1	; 0x01
     384:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	//     Enable Internal VDD Regulator
}
     388:	0f 90       	pop	r0
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <Set_Display_On_Off>:


void Set_Display_On_Off(unsigned char d)
{
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	1f 92       	push	r1
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	89 83       	std	Y+1, r24	; 0x01
	Write_Command(0xAE|d);			// Set Display On/Off
     39c:	89 81       	ldd	r24, Y+1	; 0x01
     39e:	8e 6a       	ori	r24, 0xAE	; 174
     3a0:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
	//   Default => 0xAE
	//     0xAE (0x00) => Display Off (Sleep Mode On)
	//     0xAF (0x01) => Display On (Sleep Mode Off)
}
     3a4:	0f 90       	pop	r0
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	08 95       	ret

000003ac <Set_Phase_Length>:


void Set_Phase_Length(unsigned char d)
{
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	1f 92       	push	r1
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	89 83       	std	Y+1, r24	; 0x01
	Write_Command(0xB1);			// Phase 1 (Reset) & Phase 2 (Pre-Charge) Period Adjustment
     3b8:	81 eb       	ldi	r24, 0xB1	; 177
     3ba:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
	Write_Data(d);				//   Default => 0x74 (7 Display Clocks [Phase 2] / 9 Display Clocks [Phase 1])
     3be:	89 81       	ldd	r24, Y+1	; 0x01
     3c0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	//     D[3:0] => Phase 1 Period in 5~31 Display Clocks
	//     D[7:4] => Phase 2 Period in 3~15 Display Clocks
}
     3c4:	0f 90       	pop	r0
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <Set_Display_Clock>:


void Set_Display_Clock(unsigned char d)
{
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	1f 92       	push	r1
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62
     3d6:	89 83       	std	Y+1, r24	; 0x01
	Write_Command(0xB3);			// Set Display Clock Divider / Oscillator Frequency
     3d8:	83 eb       	ldi	r24, 0xB3	; 179
     3da:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
	Write_Data(d);				//   Default => 0xD0
     3de:	89 81       	ldd	r24, Y+1	; 0x01
     3e0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	//     A[3:0] => Display Clock Divider
	//     A[7:4] => Oscillator Frequency
}
     3e4:	0f 90       	pop	r0
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	08 95       	ret

000003ec <Set_Display_Enhancement_A>:


void Set_Display_Enhancement_A(unsigned char a, unsigned char b)
{
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	00 d0       	rcall	.+0      	; 0x3f2 <Set_Display_Enhancement_A+0x6>
     3f2:	cd b7       	in	r28, 0x3d	; 61
     3f4:	de b7       	in	r29, 0x3e	; 62
     3f6:	89 83       	std	Y+1, r24	; 0x01
     3f8:	6a 83       	std	Y+2, r22	; 0x02
	Write_Command(0xB4);			// Display Enhancement
     3fa:	84 eb       	ldi	r24, 0xB4	; 180
     3fc:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
	Write_Data(0xA0|a);			//   Default => 0xA2
     400:	89 81       	ldd	r24, Y+1	; 0x01
     402:	80 6a       	ori	r24, 0xA0	; 160
     404:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	//     0xA0 (0x00) => Enable External VSL
	//     0xA2 (0x02) => Enable Internal VSL (Kept VSL Pin N.C.)
	Write_Data(0x05|b);			//   Default => 0xB5
     408:	8a 81       	ldd	r24, Y+2	; 0x02
     40a:	85 60       	ori	r24, 0x05	; 5
     40c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	//     0xB5 (0xB0) => Normal
	//     0xFD (0xF8) => Enhance Low Gray Scale Display Quality
}
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	08 95       	ret

0000041a <Set_GPIO>:


void Set_GPIO(unsigned char d)
{
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	1f 92       	push	r1
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	89 83       	std	Y+1, r24	; 0x01
	Write_Command(0xB5);			// General Purpose IO
     426:	85 eb       	ldi	r24, 0xB5	; 181
     428:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
	Write_Data(d);				//   Default => 0x0A (GPIO Pins output Low Level.)
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
}
     432:	0f 90       	pop	r0
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	08 95       	ret

0000043a <Set_Precharge_Period>:


void Set_Precharge_Period(unsigned char d)
{
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	1f 92       	push	r1
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	89 83       	std	Y+1, r24	; 0x01
	Write_Command(0xB6);			// Set Second Pre-Charge Period
     446:	86 eb       	ldi	r24, 0xB6	; 182
     448:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
	Write_Data(d);				//   Default => 0x08 (8 Display Clocks)
     44c:	89 81       	ldd	r24, Y+1	; 0x01
     44e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
}
     452:	0f 90       	pop	r0
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	08 95       	ret

0000045a <Set_Precharge_Voltage>:


void Set_Precharge_Voltage(unsigned char d)
{
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	1f 92       	push	r1
     460:	cd b7       	in	r28, 0x3d	; 61
     462:	de b7       	in	r29, 0x3e	; 62
     464:	89 83       	std	Y+1, r24	; 0x01
	Write_Command(0xBB);			// Set Pre-Charge Voltage Level
     466:	8b eb       	ldi	r24, 0xBB	; 187
     468:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
	Write_Data(d);				//   Default => 0x17 (0.50*VCC)
     46c:	89 81       	ldd	r24, Y+1	; 0x01
     46e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
}
     472:	0f 90       	pop	r0
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <Set_VCOMH>:


void Set_VCOMH(unsigned char d)
{
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	1f 92       	push	r1
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	89 83       	std	Y+1, r24	; 0x01
	Write_Command(0xBE);			// Set COM Deselect Voltage Level
     486:	8e eb       	ldi	r24, 0xBE	; 190
     488:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
	Write_Data(d);				//   Default => 0x04 (0.80*VCC)
     48c:	89 81       	ldd	r24, Y+1	; 0x01
     48e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
}
     492:	0f 90       	pop	r0
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	08 95       	ret

0000049a <Set_Contrast_Current>:


void Set_Contrast_Current(unsigned char d)
{
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	1f 92       	push	r1
     4a0:	cd b7       	in	r28, 0x3d	; 61
     4a2:	de b7       	in	r29, 0x3e	; 62
     4a4:	89 83       	std	Y+1, r24	; 0x01
	Write_Command(0xC1);			// Set Contrast Current
     4a6:	81 ec       	ldi	r24, 0xC1	; 193
     4a8:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
	Write_Data(d);				//   Default => 0x7F
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
     4ae:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
}
     4b2:	0f 90       	pop	r0
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	08 95       	ret

000004ba <Set_Master_Current>:


void Set_Master_Current(unsigned char d)
{
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	1f 92       	push	r1
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
     4c4:	89 83       	std	Y+1, r24	; 0x01
	Write_Command(0xC7);			// Master Contrast Current Control
     4c6:	87 ec       	ldi	r24, 0xC7	; 199
     4c8:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
	Write_Data(d);				//   Default => 0x0f (Maximum)
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
     4ce:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
}
     4d2:	0f 90       	pop	r0
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <Set_Multiplex_Ratio>:


void Set_Multiplex_Ratio(unsigned char d)
{
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	1f 92       	push	r1
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	89 83       	std	Y+1, r24	; 0x01
	Write_Command(0xCA);			// Set Multiplex Ratio
     4e6:	8a ec       	ldi	r24, 0xCA	; 202
     4e8:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
	Write_Data(d);				//   Default => 0x7F (1/128 Duty)
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
}
     4f2:	0f 90       	pop	r0
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <Set_Display_Enhancement_B>:


void Set_Display_Enhancement_B(unsigned char d)
{
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	1f 92       	push	r1
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	89 83       	std	Y+1, r24	; 0x01
	Write_Command(0xD1);			// Display Enhancement
     506:	81 ed       	ldi	r24, 0xD1	; 209
     508:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
	Write_Data(0x82|d);			//   Default => 0xA2
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	82 68       	ori	r24, 0x82	; 130
     510:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	//     0x82 (0x00) => Reserved
	//     0xA2 (0x20) => Normal
	Write_Data(0x20);
     514:	80 e2       	ldi	r24, 0x20	; 32
     516:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
}
     51a:	0f 90       	pop	r0
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	08 95       	ret

00000522 <Set_Command_Lock>:


void Set_Command_Lock(unsigned char d)
{
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	1f 92       	push	r1
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	89 83       	std	Y+1, r24	; 0x01
	Write_Command(0xFD);			// Set Command Lock
     52e:	8d ef       	ldi	r24, 0xFD	; 253
     530:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
	Write_Data(0x12|d);			//   Default => 0x12
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	82 61       	ori	r24, 0x12	; 18
     538:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	//     0x12 => Driver IC interface is unlocked from entering command.
	//     0x16 => All Commands are locked except 0xFD.
}
     53c:	0f 90       	pop	r0
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <Fill_RAM>:

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  Show Regular Pattern (Full Screen)
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void Fill_RAM(unsigned char Data)
{
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	00 d0       	rcall	.+0      	; 0x54a <Fill_RAM+0x6>
     54a:	1f 92       	push	r1
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
     550:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char i,j;

	Set_Column_Address(0x00,0x77);
     552:	67 e7       	ldi	r22, 0x77	; 119
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	0e 94 27 01 	call	0x24e	; 0x24e <Set_Column_Address>
	Set_Row_Address(0x00,0x7F);
     55a:	6f e7       	ldi	r22, 0x7F	; 127
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	0e 94 3c 01 	call	0x278	; 0x278 <Set_Row_Address>
	Set_Write_RAM();
     562:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Set_Write_RAM>

	for(i=0;i<128;i++)
     566:	19 82       	std	Y+1, r1	; 0x01
     568:	0e c0       	rjmp	.+28     	; 0x586 <Fill_RAM+0x42>
	{
		for(j=0;j<120;j++)
     56a:	1a 82       	std	Y+2, r1	; 0x02
     56c:	06 c0       	rjmp	.+12     	; 0x57a <Fill_RAM+0x36>
		{
			Write_Data(Data);
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	Set_Row_Address(0x00,0x7F);
	Set_Write_RAM();

	for(i=0;i<128;i++)
	{
		for(j=0;j<120;j++)
     574:	8a 81       	ldd	r24, Y+2	; 0x02
     576:	8f 5f       	subi	r24, 0xFF	; 255
     578:	8a 83       	std	Y+2, r24	; 0x02
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	88 37       	cpi	r24, 0x78	; 120
     57e:	b8 f3       	brcs	.-18     	; 0x56e <Fill_RAM+0x2a>

	Set_Column_Address(0x00,0x77);
	Set_Row_Address(0x00,0x7F);
	Set_Write_RAM();

	for(i=0;i<128;i++)
     580:	89 81       	ldd	r24, Y+1	; 0x01
     582:	8f 5f       	subi	r24, 0xFF	; 255
     584:	89 83       	std	Y+1, r24	; 0x01
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	88 23       	and	r24, r24
     58a:	7c f7       	brge	.-34     	; 0x56a <Fill_RAM+0x26>
		{
			Write_Data(Data);
			//Write_Data(Data);
		}
	}
}
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	08 95       	ret

00000598 <Show_Font57>:
//    b: Ascii
//    c: Start X Address
//    d: Start Y Address
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void Show_Font57(unsigned char a, unsigned char b, unsigned char c, unsigned char d)
{
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
     5a0:	2c 97       	sbiw	r28, 0x0c	; 12
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	89 87       	std	Y+9, r24	; 0x09
     5ae:	6a 87       	std	Y+10, r22	; 0x0a
     5b0:	4b 87       	std	Y+11, r20	; 0x0b
     5b2:	2c 87       	std	Y+12, r18	; 0x0c
	unsigned char *Src_Pointer;
	unsigned char i,Font,MSB_1,LSB_1,MSB_2,LSB_2;

	switch(a)
     5b4:	89 85       	ldd	r24, Y+9	; 0x09
     5b6:	88 2f       	mov	r24, r24
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	81 30       	cpi	r24, 0x01	; 1
     5bc:	91 05       	cpc	r25, r1
     5be:	19 f0       	breq	.+6      	; 0x5c6 <Show_Font57+0x2e>
     5c0:	02 97       	sbiw	r24, 0x02	; 2
     5c2:	99 f0       	breq	.+38     	; 0x5ea <Show_Font57+0x52>
     5c4:	24 c0       	rjmp	.+72     	; 0x60e <Show_Font57+0x76>
	{
		case 1:
		Src_Pointer=&Ascii_1[(b-1)][0];
     5c6:	8a 85       	ldd	r24, Y+10	; 0x0a
     5c8:	88 2f       	mov	r24, r24
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	9c 01       	movw	r18, r24
     5ce:	21 50       	subi	r18, 0x01	; 1
     5d0:	31 09       	sbc	r19, r1
     5d2:	c9 01       	movw	r24, r18
     5d4:	88 0f       	add	r24, r24
     5d6:	99 1f       	adc	r25, r25
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	82 0f       	add	r24, r18
     5de:	93 1f       	adc	r25, r19
     5e0:	80 50       	subi	r24, 0x00	; 0
     5e2:	9f 4f       	sbci	r25, 0xFF	; 255
     5e4:	9a 83       	std	Y+2, r25	; 0x02
     5e6:	89 83       	std	Y+1, r24	; 0x01
		break;
     5e8:	12 c0       	rjmp	.+36     	; 0x60e <Show_Font57+0x76>
		case 2:
		Src_Pointer=&Ascii_2[(b-1)][0];
     5ea:	8a 85       	ldd	r24, Y+10	; 0x0a
     5ec:	88 2f       	mov	r24, r24
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	9c 01       	movw	r18, r24
     5f2:	21 50       	subi	r18, 0x01	; 1
     5f4:	31 09       	sbc	r19, r1
     5f6:	c9 01       	movw	r24, r18
     5f8:	88 0f       	add	r24, r24
     5fa:	99 1f       	adc	r25, r25
     5fc:	88 0f       	add	r24, r24
     5fe:	99 1f       	adc	r25, r25
     600:	82 0f       	add	r24, r18
     602:	93 1f       	adc	r25, r19
     604:	80 55       	subi	r24, 0x50	; 80
     606:	9a 4f       	sbci	r25, 0xFA	; 250
     608:	9a 83       	std	Y+2, r25	; 0x02
     60a:	89 83       	std	Y+1, r24	; 0x01
		break;
     60c:	00 00       	nop
	}

	Set_Remap_Format(0x15);
     60e:	85 e1       	ldi	r24, 0x15	; 21
     610:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Set_Remap_Format>
	for(i=0;i<=1;i++)
     614:	1b 82       	std	Y+3, r1	; 0x03
     616:	0d c3       	rjmp	.+1562   	; 0xc32 <Show_Font57+0x69a>
	{
		MSB_1= *Src_Pointer;
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	9a 81       	ldd	r25, Y+2	; 0x02
     61c:	fc 01       	movw	r30, r24
     61e:	80 81       	ld	r24, Z
     620:	8f 83       	std	Y+7, r24	; 0x07
		Src_Pointer++;
     622:	89 81       	ldd	r24, Y+1	; 0x01
     624:	9a 81       	ldd	r25, Y+2	; 0x02
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	9a 83       	std	Y+2, r25	; 0x02
     62a:	89 83       	std	Y+1, r24	; 0x01
		if(i == 1)
     62c:	8b 81       	ldd	r24, Y+3	; 0x03
     62e:	81 30       	cpi	r24, 0x01	; 1
     630:	21 f4       	brne	.+8      	; 0x63a <Show_Font57+0xa2>
		{
			LSB_1=0x00;
     632:	1c 82       	std	Y+4, r1	; 0x04
			MSB_2=0x00;
     634:	1d 82       	std	Y+5, r1	; 0x05
			LSB_2=0x00;
     636:	1e 82       	std	Y+6, r1	; 0x06
     638:	1e c0       	rjmp	.+60     	; 0x676 <Show_Font57+0xde>
		}
		else
		{
			LSB_1=*Src_Pointer;
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	9a 81       	ldd	r25, Y+2	; 0x02
     63e:	fc 01       	movw	r30, r24
     640:	80 81       	ld	r24, Z
     642:	8c 83       	std	Y+4, r24	; 0x04
			Src_Pointer++;
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	9a 81       	ldd	r25, Y+2	; 0x02
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	9a 83       	std	Y+2, r25	; 0x02
     64c:	89 83       	std	Y+1, r24	; 0x01
			MSB_2=*Src_Pointer;
     64e:	89 81       	ldd	r24, Y+1	; 0x01
     650:	9a 81       	ldd	r25, Y+2	; 0x02
     652:	fc 01       	movw	r30, r24
     654:	80 81       	ld	r24, Z
     656:	8d 83       	std	Y+5, r24	; 0x05
			Src_Pointer++;
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	9a 81       	ldd	r25, Y+2	; 0x02
     65c:	01 96       	adiw	r24, 0x01	; 1
     65e:	9a 83       	std	Y+2, r25	; 0x02
     660:	89 83       	std	Y+1, r24	; 0x01
			LSB_2=*Src_Pointer;
     662:	89 81       	ldd	r24, Y+1	; 0x01
     664:	9a 81       	ldd	r25, Y+2	; 0x02
     666:	fc 01       	movw	r30, r24
     668:	80 81       	ld	r24, Z
     66a:	8e 83       	std	Y+6, r24	; 0x06
			Src_Pointer++;
     66c:	89 81       	ldd	r24, Y+1	; 0x01
     66e:	9a 81       	ldd	r25, Y+2	; 0x02
     670:	01 96       	adiw	r24, 0x01	; 1
     672:	9a 83       	std	Y+2, r25	; 0x02
     674:	89 83       	std	Y+1, r24	; 0x01
		}
		Set_Column_Address(Shift+c,Shift+c);
     676:	8b 85       	ldd	r24, Y+11	; 0x0b
     678:	9c e1       	ldi	r25, 0x1C	; 28
     67a:	98 0f       	add	r25, r24
     67c:	8b 85       	ldd	r24, Y+11	; 0x0b
     67e:	84 5e       	subi	r24, 0xE4	; 228
     680:	69 2f       	mov	r22, r25
     682:	0e 94 27 01 	call	0x24e	; 0x24e <Set_Column_Address>
		Set_Row_Address(d,d+7);
     686:	8c 85       	ldd	r24, Y+12	; 0x0c
     688:	89 5f       	subi	r24, 0xF9	; 249
     68a:	68 2f       	mov	r22, r24
     68c:	8c 85       	ldd	r24, Y+12	; 0x0c
     68e:	0e 94 3c 01 	call	0x278	; 0x278 <Set_Row_Address>
		Set_Write_RAM();
     692:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Set_Write_RAM>

		Font=((MSB_1&0x01)<<4)|(LSB_1&0x01);
     696:	8f 81       	ldd	r24, Y+7	; 0x07
     698:	88 2f       	mov	r24, r24
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	81 70       	andi	r24, 0x01	; 1
     69e:	99 27       	eor	r25, r25
     6a0:	82 95       	swap	r24
     6a2:	92 95       	swap	r25
     6a4:	90 7f       	andi	r25, 0xF0	; 240
     6a6:	98 27       	eor	r25, r24
     6a8:	80 7f       	andi	r24, 0xF0	; 240
     6aa:	98 27       	eor	r25, r24
     6ac:	98 2f       	mov	r25, r24
     6ae:	8c 81       	ldd	r24, Y+4	; 0x04
     6b0:	81 70       	andi	r24, 0x01	; 1
     6b2:	89 2b       	or	r24, r25
     6b4:	88 87       	std	Y+8, r24	; 0x08
		Font=Font|(Font<<1)|(Font<<2)|(Font<<3);
     6b6:	88 85       	ldd	r24, Y+8	; 0x08
     6b8:	88 2f       	mov	r24, r24
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	88 0f       	add	r24, r24
     6be:	99 1f       	adc	r25, r25
     6c0:	98 2f       	mov	r25, r24
     6c2:	88 85       	ldd	r24, Y+8	; 0x08
     6c4:	29 2f       	mov	r18, r25
     6c6:	28 2b       	or	r18, r24
     6c8:	88 85       	ldd	r24, Y+8	; 0x08
     6ca:	88 2f       	mov	r24, r24
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	88 0f       	add	r24, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	28 2b       	or	r18, r24
     6d8:	88 85       	ldd	r24, Y+8	; 0x08
     6da:	88 2f       	mov	r24, r24
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	88 0f       	add	r24, r24
     6e0:	99 1f       	adc	r25, r25
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	82 2b       	or	r24, r18
     6ec:	88 87       	std	Y+8, r24	; 0x08
		Write_Data(Font);
     6ee:	88 85       	ldd	r24, Y+8	; 0x08
     6f0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
		Font=((MSB_2&0x01)<<4)|(LSB_2&0x01);
     6f4:	8d 81       	ldd	r24, Y+5	; 0x05
     6f6:	88 2f       	mov	r24, r24
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	81 70       	andi	r24, 0x01	; 1
     6fc:	99 27       	eor	r25, r25
     6fe:	82 95       	swap	r24
     700:	92 95       	swap	r25
     702:	90 7f       	andi	r25, 0xF0	; 240
     704:	98 27       	eor	r25, r24
     706:	80 7f       	andi	r24, 0xF0	; 240
     708:	98 27       	eor	r25, r24
     70a:	98 2f       	mov	r25, r24
     70c:	8e 81       	ldd	r24, Y+6	; 0x06
     70e:	81 70       	andi	r24, 0x01	; 1
     710:	89 2b       	or	r24, r25
     712:	88 87       	std	Y+8, r24	; 0x08
		Font=Font|(Font<<1)|(Font<<2)|(Font<<3);
     714:	88 85       	ldd	r24, Y+8	; 0x08
     716:	88 2f       	mov	r24, r24
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	88 0f       	add	r24, r24
     71c:	99 1f       	adc	r25, r25
     71e:	98 2f       	mov	r25, r24
     720:	88 85       	ldd	r24, Y+8	; 0x08
     722:	29 2f       	mov	r18, r25
     724:	28 2b       	or	r18, r24
     726:	88 85       	ldd	r24, Y+8	; 0x08
     728:	88 2f       	mov	r24, r24
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	88 0f       	add	r24, r24
     732:	99 1f       	adc	r25, r25
     734:	28 2b       	or	r18, r24
     736:	88 85       	ldd	r24, Y+8	; 0x08
     738:	88 2f       	mov	r24, r24
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	88 0f       	add	r24, r24
     73e:	99 1f       	adc	r25, r25
     740:	88 0f       	add	r24, r24
     742:	99 1f       	adc	r25, r25
     744:	88 0f       	add	r24, r24
     746:	99 1f       	adc	r25, r25
     748:	82 2b       	or	r24, r18
     74a:	88 87       	std	Y+8, r24	; 0x08
		Write_Data(Font);
     74c:	88 85       	ldd	r24, Y+8	; 0x08
     74e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>

		Font=((MSB_1&0x02)<<3)|((LSB_1&0x02)>>1);
     752:	8f 81       	ldd	r24, Y+7	; 0x07
     754:	88 2f       	mov	r24, r24
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	82 70       	andi	r24, 0x02	; 2
     75a:	99 27       	eor	r25, r25
     75c:	88 0f       	add	r24, r24
     75e:	99 1f       	adc	r25, r25
     760:	88 0f       	add	r24, r24
     762:	99 1f       	adc	r25, r25
     764:	88 0f       	add	r24, r24
     766:	99 1f       	adc	r25, r25
     768:	28 2f       	mov	r18, r24
     76a:	8c 81       	ldd	r24, Y+4	; 0x04
     76c:	88 2f       	mov	r24, r24
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	82 70       	andi	r24, 0x02	; 2
     772:	99 27       	eor	r25, r25
     774:	95 95       	asr	r25
     776:	87 95       	ror	r24
     778:	82 2b       	or	r24, r18
     77a:	88 87       	std	Y+8, r24	; 0x08
		Font=Font|(Font<<1)|(Font<<2)|(Font<<3);
     77c:	88 85       	ldd	r24, Y+8	; 0x08
     77e:	88 2f       	mov	r24, r24
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	88 0f       	add	r24, r24
     784:	99 1f       	adc	r25, r25
     786:	98 2f       	mov	r25, r24
     788:	88 85       	ldd	r24, Y+8	; 0x08
     78a:	29 2f       	mov	r18, r25
     78c:	28 2b       	or	r18, r24
     78e:	88 85       	ldd	r24, Y+8	; 0x08
     790:	88 2f       	mov	r24, r24
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	88 0f       	add	r24, r24
     796:	99 1f       	adc	r25, r25
     798:	88 0f       	add	r24, r24
     79a:	99 1f       	adc	r25, r25
     79c:	28 2b       	or	r18, r24
     79e:	88 85       	ldd	r24, Y+8	; 0x08
     7a0:	88 2f       	mov	r24, r24
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	88 0f       	add	r24, r24
     7a6:	99 1f       	adc	r25, r25
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	88 0f       	add	r24, r24
     7ae:	99 1f       	adc	r25, r25
     7b0:	82 2b       	or	r24, r18
     7b2:	88 87       	std	Y+8, r24	; 0x08
		Write_Data(Font);
     7b4:	88 85       	ldd	r24, Y+8	; 0x08
     7b6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
		Font=((MSB_2&0x02)<<3)|((LSB_2&0x02)>>1);
     7ba:	8d 81       	ldd	r24, Y+5	; 0x05
     7bc:	88 2f       	mov	r24, r24
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	82 70       	andi	r24, 0x02	; 2
     7c2:	99 27       	eor	r25, r25
     7c4:	88 0f       	add	r24, r24
     7c6:	99 1f       	adc	r25, r25
     7c8:	88 0f       	add	r24, r24
     7ca:	99 1f       	adc	r25, r25
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	28 2f       	mov	r18, r24
     7d2:	8e 81       	ldd	r24, Y+6	; 0x06
     7d4:	88 2f       	mov	r24, r24
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	82 70       	andi	r24, 0x02	; 2
     7da:	99 27       	eor	r25, r25
     7dc:	95 95       	asr	r25
     7de:	87 95       	ror	r24
     7e0:	82 2b       	or	r24, r18
     7e2:	88 87       	std	Y+8, r24	; 0x08
		Font=Font|(Font<<1)|(Font<<2)|(Font<<3);
     7e4:	88 85       	ldd	r24, Y+8	; 0x08
     7e6:	88 2f       	mov	r24, r24
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	88 0f       	add	r24, r24
     7ec:	99 1f       	adc	r25, r25
     7ee:	98 2f       	mov	r25, r24
     7f0:	88 85       	ldd	r24, Y+8	; 0x08
     7f2:	29 2f       	mov	r18, r25
     7f4:	28 2b       	or	r18, r24
     7f6:	88 85       	ldd	r24, Y+8	; 0x08
     7f8:	88 2f       	mov	r24, r24
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	88 0f       	add	r24, r24
     7fe:	99 1f       	adc	r25, r25
     800:	88 0f       	add	r24, r24
     802:	99 1f       	adc	r25, r25
     804:	28 2b       	or	r18, r24
     806:	88 85       	ldd	r24, Y+8	; 0x08
     808:	88 2f       	mov	r24, r24
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	88 0f       	add	r24, r24
     80e:	99 1f       	adc	r25, r25
     810:	88 0f       	add	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	82 2b       	or	r24, r18
     81a:	88 87       	std	Y+8, r24	; 0x08
		Write_Data(Font);
     81c:	88 85       	ldd	r24, Y+8	; 0x08
     81e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>

		Font=((MSB_1&0x04)<<2)|((LSB_1&0x04)>>2);
     822:	8f 81       	ldd	r24, Y+7	; 0x07
     824:	88 2f       	mov	r24, r24
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	84 70       	andi	r24, 0x04	; 4
     82a:	99 27       	eor	r25, r25
     82c:	88 0f       	add	r24, r24
     82e:	99 1f       	adc	r25, r25
     830:	88 0f       	add	r24, r24
     832:	99 1f       	adc	r25, r25
     834:	28 2f       	mov	r18, r24
     836:	8c 81       	ldd	r24, Y+4	; 0x04
     838:	88 2f       	mov	r24, r24
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	84 70       	andi	r24, 0x04	; 4
     83e:	99 27       	eor	r25, r25
     840:	95 95       	asr	r25
     842:	87 95       	ror	r24
     844:	95 95       	asr	r25
     846:	87 95       	ror	r24
     848:	82 2b       	or	r24, r18
     84a:	88 87       	std	Y+8, r24	; 0x08
		Font=Font|(Font<<1)|(Font<<2)|(Font<<3);
     84c:	88 85       	ldd	r24, Y+8	; 0x08
     84e:	88 2f       	mov	r24, r24
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	88 0f       	add	r24, r24
     854:	99 1f       	adc	r25, r25
     856:	98 2f       	mov	r25, r24
     858:	88 85       	ldd	r24, Y+8	; 0x08
     85a:	29 2f       	mov	r18, r25
     85c:	28 2b       	or	r18, r24
     85e:	88 85       	ldd	r24, Y+8	; 0x08
     860:	88 2f       	mov	r24, r24
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	88 0f       	add	r24, r24
     866:	99 1f       	adc	r25, r25
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	28 2b       	or	r18, r24
     86e:	88 85       	ldd	r24, Y+8	; 0x08
     870:	88 2f       	mov	r24, r24
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	88 0f       	add	r24, r24
     876:	99 1f       	adc	r25, r25
     878:	88 0f       	add	r24, r24
     87a:	99 1f       	adc	r25, r25
     87c:	88 0f       	add	r24, r24
     87e:	99 1f       	adc	r25, r25
     880:	82 2b       	or	r24, r18
     882:	88 87       	std	Y+8, r24	; 0x08
		Write_Data(Font);
     884:	88 85       	ldd	r24, Y+8	; 0x08
     886:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
		Font=((MSB_2&0x04)<<2)|((LSB_2&0x04)>>2);
     88a:	8d 81       	ldd	r24, Y+5	; 0x05
     88c:	88 2f       	mov	r24, r24
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	84 70       	andi	r24, 0x04	; 4
     892:	99 27       	eor	r25, r25
     894:	88 0f       	add	r24, r24
     896:	99 1f       	adc	r25, r25
     898:	88 0f       	add	r24, r24
     89a:	99 1f       	adc	r25, r25
     89c:	28 2f       	mov	r18, r24
     89e:	8e 81       	ldd	r24, Y+6	; 0x06
     8a0:	88 2f       	mov	r24, r24
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	84 70       	andi	r24, 0x04	; 4
     8a6:	99 27       	eor	r25, r25
     8a8:	95 95       	asr	r25
     8aa:	87 95       	ror	r24
     8ac:	95 95       	asr	r25
     8ae:	87 95       	ror	r24
     8b0:	82 2b       	or	r24, r18
     8b2:	88 87       	std	Y+8, r24	; 0x08
		Font=Font|(Font<<1)|(Font<<2)|(Font<<3);
     8b4:	88 85       	ldd	r24, Y+8	; 0x08
     8b6:	88 2f       	mov	r24, r24
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	88 0f       	add	r24, r24
     8bc:	99 1f       	adc	r25, r25
     8be:	98 2f       	mov	r25, r24
     8c0:	88 85       	ldd	r24, Y+8	; 0x08
     8c2:	29 2f       	mov	r18, r25
     8c4:	28 2b       	or	r18, r24
     8c6:	88 85       	ldd	r24, Y+8	; 0x08
     8c8:	88 2f       	mov	r24, r24
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	88 0f       	add	r24, r24
     8ce:	99 1f       	adc	r25, r25
     8d0:	88 0f       	add	r24, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	28 2b       	or	r18, r24
     8d6:	88 85       	ldd	r24, Y+8	; 0x08
     8d8:	88 2f       	mov	r24, r24
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	88 0f       	add	r24, r24
     8de:	99 1f       	adc	r25, r25
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	88 0f       	add	r24, r24
     8e6:	99 1f       	adc	r25, r25
     8e8:	82 2b       	or	r24, r18
     8ea:	88 87       	std	Y+8, r24	; 0x08
		Write_Data(Font);
     8ec:	88 85       	ldd	r24, Y+8	; 0x08
     8ee:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>

		Font=((MSB_1&0x08)<<1)|((LSB_1&0x08)>>3);
     8f2:	8f 81       	ldd	r24, Y+7	; 0x07
     8f4:	88 2f       	mov	r24, r24
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	88 70       	andi	r24, 0x08	; 8
     8fa:	99 27       	eor	r25, r25
     8fc:	88 0f       	add	r24, r24
     8fe:	99 1f       	adc	r25, r25
     900:	28 2f       	mov	r18, r24
     902:	8c 81       	ldd	r24, Y+4	; 0x04
     904:	88 2f       	mov	r24, r24
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	88 70       	andi	r24, 0x08	; 8
     90a:	99 27       	eor	r25, r25
     90c:	95 95       	asr	r25
     90e:	87 95       	ror	r24
     910:	95 95       	asr	r25
     912:	87 95       	ror	r24
     914:	95 95       	asr	r25
     916:	87 95       	ror	r24
     918:	82 2b       	or	r24, r18
     91a:	88 87       	std	Y+8, r24	; 0x08
		Font=Font|(Font<<1)|(Font<<2)|(Font<<3);
     91c:	88 85       	ldd	r24, Y+8	; 0x08
     91e:	88 2f       	mov	r24, r24
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	88 0f       	add	r24, r24
     924:	99 1f       	adc	r25, r25
     926:	98 2f       	mov	r25, r24
     928:	88 85       	ldd	r24, Y+8	; 0x08
     92a:	29 2f       	mov	r18, r25
     92c:	28 2b       	or	r18, r24
     92e:	88 85       	ldd	r24, Y+8	; 0x08
     930:	88 2f       	mov	r24, r24
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	88 0f       	add	r24, r24
     936:	99 1f       	adc	r25, r25
     938:	88 0f       	add	r24, r24
     93a:	99 1f       	adc	r25, r25
     93c:	28 2b       	or	r18, r24
     93e:	88 85       	ldd	r24, Y+8	; 0x08
     940:	88 2f       	mov	r24, r24
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	88 0f       	add	r24, r24
     946:	99 1f       	adc	r25, r25
     948:	88 0f       	add	r24, r24
     94a:	99 1f       	adc	r25, r25
     94c:	88 0f       	add	r24, r24
     94e:	99 1f       	adc	r25, r25
     950:	82 2b       	or	r24, r18
     952:	88 87       	std	Y+8, r24	; 0x08
		Write_Data(Font);
     954:	88 85       	ldd	r24, Y+8	; 0x08
     956:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
		Font=((MSB_2&0x08)<<1)|((LSB_2&0x08)>>3);
     95a:	8d 81       	ldd	r24, Y+5	; 0x05
     95c:	88 2f       	mov	r24, r24
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	88 70       	andi	r24, 0x08	; 8
     962:	99 27       	eor	r25, r25
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	28 2f       	mov	r18, r24
     96a:	8e 81       	ldd	r24, Y+6	; 0x06
     96c:	88 2f       	mov	r24, r24
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	88 70       	andi	r24, 0x08	; 8
     972:	99 27       	eor	r25, r25
     974:	95 95       	asr	r25
     976:	87 95       	ror	r24
     978:	95 95       	asr	r25
     97a:	87 95       	ror	r24
     97c:	95 95       	asr	r25
     97e:	87 95       	ror	r24
     980:	82 2b       	or	r24, r18
     982:	88 87       	std	Y+8, r24	; 0x08
		Font=Font|(Font<<1)|(Font<<2)|(Font<<3);
     984:	88 85       	ldd	r24, Y+8	; 0x08
     986:	88 2f       	mov	r24, r24
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	88 0f       	add	r24, r24
     98c:	99 1f       	adc	r25, r25
     98e:	98 2f       	mov	r25, r24
     990:	88 85       	ldd	r24, Y+8	; 0x08
     992:	29 2f       	mov	r18, r25
     994:	28 2b       	or	r18, r24
     996:	88 85       	ldd	r24, Y+8	; 0x08
     998:	88 2f       	mov	r24, r24
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	88 0f       	add	r24, r24
     99e:	99 1f       	adc	r25, r25
     9a0:	88 0f       	add	r24, r24
     9a2:	99 1f       	adc	r25, r25
     9a4:	28 2b       	or	r18, r24
     9a6:	88 85       	ldd	r24, Y+8	; 0x08
     9a8:	88 2f       	mov	r24, r24
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	88 0f       	add	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	82 2b       	or	r24, r18
     9ba:	88 87       	std	Y+8, r24	; 0x08
		Write_Data(Font);
     9bc:	88 85       	ldd	r24, Y+8	; 0x08
     9be:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>

		Font=((MSB_1&0x10)<<3)|((LSB_1&0x10)>>1);
     9c2:	8f 81       	ldd	r24, Y+7	; 0x07
     9c4:	88 2f       	mov	r24, r24
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	80 71       	andi	r24, 0x10	; 16
     9ca:	99 27       	eor	r25, r25
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	88 0f       	add	r24, r24
     9d2:	99 1f       	adc	r25, r25
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	28 2f       	mov	r18, r24
     9da:	8c 81       	ldd	r24, Y+4	; 0x04
     9dc:	88 2f       	mov	r24, r24
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	80 71       	andi	r24, 0x10	; 16
     9e2:	99 27       	eor	r25, r25
     9e4:	95 95       	asr	r25
     9e6:	87 95       	ror	r24
     9e8:	82 2b       	or	r24, r18
     9ea:	88 87       	std	Y+8, r24	; 0x08
		Font=Font|(Font>>1)|(Font>>2)|(Font>>3);
     9ec:	88 85       	ldd	r24, Y+8	; 0x08
     9ee:	98 2f       	mov	r25, r24
     9f0:	96 95       	lsr	r25
     9f2:	88 85       	ldd	r24, Y+8	; 0x08
     9f4:	98 2b       	or	r25, r24
     9f6:	88 85       	ldd	r24, Y+8	; 0x08
     9f8:	86 95       	lsr	r24
     9fa:	86 95       	lsr	r24
     9fc:	98 2b       	or	r25, r24
     9fe:	88 85       	ldd	r24, Y+8	; 0x08
     a00:	86 95       	lsr	r24
     a02:	86 95       	lsr	r24
     a04:	86 95       	lsr	r24
     a06:	89 2b       	or	r24, r25
     a08:	88 87       	std	Y+8, r24	; 0x08
		Write_Data(Font);
     a0a:	88 85       	ldd	r24, Y+8	; 0x08
     a0c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
		Font=((MSB_2&0x10)<<3)|((LSB_2&0x10)>>1);
     a10:	8d 81       	ldd	r24, Y+5	; 0x05
     a12:	88 2f       	mov	r24, r24
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	80 71       	andi	r24, 0x10	; 16
     a18:	99 27       	eor	r25, r25
     a1a:	88 0f       	add	r24, r24
     a1c:	99 1f       	adc	r25, r25
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	88 0f       	add	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	28 2f       	mov	r18, r24
     a28:	8e 81       	ldd	r24, Y+6	; 0x06
     a2a:	88 2f       	mov	r24, r24
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	80 71       	andi	r24, 0x10	; 16
     a30:	99 27       	eor	r25, r25
     a32:	95 95       	asr	r25
     a34:	87 95       	ror	r24
     a36:	82 2b       	or	r24, r18
     a38:	88 87       	std	Y+8, r24	; 0x08
		Font=Font|(Font>>1)|(Font>>2)|(Font>>3);
     a3a:	88 85       	ldd	r24, Y+8	; 0x08
     a3c:	98 2f       	mov	r25, r24
     a3e:	96 95       	lsr	r25
     a40:	88 85       	ldd	r24, Y+8	; 0x08
     a42:	98 2b       	or	r25, r24
     a44:	88 85       	ldd	r24, Y+8	; 0x08
     a46:	86 95       	lsr	r24
     a48:	86 95       	lsr	r24
     a4a:	98 2b       	or	r25, r24
     a4c:	88 85       	ldd	r24, Y+8	; 0x08
     a4e:	86 95       	lsr	r24
     a50:	86 95       	lsr	r24
     a52:	86 95       	lsr	r24
     a54:	89 2b       	or	r24, r25
     a56:	88 87       	std	Y+8, r24	; 0x08
		Write_Data(Font);
     a58:	88 85       	ldd	r24, Y+8	; 0x08
     a5a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>

		Font=((MSB_1&0x20)<<2)|((LSB_1&0x20)>>2);
     a5e:	8f 81       	ldd	r24, Y+7	; 0x07
     a60:	88 2f       	mov	r24, r24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	80 72       	andi	r24, 0x20	; 32
     a66:	99 27       	eor	r25, r25
     a68:	88 0f       	add	r24, r24
     a6a:	99 1f       	adc	r25, r25
     a6c:	88 0f       	add	r24, r24
     a6e:	99 1f       	adc	r25, r25
     a70:	28 2f       	mov	r18, r24
     a72:	8c 81       	ldd	r24, Y+4	; 0x04
     a74:	88 2f       	mov	r24, r24
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	80 72       	andi	r24, 0x20	; 32
     a7a:	99 27       	eor	r25, r25
     a7c:	95 95       	asr	r25
     a7e:	87 95       	ror	r24
     a80:	95 95       	asr	r25
     a82:	87 95       	ror	r24
     a84:	82 2b       	or	r24, r18
     a86:	88 87       	std	Y+8, r24	; 0x08
		Font=Font|(Font>>1)|(Font>>2)|(Font>>3);
     a88:	88 85       	ldd	r24, Y+8	; 0x08
     a8a:	98 2f       	mov	r25, r24
     a8c:	96 95       	lsr	r25
     a8e:	88 85       	ldd	r24, Y+8	; 0x08
     a90:	98 2b       	or	r25, r24
     a92:	88 85       	ldd	r24, Y+8	; 0x08
     a94:	86 95       	lsr	r24
     a96:	86 95       	lsr	r24
     a98:	98 2b       	or	r25, r24
     a9a:	88 85       	ldd	r24, Y+8	; 0x08
     a9c:	86 95       	lsr	r24
     a9e:	86 95       	lsr	r24
     aa0:	86 95       	lsr	r24
     aa2:	89 2b       	or	r24, r25
     aa4:	88 87       	std	Y+8, r24	; 0x08
		Write_Data(Font);
     aa6:	88 85       	ldd	r24, Y+8	; 0x08
     aa8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
		Font=((MSB_2&0x20)<<2)|((LSB_2&0x20)>>2);
     aac:	8d 81       	ldd	r24, Y+5	; 0x05
     aae:	88 2f       	mov	r24, r24
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	80 72       	andi	r24, 0x20	; 32
     ab4:	99 27       	eor	r25, r25
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	88 0f       	add	r24, r24
     abc:	99 1f       	adc	r25, r25
     abe:	28 2f       	mov	r18, r24
     ac0:	8e 81       	ldd	r24, Y+6	; 0x06
     ac2:	88 2f       	mov	r24, r24
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	80 72       	andi	r24, 0x20	; 32
     ac8:	99 27       	eor	r25, r25
     aca:	95 95       	asr	r25
     acc:	87 95       	ror	r24
     ace:	95 95       	asr	r25
     ad0:	87 95       	ror	r24
     ad2:	82 2b       	or	r24, r18
     ad4:	88 87       	std	Y+8, r24	; 0x08
		Font=Font|(Font>>1)|(Font>>2)|(Font>>3);
     ad6:	88 85       	ldd	r24, Y+8	; 0x08
     ad8:	98 2f       	mov	r25, r24
     ada:	96 95       	lsr	r25
     adc:	88 85       	ldd	r24, Y+8	; 0x08
     ade:	98 2b       	or	r25, r24
     ae0:	88 85       	ldd	r24, Y+8	; 0x08
     ae2:	86 95       	lsr	r24
     ae4:	86 95       	lsr	r24
     ae6:	98 2b       	or	r25, r24
     ae8:	88 85       	ldd	r24, Y+8	; 0x08
     aea:	86 95       	lsr	r24
     aec:	86 95       	lsr	r24
     aee:	86 95       	lsr	r24
     af0:	89 2b       	or	r24, r25
     af2:	88 87       	std	Y+8, r24	; 0x08
		Write_Data(Font);
     af4:	88 85       	ldd	r24, Y+8	; 0x08
     af6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>

		Font=((MSB_1&0x40)<<1)|((LSB_1&0x40)>>3);
     afa:	8f 81       	ldd	r24, Y+7	; 0x07
     afc:	88 2f       	mov	r24, r24
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	80 74       	andi	r24, 0x40	; 64
     b02:	99 27       	eor	r25, r25
     b04:	88 0f       	add	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	28 2f       	mov	r18, r24
     b0a:	8c 81       	ldd	r24, Y+4	; 0x04
     b0c:	88 2f       	mov	r24, r24
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	80 74       	andi	r24, 0x40	; 64
     b12:	99 27       	eor	r25, r25
     b14:	95 95       	asr	r25
     b16:	87 95       	ror	r24
     b18:	95 95       	asr	r25
     b1a:	87 95       	ror	r24
     b1c:	95 95       	asr	r25
     b1e:	87 95       	ror	r24
     b20:	82 2b       	or	r24, r18
     b22:	88 87       	std	Y+8, r24	; 0x08
		Font=Font|(Font>>1)|(Font>>2)|(Font>>3);
     b24:	88 85       	ldd	r24, Y+8	; 0x08
     b26:	98 2f       	mov	r25, r24
     b28:	96 95       	lsr	r25
     b2a:	88 85       	ldd	r24, Y+8	; 0x08
     b2c:	98 2b       	or	r25, r24
     b2e:	88 85       	ldd	r24, Y+8	; 0x08
     b30:	86 95       	lsr	r24
     b32:	86 95       	lsr	r24
     b34:	98 2b       	or	r25, r24
     b36:	88 85       	ldd	r24, Y+8	; 0x08
     b38:	86 95       	lsr	r24
     b3a:	86 95       	lsr	r24
     b3c:	86 95       	lsr	r24
     b3e:	89 2b       	or	r24, r25
     b40:	88 87       	std	Y+8, r24	; 0x08
		Write_Data(Font);
     b42:	88 85       	ldd	r24, Y+8	; 0x08
     b44:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
		Font=((MSB_2&0x40)<<1)|((LSB_2&0x40)>>3);
     b48:	8d 81       	ldd	r24, Y+5	; 0x05
     b4a:	88 2f       	mov	r24, r24
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	80 74       	andi	r24, 0x40	; 64
     b50:	99 27       	eor	r25, r25
     b52:	88 0f       	add	r24, r24
     b54:	99 1f       	adc	r25, r25
     b56:	28 2f       	mov	r18, r24
     b58:	8e 81       	ldd	r24, Y+6	; 0x06
     b5a:	88 2f       	mov	r24, r24
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	80 74       	andi	r24, 0x40	; 64
     b60:	99 27       	eor	r25, r25
     b62:	95 95       	asr	r25
     b64:	87 95       	ror	r24
     b66:	95 95       	asr	r25
     b68:	87 95       	ror	r24
     b6a:	95 95       	asr	r25
     b6c:	87 95       	ror	r24
     b6e:	82 2b       	or	r24, r18
     b70:	88 87       	std	Y+8, r24	; 0x08
		Font=Font|(Font>>1)|(Font>>2)|(Font>>3);
     b72:	88 85       	ldd	r24, Y+8	; 0x08
     b74:	98 2f       	mov	r25, r24
     b76:	96 95       	lsr	r25
     b78:	88 85       	ldd	r24, Y+8	; 0x08
     b7a:	98 2b       	or	r25, r24
     b7c:	88 85       	ldd	r24, Y+8	; 0x08
     b7e:	86 95       	lsr	r24
     b80:	86 95       	lsr	r24
     b82:	98 2b       	or	r25, r24
     b84:	88 85       	ldd	r24, Y+8	; 0x08
     b86:	86 95       	lsr	r24
     b88:	86 95       	lsr	r24
     b8a:	86 95       	lsr	r24
     b8c:	89 2b       	or	r24, r25
     b8e:	88 87       	std	Y+8, r24	; 0x08
		Write_Data(Font);
     b90:	88 85       	ldd	r24, Y+8	; 0x08
     b92:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>

		Font=(MSB_1&0x80)|((LSB_1&0x80)>>4);
     b96:	8f 81       	ldd	r24, Y+7	; 0x07
     b98:	28 2f       	mov	r18, r24
     b9a:	20 78       	andi	r18, 0x80	; 128
     b9c:	8c 81       	ldd	r24, Y+4	; 0x04
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	80 78       	andi	r24, 0x80	; 128
     ba4:	99 27       	eor	r25, r25
     ba6:	95 95       	asr	r25
     ba8:	87 95       	ror	r24
     baa:	95 95       	asr	r25
     bac:	87 95       	ror	r24
     bae:	95 95       	asr	r25
     bb0:	87 95       	ror	r24
     bb2:	95 95       	asr	r25
     bb4:	87 95       	ror	r24
     bb6:	82 2b       	or	r24, r18
     bb8:	88 87       	std	Y+8, r24	; 0x08
		Font=Font|(Font>>1)|(Font>>2)|(Font>>3);
     bba:	88 85       	ldd	r24, Y+8	; 0x08
     bbc:	98 2f       	mov	r25, r24
     bbe:	96 95       	lsr	r25
     bc0:	88 85       	ldd	r24, Y+8	; 0x08
     bc2:	98 2b       	or	r25, r24
     bc4:	88 85       	ldd	r24, Y+8	; 0x08
     bc6:	86 95       	lsr	r24
     bc8:	86 95       	lsr	r24
     bca:	98 2b       	or	r25, r24
     bcc:	88 85       	ldd	r24, Y+8	; 0x08
     bce:	86 95       	lsr	r24
     bd0:	86 95       	lsr	r24
     bd2:	86 95       	lsr	r24
     bd4:	89 2b       	or	r24, r25
     bd6:	88 87       	std	Y+8, r24	; 0x08
		Write_Data(Font);
     bd8:	88 85       	ldd	r24, Y+8	; 0x08
     bda:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
		Font=(MSB_2&0x80)|((LSB_2&0x80)>>4);
     bde:	8d 81       	ldd	r24, Y+5	; 0x05
     be0:	28 2f       	mov	r18, r24
     be2:	20 78       	andi	r18, 0x80	; 128
     be4:	8e 81       	ldd	r24, Y+6	; 0x06
     be6:	88 2f       	mov	r24, r24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	80 78       	andi	r24, 0x80	; 128
     bec:	99 27       	eor	r25, r25
     bee:	95 95       	asr	r25
     bf0:	87 95       	ror	r24
     bf2:	95 95       	asr	r25
     bf4:	87 95       	ror	r24
     bf6:	95 95       	asr	r25
     bf8:	87 95       	ror	r24
     bfa:	95 95       	asr	r25
     bfc:	87 95       	ror	r24
     bfe:	82 2b       	or	r24, r18
     c00:	88 87       	std	Y+8, r24	; 0x08
		Font=Font|(Font>>1)|(Font>>2)|(Font>>3);
     c02:	88 85       	ldd	r24, Y+8	; 0x08
     c04:	98 2f       	mov	r25, r24
     c06:	96 95       	lsr	r25
     c08:	88 85       	ldd	r24, Y+8	; 0x08
     c0a:	98 2b       	or	r25, r24
     c0c:	88 85       	ldd	r24, Y+8	; 0x08
     c0e:	86 95       	lsr	r24
     c10:	86 95       	lsr	r24
     c12:	98 2b       	or	r25, r24
     c14:	88 85       	ldd	r24, Y+8	; 0x08
     c16:	86 95       	lsr	r24
     c18:	86 95       	lsr	r24
     c1a:	86 95       	lsr	r24
     c1c:	89 2b       	or	r24, r25
     c1e:	88 87       	std	Y+8, r24	; 0x08
		Write_Data(Font);
     c20:	88 85       	ldd	r24, Y+8	; 0x08
     c22:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>

		c++;
     c26:	8b 85       	ldd	r24, Y+11	; 0x0b
     c28:	8f 5f       	subi	r24, 0xFF	; 255
     c2a:	8b 87       	std	Y+11, r24	; 0x0b
		Src_Pointer=&Ascii_2[(b-1)][0];
		break;
	}

	Set_Remap_Format(0x15);
	for(i=0;i<=1;i++)
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	8f 5f       	subi	r24, 0xFF	; 255
     c30:	8b 83       	std	Y+3, r24	; 0x03
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <Show_Font57+0x6a2>
     c38:	ef cc       	rjmp	.-1570   	; 0x618 <Show_Font57+0x80>
		Font=Font|(Font>>1)|(Font>>2)|(Font>>3);
		Write_Data(Font);

		c++;
	}
	Set_Remap_Format(0x14);
     c3a:	84 e1       	ldi	r24, 0x14	; 20
     c3c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Set_Remap_Format>
}
     c40:	2c 96       	adiw	r28, 0x0c	; 12
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	08 95       	ret

00000c52 <Show_String>:
//    b: Start X Address
//    c: Start Y Address
//    * Must write "0" in the end...
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void Show_String(unsigned char a, unsigned char *Data_Pointer, unsigned char b, unsigned char c)
{
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	27 97       	sbiw	r28, 0x07	; 7
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	8b 83       	std	Y+3, r24	; 0x03
     c68:	7d 83       	std	Y+5, r23	; 0x05
     c6a:	6c 83       	std	Y+4, r22	; 0x04
     c6c:	4e 83       	std	Y+6, r20	; 0x06
     c6e:	2f 83       	std	Y+7, r18	; 0x07
	unsigned char *Src_Pointer;

	Src_Pointer=Data_Pointer;
     c70:	8c 81       	ldd	r24, Y+4	; 0x04
     c72:	9d 81       	ldd	r25, Y+5	; 0x05
     c74:	9a 83       	std	Y+2, r25	; 0x02
     c76:	89 83       	std	Y+1, r24	; 0x01
	Show_Font57(1,96,b,c);			// No-Break Space
     c78:	2f 81       	ldd	r18, Y+7	; 0x07
     c7a:	4e 81       	ldd	r20, Y+6	; 0x06
     c7c:	60 e6       	ldi	r22, 0x60	; 96
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	0e 94 cc 02 	call	0x598	; 0x598 <Show_Font57>
	//   Must be written first before the string start...

	while(1)
	{
		Show_Font57(a,*Src_Pointer,b,c);
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	9a 81       	ldd	r25, Y+2	; 0x02
     c88:	fc 01       	movw	r30, r24
     c8a:	80 81       	ld	r24, Z
     c8c:	2f 81       	ldd	r18, Y+7	; 0x07
     c8e:	4e 81       	ldd	r20, Y+6	; 0x06
     c90:	68 2f       	mov	r22, r24
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	0e 94 cc 02 	call	0x598	; 0x598 <Show_Font57>
		Src_Pointer++;
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	9a 81       	ldd	r25, Y+2	; 0x02
     c9c:	01 96       	adiw	r24, 0x01	; 1
     c9e:	9a 83       	std	Y+2, r25	; 0x02
     ca0:	89 83       	std	Y+1, r24	; 0x01
		b+=2;
     ca2:	8e 81       	ldd	r24, Y+6	; 0x06
     ca4:	8e 5f       	subi	r24, 0xFE	; 254
     ca6:	8e 83       	std	Y+6, r24	; 0x06
		if(*Src_Pointer == 0) break;
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	9a 81       	ldd	r25, Y+2	; 0x02
     cac:	fc 01       	movw	r30, r24
     cae:	80 81       	ld	r24, Z
     cb0:	88 23       	and	r24, r24
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <Show_String+0x64>
     cb4:	01 c0       	rjmp	.+2      	; 0xcb8 <Show_String+0x66>
	}
     cb6:	e6 cf       	rjmp	.-52     	; 0xc84 <Show_String+0x32>
}
     cb8:	27 96       	adiw	r28, 0x07	; 7
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <Data_processing>:

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  DATA PROCESSING
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void Data_processing(unsigned char temp)  //turns 1byte B/W data to 4 bye gray data
{unsigned char temp1,temp2,temp3,temp4,temp5,temp6,temp7,temp8;
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	65 97       	sbiw	r28, 0x15	; 21
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
     cde:	8d 8b       	std	Y+21, r24	; 0x15
	unsigned char h11,h12,h13,h14,h15,h16,h17,h18,d1,d2,d3,d4;

	temp1=temp&0x80;
     ce0:	8d 89       	ldd	r24, Y+21	; 0x15
     ce2:	80 78       	andi	r24, 0x80	; 128
     ce4:	89 83       	std	Y+1, r24	; 0x01
	temp2=(temp&0x40)>>3;
     ce6:	8d 89       	ldd	r24, Y+21	; 0x15
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	80 74       	andi	r24, 0x40	; 64
     cee:	99 27       	eor	r25, r25
     cf0:	95 95       	asr	r25
     cf2:	87 95       	ror	r24
     cf4:	95 95       	asr	r25
     cf6:	87 95       	ror	r24
     cf8:	95 95       	asr	r25
     cfa:	87 95       	ror	r24
     cfc:	8a 83       	std	Y+2, r24	; 0x02
	temp3=(temp&0x20)<<2;
     cfe:	8d 89       	ldd	r24, Y+21	; 0x15
     d00:	80 72       	andi	r24, 0x20	; 32
     d02:	88 0f       	add	r24, r24
     d04:	88 0f       	add	r24, r24
     d06:	8b 83       	std	Y+3, r24	; 0x03
	temp4=(temp&0x10)>>1;
     d08:	8d 89       	ldd	r24, Y+21	; 0x15
     d0a:	88 2f       	mov	r24, r24
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	80 71       	andi	r24, 0x10	; 16
     d10:	99 27       	eor	r25, r25
     d12:	95 95       	asr	r25
     d14:	87 95       	ror	r24
     d16:	8c 83       	std	Y+4, r24	; 0x04
	temp5=(temp&0x08)<<4;
     d18:	8d 89       	ldd	r24, Y+21	; 0x15
     d1a:	88 70       	andi	r24, 0x08	; 8
     d1c:	82 95       	swap	r24
     d1e:	80 7f       	andi	r24, 0xF0	; 240
     d20:	8d 83       	std	Y+5, r24	; 0x05
	temp6=(temp&0x04)<<1;
     d22:	8d 89       	ldd	r24, Y+21	; 0x15
     d24:	84 70       	andi	r24, 0x04	; 4
     d26:	88 0f       	add	r24, r24
     d28:	8e 83       	std	Y+6, r24	; 0x06
	temp7=(temp&0x02)<<6;
     d2a:	8d 89       	ldd	r24, Y+21	; 0x15
     d2c:	82 70       	andi	r24, 0x02	; 2
     d2e:	82 95       	swap	r24
     d30:	88 0f       	add	r24, r24
     d32:	88 0f       	add	r24, r24
     d34:	80 7c       	andi	r24, 0xC0	; 192
     d36:	8f 83       	std	Y+7, r24	; 0x07
	temp8=(temp&0x01)<<3;
     d38:	8d 89       	ldd	r24, Y+21	; 0x15
     d3a:	81 70       	andi	r24, 0x01	; 1
     d3c:	88 0f       	add	r24, r24
     d3e:	88 0f       	add	r24, r24
     d40:	88 0f       	add	r24, r24
     d42:	88 87       	std	Y+8, r24	; 0x08
	h11=temp1|temp1>>1|temp1>>2|temp1>>3;
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	98 2f       	mov	r25, r24
     d48:	96 95       	lsr	r25
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	98 2b       	or	r25, r24
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	86 95       	lsr	r24
     d52:	86 95       	lsr	r24
     d54:	98 2b       	or	r25, r24
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	86 95       	lsr	r24
     d5a:	86 95       	lsr	r24
     d5c:	86 95       	lsr	r24
     d5e:	89 2b       	or	r24, r25
     d60:	89 87       	std	Y+9, r24	; 0x09
	h12=temp2|temp2>>1|temp2>>2|temp2>>3;
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	98 2f       	mov	r25, r24
     d66:	96 95       	lsr	r25
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	98 2b       	or	r25, r24
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	86 95       	lsr	r24
     d70:	86 95       	lsr	r24
     d72:	98 2b       	or	r25, r24
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	86 95       	lsr	r24
     d78:	86 95       	lsr	r24
     d7a:	86 95       	lsr	r24
     d7c:	89 2b       	or	r24, r25
     d7e:	8a 87       	std	Y+10, r24	; 0x0a
	h13=temp3|temp3>>1|temp3>>2|temp3>>3;
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	98 2f       	mov	r25, r24
     d84:	96 95       	lsr	r25
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	98 2b       	or	r25, r24
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	86 95       	lsr	r24
     d8e:	86 95       	lsr	r24
     d90:	98 2b       	or	r25, r24
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	86 95       	lsr	r24
     d96:	86 95       	lsr	r24
     d98:	86 95       	lsr	r24
     d9a:	89 2b       	or	r24, r25
     d9c:	8b 87       	std	Y+11, r24	; 0x0b
	h14=temp4|temp4>>1|temp4>>2|temp4>>3;
     d9e:	8c 81       	ldd	r24, Y+4	; 0x04
     da0:	98 2f       	mov	r25, r24
     da2:	96 95       	lsr	r25
     da4:	8c 81       	ldd	r24, Y+4	; 0x04
     da6:	98 2b       	or	r25, r24
     da8:	8c 81       	ldd	r24, Y+4	; 0x04
     daa:	86 95       	lsr	r24
     dac:	86 95       	lsr	r24
     dae:	98 2b       	or	r25, r24
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	86 95       	lsr	r24
     db4:	86 95       	lsr	r24
     db6:	86 95       	lsr	r24
     db8:	89 2b       	or	r24, r25
     dba:	8c 87       	std	Y+12, r24	; 0x0c
	h15=temp5|temp5>>1|temp5>>2|temp5>>3;
     dbc:	8d 81       	ldd	r24, Y+5	; 0x05
     dbe:	98 2f       	mov	r25, r24
     dc0:	96 95       	lsr	r25
     dc2:	8d 81       	ldd	r24, Y+5	; 0x05
     dc4:	98 2b       	or	r25, r24
     dc6:	8d 81       	ldd	r24, Y+5	; 0x05
     dc8:	86 95       	lsr	r24
     dca:	86 95       	lsr	r24
     dcc:	98 2b       	or	r25, r24
     dce:	8d 81       	ldd	r24, Y+5	; 0x05
     dd0:	86 95       	lsr	r24
     dd2:	86 95       	lsr	r24
     dd4:	86 95       	lsr	r24
     dd6:	89 2b       	or	r24, r25
     dd8:	8d 87       	std	Y+13, r24	; 0x0d
	h16=temp6|temp6>>1|temp6>>2|temp6>>3;
     dda:	8e 81       	ldd	r24, Y+6	; 0x06
     ddc:	98 2f       	mov	r25, r24
     dde:	96 95       	lsr	r25
     de0:	8e 81       	ldd	r24, Y+6	; 0x06
     de2:	98 2b       	or	r25, r24
     de4:	8e 81       	ldd	r24, Y+6	; 0x06
     de6:	86 95       	lsr	r24
     de8:	86 95       	lsr	r24
     dea:	98 2b       	or	r25, r24
     dec:	8e 81       	ldd	r24, Y+6	; 0x06
     dee:	86 95       	lsr	r24
     df0:	86 95       	lsr	r24
     df2:	86 95       	lsr	r24
     df4:	89 2b       	or	r24, r25
     df6:	8e 87       	std	Y+14, r24	; 0x0e
	h17=temp7|temp7>>1|temp7>>2|temp7>>3;
     df8:	8f 81       	ldd	r24, Y+7	; 0x07
     dfa:	98 2f       	mov	r25, r24
     dfc:	96 95       	lsr	r25
     dfe:	8f 81       	ldd	r24, Y+7	; 0x07
     e00:	98 2b       	or	r25, r24
     e02:	8f 81       	ldd	r24, Y+7	; 0x07
     e04:	86 95       	lsr	r24
     e06:	86 95       	lsr	r24
     e08:	98 2b       	or	r25, r24
     e0a:	8f 81       	ldd	r24, Y+7	; 0x07
     e0c:	86 95       	lsr	r24
     e0e:	86 95       	lsr	r24
     e10:	86 95       	lsr	r24
     e12:	89 2b       	or	r24, r25
     e14:	8f 87       	std	Y+15, r24	; 0x0f
	h18=temp8|temp8>>1|temp8>>2|temp8>>3;
     e16:	88 85       	ldd	r24, Y+8	; 0x08
     e18:	98 2f       	mov	r25, r24
     e1a:	96 95       	lsr	r25
     e1c:	88 85       	ldd	r24, Y+8	; 0x08
     e1e:	98 2b       	or	r25, r24
     e20:	88 85       	ldd	r24, Y+8	; 0x08
     e22:	86 95       	lsr	r24
     e24:	86 95       	lsr	r24
     e26:	98 2b       	or	r25, r24
     e28:	88 85       	ldd	r24, Y+8	; 0x08
     e2a:	86 95       	lsr	r24
     e2c:	86 95       	lsr	r24
     e2e:	86 95       	lsr	r24
     e30:	89 2b       	or	r24, r25
     e32:	88 8b       	std	Y+16, r24	; 0x10
	d1=h11|h12;
     e34:	99 85       	ldd	r25, Y+9	; 0x09
     e36:	8a 85       	ldd	r24, Y+10	; 0x0a
     e38:	89 2b       	or	r24, r25
     e3a:	89 8b       	std	Y+17, r24	; 0x11
	d2=h13|h14;
     e3c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e3e:	8c 85       	ldd	r24, Y+12	; 0x0c
     e40:	89 2b       	or	r24, r25
     e42:	8a 8b       	std	Y+18, r24	; 0x12
	d3=h15|h16;
     e44:	9d 85       	ldd	r25, Y+13	; 0x0d
     e46:	8e 85       	ldd	r24, Y+14	; 0x0e
     e48:	89 2b       	or	r24, r25
     e4a:	8b 8b       	std	Y+19, r24	; 0x13
	d4=h17|h18;
     e4c:	9f 85       	ldd	r25, Y+15	; 0x0f
     e4e:	88 89       	ldd	r24, Y+16	; 0x10
     e50:	89 2b       	or	r24, r25
     e52:	8c 8b       	std	Y+20, r24	; 0x14

	Write_Data(d1);
     e54:	89 89       	ldd	r24, Y+17	; 0x11
     e56:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	Write_Data(d2);
     e5a:	8a 89       	ldd	r24, Y+18	; 0x12
     e5c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	Write_Data(d3);
     e60:	8b 89       	ldd	r24, Y+19	; 0x13
     e62:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	Write_Data(d4);
     e66:	8c 89       	ldd	r24, Y+20	; 0x14
     e68:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
}
     e6c:	65 96       	adiw	r28, 0x15	; 21
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	08 95       	ret

00000e7e <Display_Picture>:

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  DISPLAY PICTURE
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void Display_Picture(unsigned char pic[])
{
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	00 d0       	rcall	.+0      	; 0xe84 <Display_Picture+0x6>
     e84:	00 d0       	rcall	.+0      	; 0xe86 <Display_Picture+0x8>
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	9c 83       	std	Y+4, r25	; 0x04
     e8c:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char i,j;
	Set_Column_Address(Shift+0x00,Shift+0x77);
     e8e:	63 e9       	ldi	r22, 0x93	; 147
     e90:	8c e1       	ldi	r24, 0x1C	; 28
     e92:	0e 94 27 01 	call	0x24e	; 0x24e <Set_Column_Address>
	Set_Row_Address(0x00,0x7F);
     e96:	6f e7       	ldi	r22, 0x7F	; 127
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	0e 94 3c 01 	call	0x278	; 0x278 <Set_Row_Address>
	Set_Write_RAM();
     e9e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Set_Write_RAM>

	for(i=0;i<64;i++)
     ea2:	19 82       	std	Y+1, r1	; 0x01
     ea4:	25 c0       	rjmp	.+74     	; 0xef0 <Display_Picture+0x72>
	{
		for(j=0;j<60;j++)
     ea6:	1a 82       	std	Y+2, r1	; 0x02
     ea8:	1d c0       	rjmp	.+58     	; 0xee4 <Display_Picture+0x66>
		{
			Data_processing(pic[i*32+j]);
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	88 2f       	mov	r24, r24
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	9c 01       	movw	r18, r24
     eb2:	22 0f       	add	r18, r18
     eb4:	33 1f       	adc	r19, r19
     eb6:	22 95       	swap	r18
     eb8:	32 95       	swap	r19
     eba:	30 7f       	andi	r19, 0xF0	; 240
     ebc:	32 27       	eor	r19, r18
     ebe:	20 7f       	andi	r18, 0xF0	; 240
     ec0:	32 27       	eor	r19, r18
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	82 0f       	add	r24, r18
     eca:	93 1f       	adc	r25, r19
     ecc:	9c 01       	movw	r18, r24
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	9c 81       	ldd	r25, Y+4	; 0x04
     ed2:	82 0f       	add	r24, r18
     ed4:	93 1f       	adc	r25, r19
     ed6:	fc 01       	movw	r30, r24
     ed8:	80 81       	ld	r24, Z
     eda:	0e 94 65 06 	call	0xcca	; 0xcca <Data_processing>
	Set_Row_Address(0x00,0x7F);
	Set_Write_RAM();

	for(i=0;i<64;i++)
	{
		for(j=0;j<60;j++)
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	8f 5f       	subi	r24, 0xFF	; 255
     ee2:	8a 83       	std	Y+2, r24	; 0x02
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	8c 33       	cpi	r24, 0x3C	; 60
     ee8:	00 f3       	brcs	.-64     	; 0xeaa <Display_Picture+0x2c>
	unsigned char i,j;
	Set_Column_Address(Shift+0x00,Shift+0x77);
	Set_Row_Address(0x00,0x7F);
	Set_Write_RAM();

	for(i=0;i<64;i++)
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	8f 5f       	subi	r24, 0xFF	; 255
     eee:	89 83       	std	Y+1, r24	; 0x01
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	80 34       	cpi	r24, 0x40	; 64
     ef4:	c0 f2       	brcs	.-80     	; 0xea6 <Display_Picture+0x28>
		for(j=0;j<60;j++)
		{
			Data_processing(pic[i*32+j]);
		}
	}
	return;
     ef6:	00 00       	nop
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	08 95       	ret

00000f06 <Set_Gray_Scale_Table>:

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  Gray Scale Table Setting (Full Screen)
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void Set_Gray_Scale_Table()
{
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
	Write_Command(0xB8);			// Set Gray Scale Table
     f0e:	88 eb       	ldi	r24, 0xB8	; 184
     f10:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
	Write_Data(0x0C);			//   Gray Scale Level 1
     f14:	8c e0       	ldi	r24, 0x0C	; 12
     f16:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	Write_Data(0x18);			//   Gray Scale Level 2
     f1a:	88 e1       	ldi	r24, 0x18	; 24
     f1c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	Write_Data(0x24);			//   Gray Scale Level 3
     f20:	84 e2       	ldi	r24, 0x24	; 36
     f22:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	Write_Data(0x30);			//   Gray Scale Level 4
     f26:	80 e3       	ldi	r24, 0x30	; 48
     f28:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	Write_Data(0x3C);			//   Gray Scale Level 5
     f2c:	8c e3       	ldi	r24, 0x3C	; 60
     f2e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	Write_Data(0x48);			//   Gray Scale Level 6
     f32:	88 e4       	ldi	r24, 0x48	; 72
     f34:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	Write_Data(0x54);			//   Gray Scale Level 7
     f38:	84 e5       	ldi	r24, 0x54	; 84
     f3a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	Write_Data(0x60);			//   Gray Scale Level 8
     f3e:	80 e6       	ldi	r24, 0x60	; 96
     f40:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	Write_Data(0x6C);			//   Gray Scale Level 9
     f44:	8c e6       	ldi	r24, 0x6C	; 108
     f46:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	Write_Data(0x78);			//   Gray Scale Level 10
     f4a:	88 e7       	ldi	r24, 0x78	; 120
     f4c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	Write_Data(0x84);			//   Gray Scale Level 11
     f50:	84 e8       	ldi	r24, 0x84	; 132
     f52:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	Write_Data(0x90);			//   Gray Scale Level 12
     f56:	80 e9       	ldi	r24, 0x90	; 144
     f58:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	Write_Data(0x9C);			//   Gray Scale Level 13
     f5c:	8c e9       	ldi	r24, 0x9C	; 156
     f5e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	Write_Data(0xA8);			//   Gray Scale Level 14
     f62:	88 ea       	ldi	r24, 0xA8	; 168
     f64:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>
	Write_Data(0xB4);			//   Gray Scale Level 15
     f68:	84 eb       	ldi	r24, 0xB4	; 180
     f6a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Write_Data>

	Write_Command(0x00);			// Enable Gray Scale Table
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	0e 94 c5 00 	call	0x18a	; 0x18a <Write_Command>
}
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	08 95       	ret

00000f7a <OLED_Init>:

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  Initialization
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void OLED_Init()
{
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
	
	
	unsigned char i;

	RESET_low;
     f82:	85 e2       	ldi	r24, 0x25	; 37
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	25 e2       	ldi	r18, 0x25	; 37
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	f9 01       	movw	r30, r18
     f8c:	20 81       	ld	r18, Z
     f8e:	2f 7b       	andi	r18, 0xBF	; 191
     f90:	fc 01       	movw	r30, r24
     f92:	20 83       	st	Z, r18
	Delay(1000);
     f94:	88 ee       	ldi	r24, 0xE8	; 232
     f96:	93 e0       	ldi	r25, 0x03	; 3
     f98:	0e 94 a3 00 	call	0x146	; 0x146 <Delay>
	
	RESET_high;
     f9c:	85 e2       	ldi	r24, 0x25	; 37
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	25 e2       	ldi	r18, 0x25	; 37
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	f9 01       	movw	r30, r18
     fa6:	20 81       	ld	r18, Z
     fa8:	20 64       	ori	r18, 0x40	; 64
     faa:	fc 01       	movw	r30, r24
     fac:	20 83       	st	Z, r18


	Set_Command_Lock(0x12);			// Unlock Basic Commands (0x12/0x16)
     fae:	82 e1       	ldi	r24, 0x12	; 18
     fb0:	0e 94 91 02 	call	0x522	; 0x522 <Set_Command_Lock>
	Set_Display_On_Off(0x00);		// Display Off (0x00/0x01)
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	0e 94 c8 01 	call	0x390	; 0x390 <Set_Display_On_Off>
	Set_Display_Clock(0x91);		// Set Clock as 80 Frames/Sec
     fba:	81 e9       	ldi	r24, 0x91	; 145
     fbc:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Set_Display_Clock>
	Set_Multiplex_Ratio(0x3F);		// 1/64 Duty (0x0F~0x3F)
     fc0:	8f e3       	ldi	r24, 0x3F	; 63
     fc2:	0e 94 6d 02 	call	0x4da	; 0x4da <Set_Multiplex_Ratio>
	Set_Display_Offset(0x00);		// Shift Mapping RAM Counter (0x00~0x3F)
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Set_Display_Offset>
	Set_Start_Line(0x00);			// Set Mapping RAM Display Start Line (0x00~0x7F)
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Set_Start_Line>
	Set_Remap_Format(0x14);			// Set Horizontal Address Increment
     fd2:	84 e1       	ldi	r24, 0x14	; 20
     fd4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Set_Remap_Format>
	//     Column Address 0 Mapped to SEG0
	//     Disable Nibble Remap
	//     Scan from COM[N-1] to COM0
	//     Disable COM Split Odd Even
	//     Enable Dual COM Line Mode
	Set_GPIO(0x00);				// Disable GPIO Pins Input
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	0e 94 0d 02 	call	0x41a	; 0x41a <Set_GPIO>
	Set_Function_Selection(0x01);		// Enable Internal VDD Regulator
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	0e 94 b8 01 	call	0x370	; 0x370 <Set_Function_Selection>
	Set_Display_Enhancement_A(0xA0,0xFD);	// Enable External VSL
     fe4:	6d ef       	ldi	r22, 0xFD	; 253
     fe6:	80 ea       	ldi	r24, 0xA0	; 160
     fe8:	0e 94 f6 01 	call	0x3ec	; 0x3ec <Set_Display_Enhancement_A>
	// Set Low Gray Scale Enhancement
	Set_Contrast_Current(0x7F);		// Set Segment Output Current
     fec:	8f e7       	ldi	r24, 0x7F	; 127
     fee:	0e 94 4d 02 	call	0x49a	; 0x49a <Set_Contrast_Current>
	Set_Master_Current(Brightness);		// Set Scale Factor of Segment Output Current Control
     ff2:	8f e0       	ldi	r24, 0x0F	; 15
     ff4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Set_Master_Current>
	Set_Gray_Scale_Table();			// Set Pulse Width for Gray Scale Table
     ff8:	0e 94 83 07 	call	0xf06	; 0xf06 <Set_Gray_Scale_Table>
	Set_Phase_Length(0xE2);			// Set Phase 1 as 5 Clocks & Phase 2 as 14 Clocks
     ffc:	82 ee       	ldi	r24, 0xE2	; 226
     ffe:	0e 94 d6 01 	call	0x3ac	; 0x3ac <Set_Phase_Length>
	Set_Display_Enhancement_B(0x20);	// Enhance Driving Scheme Capability (0x00/0x20)
    1002:	80 e2       	ldi	r24, 0x20	; 32
    1004:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Set_Display_Enhancement_B>
	Set_Precharge_Voltage(0x1F);		// Set Pre-Charge Voltage Level as 0.60*VCC
    1008:	8f e1       	ldi	r24, 0x1F	; 31
    100a:	0e 94 2d 02 	call	0x45a	; 0x45a <Set_Precharge_Voltage>
	Set_Precharge_Period(0x08);		// Set Second Pre-Charge Period as 8 Clocks
    100e:	88 e0       	ldi	r24, 0x08	; 8
    1010:	0e 94 1d 02 	call	0x43a	; 0x43a <Set_Precharge_Period>
	Set_VCOMH(0x07);			// Set Common Pins Deselect Voltage Level as 0.86*VCC
    1014:	87 e0       	ldi	r24, 0x07	; 7
    1016:	0e 94 3d 02 	call	0x47a	; 0x47a <Set_VCOMH>
	Set_Display_Mode(0x02);			// Normal Display Mode (0x00/0x01/0x02/0x03)
    101a:	82 e0       	ldi	r24, 0x02	; 2
    101c:	0e 94 8e 01 	call	0x31c	; 0x31c <Set_Display_Mode>
	Set_Partial_Display(0x01,0x00,0x00);	// Disable Partial Display
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	0e 94 9c 01 	call	0x338	; 0x338 <Set_Partial_Display>

	Fill_RAM(0x00);				// Clear Screen
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	0e 94 a2 02 	call	0x544	; 0x544 <Fill_RAM>

	Set_Display_On_Off(0x01);		// Display On (0x00/0x01)
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	0e 94 c8 01 	call	0x390	; 0x390 <Set_Display_On_Off>
	
	
}
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	08 95       	ret

0000103c <main>:

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  Main Program
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
int main()
{
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	a3 97       	sbiw	r28, 0x23	; 35
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
	
	DDRB = 0b11100011;	//b7 - SCK; b1 - MOSI
    1050:	84 e2       	ldi	r24, 0x24	; 36
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	23 ee       	ldi	r18, 0xE3	; 227
    1056:	fc 01       	movw	r30, r24
    1058:	20 83       	st	Z, r18
	DDRD = 0b00001001;	//b3 - SS pin
    105a:	8a e2       	ldi	r24, 0x2A	; 42
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	29 e0       	ldi	r18, 0x09	; 9
    1060:	fc 01       	movw	r30, r24
    1062:	20 83       	st	Z, r18
	SPI_clock_high;
    1064:	85 e2       	ldi	r24, 0x25	; 37
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	25 e2       	ldi	r18, 0x25	; 37
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	f9 01       	movw	r30, r18
    106e:	20 81       	ld	r18, Z
    1070:	20 68       	ori	r18, 0x80	; 128
    1072:	fc 01       	movw	r30, r24
    1074:	20 83       	st	Z, r18
	
	unsigned char MTemp1[]= "MTEMP";
    1076:	86 e0       	ldi	r24, 0x06	; 6
    1078:	e7 ec       	ldi	r30, 0xC7	; 199
    107a:	ff e0       	ldi	r31, 0x0F	; 15
    107c:	de 01       	movw	r26, r28
    107e:	15 96       	adiw	r26, 0x05	; 5
    1080:	01 90       	ld	r0, Z+
    1082:	0d 92       	st	X+, r0
    1084:	8a 95       	dec	r24
    1086:	e1 f7       	brne	.-8      	; 0x1080 <main+0x44>
	unsigned char MTemp2[]= "MTEMP";
    1088:	86 e0       	ldi	r24, 0x06	; 6
    108a:	e7 ec       	ldi	r30, 0xC7	; 199
    108c:	ff e0       	ldi	r31, 0x0F	; 15
    108e:	de 01       	movw	r26, r28
    1090:	1b 96       	adiw	r26, 0x0b	; 11
    1092:	01 90       	ld	r0, Z+
    1094:	0d 92       	st	X+, r0
    1096:	8a 95       	dec	r24
    1098:	e1 f7       	brne	.-8      	; 0x1092 <main+0x56>
	unsigned char MTemp3[]= "MTEMP";
    109a:	86 e0       	ldi	r24, 0x06	; 6
    109c:	e7 ec       	ldi	r30, 0xC7	; 199
    109e:	ff e0       	ldi	r31, 0x0F	; 15
    10a0:	de 01       	movw	r26, r28
    10a2:	51 96       	adiw	r26, 0x11	; 17
    10a4:	01 90       	ld	r0, Z+
    10a6:	0d 92       	st	X+, r0
    10a8:	8a 95       	dec	r24
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <main+0x68>
	unsigned char MTemp4[]= "MTEMP";
    10ac:	86 e0       	ldi	r24, 0x06	; 6
    10ae:	e7 ec       	ldi	r30, 0xC7	; 199
    10b0:	ff e0       	ldi	r31, 0x0F	; 15
    10b2:	de 01       	movw	r26, r28
    10b4:	57 96       	adiw	r26, 0x17	; 23
    10b6:	01 90       	ld	r0, Z+
    10b8:	0d 92       	st	X+, r0
    10ba:	8a 95       	dec	r24
    10bc:	e1 f7       	brne	.-8      	; 0x10b6 <main+0x7a>
	unsigned char Charge[]="CHARGE";
    10be:	87 e0       	ldi	r24, 0x07	; 7
    10c0:	ed ec       	ldi	r30, 0xCD	; 205
    10c2:	ff e0       	ldi	r31, 0x0F	; 15
    10c4:	de 01       	movw	r26, r28
    10c6:	5d 96       	adiw	r26, 0x1d	; 29
    10c8:	01 90       	ld	r0, Z+
    10ca:	0d 92       	st	X+, r0
    10cc:	8a 95       	dec	r24
    10ce:	e1 f7       	brne	.-8      	; 0x10c8 <main+0x8c>
	//unsigned char Name3[]="REKT";

	//unsigned char i;

	spi_init();
    10d0:	0e 94 55 00 	call	0xaa	; 0xaa <spi_init>
	OLED_Init();
    10d4:	0e 94 bd 07 	call	0xf7a	; 0xf7a <OLED_Init>

Fill_RAM(0x00);			// Clear Screen
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	0e 94 a2 02 	call	0x544	; 0x544 <Fill_RAM>
unsigned int index33 = 0x17;
    10de:	87 e1       	ldi	r24, 0x17	; 23
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	9a 83       	std	Y+2, r25	; 0x02
    10e4:	89 83       	std	Y+1, r24	; 0x01
unsigned char character66 = 65;
    10e6:	81 e4       	ldi	r24, 0x41	; 65
    10e8:	8b 83       	std	Y+3, r24	; 0x03
//Set_Column_Address(30,30);
//Set_Row_Address(24,65);
//Set_Write_RAM();
//Fill_RAM(0xFF);

unsigned char temp_brightness = 0;
    10ea:	1c 82       	std	Y+4, r1	; 0x04

Display_Picture(Motorsport);
    10ec:	87 ec       	ldi	r24, 0xC7	; 199
    10ee:	97 e0       	ldi	r25, 0x07	; 7
    10f0:	0e 94 3f 07 	call	0xe7e	; 0xe7e <Display_Picture>

Delay(2000);
    10f4:	80 ed       	ldi	r24, 0xD0	; 208
    10f6:	97 e0       	ldi	r25, 0x07	; 7
    10f8:	0e 94 a3 00 	call	0x146	; 0x146 <Delay>

Fill_RAM(0x00);			// Clear Screen
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	0e 94 a2 02 	call	0x544	; 0x544 <Fill_RAM>
		//Show_Font57(1,68,0x05,0x05);
		//Show_String(1,&Name,0x17,0x14);
		//Delay(1000);
		
		//Fill_RAM(0x00);	
		Show_String(1,&MTemp1,0x05,0x05);
    1102:	ce 01       	movw	r24, r28
    1104:	05 96       	adiw	r24, 0x05	; 5
    1106:	25 e0       	ldi	r18, 0x05	; 5
    1108:	45 e0       	ldi	r20, 0x05	; 5
    110a:	bc 01       	movw	r22, r24
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	0e 94 29 06 	call	0xc52	; 0xc52 <Show_String>
		Show_String(1,&MTemp2,0x05,0x15);
    1112:	ce 01       	movw	r24, r28
    1114:	0b 96       	adiw	r24, 0x0b	; 11
    1116:	25 e1       	ldi	r18, 0x15	; 21
    1118:	45 e0       	ldi	r20, 0x05	; 5
    111a:	bc 01       	movw	r22, r24
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	0e 94 29 06 	call	0xc52	; 0xc52 <Show_String>
		Show_String(1,&MTemp3,0x05,0x25);
    1122:	ce 01       	movw	r24, r28
    1124:	41 96       	adiw	r24, 0x11	; 17
    1126:	25 e2       	ldi	r18, 0x25	; 37
    1128:	45 e0       	ldi	r20, 0x05	; 5
    112a:	bc 01       	movw	r22, r24
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	0e 94 29 06 	call	0xc52	; 0xc52 <Show_String>
		Show_String(1,&MTemp4,0x05,0x30);
    1132:	ce 01       	movw	r24, r28
    1134:	47 96       	adiw	r24, 0x17	; 23
    1136:	20 e3       	ldi	r18, 0x30	; 48
    1138:	45 e0       	ldi	r20, 0x05	; 5
    113a:	bc 01       	movw	r22, r24
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	0e 94 29 06 	call	0xc52	; 0xc52 <Show_String>
		Show_String(1,&Charge,0x27,0x05);
    1142:	ce 01       	movw	r24, r28
    1144:	4d 96       	adiw	r24, 0x1d	; 29
    1146:	25 e0       	ldi	r18, 0x05	; 5
    1148:	47 e2       	ldi	r20, 0x27	; 39
    114a:	bc 01       	movw	r22, r24
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	0e 94 29 06 	call	0xc52	; 0xc52 <Show_String>
		// Show String - Un
		Show_String(1,Name,0x17,0x14);
		Delay(1000);
		Fill_RAM(0x00);			// Clear Screen
		*/
	}
    1152:	d7 cf       	rjmp	.-82     	; 0x1102 <__stack+0x3>

00001154 <_exit>:
    1154:	f8 94       	cli

00001156 <__stop_program>:
    1156:	ff cf       	rjmp	.-2      	; 0x1156 <__stop_program>
