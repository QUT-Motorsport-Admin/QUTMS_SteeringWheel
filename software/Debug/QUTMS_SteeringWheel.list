
QUTMS_SteeringWheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a64  08005144  08005144  00015144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ba8  08007ba8  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08007ba8  08007ba8  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ba8  08007ba8  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ba8  08007ba8  00017ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bac  08007bac  00017bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08007bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  200000d0  08007c80  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  08007c80  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7f9  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002736  00000000  00000000  0002f8f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d58  00000000  00000000  00032030  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00019797  00000000  00000000  00032d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000c881  00000000  00000000  0004c51f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0009278c  00000000  00000000  00058da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000eb52c  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000bc8  00000000  00000000  000eb5a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00003774  00000000  00000000  000ec170  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800512c 	.word	0x0800512c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	0800512c 	.word	0x0800512c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ili9488_Init>:

#define  LCD_IO_WriteData16_to_2x8(dt)    {LCD_IO_WriteData8((dt) >> 8); LCD_IO_WriteData8(dt); }

//-----------------------------------------------------------------------------
void ili9488_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  if((Is_ili9488_Initialized & ILI9488_LCD_INITIALIZED) == 0)
 8000274:	4b43      	ldr	r3, [pc, #268]	; (8000384 <ili9488_Init+0x114>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	f003 0301 	and.w	r3, r3, #1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d115      	bne.n	80002ac <ili9488_Init+0x3c>
  {
    Is_ili9488_Initialized |= ILI9488_LCD_INITIALIZED;
 8000280:	4b40      	ldr	r3, [pc, #256]	; (8000384 <ili9488_Init+0x114>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	f043 0301 	orr.w	r3, r3, #1
 8000288:	b2da      	uxtb	r2, r3
 800028a:	4b3e      	ldr	r3, [pc, #248]	; (8000384 <ili9488_Init+0x114>)
 800028c:	701a      	strb	r2, [r3, #0]
    if((Is_ili9488_Initialized & ILI9488_IO_INITIALIZED) == 0)
 800028e:	4b3d      	ldr	r3, [pc, #244]	; (8000384 <ili9488_Init+0x114>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	f003 0302 	and.w	r3, r3, #2
 8000296:	2b00      	cmp	r3, #0
 8000298:	d101      	bne.n	800029e <ili9488_Init+0x2e>
      LCD_IO_Init();
 800029a:	f000 fd67 	bl	8000d6c <LCD_IO_Init>
    Is_ili9488_Initialized |= ILI9488_IO_INITIALIZED;
 800029e:	4b39      	ldr	r3, [pc, #228]	; (8000384 <ili9488_Init+0x114>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	f043 0302 	orr.w	r3, r3, #2
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	4b36      	ldr	r3, [pc, #216]	; (8000384 <ili9488_Init+0x114>)
 80002aa:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(105);
 80002ac:	2069      	movs	r0, #105	; 0x69
 80002ae:	f000 fd39 	bl	8000d24 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SWRESET);
 80002b2:	2001      	movs	r0, #1
 80002b4:	f000 fe12 	bl	8000edc <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 80002b8:	2005      	movs	r0, #5
 80002ba:	f000 fd33 	bl	8000d24 <LCD_Delay>
  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRP1, (uint8_t *)"\x00\x03\x09\x08\x16\x0A\x3F\x78\x4C\x09\x0A\x08\x16\x1A\x0F", 15);
 80002be:	220f      	movs	r2, #15
 80002c0:	4931      	ldr	r1, [pc, #196]	; (8000388 <ili9488_Init+0x118>)
 80002c2:	20e0      	movs	r0, #224	; 0xe0
 80002c4:	f000 fe74 	bl	8000fb0 <LCD_IO_WriteCmd8MultipleData8>
  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRN1, (uint8_t *)"\x00\x16\x19\x03\x0F\x05\x32\x45\x46\x04\x0E\x0D\x35\x37\x0F", 15);
 80002c8:	220f      	movs	r2, #15
 80002ca:	4930      	ldr	r1, [pc, #192]	; (800038c <ili9488_Init+0x11c>)
 80002cc:	20e1      	movs	r0, #225	; 0xe1
 80002ce:	f000 fe6f 	bl	8000fb0 <LCD_IO_WriteCmd8MultipleData8>
  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_PWCTR1, (uint8_t *)"\x17\x15", 2);
 80002d2:	2202      	movs	r2, #2
 80002d4:	492e      	ldr	r1, [pc, #184]	; (8000390 <ili9488_Init+0x120>)
 80002d6:	20c0      	movs	r0, #192	; 0xc0
 80002d8:	f000 fe6a 	bl	8000fb0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 80002dc:	2005      	movs	r0, #5
 80002de:	f000 fd21 	bl	8000d24 <LCD_Delay>
  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8(ILI9488_PWCTR2); LCD_IO_WriteData8(0x41);
 80002e2:	20c1      	movs	r0, #193	; 0xc1
 80002e4:	f000 fdfa 	bl	8000edc <LCD_IO_WriteCmd8>
 80002e8:	2041      	movs	r0, #65	; 0x41
 80002ea:	f000 fe17 	bl	8000f1c <LCD_IO_WriteData8>
  LCD_Delay(5);
 80002ee:	2005      	movs	r0, #5
 80002f0:	f000 fd18 	bl	8000d24 <LCD_Delay>
  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_VMCTR1, (uint8_t *)"\x00\x12\x80", 3);
 80002f4:	2203      	movs	r2, #3
 80002f6:	4927      	ldr	r1, [pc, #156]	; (8000394 <ili9488_Init+0x124>)
 80002f8:	20c5      	movs	r0, #197	; 0xc5
 80002fa:	f000 fe59 	bl	8000fb0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 80002fe:	2005      	movs	r0, #5
 8000300:	f000 fd10 	bl	8000d24 <LCD_Delay>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x66); // Interface Pixel Format (24 bit)
 8000304:	203a      	movs	r0, #58	; 0x3a
 8000306:	f000 fde9 	bl	8000edc <LCD_IO_WriteCmd8>
 800030a:	2066      	movs	r0, #102	; 0x66
 800030c:	f000 fe06 	bl	8000f1c <LCD_IO_WriteData8>
  #if LCD_SPI_MODE != 2
  // LCD_IO_WriteCmd8(0xFB); LCD_IO_WriteData8(0x80);
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x80); // Interface Mode Control (SDO NOT USE)
  #else
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x00); // Interface Mode Control (SDO USE)
 8000310:	20b0      	movs	r0, #176	; 0xb0
 8000312:	f000 fde3 	bl	8000edc <LCD_IO_WriteCmd8>
 8000316:	2000      	movs	r0, #0
 8000318:	f000 fe00 	bl	8000f1c <LCD_IO_WriteData8>
  #endif
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x55); // Interface Pixel Format (16 bit)
  #endif
  LCD_IO_WriteCmd8(ILI9488_FRMCTR1); LCD_IO_WriteData8(0xA0); // Frame rate (60Hz)
 800031c:	20b1      	movs	r0, #177	; 0xb1
 800031e:	f000 fddd 	bl	8000edc <LCD_IO_WriteCmd8>
 8000322:	20a0      	movs	r0, #160	; 0xa0
 8000324:	f000 fdfa 	bl	8000f1c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_INVCTR); LCD_IO_WriteData8(0x02); // Display Inversion Control (2-dot)
 8000328:	20b4      	movs	r0, #180	; 0xb4
 800032a:	f000 fdd7 	bl	8000edc <LCD_IO_WriteCmd8>
 800032e:	2002      	movs	r0, #2
 8000330:	f000 fdf4 	bl	8000f1c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_DFUNCTR, (uint8_t *)"\x02\x02", 2); // Display Function Control RGB/MCU Interface Control
 8000334:	2202      	movs	r2, #2
 8000336:	4918      	ldr	r1, [pc, #96]	; (8000398 <ili9488_Init+0x128>)
 8000338:	20b6      	movs	r0, #182	; 0xb6
 800033a:	f000 fe39 	bl	8000fb0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9488_IMGFUNCT); LCD_IO_WriteData8(0x00); // Set Image Functio (Disable 24 bit data)
 800033e:	20e9      	movs	r0, #233	; 0xe9
 8000340:	f000 fdcc 	bl	8000edc <LCD_IO_WriteCmd8>
 8000344:	2000      	movs	r0, #0
 8000346:	f000 fde9 	bl	8000f1c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_ADJCTR3, (uint8_t *)"\xA9\x51\x2C\x82", 4); // Adjust Control (D7 stream, loose)
 800034a:	2204      	movs	r2, #4
 800034c:	4913      	ldr	r1, [pc, #76]	; (800039c <ili9488_Init+0x12c>)
 800034e:	20f7      	movs	r0, #247	; 0xf7
 8000350:	f000 fe2e 	bl	8000fb0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8000354:	2005      	movs	r0, #5
 8000356:	f000 fce5 	bl	8000d24 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Exit Sleep
 800035a:	2011      	movs	r0, #17
 800035c:	f000 fdbe 	bl	8000edc <LCD_IO_WriteCmd8>
  LCD_Delay(120);
 8000360:	2078      	movs	r0, #120	; 0x78
 8000362:	f000 fcdf 	bl	8000d24 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_DISPON);      // Display on
 8000366:	2029      	movs	r0, #41	; 0x29
 8000368:	f000 fdb8 	bl	8000edc <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 800036c:	2005      	movs	r0, #5
 800036e:	f000 fcd9 	bl	8000d24 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 8000372:	2036      	movs	r0, #54	; 0x36
 8000374:	f000 fdb2 	bl	8000edc <LCD_IO_WriteCmd8>
 8000378:	2048      	movs	r0, #72	; 0x48
 800037a:	f000 fdcf 	bl	8000f1c <LCD_IO_WriteData8>
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	200000ec 	.word	0x200000ec
 8000388:	08005144 	.word	0x08005144
 800038c:	08005154 	.word	0x08005154
 8000390:	08005164 	.word	0x08005164
 8000394:	08005168 	.word	0x08005168
 8000398:	0800516c 	.word	0x0800516c
 800039c:	08005170 	.word	0x08005170

080003a0 <ili9488_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOn(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Display on
 80003a4:	2011      	movs	r0, #17
 80003a6:	f000 fd99 	bl	8000edc <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(1);
 80003aa:	2001      	movs	r0, #1
 80003ac:	f000 fcc6 	bl	8000d3c <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <ili9488_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOff(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPIN);       // Display off
 80003b8:	2010      	movs	r0, #16
 80003ba:	f000 fd8f 	bl	8000edc <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(0);
 80003be:	2000      	movs	r0, #0
 80003c0:	f000 fcbc 	bl	8000d3c <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <ili9488_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9488_GetLcdPixelWidth(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  return ILI9488_MAX_X + 1;
 80003cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr

080003da <ili9488_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9488_GetLcdPixelHeight(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0
  return ILI9488_MAX_Y + 1;
 80003de:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <ili9488_ReadID>:
  * @brief  Get the ILI9488 ID.
  * @param  None
  * @retval The ILI9488 ID
  */
uint16_t ili9488_ReadID(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	607b      	str	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();

  if(Is_ili9488_Initialized == 0)
 80003f6:	4b0d      	ldr	r3, [pc, #52]	; (800042c <ili9488_ReadID+0x40>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d101      	bne.n	8000402 <ili9488_ReadID+0x16>
  {
    ili9488_Init();
 80003fe:	f7ff ff37 	bl	8000270 <ili9488_Init>
  }

  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData8(0x04, (uint8_t *)&id, 3, 0);
 8000402:	1d39      	adds	r1, r7, #4
 8000404:	2300      	movs	r3, #0
 8000406:	2203      	movs	r2, #3
 8000408:	2004      	movs	r0, #4
 800040a:	f000 fe1b 	bl	8001044 <LCD_IO_ReadCmd8MultipleData8>
  id <<= 1;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	607b      	str	r3, [r7, #4]
  #endif
  // printf("ID:%08X\r\n", (unsigned int)id);

  ILI9488_LCDMUTEX_POP();

  if(id == 0x00668054)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a06      	ldr	r2, [pc, #24]	; (8000430 <ili9488_ReadID+0x44>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d102      	bne.n	8000422 <ili9488_ReadID+0x36>
    return 0x9488;
 800041c:	f249 4388 	movw	r3, #38024	; 0x9488
 8000420:	e000      	b.n	8000424 <ili9488_ReadID+0x38>
  return 0;
 8000422:	2300      	movs	r3, #0
}
 8000424:	4618      	mov	r0, r3
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	200000ec 	.word	0x200000ec
 8000430:	00668054 	.word	0x00668054

08000434 <ili9488_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9488_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	460a      	mov	r2, r1
 800043e:	80fb      	strh	r3, [r7, #6]
 8000440:	4613      	mov	r3, r2
 8000442:	80bb      	strh	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8000444:	202a      	movs	r0, #42	; 0x2a
 8000446:	f000 fd49 	bl	8000edc <LCD_IO_WriteCmd8>
 800044a:	88fb      	ldrh	r3, [r7, #6]
 800044c:	0a1b      	lsrs	r3, r3, #8
 800044e:	b29b      	uxth	r3, r3
 8000450:	b2db      	uxtb	r3, r3
 8000452:	4618      	mov	r0, r3
 8000454:	f000 fd62 	bl	8000f1c <LCD_IO_WriteData8>
 8000458:	88fb      	ldrh	r3, [r7, #6]
 800045a:	b2db      	uxtb	r3, r3
 800045c:	4618      	mov	r0, r3
 800045e:	f000 fd5d 	bl	8000f1c <LCD_IO_WriteData8>
 8000462:	88fb      	ldrh	r3, [r7, #6]
 8000464:	0a1b      	lsrs	r3, r3, #8
 8000466:	b29b      	uxth	r3, r3
 8000468:	b2db      	uxtb	r3, r3
 800046a:	4618      	mov	r0, r3
 800046c:	f000 fd56 	bl	8000f1c <LCD_IO_WriteData8>
 8000470:	88fb      	ldrh	r3, [r7, #6]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	4618      	mov	r0, r3
 8000476:	f000 fd51 	bl	8000f1c <LCD_IO_WriteData8>
 800047a:	202b      	movs	r0, #43	; 0x2b
 800047c:	f000 fd2e 	bl	8000edc <LCD_IO_WriteCmd8>
 8000480:	88bb      	ldrh	r3, [r7, #4]
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	b29b      	uxth	r3, r3
 8000486:	b2db      	uxtb	r3, r3
 8000488:	4618      	mov	r0, r3
 800048a:	f000 fd47 	bl	8000f1c <LCD_IO_WriteData8>
 800048e:	88bb      	ldrh	r3, [r7, #4]
 8000490:	b2db      	uxtb	r3, r3
 8000492:	4618      	mov	r0, r3
 8000494:	f000 fd42 	bl	8000f1c <LCD_IO_WriteData8>
 8000498:	88bb      	ldrh	r3, [r7, #4]
 800049a:	0a1b      	lsrs	r3, r3, #8
 800049c:	b29b      	uxth	r3, r3
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 fd3b 	bl	8000f1c <LCD_IO_WriteData8>
 80004a6:	88bb      	ldrh	r3, [r7, #4]
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 fd36 	bl	8000f1c <LCD_IO_WriteData8>
  ILI9488_LCDMUTEX_POP();
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <ili9488_write16to24>:

/* The SPI mode not capable the 16bpp mode -> convert to 24bpp */
#if ILI9488_INTERFACE == 0
extern inline void ili9488_write16to24(uint16_t RGBCode);
inline void ili9488_write16to24(uint16_t RGBCode)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData8((RGBCode & 0xF800) >> 8);
 80004c2:	88fb      	ldrh	r3, [r7, #6]
 80004c4:	121b      	asrs	r3, r3, #8
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	f023 0307 	bic.w	r3, r3, #7
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	4618      	mov	r0, r3
 80004d0:	f000 fd24 	bl	8000f1c <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x07E0) >> 3);
 80004d4:	88fb      	ldrh	r3, [r7, #6]
 80004d6:	10db      	asrs	r3, r3, #3
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	f023 0303 	bic.w	r3, r3, #3
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	4618      	mov	r0, r3
 80004e2:	f000 fd1b 	bl	8000f1c <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x001F) << 3);
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 fd15 	bl	8000f1c <LCD_IO_WriteData8>
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <ili9488_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9488_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b082      	sub	sp, #8
 80004fe:	af00      	add	r7, sp, #0
 8000500:	4603      	mov	r3, r0
 8000502:	80fb      	strh	r3, [r7, #6]
 8000504:	460b      	mov	r3, r1
 8000506:	80bb      	strh	r3, [r7, #4]
 8000508:	4613      	mov	r3, r2
 800050a:	807b      	strh	r3, [r7, #2]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 800050c:	202a      	movs	r0, #42	; 0x2a
 800050e:	f000 fce5 	bl	8000edc <LCD_IO_WriteCmd8>
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	0a1b      	lsrs	r3, r3, #8
 8000516:	b29b      	uxth	r3, r3
 8000518:	b2db      	uxtb	r3, r3
 800051a:	4618      	mov	r0, r3
 800051c:	f000 fcfe 	bl	8000f1c <LCD_IO_WriteData8>
 8000520:	88fb      	ldrh	r3, [r7, #6]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	4618      	mov	r0, r3
 8000526:	f000 fcf9 	bl	8000f1c <LCD_IO_WriteData8>
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	0a1b      	lsrs	r3, r3, #8
 800052e:	b29b      	uxth	r3, r3
 8000530:	b2db      	uxtb	r3, r3
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fcf2 	bl	8000f1c <LCD_IO_WriteData8>
 8000538:	88fb      	ldrh	r3, [r7, #6]
 800053a:	b2db      	uxtb	r3, r3
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fced 	bl	8000f1c <LCD_IO_WriteData8>
 8000542:	202b      	movs	r0, #43	; 0x2b
 8000544:	f000 fcca 	bl	8000edc <LCD_IO_WriteCmd8>
 8000548:	88bb      	ldrh	r3, [r7, #4]
 800054a:	0a1b      	lsrs	r3, r3, #8
 800054c:	b29b      	uxth	r3, r3
 800054e:	b2db      	uxtb	r3, r3
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fce3 	bl	8000f1c <LCD_IO_WriteData8>
 8000556:	88bb      	ldrh	r3, [r7, #4]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fcde 	bl	8000f1c <LCD_IO_WriteData8>
 8000560:	88bb      	ldrh	r3, [r7, #4]
 8000562:	0a1b      	lsrs	r3, r3, #8
 8000564:	b29b      	uxth	r3, r3
 8000566:	b2db      	uxtb	r3, r3
 8000568:	4618      	mov	r0, r3
 800056a:	f000 fcd7 	bl	8000f1c <LCD_IO_WriteData8>
 800056e:	88bb      	ldrh	r3, [r7, #4]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 fcd2 	bl	8000f1c <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8000578:	202c      	movs	r0, #44	; 0x2c
 800057a:	f000 fcaf 	bl	8000edc <LCD_IO_WriteCmd8>
  ili9488_write16to24(RGBCode);
 800057e:	887b      	ldrh	r3, [r7, #2]
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff ff99 	bl	80004b8 <ili9488_write16to24>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_RAMWR); LCD_IO_WriteData16(RGBCode);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <ili9488_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9488_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b084      	sub	sp, #16
 8000592:	af00      	add	r7, sp, #0
 8000594:	4603      	mov	r3, r0
 8000596:	460a      	mov	r2, r1
 8000598:	80fb      	strh	r3, [r7, #6]
 800059a:	4613      	mov	r3, r2
 800059c:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 800059e:	202a      	movs	r0, #42	; 0x2a
 80005a0:	f000 fc9c 	bl	8000edc <LCD_IO_WriteCmd8>
 80005a4:	88fb      	ldrh	r3, [r7, #6]
 80005a6:	0a1b      	lsrs	r3, r3, #8
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fcb5 	bl	8000f1c <LCD_IO_WriteData8>
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fcb0 	bl	8000f1c <LCD_IO_WriteData8>
 80005bc:	88fb      	ldrh	r3, [r7, #6]
 80005be:	0a1b      	lsrs	r3, r3, #8
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 fca9 	bl	8000f1c <LCD_IO_WriteData8>
 80005ca:	88fb      	ldrh	r3, [r7, #6]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fca4 	bl	8000f1c <LCD_IO_WriteData8>
 80005d4:	202b      	movs	r0, #43	; 0x2b
 80005d6:	f000 fc81 	bl	8000edc <LCD_IO_WriteCmd8>
 80005da:	88bb      	ldrh	r3, [r7, #4]
 80005dc:	0a1b      	lsrs	r3, r3, #8
 80005de:	b29b      	uxth	r3, r3
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fc9a 	bl	8000f1c <LCD_IO_WriteData8>
 80005e8:	88bb      	ldrh	r3, [r7, #4]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fc95 	bl	8000f1c <LCD_IO_WriteData8>
 80005f2:	88bb      	ldrh	r3, [r7, #4]
 80005f4:	0a1b      	lsrs	r3, r3, #8
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fc8e 	bl	8000f1c <LCD_IO_WriteData8>
 8000600:	88bb      	ldrh	r3, [r7, #4]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fc89 	bl	8000f1c <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, &ret, 1, 1);
 800060a:	f107 010e 	add.w	r1, r7, #14
 800060e:	2301      	movs	r3, #1
 8000610:	2201      	movs	r2, #1
 8000612:	202e      	movs	r0, #46	; 0x2e
 8000614:	f000 fd3e 	bl	8001094 <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, &ret, 1, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
  return ret;
 8000618:	89fb      	ldrh	r3, [r7, #14]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <ili9488_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9488_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4604      	mov	r4, r0
 800062c:	4608      	mov	r0, r1
 800062e:	4611      	mov	r1, r2
 8000630:	461a      	mov	r2, r3
 8000632:	4623      	mov	r3, r4
 8000634:	80fb      	strh	r3, [r7, #6]
 8000636:	4603      	mov	r3, r0
 8000638:	80bb      	strh	r3, [r7, #4]
 800063a:	460b      	mov	r3, r1
 800063c:	807b      	strh	r3, [r7, #2]
 800063e:	4613      	mov	r3, r2
 8000640:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8000642:	4a2a      	ldr	r2, [pc, #168]	; (80006ec <ili9488_SetDisplayWindow+0xc8>)
 8000644:	88bb      	ldrh	r3, [r7, #4]
 8000646:	8013      	strh	r3, [r2, #0]
 8000648:	88ba      	ldrh	r2, [r7, #4]
 800064a:	883b      	ldrh	r3, [r7, #0]
 800064c:	4413      	add	r3, r2
 800064e:	b29b      	uxth	r3, r3
 8000650:	3b01      	subs	r3, #1
 8000652:	b29a      	uxth	r2, r3
 8000654:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <ili9488_SetDisplayWindow+0xcc>)
 8000656:	801a      	strh	r2, [r3, #0]
  LCD_IO_WriteCmd8(ILI9488_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8000658:	202a      	movs	r0, #42	; 0x2a
 800065a:	f000 fc3f 	bl	8000edc <LCD_IO_WriteCmd8>
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	b29b      	uxth	r3, r3
 8000664:	b2db      	uxtb	r3, r3
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fc58 	bl	8000f1c <LCD_IO_WriteData8>
 800066c:	88fb      	ldrh	r3, [r7, #6]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fc53 	bl	8000f1c <LCD_IO_WriteData8>
 8000676:	88fa      	ldrh	r2, [r7, #6]
 8000678:	887b      	ldrh	r3, [r7, #2]
 800067a:	4413      	add	r3, r2
 800067c:	3b01      	subs	r3, #1
 800067e:	121b      	asrs	r3, r3, #8
 8000680:	b2db      	uxtb	r3, r3
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fc4a 	bl	8000f1c <LCD_IO_WriteData8>
 8000688:	88fb      	ldrh	r3, [r7, #6]
 800068a:	b2da      	uxtb	r2, r3
 800068c:	887b      	ldrh	r3, [r7, #2]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	4413      	add	r3, r2
 8000692:	b2db      	uxtb	r3, r3
 8000694:	3b01      	subs	r3, #1
 8000696:	b2db      	uxtb	r3, r3
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fc3f 	bl	8000f1c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 800069e:	202b      	movs	r0, #43	; 0x2b
 80006a0:	f000 fc1c 	bl	8000edc <LCD_IO_WriteCmd8>
 80006a4:	88bb      	ldrh	r3, [r7, #4]
 80006a6:	0a1b      	lsrs	r3, r3, #8
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fc35 	bl	8000f1c <LCD_IO_WriteData8>
 80006b2:	88bb      	ldrh	r3, [r7, #4]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fc30 	bl	8000f1c <LCD_IO_WriteData8>
 80006bc:	88ba      	ldrh	r2, [r7, #4]
 80006be:	883b      	ldrh	r3, [r7, #0]
 80006c0:	4413      	add	r3, r2
 80006c2:	3b01      	subs	r3, #1
 80006c4:	121b      	asrs	r3, r3, #8
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fc27 	bl	8000f1c <LCD_IO_WriteData8>
 80006ce:	88bb      	ldrh	r3, [r7, #4]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	883b      	ldrh	r3, [r7, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4413      	add	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	3b01      	subs	r3, #1
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 fc1c 	bl	8000f1c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - Height - Ypos); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - 1 - Ypos);
  #endif
  #endif

  ILI9488_LCDMUTEX_POP();
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd90      	pop	{r4, r7, pc}
 80006ec:	200000ee 	.word	0x200000ee
 80006f0:	200000f0 	.word	0x200000f0

080006f4 <ili9488_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af02      	add	r7, sp, #8
 80006fa:	4604      	mov	r4, r0
 80006fc:	4608      	mov	r0, r1
 80006fe:	4611      	mov	r1, r2
 8000700:	461a      	mov	r2, r3
 8000702:	4623      	mov	r3, r4
 8000704:	80fb      	strh	r3, [r7, #6]
 8000706:	4603      	mov	r3, r0
 8000708:	80bb      	strh	r3, [r7, #4]
 800070a:	460b      	mov	r3, r1
 800070c:	807b      	strh	r3, [r7, #2]
 800070e:	4613      	mov	r3, r2
 8000710:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, Length, 1, RGBCode);
 8000712:	883a      	ldrh	r2, [r7, #0]
 8000714:	8879      	ldrh	r1, [r7, #2]
 8000716:	88b8      	ldrh	r0, [r7, #4]
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	2301      	movs	r3, #1
 800071e:	f000 f820 	bl	8000762 <ili9488_FillRect>
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	bd90      	pop	{r4, r7, pc}

0800072a <ili9488_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800072a:	b590      	push	{r4, r7, lr}
 800072c:	b085      	sub	sp, #20
 800072e:	af02      	add	r7, sp, #8
 8000730:	4604      	mov	r4, r0
 8000732:	4608      	mov	r0, r1
 8000734:	4611      	mov	r1, r2
 8000736:	461a      	mov	r2, r3
 8000738:	4623      	mov	r3, r4
 800073a:	80fb      	strh	r3, [r7, #6]
 800073c:	4603      	mov	r3, r0
 800073e:	80bb      	strh	r3, [r7, #4]
 8000740:	460b      	mov	r3, r1
 8000742:	807b      	strh	r3, [r7, #2]
 8000744:	4613      	mov	r3, r2
 8000746:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, 1, Length, RGBCode);
 8000748:	883a      	ldrh	r2, [r7, #0]
 800074a:	8879      	ldrh	r1, [r7, #2]
 800074c:	88b8      	ldrh	r0, [r7, #4]
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	4613      	mov	r3, r2
 8000754:	2201      	movs	r2, #1
 8000756:	f000 f804 	bl	8000762 <ili9488_FillRect>
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	bd90      	pop	{r4, r7, pc}

08000762 <ili9488_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9488_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8000762:	b590      	push	{r4, r7, lr}
 8000764:	b085      	sub	sp, #20
 8000766:	af00      	add	r7, sp, #0
 8000768:	4604      	mov	r4, r0
 800076a:	4608      	mov	r0, r1
 800076c:	4611      	mov	r1, r2
 800076e:	461a      	mov	r2, r3
 8000770:	4623      	mov	r3, r4
 8000772:	80fb      	strh	r3, [r7, #6]
 8000774:	4603      	mov	r3, r0
 8000776:	80bb      	strh	r3, [r7, #4]
 8000778:	460b      	mov	r3, r1
 800077a:	807b      	strh	r3, [r7, #2]
 800077c:	4613      	mov	r3, r2
 800077e:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000780:	883b      	ldrh	r3, [r7, #0]
 8000782:	887a      	ldrh	r2, [r7, #2]
 8000784:	88b9      	ldrh	r1, [r7, #4]
 8000786:	88f8      	ldrh	r0, [r7, #6]
 8000788:	f7ff ff4c 	bl	8000624 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 800078c:	202c      	movs	r0, #44	; 0x2c
 800078e:	f000 fba5 	bl	8000edc <LCD_IO_WriteCmd8>
  uint32_t XYsize = Xsize * Ysize;
 8000792:	887b      	ldrh	r3, [r7, #2]
 8000794:	883a      	ldrh	r2, [r7, #0]
 8000796:	fb02 f303 	mul.w	r3, r2, r3
 800079a:	60fb      	str	r3, [r7, #12]
  while(XYsize--)
 800079c:	e003      	b.n	80007a6 <ili9488_FillRect+0x44>
    ili9488_write16to24(RGBCode);
 800079e:	8c3b      	ldrh	r3, [r7, #32]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fe89 	bl	80004b8 <ili9488_write16to24>
  while(XYsize--)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	1e5a      	subs	r2, r3, #1
 80007aa:	60fa      	str	r2, [r7, #12]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d1f6      	bne.n	800079e <ili9488_FillRect+0x3c>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8DataFill16(ILI9488_RAMWR, RGBCode, Xsize * Ysize);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd90      	pop	{r4, r7, pc}

080007b8 <ili9488_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9488_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	603a      	str	r2, [r7, #0]
 80007c2:	80fb      	strh	r3, [r7, #6]
 80007c4:	460b      	mov	r3, r1
 80007c6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
  /* Read bitmap size */
  Ypos += pbmp[22] + (pbmp[23] << 8) - 1;
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	3316      	adds	r3, #22
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	3317      	adds	r3, #23
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	4413      	add	r3, r2
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	88bb      	ldrh	r3, [r7, #4]
 80007ea:	4413      	add	r3, r2
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	3b01      	subs	r3, #1
 80007f0:	80bb      	strh	r3, [r7, #4]
  size = *(volatile uint16_t *) (pbmp + 2);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	3302      	adds	r3, #2
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	60fb      	str	r3, [r7, #12]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	3304      	adds	r3, #4
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	b29b      	uxth	r3, r3
 8000804:	041b      	lsls	r3, r3, #16
 8000806:	461a      	mov	r2, r3
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4313      	orrs	r3, r2
 800080c:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	330a      	adds	r3, #10
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	b29b      	uxth	r3, r3
 8000816:	60bb      	str	r3, [r7, #8]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	330c      	adds	r3, #12
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	b29b      	uxth	r3, r3
 8000820:	041b      	lsls	r3, r3, #16
 8000822:	461a      	mov	r2, r3
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4313      	orrs	r3, r2
 8000828:	60bb      	str	r3, [r7, #8]
  size = (size - index)/2;
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 8000834:	683a      	ldr	r2, [r7, #0]
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	603b      	str	r3, [r7, #0]

  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_UP);
 800083c:	2036      	movs	r0, #54	; 0x36
 800083e:	f000 fb4d 	bl	8000edc <LCD_IO_WriteCmd8>
 8000842:	20c8      	movs	r0, #200	; 0xc8
 8000844:	f000 fb6a 	bl	8000f1c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yEnd); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yStart);
 8000848:	202b      	movs	r0, #43	; 0x2b
 800084a:	f000 fb47 	bl	8000edc <LCD_IO_WriteCmd8>
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <ili9488_DrawBitmap+0x11c>)
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 8000856:	3301      	adds	r3, #1
 8000858:	121b      	asrs	r3, r3, #8
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4618      	mov	r0, r3
 800085e:	f000 fb5d 	bl	8000f1c <LCD_IO_WriteData8>
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <ili9488_DrawBitmap+0x11c>)
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	f06f 0320 	mvn.w	r3, #32
 800086c:	1a9b      	subs	r3, r3, r2
 800086e:	b2db      	uxtb	r3, r3
 8000870:	4618      	mov	r0, r3
 8000872:	f000 fb53 	bl	8000f1c <LCD_IO_WriteData8>
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <ili9488_DrawBitmap+0x120>)
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 800087e:	3301      	adds	r3, #1
 8000880:	121b      	asrs	r3, r3, #8
 8000882:	b2db      	uxtb	r3, r3
 8000884:	4618      	mov	r0, r3
 8000886:	f000 fb49 	bl	8000f1c <LCD_IO_WriteData8>
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <ili9488_DrawBitmap+0x120>)
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	b2da      	uxtb	r2, r3
 8000890:	f06f 0320 	mvn.w	r3, #32
 8000894:	1a9b      	subs	r3, r3, r2
 8000896:	b2db      	uxtb	r3, r3
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fb3f 	bl	8000f1c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 800089e:	202c      	movs	r0, #44	; 0x2c
 80008a0:	f000 fb1c 	bl	8000edc <LCD_IO_WriteCmd8>
  while(size--)
 80008a4:	e007      	b.n	80008b6 <ili9488_DrawBitmap+0xfe>
  {
    ili9488_write16to24(*(uint16_t *)pbmp);
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fe04 	bl	80004b8 <ili9488_write16to24>
    pbmp+= 2;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	3302      	adds	r3, #2
 80008b4:	603b      	str	r3, [r7, #0]
  while(size--)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	1e5a      	subs	r2, r3, #1
 80008ba:	60fa      	str	r2, [r7, #12]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1f2      	bne.n	80008a6 <ili9488_DrawBitmap+0xee>
  }
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 80008c0:	2036      	movs	r0, #54	; 0x36
 80008c2:	f000 fb0b 	bl	8000edc <LCD_IO_WriteCmd8>
 80008c6:	2048      	movs	r0, #72	; 0x48
 80008c8:	f000 fb28 	bl	8000f1c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, (uint16_t *)pbmp, size);
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
  #endif

  ILI9488_LCDMUTEX_POP();
}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200000f0 	.word	0x200000f0
 80008d8:	200000ee 	.word	0x200000ee

080008dc <ili9488_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4604      	mov	r4, r0
 80008e4:	4608      	mov	r0, r1
 80008e6:	4611      	mov	r1, r2
 80008e8:	461a      	mov	r2, r3
 80008ea:	4623      	mov	r3, r4
 80008ec:	80fb      	strh	r3, [r7, #6]
 80008ee:	4603      	mov	r3, r0
 80008f0:	80bb      	strh	r3, [r7, #4]
 80008f2:	460b      	mov	r3, r1
 80008f4:	807b      	strh	r3, [r7, #2]
 80008f6:	4613      	mov	r3, r2
 80008f8:	803b      	strh	r3, [r7, #0]
  uint32_t size;

  size = (Xsize * Ysize);
 80008fa:	887b      	ldrh	r3, [r7, #2]
 80008fc:	883a      	ldrh	r2, [r7, #0]
 80008fe:	fb02 f303 	mul.w	r3, r2, r3
 8000902:	60fb      	str	r3, [r7, #12]

  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000904:	883b      	ldrh	r3, [r7, #0]
 8000906:	887a      	ldrh	r2, [r7, #2]
 8000908:	88b9      	ldrh	r1, [r7, #4]
 800090a:	88f8      	ldrh	r0, [r7, #6]
 800090c:	f7ff fe8a 	bl	8000624 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8000910:	202c      	movs	r0, #44	; 0x2c
 8000912:	f000 fae3 	bl	8000edc <LCD_IO_WriteCmd8>
  while(size--)
 8000916:	e007      	b.n	8000928 <ili9488_DrawRGBImage+0x4c>
  {
    ili9488_write16to24(*pdata);
 8000918:	6a3b      	ldr	r3, [r7, #32]
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fdcb 	bl	80004b8 <ili9488_write16to24>
    pdata++;
 8000922:	6a3b      	ldr	r3, [r7, #32]
 8000924:	3302      	adds	r3, #2
 8000926:	623b      	str	r3, [r7, #32]
  while(size--)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	1e5a      	subs	r2, r3, #1
 800092c:	60fa      	str	r2, [r7, #12]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1f2      	bne.n	8000918 <ili9488_DrawRGBImage+0x3c>
  }
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, pdata, size);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	bd90      	pop	{r4, r7, pc}

0800093a <ili9488_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 800093a:	b590      	push	{r4, r7, lr}
 800093c:	b085      	sub	sp, #20
 800093e:	af00      	add	r7, sp, #0
 8000940:	4604      	mov	r4, r0
 8000942:	4608      	mov	r0, r1
 8000944:	4611      	mov	r1, r2
 8000946:	461a      	mov	r2, r3
 8000948:	4623      	mov	r3, r4
 800094a:	80fb      	strh	r3, [r7, #6]
 800094c:	4603      	mov	r3, r0
 800094e:	80bb      	strh	r3, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	807b      	strh	r3, [r7, #2]
 8000954:	4613      	mov	r3, r2
 8000956:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  size = (Xsize * Ysize);
 800095c:	887b      	ldrh	r3, [r7, #2]
 800095e:	883a      	ldrh	r2, [r7, #0]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	60fb      	str	r3, [r7, #12]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000966:	883b      	ldrh	r3, [r7, #0]
 8000968:	887a      	ldrh	r2, [r7, #2]
 800096a:	88b9      	ldrh	r1, [r7, #4]
 800096c:	88f8      	ldrh	r0, [r7, #6]
 800096e:	f7ff fe59 	bl	8000624 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, pdata, size, 1);
 8000972:	2301      	movs	r3, #1
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	6a39      	ldr	r1, [r7, #32]
 8000978:	202e      	movs	r0, #46	; 0x2e
 800097a:	f000 fb8b 	bl	8001094 <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, pdata, size, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	bd90      	pop	{r4, r7, pc}
	...

08000988 <ili9488_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9488_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	80fb      	strh	r3, [r7, #6]
 8000992:	460b      	mov	r3, r1
 8000994:	80bb      	strh	r3, [r7, #4]
 8000996:	4613      	mov	r3, r2
 8000998:	807b      	strh	r3, [r7, #2]
  static uint16_t scrparam[4] = {0, 0, 0, 0};
  ILI9488_LCDMUTEX_PUSH();
  #if (ILI9488_ORIENTATION == 0)
  if((TopFix != scrparam[1]) || (BottonFix != scrparam[3]))
 800099a:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <ili9488_Scroll+0xbc>)
 800099c:	885b      	ldrh	r3, [r3, #2]
 800099e:	88ba      	ldrh	r2, [r7, #4]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d104      	bne.n	80009ae <ili9488_Scroll+0x26>
 80009a4:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <ili9488_Scroll+0xbc>)
 80009a6:	88db      	ldrh	r3, [r3, #6]
 80009a8:	887a      	ldrh	r2, [r7, #2]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d015      	beq.n	80009da <ili9488_Scroll+0x52>
  {
    scrparam[1] = TopFix;
 80009ae:	4a25      	ldr	r2, [pc, #148]	; (8000a44 <ili9488_Scroll+0xbc>)
 80009b0:	88bb      	ldrh	r3, [r7, #4]
 80009b2:	8053      	strh	r3, [r2, #2]
    scrparam[3] = BottonFix;
 80009b4:	4a23      	ldr	r2, [pc, #140]	; (8000a44 <ili9488_Scroll+0xbc>)
 80009b6:	887b      	ldrh	r3, [r7, #2]
 80009b8:	80d3      	strh	r3, [r2, #6]
    scrparam[2] = ILI9488_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 80009ba:	88bb      	ldrh	r3, [r7, #4]
 80009bc:	425b      	negs	r3, r3
 80009be:	b29a      	uxth	r2, r3
 80009c0:	887b      	ldrh	r3, [r7, #2]
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <ili9488_Scroll+0xbc>)
 80009ce:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9488_VSCRDEF, &scrparam[1], 3);
 80009d0:	2203      	movs	r2, #3
 80009d2:	491d      	ldr	r1, [pc, #116]	; (8000a48 <ili9488_Scroll+0xc0>)
 80009d4:	2033      	movs	r0, #51	; 0x33
 80009d6:	f000 fb0d 	bl	8000ff4 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll = (0 - Scroll) % scrparam[2];
 80009da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009de:	425b      	negs	r3, r3
 80009e0:	4a18      	ldr	r2, [pc, #96]	; (8000a44 <ili9488_Scroll+0xbc>)
 80009e2:	8892      	ldrh	r2, [r2, #4]
 80009e4:	fb93 f1f2 	sdiv	r1, r3, r2
 80009e8:	fb02 f201 	mul.w	r2, r2, r1
 80009ec:	1a9b      	subs	r3, r3, r2
 80009ee:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 80009f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	da0a      	bge.n	8000a0e <ili9488_Scroll+0x86>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <ili9488_Scroll+0xbc>)
 80009fa:	889a      	ldrh	r2, [r3, #4]
 80009fc:	88fb      	ldrh	r3, [r7, #6]
 80009fe:	4413      	add	r3, r2
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <ili9488_Scroll+0xbc>)
 8000a04:	885b      	ldrh	r3, [r3, #2]
 8000a06:	4413      	add	r3, r2
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	80fb      	strh	r3, [r7, #6]
 8000a0c:	e005      	b.n	8000a1a <ili9488_Scroll+0x92>
  else
    Scroll = Scroll + scrparam[1];
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <ili9488_Scroll+0xbc>)
 8000a10:	885a      	ldrh	r2, [r3, #2]
 8000a12:	88fb      	ldrh	r3, [r7, #6]
 8000a14:	4413      	add	r3, r2
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #endif
  if(Scroll != scrparam[0])
 8000a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a1e:	4a09      	ldr	r2, [pc, #36]	; (8000a44 <ili9488_Scroll+0xbc>)
 8000a20:	8812      	ldrh	r2, [r2, #0]
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d009      	beq.n	8000a3a <ili9488_Scroll+0xb2>
  {
    scrparam[0] = Scroll;
 8000a26:	88fa      	ldrh	r2, [r7, #6]
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <ili9488_Scroll+0xbc>)
 8000a2a:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9488_VSCRSADD, scrparam[0], 1);
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <ili9488_Scroll+0xbc>)
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	2201      	movs	r2, #1
 8000a32:	4619      	mov	r1, r3
 8000a34:	2037      	movs	r0, #55	; 0x37
 8000a36:	f000 fa91 	bl	8000f5c <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9488_LCDMUTEX_POP();
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200000f4 	.word	0x200000f4
 8000a48:	200000f6 	.word	0x200000f6

08000a4c <LcdDirRead>:

#elif   LCD_SPI_MODE == 2
/* Fullduplex SPI : the direction is fix */
extern inline void LcdDirRead(uint32_t d);
inline void LcdDirRead(uint32_t d)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 8000a54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000a5e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a66:	6013      	str	r3, [r2, #0]
  while(d--)
 8000a68:	e00c      	b.n	8000a84 <LcdDirRead+0x38>
  {
    GPIOX_CLR(LCD_SCK);
 8000a6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a6e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a72:	619a      	str	r2, [r3, #24]
    LCD_READ_DELAY;
 8000a74:	2001      	movs	r0, #1
 8000a76:	f000 f945 	bl	8000d04 <LCD_IO_Delay>
    GPIOX_CLR(LCD_SCK);
 8000a7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a7e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a82:	619a      	str	r2, [r3, #24]
  while(d--)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	1e5a      	subs	r2, r3, #1
 8000a88:	607a      	str	r2, [r7, #4]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d1ed      	bne.n	8000a6a <LcdDirRead+0x1e>
  }
  GPIOX_MODER(MODE_ALTER, LCD_SCK);
 8000a8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000a98:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aa0:	6013      	str	r3, [r2, #0]
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_READ << SPI_CR1_BR_Pos);
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <LcdDirRead+0x70>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <LcdDirRead+0x70>)
 8000aac:	f043 0320 	orr.w	r3, r3, #32
 8000ab0:	6013      	str	r3, [r2, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40013000 	.word	0x40013000

08000ac0 <LcdDirWrite>:

extern inline void LcdDirWrite(void);
inline void LcdDirWrite(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <LcdDirWrite+0x20>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <LcdDirWrite+0x20>)
 8000ace:	f043 0318 	orr.w	r3, r3, #24
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40013000 	.word	0x40013000

08000ae4 <LcdWrite8>:
#endif

//-----------------------------------------------------------------------------
extern inline void LcdWrite8(uint8_t d8);
inline void LcdWrite8(uint8_t d8)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
  *(volatile uint8_t *)&SPIX->DR = d8;
 8000aee:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <LcdWrite8+0x28>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	7013      	strb	r3, [r2, #0]
  LCD_IO_Delay(0);
 8000af4:	2000      	movs	r0, #0
 8000af6:	f000 f905 	bl	8000d04 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8000afa:	bf00      	nop
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <LcdWrite8+0x2c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d1fb      	bne.n	8000afc <LcdWrite8+0x18>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	4001300c 	.word	0x4001300c
 8000b10:	4226011c 	.word	0x4226011c

08000b14 <LcdRead8>:

//-----------------------------------------------------------------------------
extern inline uint8_t LcdRead8(void);
inline uint8_t LcdRead8(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  uint8_t d8;
  while(!BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos));
 8000b1a:	bf00      	nop
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <LcdRead8+0x28>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0fb      	beq.n	8000b1c <LcdRead8+0x8>
  LCD_IO_Delay(0);
 8000b24:	2000      	movs	r0, #0
 8000b26:	f000 f8ed 	bl	8000d04 <LCD_IO_Delay>
  d8 = *(uint8_t *)&SPIX->DR;
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <LcdRead8+0x2c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  return d8;
 8000b30:	79fb      	ldrb	r3, [r7, #7]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	42260100 	.word	0x42260100
 8000b40:	4001300c 	.word	0x4001300c

08000b44 <LcdCmdWrite8>:

//-----------------------------------------------------------------------------
extern inline void LcdCmdWrite8(uint8_t cmd8);
inline void LcdCmdWrite8(uint8_t cmd8)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
  LCD_RS_CMD;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <LcdCmdWrite8+0x38>)
 8000b50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b54:	619a      	str	r2, [r3, #24]
  *(volatile uint8_t *)&SPIX->DR = cmd8;
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <LcdCmdWrite8+0x3c>)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	7013      	strb	r3, [r2, #0]
  LCD_IO_Delay(0);
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f000 f8d1 	bl	8000d04 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8000b62:	bf00      	nop
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <LcdCmdWrite8+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d1fb      	bne.n	8000b64 <LcdCmdWrite8+0x20>
  LCD_RS_DATA;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <LcdCmdWrite8+0x38>)
 8000b6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b72:	619a      	str	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	48000800 	.word	0x48000800
 8000b80:	4001300c 	.word	0x4001300c
 8000b84:	4226011c 	.word	0x4226011c

08000b88 <LcdWrite16>:

//-----------------------------------------------------------------------------
extern inline void LcdWrite16(uint16_t d16);
inline void LcdWrite16(uint16_t d16)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	80fb      	strh	r3, [r7, #6]
  SPIX->DR = d16;
 8000b92:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <LcdWrite16+0x28>)
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(0);
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f000 f8b3 	bl	8000d04 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8000b9e:	bf00      	nop
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <LcdWrite16+0x2c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1fb      	bne.n	8000ba0 <LcdWrite16+0x18>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40013000 	.word	0x40013000
 8000bb4:	4226011c 	.word	0x4226011c

08000bb8 <LCD_IO_WriteMultiData8>:
#if DMANUM(LCD_DMA_TX) == 0 || LCD_SPI == 0

/* SPI TX no DMA */

void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  while(Size--)
 8000bc4:	e00a      	b.n	8000bdc <LCD_IO_WriteMultiData8+0x24>
  {
    LcdWrite8(*pData);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ff8a 	bl	8000ae4 <LcdWrite8>
    if(dinc)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d002      	beq.n	8000bdc <LCD_IO_WriteMultiData8+0x24>
      pData++;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	1e5a      	subs	r2, r3, #1
 8000be0:	60ba      	str	r2, [r7, #8]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1ef      	bne.n	8000bc6 <LCD_IO_WriteMultiData8+0xe>
  }
  LCD_CS_OFF;
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <LCD_IO_WriteMultiData8+0x40>)
 8000be8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bec:	619a      	str	r2, [r3, #24]
}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	48000800 	.word	0x48000800

08000bfc <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  while(Size--)
 8000c08:	e00a      	b.n	8000c20 <LCD_IO_WriteMultiData16+0x24>
  {
    LcdWrite16(*pData);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ffba 	bl	8000b88 <LcdWrite16>
    if(dinc)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <LCD_IO_WriteMultiData16+0x24>
      pData++;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	1e5a      	subs	r2, r3, #1
 8000c24:	60ba      	str	r2, [r7, #8]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1ef      	bne.n	8000c0a <LCD_IO_WriteMultiData16+0xe>
  }
  LCD_CS_OFF;
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <LCD_IO_WriteMultiData16+0x40>)
 8000c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c30:	619a      	str	r2, [r3, #24]
}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	48000800 	.word	0x48000800

08000c40 <LCD_IO_ReadMultiData8>:
//-----------------------------------------------------------------------------
#if LCD_SPI_MODE != 0
#if DMANUM(LCD_DMA_RX) == 0 || LCD_SPI == 0

void LCD_IO_ReadMultiData8(uint8_t * pData, uint32_t Size)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint8_t d8;
  while(Size--)
 8000c4a:	e009      	b.n	8000c60 <LCD_IO_ReadMultiData8+0x20>
  {
    d8 = LcdRead8();
 8000c4c:	f7ff ff62 	bl	8000b14 <LcdRead8>
 8000c50:	4603      	mov	r3, r0
 8000c52:	73fb      	strb	r3, [r7, #15]
    *pData = d8;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	7bfa      	ldrb	r2, [r7, #15]
 8000c58:	701a      	strb	r2, [r3, #0]
    pData++;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	607b      	str	r3, [r7, #4]
  while(Size--)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	1e5a      	subs	r2, r3, #1
 8000c64:	603a      	str	r2, [r7, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1f0      	bne.n	8000c4c <LCD_IO_ReadMultiData8+0xc>
  }
  LCD_CS_OFF;
 8000c6a:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <LCD_IO_ReadMultiData8+0x40>)
 8000c6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c70:	619a      	str	r2, [r3, #24]
  LcdDirWrite();
 8000c72:	f7ff ff25 	bl	8000ac0 <LcdDirWrite>
}
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	48000800 	.word	0x48000800

08000c84 <LCD_IO_ReadMultiData16to24>:
  LcdDirWrite();
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData16to24(uint16_t * pData, uint32_t Size)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  uint8_t  rgb888[3];
  while(Size--)
 8000c8e:	e027      	b.n	8000ce0 <LCD_IO_ReadMultiData16to24+0x5c>
  {
    rgb888[0] = LcdRead8();
 8000c90:	f7ff ff40 	bl	8000b14 <LcdRead8>
 8000c94:	4603      	mov	r3, r0
 8000c96:	733b      	strb	r3, [r7, #12]
    rgb888[1] = LcdRead8();
 8000c98:	f7ff ff3c 	bl	8000b14 <LcdRead8>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	737b      	strb	r3, [r7, #13]
    rgb888[2] = LcdRead8();
 8000ca0:	f7ff ff38 	bl	8000b14 <LcdRead8>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	73bb      	strb	r3, [r7, #14]
    *pData = (rgb888[0] & 0XF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3;
 8000ca8:	7b3b      	ldrb	r3, [r7, #12]
 8000caa:	021b      	lsls	r3, r3, #8
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000cb2:	f023 0307 	bic.w	r3, r3, #7
 8000cb6:	b21a      	sxth	r2, r3
 8000cb8:	7b7b      	ldrb	r3, [r7, #13]
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	b21b      	sxth	r3, r3
 8000cbe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	7bbb      	ldrb	r3, [r7, #14]
 8000cca:	08db      	lsrs	r3, r3, #3
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	b21b      	sxth	r3, r3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	801a      	strh	r2, [r3, #0]
    pData++;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3302      	adds	r3, #2
 8000cde:	607b      	str	r3, [r7, #4]
  while(Size--)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	1e5a      	subs	r2, r3, #1
 8000ce4:	603a      	str	r2, [r7, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1d2      	bne.n	8000c90 <LCD_IO_ReadMultiData16to24+0xc>
  }
  LCD_CS_OFF;
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <LCD_IO_ReadMultiData16to24+0x7c>)
 8000cec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cf0:	619a      	str	r2, [r3, #24]
  LcdDirWrite();
 8000cf2:	f7ff fee5 	bl	8000ac0 <LcdDirWrite>
}
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	48000800 	.word	0x48000800

08000d04 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  while(c--);
 8000d0c:	bf00      	nop
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	1e5a      	subs	r2, r3, #1
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1fa      	bne.n	8000d0e <LCD_IO_Delay+0xa>
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f001 fa6f 	bl	8002210 <HAL_Delay>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  if(Bl)
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d003      	beq.n	8000d54 <LCD_IO_Bl_OnOff+0x18>
    #if LCD_BLON == 1
    GPIOX_SET(LCD_BL);
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <LCD_IO_Bl_OnOff+0x2c>)
 8000d4e:	2204      	movs	r2, #4
 8000d50:	619a      	str	r2, [r3, #24]
    GPIOX_CLR(LCD_BL);
    #else
    GPIOX_SET(LCD_BL);
    #endif
  #endif
}
 8000d52:	e003      	b.n	8000d5c <LCD_IO_Bl_OnOff+0x20>
    GPIOX_CLR(LCD_BL);
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <LCD_IO_Bl_OnOff+0x2c>)
 8000d56:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d5a:	619a      	str	r2, [r3, #24]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	48000800 	.word	0x48000800

08000d6c <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHBENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8000d70:	4b56      	ldr	r3, [pc, #344]	; (8000ecc <LCD_IO_Init+0x160>)
 8000d72:	695b      	ldr	r3, [r3, #20]
 8000d74:	4a55      	ldr	r2, [pc, #340]	; (8000ecc <LCD_IO_Init+0x160>)
 8000d76:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000d7a:	6153      	str	r3, [r2, #20]
                 GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_MISO |
                 DMA1_CLOCK_TX | DMA1_CLOCK_RX;

  /* MISO = input in full duplex mode */
  #if LCD_SPI_MODE == 2                 // Full duplex
  GPIOX_MODER(MODE_DIGITAL_INPUT, LCD_MISO);
 8000d7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d8a:	6013      	str	r3, [r2, #0]
  #endif

  /* Backlight = output, light on */
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_BL);
 8000d8c:	4b50      	ldr	r3, [pc, #320]	; (8000ed0 <LCD_IO_Init+0x164>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d94:	4a4e      	ldr	r2, [pc, #312]	; (8000ed0 <LCD_IO_Init+0x164>)
 8000d96:	f043 0310 	orr.w	r3, r3, #16
 8000d9a:	6013      	str	r3, [r2, #0]
  LCD_IO_Bl_OnOff(1);
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f7ff ffcd 	bl	8000d3c <LCD_IO_Bl_OnOff>
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8000da2:	4b4b      	ldr	r3, [pc, #300]	; (8000ed0 <LCD_IO_Init+0x164>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f023 0303 	bic.w	r3, r3, #3
 8000daa:	4a49      	ldr	r2, [pc, #292]	; (8000ed0 <LCD_IO_Init+0x164>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 8000db2:	4b47      	ldr	r3, [pc, #284]	; (8000ed0 <LCD_IO_Init+0x164>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	4a46      	ldr	r2, [pc, #280]	; (8000ed0 <LCD_IO_Init+0x164>)
 8000db8:	f023 0303 	bic.w	r3, r3, #3
 8000dbc:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 8000dbe:	4b44      	ldr	r3, [pc, #272]	; (8000ed0 <LCD_IO_Init+0x164>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	619a      	str	r2, [r3, #24]
  #endif

  LCD_RS_DATA;
 8000dc4:	4b42      	ldr	r3, [pc, #264]	; (8000ed0 <LCD_IO_Init+0x164>)
 8000dc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dca:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 8000dcc:	4b40      	ldr	r3, [pc, #256]	; (8000ed0 <LCD_IO_Init+0x164>)
 8000dce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd2:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8000dd4:	4b3e      	ldr	r3, [pc, #248]	; (8000ed0 <LCD_IO_Init+0x164>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000ddc:	4a3c      	ldr	r2, [pc, #240]	; (8000ed0 <LCD_IO_Init+0x164>)
 8000dde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000de2:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 8000de4:	4b3a      	ldr	r3, [pc, #232]	; (8000ed0 <LCD_IO_Init+0x164>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000dec:	4a38      	ldr	r2, [pc, #224]	; (8000ed0 <LCD_IO_Init+0x164>)
 8000dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000df2:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8000df4:	4b36      	ldr	r3, [pc, #216]	; (8000ed0 <LCD_IO_Init+0x164>)
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	4a35      	ldr	r2, [pc, #212]	; (8000ed0 <LCD_IO_Init+0x164>)
 8000dfa:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8000dfe:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8000e00:	4b33      	ldr	r3, [pc, #204]	; (8000ed0 <LCD_IO_Init+0x164>)
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	4a32      	ldr	r2, [pc, #200]	; (8000ed0 <LCD_IO_Init+0x164>)
 8000e06:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000e0a:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 8000e0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e16:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000e1a:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 8000e1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e2a:	6093      	str	r3, [r2, #8]
  GPIOX_SET(LCD_SCK);                   // SCK = 1
 8000e2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e30:	2220      	movs	r2, #32
 8000e32:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);

  #else

  /* Hardware SPI */
  LCD_SPI_RCC_EN;
 8000e34:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <LCD_IO_Init+0x168>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	601a      	str	r2, [r3, #0]

  GPIOX_AFR(LCD_SPI_AFR, LCD_SCK);
 8000e3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000e44:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e48:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000e4c:	6213      	str	r3, [r2, #32]
  GPIOX_MODER(MODE_ALTER, LCD_SCK);
 8000e4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000e58:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e60:	6013      	str	r3, [r2, #0]
  GPIOX_AFR(LCD_SPI_AFR, LCD_MOSI);
 8000e62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e66:	6a1b      	ldr	r3, [r3, #32]
 8000e68:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000e6c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e70:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000e74:	6213      	str	r3, [r2, #32]
  GPIOX_MODER(MODE_ALTER, LCD_MOSI);
 8000e76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e80:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e88:	6013      	str	r3, [r2, #0]
  #if LCD_SPI_MODE == 1
  /* Half duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
  #else // #if LCD_SPI_MODE == 1
  /* TX or full duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <LCD_IO_Init+0x16c>)
 8000e8c:	f240 321f 	movw	r2, #799	; 0x31f
 8000e90:	601a      	str	r2, [r3, #0]
  #endif // #else LCD_SPI_MODE == 1
  SPIX->CR2 = (7 << SPI_CR2_DS_Pos);
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <LCD_IO_Init+0x16c>)
 8000e94:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e98:	605a      	str	r2, [r3, #4]
  SPIX->CR1 |= SPI_CR1_SPE;
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <LCD_IO_Init+0x16c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <LCD_IO_Init+0x16c>)
 8000ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea4:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8000ea6:	200a      	movs	r0, #10
 8000ea8:	f7ff ff3c 	bl	8000d24 <LCD_Delay>
  LCD_RST_ON;
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <LCD_IO_Init+0x164>)
 8000eae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eb2:	619a      	str	r2, [r3, #24]
  LCD_Delay(10);
 8000eb4:	200a      	movs	r0, #10
 8000eb6:	f7ff ff35 	bl	8000d24 <LCD_Delay>
  LCD_RST_OFF;
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <LCD_IO_Init+0x164>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	619a      	str	r2, [r3, #24]
  #endif
  LCD_Delay(10);
 8000ec0:	200a      	movs	r0, #10
 8000ec2:	f7ff ff2f 	bl	8000d24 <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	48000800 	.word	0x48000800
 8000ed4:	42420330 	.word	0x42420330
 8000ed8:	40013000 	.word	0x40013000

08000edc <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <LCD_IO_WriteCmd8+0x38>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <LCD_IO_WriteCmd8+0x38>)
 8000eec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ef0:	6053      	str	r3, [r2, #4]
  LCD_CS_ON;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <LCD_IO_WriteCmd8+0x3c>)
 8000ef4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ef8:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fe21 	bl	8000b44 <LcdCmdWrite8>
  LCD_CS_OFF;
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <LCD_IO_WriteCmd8+0x3c>)
 8000f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f08:	619a      	str	r2, [r3, #24]
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40013000 	.word	0x40013000
 8000f18:	48000800 	.word	0x48000800

08000f1c <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <LCD_IO_WriteData8+0x38>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <LCD_IO_WriteData8+0x38>)
 8000f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f30:	6053      	str	r3, [r2, #4]
  LCD_CS_ON;
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <LCD_IO_WriteData8+0x3c>)
 8000f34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f38:	619a      	str	r2, [r3, #24]
  LcdWrite8(Data);
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fdd1 	bl	8000ae4 <LcdWrite8>
  LCD_CS_OFF;
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <LCD_IO_WriteData8+0x3c>)
 8000f44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f48:	619a      	str	r2, [r3, #24]
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40013000 	.word	0x40013000
 8000f58:	48000800 	.word	0x48000800

08000f5c <LCD_IO_WriteCmd8DataFill16>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	603a      	str	r2, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  LcdSpiMode8();
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <LCD_IO_WriteCmd8DataFill16+0x4c>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <LCD_IO_WriteCmd8DataFill16+0x4c>)
 8000f72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f76:	6053      	str	r3, [r2, #4]
  LCD_CS_ON;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <LCD_IO_WriteCmd8DataFill16+0x50>)
 8000f7a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f7e:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fdde 	bl	8000b44 <LcdCmdWrite8>
  LcdSpiMode16();
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <LCD_IO_WriteCmd8DataFill16+0x4c>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <LCD_IO_WriteCmd8DataFill16+0x4c>)
 8000f8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f92:	6053      	str	r3, [r2, #4]
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2200      	movs	r2, #0
 8000f98:	6839      	ldr	r1, [r7, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fe2e 	bl	8000bfc <LCD_IO_WriteMultiData16>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40013000 	.word	0x40013000
 8000fac:	48000800 	.word	0x48000800

08000fb0 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 8000fc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fc8:	6053      	str	r3, [r2, #4]
  LCD_CS_ON;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8000fcc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fd0:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fdb5 	bl	8000b44 <LcdCmdWrite8>
  LCD_IO_WriteMultiData8(pData, Size, 1);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	68b8      	ldr	r0, [r7, #8]
 8000fe0:	f7ff fdea 	bl	8000bb8 <LCD_IO_WriteMultiData8>
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40013000 	.word	0x40013000
 8000ff0:	48000800 	.word	0x48000800

08000ff4 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <LCD_IO_WriteCmd8MultipleData16+0x48>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	4a0d      	ldr	r2, [pc, #52]	; (800103c <LCD_IO_WriteCmd8MultipleData16+0x48>)
 8001008:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800100c:	6053      	str	r3, [r2, #4]
  LCD_CS_ON;
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <LCD_IO_WriteCmd8MultipleData16+0x4c>)
 8001010:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001014:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fd93 	bl	8000b44 <LcdCmdWrite8>
  LcdSpiMode16();
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <LCD_IO_WriteCmd8MultipleData16+0x48>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	4a06      	ldr	r2, [pc, #24]	; (800103c <LCD_IO_WriteCmd8MultipleData16+0x48>)
 8001024:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001028:	6053      	str	r3, [r2, #4]
  LCD_IO_WriteMultiData16(pData, Size, 1);
 800102a:	2201      	movs	r2, #1
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	68b8      	ldr	r0, [r7, #8]
 8001030:	f7ff fde4 	bl	8000bfc <LCD_IO_WriteMultiData16>
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40013000 	.word	0x40013000
 8001040:	48000800 	.word	0x48000800

08001044 <LCD_IO_ReadCmd8MultipleData8>:
__weak void LCD_IO_ReadCmd16MultipleData24to16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
#else

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	4603      	mov	r3, r0
 8001052:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
 8001054:	4b0d      	ldr	r3, [pc, #52]	; (800108c <LCD_IO_ReadCmd8MultipleData8+0x48>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	4a0c      	ldr	r2, [pc, #48]	; (800108c <LCD_IO_ReadCmd8MultipleData8+0x48>)
 800105a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800105e:	6053      	str	r3, [r2, #4]
  LCD_CS_ON;
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <LCD_IO_ReadCmd8MultipleData8+0x4c>)
 8001062:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001066:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fd6a 	bl	8000b44 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8001076:	6838      	ldr	r0, [r7, #0]
 8001078:	f7ff fce8 	bl	8000a4c <LcdDirRead>
  LCD_IO_ReadMultiData8(pData, Size);
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	68b8      	ldr	r0, [r7, #8]
 8001080:	f7ff fdde 	bl	8000c40 <LCD_IO_ReadMultiData8>
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40013000 	.word	0x40013000
 8001090:	48000800 	.word	0x48000800

08001094 <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_IO_ReadMultiData16(pData, Size);
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
 80010a4:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <LCD_IO_ReadCmd8MultipleData24to16+0x48>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	4a0c      	ldr	r2, [pc, #48]	; (80010dc <LCD_IO_ReadCmd8MultipleData24to16+0x48>)
 80010aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010ae:	6053      	str	r3, [r2, #4]
  LCD_CS_ON;
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <LCD_IO_ReadCmd8MultipleData24to16+0x4c>)
 80010b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010b6:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fd42 	bl	8000b44 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 80010c6:	6838      	ldr	r0, [r7, #0]
 80010c8:	f7ff fcc0 	bl	8000a4c <LcdDirRead>
  LCD_IO_ReadMultiData16to24(pData, Size);
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	68b8      	ldr	r0, [r7, #8]
 80010d0:	f7ff fdd8 	bl	8000c84 <LCD_IO_ReadMultiData16to24>
}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40013000 	.word	0x40013000
 80010e0:	48000800 	.word	0x48000800

080010e4 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 80010ee:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <BSP_LCD_Init+0x40>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_COLOR_MAGENTA;
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <BSP_LCD_Init+0x44>)
 80010f8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80010fc:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <BSP_LCD_Init+0x44>)
 8001100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001104:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <BSP_LCD_Init+0x44>)
 8001108:	4a08      	ldr	r2, [pc, #32]	; (800112c <BSP_LCD_Init+0x48>)
 800110a:	609a      	str	r2, [r3, #8]
  
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_COLOR_MAGENTA);
 800110c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8001110:	f000 f852 	bl	80011b8 <BSP_LCD_Clear>
  #endif
  
  ret = LCD_OK;
 8001114:	2300      	movs	r3, #0
 8001116:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001118:	79fb      	ldrb	r3, [r7, #7]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000005c 	.word	0x2000005c
 8001128:	20000470 	.word	0x20000470
 800112c:	20000010 	.word	0x20000010

08001130 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <BSP_LCD_GetXSize+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113a:	4798      	blx	r3
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000005c 	.word	0x2000005c

08001148 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <BSP_LCD_GetYSize+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001152:	4798      	blx	r3
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000005c 	.word	0x2000005c

08001160 <BSP_LCD_GetBackColor>:
  * @brief  Gets the LCD background color.
  * @param  None
  * @retval Used background color
  */
uint16_t BSP_LCD_GetBackColor(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return DrawProp.BackColor;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <BSP_LCD_GetBackColor+0x14>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	b29b      	uxth	r3, r3
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	20000470 	.word	0x20000470

08001178 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	4a03      	ldr	r2, [pc, #12]	; (8001194 <BSP_LCD_SetBackColor+0x1c>)
 8001186:	6053      	str	r3, [r2, #4]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	20000470 	.word	0x20000470

08001198 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <BSP_LCD_SetFont+0x1c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6093      	str	r3, [r2, #8]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000470 	.word	0x20000470

080011b8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af02      	add	r7, sp, #8
 80011be:	4603      	mov	r3, r0
 80011c0:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <BSP_LCD_Clear+0x38>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80011c8:	f7ff ffb2 	bl	8001130 <BSP_LCD_GetXSize>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461d      	mov	r5, r3
 80011d0:	f7ff ffba 	bl	8001148 <BSP_LCD_GetYSize>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	4613      	mov	r3, r2
 80011de:	462a      	mov	r2, r5
 80011e0:	2100      	movs	r1, #0
 80011e2:	2000      	movs	r0, #0
 80011e4:	47a0      	blx	r4
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bdb0      	pop	{r4, r5, r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000005c 	.word	0x2000005c

080011f4 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	80fb      	strh	r3, [r7, #6]
 80011fe:	460b      	mov	r3, r1
 8001200:	80bb      	strh	r3, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <BSP_LCD_DisplayChar+0x50>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8001210:	490c      	ldr	r1, [pc, #48]	; (8001244 <BSP_LCD_DisplayChar+0x50>)
 8001212:	6889      	ldr	r1, [r1, #8]
 8001214:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001216:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <BSP_LCD_DisplayChar+0x50>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	889b      	ldrh	r3, [r3, #4]
 8001220:	3307      	adds	r3, #7
 8001222:	2b00      	cmp	r3, #0
 8001224:	da00      	bge.n	8001228 <BSP_LCD_DisplayChar+0x34>
 8001226:	3307      	adds	r3, #7
 8001228:	10db      	asrs	r3, r3, #3
 800122a:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800122e:	441a      	add	r2, r3
 8001230:	88b9      	ldrh	r1, [r7, #4]
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	4618      	mov	r0, r3
 8001236:	f000 fa69 	bl	800170c <DrawChar>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000470 	.word	0x20000470

08001248 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60ba      	str	r2, [r7, #8]
 8001250:	461a      	mov	r2, r3
 8001252:	4603      	mov	r3, r0
 8001254:	81fb      	strh	r3, [r7, #14]
 8001256:	460b      	mov	r3, r1
 8001258:	81bb      	strh	r3, [r7, #12]
 800125a:	4613      	mov	r3, r2
 800125c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800125e:	2301      	movs	r3, #1
 8001260:	83fb      	strh	r3, [r7, #30]
 8001262:	2300      	movs	r3, #0
 8001264:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001272:	e002      	b.n	800127a <BSP_LCD_DisplayStringAt+0x32>
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	3301      	adds	r3, #1
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	617a      	str	r2, [r7, #20]
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f6      	bne.n	8001274 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8001286:	f7ff ff53 	bl	8001130 <BSP_LCD_GetXSize>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	4b33      	ldr	r3, [pc, #204]	; (800135c <BSP_LCD_DisplayStringAt+0x114>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	889b      	ldrh	r3, [r3, #4]
 8001294:	fbb2 f3f3 	udiv	r3, r2, r3
 8001298:	b29b      	uxth	r3, r3
 800129a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d014      	beq.n	80012cc <BSP_LCD_DisplayStringAt+0x84>
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d00f      	beq.n	80012c6 <BSP_LCD_DisplayStringAt+0x7e>
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d11e      	bne.n	80012e8 <BSP_LCD_DisplayStringAt+0xa0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	4a2a      	ldr	r2, [pc, #168]	; (800135c <BSP_LCD_DisplayStringAt+0x114>)
 80012b2:	6892      	ldr	r2, [r2, #8]
 80012b4:	8892      	ldrh	r2, [r2, #4]
 80012b6:	fb02 f303 	mul.w	r3, r2, r3
 80012ba:	085b      	lsrs	r3, r3, #1
 80012bc:	b29a      	uxth	r2, r3
 80012be:	89fb      	ldrh	r3, [r7, #14]
 80012c0:	4413      	add	r3, r2
 80012c2:	83fb      	strh	r3, [r7, #30]
      break;
 80012c4:	e013      	b.n	80012ee <BSP_LCD_DisplayStringAt+0xa6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80012c6:	89fb      	ldrh	r3, [r7, #14]
 80012c8:	83fb      	strh	r3, [r7, #30]
      break;
 80012ca:	e010      	b.n	80012ee <BSP_LCD_DisplayStringAt+0xa6>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <BSP_LCD_DisplayStringAt+0x114>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	889b      	ldrh	r3, [r3, #4]
 80012da:	fb12 f303 	smulbb	r3, r2, r3
 80012de:	b29a      	uxth	r2, r3
 80012e0:	89fb      	ldrh	r3, [r7, #14]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	83fb      	strh	r3, [r7, #30]
      break;
 80012e6:	e002      	b.n	80012ee <BSP_LCD_DisplayStringAt+0xa6>
    }    
  default:
    {
      refcolumn = Xpos;
 80012e8:	89fb      	ldrh	r3, [r7, #14]
 80012ea:	83fb      	strh	r3, [r7, #30]
      break;
 80012ec:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80012ee:	e012      	b.n	8001316 <BSP_LCD_DisplayStringAt+0xce>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	89b9      	ldrh	r1, [r7, #12]
 80012f6:	8bfb      	ldrh	r3, [r7, #30]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff7b 	bl	80011f4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <BSP_LCD_DisplayStringAt+0x114>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	889a      	ldrh	r2, [r3, #4]
 8001304:	8bfb      	ldrh	r3, [r7, #30]
 8001306:	4413      	add	r3, r2
 8001308:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	3301      	adds	r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
    i++;
 8001310:	8bbb      	ldrh	r3, [r7, #28]
 8001312:	3301      	adds	r3, #1
 8001314:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf14      	ite	ne
 800131e:	2301      	movne	r3, #1
 8001320:	2300      	moveq	r3, #0
 8001322:	b2dc      	uxtb	r4, r3
 8001324:	f7ff ff04 	bl	8001130 <BSP_LCD_GetXSize>
 8001328:	4603      	mov	r3, r0
 800132a:	4619      	mov	r1, r3
 800132c:	8bbb      	ldrh	r3, [r7, #28]
 800132e:	4a0b      	ldr	r2, [pc, #44]	; (800135c <BSP_LCD_DisplayStringAt+0x114>)
 8001330:	6892      	ldr	r2, [r2, #8]
 8001332:	8892      	ldrh	r2, [r2, #4]
 8001334:	fb02 f303 	mul.w	r3, r2, r3
 8001338:	1acb      	subs	r3, r1, r3
 800133a:	b29b      	uxth	r3, r3
 800133c:	4a07      	ldr	r2, [pc, #28]	; (800135c <BSP_LCD_DisplayStringAt+0x114>)
 800133e:	6892      	ldr	r2, [r2, #8]
 8001340:	8892      	ldrh	r2, [r2, #4]
 8001342:	4293      	cmp	r3, r2
 8001344:	bfac      	ite	ge
 8001346:	2301      	movge	r3, #1
 8001348:	2300      	movlt	r3, #0
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4023      	ands	r3, r4
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1cd      	bne.n	80012f0 <BSP_LCD_DisplayStringAt+0xa8>
  }
}
 8001354:	bf00      	nop
 8001356:	3724      	adds	r7, #36	; 0x24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd90      	pop	{r4, r7, pc}
 800135c:	20000470 	.word	0x20000470

08001360 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
 800136a:	460b      	mov	r3, r1
 800136c:	80bb      	strh	r3, [r7, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <BSP_LCD_DrawPixel+0x34>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	695b      	ldr	r3, [r3, #20]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d006      	beq.n	800138a <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <BSP_LCD_DrawPixel+0x34>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	88b9      	ldrh	r1, [r7, #4]
 8001386:	88f8      	ldrh	r0, [r7, #6]
 8001388:	4798      	blx	r3
  }
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2000005c 	.word	0x2000005c

08001398 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
 80013a2:	460b      	mov	r3, r1
 80013a4:	80bb      	strh	r3, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <BSP_LCD_DrawHLine+0x6c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00a      	beq.n	80013ce <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <BSP_LCD_DrawHLine+0x6c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6a1c      	ldr	r4, [r3, #32]
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <BSP_LCD_DrawHLine+0x70>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	b298      	uxth	r0, r3
 80013c4:	887b      	ldrh	r3, [r7, #2]
 80013c6:	88ba      	ldrh	r2, [r7, #4]
 80013c8:	88f9      	ldrh	r1, [r7, #6]
 80013ca:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 80013cc:	e015      	b.n	80013fa <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	e00e      	b.n	80013f2 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	4413      	add	r3, r2
 80013dc:	b298      	uxth	r0, r3
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <BSP_LCD_DrawHLine+0x70>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	88bb      	ldrh	r3, [r7, #4]
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff ffba 	bl	8001360 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3301      	adds	r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	887b      	ldrh	r3, [r7, #2]
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d3ec      	bcc.n	80013d4 <BSP_LCD_DrawHLine+0x3c>
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd90      	pop	{r4, r7, pc}
 8001402:	bf00      	nop
 8001404:	2000005c 	.word	0x2000005c
 8001408:	20000470 	.word	0x20000470

0800140c <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
 8001416:	460b      	mov	r3, r1
 8001418:	80bb      	strh	r3, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <BSP_LCD_DrawVLine+0x6c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00a      	beq.n	8001442 <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <BSP_LCD_DrawVLine+0x6c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <BSP_LCD_DrawVLine+0x70>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	b298      	uxth	r0, r3
 8001438:	887b      	ldrh	r3, [r7, #2]
 800143a:	88ba      	ldrh	r2, [r7, #4]
 800143c:	88f9      	ldrh	r1, [r7, #6]
 800143e:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 8001440:	e015      	b.n	800146e <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	e00e      	b.n	8001466 <BSP_LCD_DrawVLine+0x5a>
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	b29a      	uxth	r2, r3
 800144c:	88bb      	ldrh	r3, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	b299      	uxth	r1, r3
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <BSP_LCD_DrawVLine+0x70>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	b29a      	uxth	r2, r3
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff80 	bl	8001360 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3301      	adds	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	429a      	cmp	r2, r3
 800146c:	d3ec      	bcc.n	8001448 <BSP_LCD_DrawVLine+0x3c>
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bd90      	pop	{r4, r7, pc}
 8001476:	bf00      	nop
 8001478:	2000005c 	.word	0x2000005c
 800147c:	20000470 	.word	0x20000470

08001480 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4604      	mov	r4, r0
 8001488:	4608      	mov	r0, r1
 800148a:	4611      	mov	r1, r2
 800148c:	461a      	mov	r2, r3
 800148e:	4623      	mov	r3, r4
 8001490:	80fb      	strh	r3, [r7, #6]
 8001492:	4603      	mov	r3, r0
 8001494:	80bb      	strh	r3, [r7, #4]
 8001496:	460b      	mov	r3, r1
 8001498:	807b      	strh	r3, [r7, #2]
 800149a:	4613      	mov	r3, r2
 800149c:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	88b9      	ldrh	r1, [r7, #4]
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff77 	bl	8001398 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos + Height - 1), Width);
 80014aa:	88ba      	ldrh	r2, [r7, #4]
 80014ac:	883b      	ldrh	r3, [r7, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	3b01      	subs	r3, #1
 80014b4:	b299      	uxth	r1, r3
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff6c 	bl	8001398 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80014c0:	883a      	ldrh	r2, [r7, #0]
 80014c2:	88b9      	ldrh	r1, [r7, #4]
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ffa0 	bl	800140c <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width - 1), Ypos, Height);
 80014cc:	88fa      	ldrh	r2, [r7, #6]
 80014ce:	887b      	ldrh	r3, [r7, #2]
 80014d0:	4413      	add	r3, r2
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	3b01      	subs	r3, #1
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	883a      	ldrh	r2, [r7, #0]
 80014da:	88b9      	ldrh	r1, [r7, #4]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff95 	bl	800140c <BSP_LCD_DrawVLine>
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd90      	pop	{r4, r7, pc}
	...

080014ec <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
 80014f6:	460b      	mov	r3, r1
 80014f8:	80bb      	strh	r3, [r7, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	807b      	strh	r3, [r7, #2]
  int32_t  D;       /* Decision Variable */ 
  uint32_t  CurX;   /* Current X Value */
  uint32_t  CurY;   /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 80014fe:	887b      	ldrh	r3, [r7, #2]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	f1c3 0303 	rsb	r3, r3, #3
 8001506:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 800150c:	887b      	ldrh	r3, [r7, #2]
 800150e:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 8001510:	e097      	b.n	8001642 <BSP_LCD_DrawCircle+0x156>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp.TextColor);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	b29a      	uxth	r2, r3
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	4413      	add	r3, r2
 800151a:	b298      	uxth	r0, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	b29b      	uxth	r3, r3
 8001520:	88ba      	ldrh	r2, [r7, #4]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	b299      	uxth	r1, r3
 8001526:	4b4b      	ldr	r3, [pc, #300]	; (8001654 <BSP_LCD_DrawCircle+0x168>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	b29b      	uxth	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	f7ff ff17 	bl	8001360 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp.TextColor);
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	b29b      	uxth	r3, r3
 8001536:	88fa      	ldrh	r2, [r7, #6]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	b298      	uxth	r0, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	b29b      	uxth	r3, r3
 8001540:	88ba      	ldrh	r2, [r7, #4]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	b299      	uxth	r1, r3
 8001546:	4b43      	ldr	r3, [pc, #268]	; (8001654 <BSP_LCD_DrawCircle+0x168>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	461a      	mov	r2, r3
 800154e:	f7ff ff07 	bl	8001360 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp.TextColor);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	b29a      	uxth	r2, r3
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	4413      	add	r3, r2
 800155a:	b298      	uxth	r0, r3
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	b29b      	uxth	r3, r3
 8001560:	88ba      	ldrh	r2, [r7, #4]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	b299      	uxth	r1, r3
 8001566:	4b3b      	ldr	r3, [pc, #236]	; (8001654 <BSP_LCD_DrawCircle+0x168>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	f7ff fef7 	bl	8001360 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp.TextColor);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	b29b      	uxth	r3, r3
 8001576:	88fa      	ldrh	r2, [r7, #6]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	b298      	uxth	r0, r3
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	b29b      	uxth	r3, r3
 8001580:	88ba      	ldrh	r2, [r7, #4]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	b299      	uxth	r1, r3
 8001586:	4b33      	ldr	r3, [pc, #204]	; (8001654 <BSP_LCD_DrawCircle+0x168>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	b29b      	uxth	r3, r3
 800158c:	461a      	mov	r2, r3
 800158e:	f7ff fee7 	bl	8001360 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp.TextColor);
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	b29a      	uxth	r2, r3
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	4413      	add	r3, r2
 800159a:	b298      	uxth	r0, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	b29a      	uxth	r2, r3
 80015a0:	88bb      	ldrh	r3, [r7, #4]
 80015a2:	4413      	add	r3, r2
 80015a4:	b299      	uxth	r1, r3
 80015a6:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <BSP_LCD_DrawCircle+0x168>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	f7ff fed7 	bl	8001360 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp.TextColor);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	88fa      	ldrh	r2, [r7, #6]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	b298      	uxth	r0, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	b29a      	uxth	r2, r3
 80015c0:	88bb      	ldrh	r3, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	b299      	uxth	r1, r3
 80015c6:	4b23      	ldr	r3, [pc, #140]	; (8001654 <BSP_LCD_DrawCircle+0x168>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	461a      	mov	r2, r3
 80015ce:	f7ff fec7 	bl	8001360 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp.TextColor);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	4413      	add	r3, r2
 80015da:	b298      	uxth	r0, r3
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	b29a      	uxth	r2, r3
 80015e0:	88bb      	ldrh	r3, [r7, #4]
 80015e2:	4413      	add	r3, r2
 80015e4:	b299      	uxth	r1, r3
 80015e6:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <BSP_LCD_DrawCircle+0x168>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	f7ff feb7 	bl	8001360 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp.TextColor);   
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	88fa      	ldrh	r2, [r7, #6]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	b298      	uxth	r0, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	b29a      	uxth	r2, r3
 8001600:	88bb      	ldrh	r3, [r7, #4]
 8001602:	4413      	add	r3, r2
 8001604:	b299      	uxth	r1, r3
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <BSP_LCD_DrawCircle+0x168>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	b29b      	uxth	r3, r3
 800160c:	461a      	mov	r2, r3
 800160e:	f7ff fea7 	bl	8001360 <BSP_LCD_DrawPixel>

    if (D < 0)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2b00      	cmp	r3, #0
 8001616:	da06      	bge.n	8001626 <BSP_LCD_DrawCircle+0x13a>
    { 
      D += (CurX << 2) + 6;
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	009a      	lsls	r2, r3, #2
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	4413      	add	r3, r2
 8001620:	3306      	adds	r3, #6
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	e00a      	b.n	800163c <BSP_LCD_DrawCircle+0x150>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	009a      	lsls	r2, r3, #2
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	4413      	add	r3, r2
 8001632:	330a      	adds	r3, #10
 8001634:	617b      	str	r3, [r7, #20]
      CurY--;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3b01      	subs	r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	3301      	adds	r3, #1
 8001640:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	429a      	cmp	r2, r3
 8001648:	f67f af63 	bls.w	8001512 <BSP_LCD_DrawCircle+0x26>
  } 
}
 800164c:	bf00      	nop
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000470 	.word	0x20000470

08001658 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	603a      	str	r2, [r7, #0]
 8001662:	80fb      	strh	r3, [r7, #6]
 8001664:	460b      	mov	r3, r1
 8001666:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	3312      	adds	r3, #18
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	3313      	adds	r3, #19
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	441a      	add	r2, r3
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	3314      	adds	r3, #20
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	041b      	lsls	r3, r3, #16
 800168a:	441a      	add	r2, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	3315      	adds	r3, #21
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	061b      	lsls	r3, r3, #24
 8001694:	4413      	add	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	3316      	adds	r3, #22
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	3317      	adds	r3, #23
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	441a      	add	r2, r3
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	3318      	adds	r3, #24
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	041b      	lsls	r3, r3, #16
 80016b2:	441a      	add	r2, r3
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	3319      	adds	r3, #25
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	061b      	lsls	r3, r3, #24
 80016bc:	4413      	add	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	88b9      	ldrh	r1, [r7, #4]
 80016ca:	88f8      	ldrh	r0, [r7, #6]
 80016cc:	f000 f910 	bl	80018f0 <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <BSP_LCD_DrawBitmap+0xb0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d006      	beq.n	80016e8 <BSP_LCD_DrawBitmap+0x90>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <BSP_LCD_DrawBitmap+0xb0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	88b9      	ldrh	r1, [r7, #4]
 80016e2:	88f8      	ldrh	r0, [r7, #6]
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80016e8:	f7ff fd22 	bl	8001130 <BSP_LCD_GetXSize>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461c      	mov	r4, r3
 80016f0:	f7ff fd2a 	bl	8001148 <BSP_LCD_GetYSize>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4622      	mov	r2, r4
 80016f8:	2100      	movs	r1, #0
 80016fa:	2000      	movs	r0, #0
 80016fc:	f000 f8f8 	bl	80018f0 <SetDisplayWindow>
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	bd90      	pop	{r4, r7, pc}
 8001708:	2000005c 	.word	0x2000005c

0800170c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	603a      	str	r2, [r7, #0]
 8001716:	80fb      	strh	r3, [r7, #6]
 8001718:	460b      	mov	r3, r1
 800171a:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
 8001724:	2300      	movs	r3, #0
 8001726:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	82fb      	strh	r3, [r7, #22]
 800172c:	2300      	movs	r3, #0
 800172e:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
  
  height = DrawProp.pFont->Height;
 800173c:	4b63      	ldr	r3, [pc, #396]	; (80018cc <DrawChar+0x1c0>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	88db      	ldrh	r3, [r3, #6]
 8001742:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 8001744:	4b61      	ldr	r3, [pc, #388]	; (80018cc <DrawChar+0x1c0>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	889b      	ldrh	r3, [r3, #4]
 800174a:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 800174c:	8afa      	ldrh	r2, [r7, #22]
 800174e:	8abb      	ldrh	r3, [r7, #20]
 8001750:	fb12 f303 	smulbb	r3, r2, r3
 8001754:	b29b      	uxth	r3, r3
 8001756:	331b      	adds	r3, #27
 8001758:	b29b      	uxth	r3, r3
 800175a:	4a5d      	ldr	r2, [pc, #372]	; (80018d0 <DrawChar+0x1c4>)
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	b29b      	uxth	r3, r3
 8001760:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 8001762:	8afb      	ldrh	r3, [r7, #22]
 8001764:	8aba      	ldrh	r2, [r7, #20]
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	331b      	adds	r3, #27
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	141a      	asrs	r2, r3, #16
 8001770:	4b58      	ldr	r3, [pc, #352]	; (80018d4 <DrawChar+0x1c8>)
 8001772:	b292      	uxth	r2, r2
 8001774:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 8001776:	4b58      	ldr	r3, [pc, #352]	; (80018d8 <DrawChar+0x1cc>)
 8001778:	2236      	movs	r2, #54	; 0x36
 800177a:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 800177c:	4a57      	ldr	r2, [pc, #348]	; (80018dc <DrawChar+0x1d0>)
 800177e:	8abb      	ldrh	r3, [r7, #20]
 8001780:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 8001782:	8abb      	ldrh	r3, [r7, #20]
 8001784:	141a      	asrs	r2, r3, #16
 8001786:	4b56      	ldr	r3, [pc, #344]	; (80018e0 <DrawChar+0x1d4>)
 8001788:	b292      	uxth	r2, r2
 800178a:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 800178c:	4a55      	ldr	r2, [pc, #340]	; (80018e4 <DrawChar+0x1d8>)
 800178e:	8afb      	ldrh	r3, [r7, #22]
 8001790:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 8001792:	8afb      	ldrh	r3, [r7, #22]
 8001794:	141a      	asrs	r2, r3, #16
 8001796:	4b54      	ldr	r3, [pc, #336]	; (80018e8 <DrawChar+0x1dc>)
 8001798:	b292      	uxth	r2, r2
 800179a:	801a      	strh	r2, [r3, #0]
  
  offset =  8 *((width + 7)/8) - width ;
 800179c:	8abb      	ldrh	r3, [r7, #20]
 800179e:	3307      	adds	r3, #7
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	da00      	bge.n	80017a6 <DrawChar+0x9a>
 80017a4:	3307      	adds	r3, #7
 80017a6:	10db      	asrs	r3, r3, #3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	8abb      	ldrh	r3, [r7, #20]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ba:	e078      	b.n	80018ae <DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 80017bc:	8abb      	ldrh	r3, [r7, #20]
 80017be:	3307      	adds	r3, #7
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	da00      	bge.n	80017c6 <DrawChar+0xba>
 80017c4:	3307      	adds	r3, #7
 80017c6:	10db      	asrs	r3, r3, #3
 80017c8:	461a      	mov	r2, r3
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	fb03 f302 	mul.w	r3, r3, r2
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 80017d6:	8abb      	ldrh	r3, [r7, #20]
 80017d8:	3b11      	subs	r3, #17
 80017da:	2b07      	cmp	r3, #7
 80017dc:	d80c      	bhi.n	80017f8 <DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	041a      	lsls	r2, r3, #16
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3301      	adds	r3, #1
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	4313      	orrs	r3, r2
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	3202      	adds	r2, #2
 80017f2:	7812      	ldrb	r2, [r2, #0]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 2)
 80017f8:	8abb      	ldrh	r3, [r7, #20]
 80017fa:	3b09      	subs	r3, #9
 80017fc:	2b07      	cmp	r3, #7
 80017fe:	d807      	bhi.n	8001810 <DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	3201      	adds	r2, #1
 800180a:	7812      	ldrb	r2, [r2, #0]
 800180c:	4313      	orrs	r3, r2
 800180e:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 1)
 8001810:	8abb      	ldrh	r3, [r7, #20]
 8001812:	3b01      	subs	r3, #1
 8001814:	2b07      	cmp	r3, #7
 8001816:	d802      	bhi.n	800181e <DrawChar+0x112>
    {
      line =  pchar[0];
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	61fb      	str	r3, [r7, #28]
    }    
    
    for (counterw = 0; counterw < width; counterw++)
 800181e:	2300      	movs	r3, #0
 8001820:	623b      	str	r3, [r7, #32]
 8001822:	e03d      	b.n	80018a0 <DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8001824:	8afa      	ldrh	r2, [r7, #22]
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	3b01      	subs	r3, #1
 800182c:	8aba      	ldrh	r2, [r7, #20]
 800182e:	fb02 f203 	mul.w	r2, r2, r3
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	4413      	add	r3, r2
 8001836:	331b      	adds	r3, #27
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 800183c:	8aba      	ldrh	r2, [r7, #20]
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	1ad2      	subs	r2, r2, r3
 8001842:	7cfb      	ldrb	r3, [r7, #19]
 8001844:	4413      	add	r3, r2
 8001846:	3b01      	subs	r3, #1
 8001848:	2201      	movs	r2, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	461a      	mov	r2, r3
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d010      	beq.n	800187a <DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 8001858:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <DrawChar+0x1c0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	b2d9      	uxtb	r1, r3
 800185e:	4a23      	ldr	r2, [pc, #140]	; (80018ec <DrawChar+0x1e0>)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	4413      	add	r3, r2
 8001864:	460a      	mov	r2, r1
 8001866:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <DrawChar+0x1c0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	0a1a      	lsrs	r2, r3, #8
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	3301      	adds	r3, #1
 8001872:	b2d1      	uxtb	r1, r2
 8001874:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <DrawChar+0x1e0>)
 8001876:	54d1      	strb	r1, [r2, r3]
 8001878:	e00f      	b.n	800189a <DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <DrawChar+0x1c0>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	b2d9      	uxtb	r1, r3
 8001880:	4a1a      	ldr	r2, [pc, #104]	; (80018ec <DrawChar+0x1e0>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4413      	add	r3, r2
 8001886:	460a      	mov	r2, r1
 8001888:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <DrawChar+0x1c0>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	0a1a      	lsrs	r2, r3, #8
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	3301      	adds	r3, #1
 8001894:	b2d1      	uxtb	r1, r2
 8001896:	4a15      	ldr	r2, [pc, #84]	; (80018ec <DrawChar+0x1e0>)
 8001898:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	3301      	adds	r3, #1
 800189e:	623b      	str	r3, [r7, #32]
 80018a0:	8abb      	ldrh	r3, [r7, #20]
 80018a2:	6a3a      	ldr	r2, [r7, #32]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d3bd      	bcc.n	8001824 <DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	3301      	adds	r3, #1
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
 80018ae:	8afb      	ldrh	r3, [r7, #22]
 80018b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d382      	bcc.n	80017bc <DrawChar+0xb0>
      } 
    }
  }
  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 80018b6:	88b9      	ldrh	r1, [r7, #4]
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	4a0c      	ldr	r2, [pc, #48]	; (80018ec <DrawChar+0x1e0>)
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fecb 	bl	8001658 <BSP_LCD_DrawBitmap>
}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	; 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000470 	.word	0x20000470
 80018d0:	200000fe 	.word	0x200000fe
 80018d4:	20000100 	.word	0x20000100
 80018d8:	20000106 	.word	0x20000106
 80018dc:	2000010e 	.word	0x2000010e
 80018e0:	20000110 	.word	0x20000110
 80018e4:	20000112 	.word	0x20000112
 80018e8:	20000114 	.word	0x20000114
 80018ec:	200000fc 	.word	0x200000fc

080018f0 <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4604      	mov	r4, r0
 80018f8:	4608      	mov	r0, r1
 80018fa:	4611      	mov	r1, r2
 80018fc:	461a      	mov	r2, r3
 80018fe:	4623      	mov	r3, r4
 8001900:	80fb      	strh	r3, [r7, #6]
 8001902:	4603      	mov	r3, r0
 8001904:	80bb      	strh	r3, [r7, #4]
 8001906:	460b      	mov	r3, r1
 8001908:	807b      	strh	r3, [r7, #2]
 800190a:	4613      	mov	r3, r2
 800190c:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <SetDisplayWindow+0x40>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d007      	beq.n	8001928 <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <SetDisplayWindow+0x40>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	69dc      	ldr	r4, [r3, #28]
 800191e:	883b      	ldrh	r3, [r7, #0]
 8001920:	887a      	ldrh	r2, [r7, #2]
 8001922:	88b9      	ldrh	r1, [r7, #4]
 8001924:	88f8      	ldrh	r0, [r7, #6]
 8001926:	47a0      	blx	r4
  }  
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bd90      	pop	{r4, r7, pc}
 8001930:	2000005c 	.word	0x2000005c

08001934 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <MX_CAN_Init+0x60>)
 800193a:	4a17      	ldr	r2, [pc, #92]	; (8001998 <MX_CAN_Init+0x64>)
 800193c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <MX_CAN_Init+0x60>)
 8001940:	2210      	movs	r2, #16
 8001942:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <MX_CAN_Init+0x60>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <MX_CAN_Init+0x60>)
 800194c:	2200      	movs	r2, #0
 800194e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <MX_CAN_Init+0x60>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <MX_CAN_Init+0x60>)
 8001958:	2200      	movs	r2, #0
 800195a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800195c:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <MX_CAN_Init+0x60>)
 800195e:	2200      	movs	r2, #0
 8001960:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <MX_CAN_Init+0x60>)
 8001964:	2200      	movs	r2, #0
 8001966:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <MX_CAN_Init+0x60>)
 800196a:	2200      	movs	r2, #0
 800196c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <MX_CAN_Init+0x60>)
 8001970:	2200      	movs	r2, #0
 8001972:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <MX_CAN_Init+0x60>)
 8001976:	2200      	movs	r2, #0
 8001978:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <MX_CAN_Init+0x60>)
 800197c:	2200      	movs	r2, #0
 800197e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001980:	4804      	ldr	r0, [pc, #16]	; (8001994 <MX_CAN_Init+0x60>)
 8001982:	f000 fc67 	bl	8002254 <HAL_CAN_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800198c:	f000 f9a4 	bl	8001cd8 <Error_Handler>
  }

}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	2000047c 	.word	0x2000047c
 8001998:	40006400 	.word	0x40006400

0800199c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a18      	ldr	r2, [pc, #96]	; (8001a1c <HAL_CAN_MspInit+0x80>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d129      	bne.n	8001a12 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <HAL_CAN_MspInit+0x84>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	4a17      	ldr	r2, [pc, #92]	; (8001a20 <HAL_CAN_MspInit+0x84>)
 80019c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019c8:	61d3      	str	r3, [r2, #28]
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_CAN_MspInit+0x84>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_CAN_MspInit+0x84>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	4a11      	ldr	r2, [pc, #68]	; (8001a20 <HAL_CAN_MspInit+0x84>)
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e0:	6153      	str	r3, [r2, #20]
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_CAN_MspInit+0x84>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80019ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019fc:	2303      	movs	r3, #3
 80019fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001a00:	2309      	movs	r3, #9
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0e:	f000 fe03 	bl	8002618 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8001a12:	bf00      	nop
 8001a14:	3728      	adds	r7, #40	; 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40006400 	.word	0x40006400
 8001a20:	40021000 	.word	0x40021000

08001a24 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3a:	4b3d      	ldr	r3, [pc, #244]	; (8001b30 <MX_GPIO_Init+0x10c>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	4a3c      	ldr	r2, [pc, #240]	; (8001b30 <MX_GPIO_Init+0x10c>)
 8001a40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a44:	6153      	str	r3, [r2, #20]
 8001a46:	4b3a      	ldr	r3, [pc, #232]	; (8001b30 <MX_GPIO_Init+0x10c>)
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a52:	4b37      	ldr	r3, [pc, #220]	; (8001b30 <MX_GPIO_Init+0x10c>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	4a36      	ldr	r2, [pc, #216]	; (8001b30 <MX_GPIO_Init+0x10c>)
 8001a58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a5c:	6153      	str	r3, [r2, #20]
 8001a5e:	4b34      	ldr	r3, [pc, #208]	; (8001b30 <MX_GPIO_Init+0x10c>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <MX_GPIO_Init+0x10c>)
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	4a30      	ldr	r2, [pc, #192]	; (8001b30 <MX_GPIO_Init+0x10c>)
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a74:	6153      	str	r3, [r2, #20]
 8001a76:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <MX_GPIO_Init+0x10c>)
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <MX_GPIO_Init+0x10c>)
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	4a2a      	ldr	r2, [pc, #168]	; (8001b30 <MX_GPIO_Init+0x10c>)
 8001a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a8c:	6153      	str	r3, [r2, #20]
 8001a8e:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <MX_GPIO_Init+0x10c>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9a:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <MX_GPIO_Init+0x10c>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	4a24      	ldr	r2, [pc, #144]	; (8001b30 <MX_GPIO_Init+0x10c>)
 8001aa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001aa4:	6153      	str	r3, [r2, #20]
 8001aa6:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <MX_GPIO_Init+0x10c>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|SCREEN_CS_Pin
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f640 4107 	movw	r1, #3079	; 0xc07
 8001ab8:	481e      	ldr	r0, [pc, #120]	; (8001b34 <MX_GPIO_Init+0x110>)
 8001aba:	f000 ff27 	bl	800290c <HAL_GPIO_WritePin>
                          |SCREEN_D_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2110      	movs	r1, #16
 8001ac2:	481d      	ldr	r0, [pc, #116]	; (8001b38 <MX_GPIO_Init+0x114>)
 8001ac4:	f000 ff22 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2104      	movs	r1, #4
 8001acc:	481b      	ldr	r0, [pc, #108]	; (8001b3c <MX_GPIO_Init+0x118>)
 8001ace:	f000 ff1d 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PCPin
                           PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|SCREEN_CS_Pin
 8001ad2:	f640 4307 	movw	r3, #3079	; 0xc07
 8001ad6:	617b      	str	r3, [r7, #20]
                          |SCREEN_D_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4812      	ldr	r0, [pc, #72]	; (8001b34 <MX_GPIO_Init+0x110>)
 8001aec:	f000 fd94 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8001af0:	2310      	movs	r3, #16
 8001af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af4:	2301      	movs	r3, #1
 8001af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	4619      	mov	r1, r3
 8001b06:	480c      	ldr	r0, [pc, #48]	; (8001b38 <MX_GPIO_Init+0x114>)
 8001b08:	f000 fd86 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_A_Pin;
 8001b0c:	2304      	movs	r3, #4
 8001b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_A_GPIO_Port, &GPIO_InitStruct);
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4619      	mov	r1, r3
 8001b22:	4806      	ldr	r0, [pc, #24]	; (8001b3c <MX_GPIO_Init+0x118>)
 8001b24:	f000 fd78 	bl	8002618 <HAL_GPIO_Init>

}
 8001b28:	bf00      	nop
 8001b2a:	3728      	adds	r7, #40	; 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021000 	.word	0x40021000
 8001b34:	48000800 	.word	0x48000800
 8001b38:	48001400 	.word	0x48001400
 8001b3c:	48000c00 	.word	0x48000c00

08001b40 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001b46:	f000 fafd 	bl	8002144 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001b4a:	f000 f875 	bl	8001c38 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001b4e:	f7ff ff69 	bl	8001a24 <MX_GPIO_Init>
	MX_CAN_Init();
 8001b52:	f7ff feef 	bl	8001934 <MX_CAN_Init>
	MX_SPI1_Init();
 8001b56:	f000 f8c7 	bl	8001ce8 <MX_SPI1_Init>
	MX_SPI2_Init();
 8001b5a:	f000 f903 	bl	8001d64 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 8001b5e:	f000 fa53 	bl	8002008 <MX_USART1_UART_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_Delay(500);
 8001b62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b66:	f000 fb53 	bl	8002210 <HAL_Delay>
	uint8_t LCD_Status = BSP_LCD_Init();
 8001b6a:	f7ff fabb 	bl	80010e4 <BSP_LCD_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	77fb      	strb	r3, [r7, #31]
	HAL_Delay(500);
 8001b72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b76:	f000 fb4b 	bl	8002210 <HAL_Delay>
	uint8_t buffer[30];
	//	sprintf(buffer, "Status = %X\r\n", LCD_Status);
	//	HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), HAL_MAX_DELAY);
	HAL_Delay(100);
 8001b7a:	2064      	movs	r0, #100	; 0x64
 8001b7c:	f000 fb48 	bl	8002210 <HAL_Delay>
	uint8_t LCD_COLOUR =BSP_LCD_GetBackColor();
 8001b80:	f7ff faee 	bl	8001160 <BSP_LCD_GetBackColor>
 8001b84:	4603      	mov	r3, r0
 8001b86:	77bb      	strb	r3, [r7, #30]
	sprintf(buffer, "COLOUR = %X\r\n", LCD_COLOUR);
 8001b88:	7fba      	ldrb	r2, [r7, #30]
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	4923      	ldr	r1, [pc, #140]	; (8001c1c <main+0xdc>)
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f002 fec6 	bl	8004920 <siprintf>
	HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8001b94:	4639      	mov	r1, r7
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9a:	221e      	movs	r2, #30
 8001b9c:	4820      	ldr	r0, [pc, #128]	; (8001c20 <main+0xe0>)
 8001b9e:	f002 fa7d 	bl	800409c <HAL_UART_Transmit>
	BSP_LCD_Clear(LCD_COLOR_RED);
 8001ba2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001ba6:	f7ff fb07 	bl	80011b8 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8001baa:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001bae:	f7ff fae3 	bl	8001178 <BSP_LCD_SetBackColor>

	//BSP_LCD_SetBackColor(RC(0x001F));
	BSP_LCD_DrawRect(10,10,10,10);
 8001bb2:	230a      	movs	r3, #10
 8001bb4:	220a      	movs	r2, #10
 8001bb6:	210a      	movs	r1, #10
 8001bb8:	200a      	movs	r0, #10
 8001bba:	f7ff fc61 	bl	8001480 <BSP_LCD_DrawRect>
	BSP_LCD_DrawCircle(10,10,10);
 8001bbe:	220a      	movs	r2, #10
 8001bc0:	210a      	movs	r1, #10
 8001bc2:	200a      	movs	r0, #10
 8001bc4:	f7ff fc92 	bl	80014ec <BSP_LCD_DrawCircle>

	HAL_Delay(1000);
 8001bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bcc:	f000 fb20 	bl	8002210 <HAL_Delay>

	BSP_LCD_SetFont(&Font24);
 8001bd0:	4814      	ldr	r0, [pc, #80]	; (8001c24 <main+0xe4>)
 8001bd2:	f7ff fae1 	bl	8001198 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(20,20, "fuck python", CENTER_MODE);
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <main+0xe8>)
 8001bda:	2114      	movs	r1, #20
 8001bdc:	2014      	movs	r0, #20
 8001bde:	f7ff fb33 	bl	8001248 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 8001be2:	4812      	ldr	r0, [pc, #72]	; (8001c2c <main+0xec>)
 8001be4:	f7ff fad8 	bl	8001198 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0,70, "real homies use matlab", LEFT_MODE);
 8001be8:	2303      	movs	r3, #3
 8001bea:	4a11      	ldr	r2, [pc, #68]	; (8001c30 <main+0xf0>)
 8001bec:	2146      	movs	r1, #70	; 0x46
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f7ff fb2a 	bl	8001248 <BSP_LCD_DisplayStringAt>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2104      	movs	r1, #4
 8001bf8:	480e      	ldr	r0, [pc, #56]	; (8001c34 <main+0xf4>)
 8001bfa:	f000 fe87 	bl	800290c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001bfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c02:	f000 fb05 	bl	8002210 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8001c06:	2201      	movs	r2, #1
 8001c08:	2104      	movs	r1, #4
 8001c0a:	480a      	ldr	r0, [pc, #40]	; (8001c34 <main+0xf4>)
 8001c0c:	f000 fe7e 	bl	800290c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001c10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c14:	f000 fafc 	bl	8002210 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c18:	e7ec      	b.n	8001bf4 <main+0xb4>
 8001c1a:	bf00      	nop
 8001c1c:	08005178 	.word	0x08005178
 8001c20:	2000056c 	.word	0x2000056c
 8001c24:	20000008 	.word	0x20000008
 8001c28:	08005188 	.word	0x08005188
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	08005194 	.word	0x08005194
 8001c34:	48000c00 	.word	0x48000c00

08001c38 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b09c      	sub	sp, #112	; 0x70
 8001c3c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c42:	2228      	movs	r2, #40	; 0x28
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f002 fe62 	bl	8004910 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c5c:	463b      	mov	r3, r7
 8001c5e:	2234      	movs	r2, #52	; 0x34
 8001c60:	2100      	movs	r1, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f002 fe54 	bl	8004910 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c70:	2310      	movs	r3, #16
 8001c72:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 fe5d 	bl	800293c <HAL_RCC_OscConfig>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <SystemClock_Config+0x54>
	{
		Error_Handler();
 8001c88:	f000 f826 	bl	8001cd8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c8c:	230f      	movs	r3, #15
 8001c8e:	637b      	str	r3, [r7, #52]	; 0x34
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c90:	2300      	movs	r3, #0
 8001c92:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	647b      	str	r3, [r7, #68]	; 0x44

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ca0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f001 fd50 	bl	800374c <HAL_RCC_ClockConfig>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <SystemClock_Config+0x7e>
	{
		Error_Handler();
 8001cb2:	f000 f811 	bl	8001cd8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cbe:	463b      	mov	r3, r7
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f001 ff79 	bl	8003bb8 <HAL_RCCEx_PeriphCLKConfig>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8001ccc:	f000 f804 	bl	8001cd8 <Error_Handler>
	}
}
 8001cd0:	bf00      	nop
 8001cd2:	3770      	adds	r7, #112	; 0x70
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001cee:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <MX_SPI1_Init+0x78>)
 8001cf0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001cf4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cf8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cfa:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001d00:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d02:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001d06:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d1a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d36:	2207      	movs	r2, #7
 8001d38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d42:	2208      	movs	r2, #8
 8001d44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d46:	4805      	ldr	r0, [pc, #20]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d48:	f002 f8c8 	bl	8003edc <HAL_SPI_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d52:	f7ff ffc1 	bl	8001cd8 <Error_Handler>
  }

}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000508 	.word	0x20000508
 8001d60:	40013000 	.word	0x40013000

08001d64 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <MX_SPI2_Init+0x78>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001d70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001d7e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001d82:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d96:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001db2:	2207      	movs	r2, #7
 8001db4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001dc4:	f002 f88a 	bl	8003edc <HAL_SPI_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001dce:	f7ff ff83 	bl	8001cd8 <Error_Handler>
  }

}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200004a4 	.word	0x200004a4
 8001ddc:	40003800 	.word	0x40003800

08001de0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08c      	sub	sp, #48	; 0x30
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a2f      	ldr	r2, [pc, #188]	; (8001ebc <HAL_SPI_MspInit+0xdc>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d129      	bne.n	8001e56 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e02:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <HAL_SPI_MspInit+0xe0>)
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	4a2e      	ldr	r2, [pc, #184]	; (8001ec0 <HAL_SPI_MspInit+0xe0>)
 8001e08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e0c:	6193      	str	r3, [r2, #24]
 8001e0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ec0 <HAL_SPI_MspInit+0xe0>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e16:	61bb      	str	r3, [r7, #24]
 8001e18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	4b29      	ldr	r3, [pc, #164]	; (8001ec0 <HAL_SPI_MspInit+0xe0>)
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	4a28      	ldr	r2, [pc, #160]	; (8001ec0 <HAL_SPI_MspInit+0xe0>)
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e24:	6153      	str	r3, [r2, #20]
 8001e26:	4b26      	ldr	r3, [pc, #152]	; (8001ec0 <HAL_SPI_MspInit+0xe0>)
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e32:	23e0      	movs	r3, #224	; 0xe0
 8001e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e42:	2305      	movs	r3, #5
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f107 031c 	add.w	r3, r7, #28
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e50:	f000 fbe2 	bl	8002618 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001e54:	e02d      	b.n	8001eb2 <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI2)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_SPI_MspInit+0xe4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d128      	bne.n	8001eb2 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <HAL_SPI_MspInit+0xe0>)
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	4a16      	ldr	r2, [pc, #88]	; (8001ec0 <HAL_SPI_MspInit+0xe0>)
 8001e66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6a:	61d3      	str	r3, [r2, #28]
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <HAL_SPI_MspInit+0xe0>)
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <HAL_SPI_MspInit+0xe0>)
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	4a10      	ldr	r2, [pc, #64]	; (8001ec0 <HAL_SPI_MspInit+0xe0>)
 8001e7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e82:	6153      	str	r3, [r2, #20]
 8001e84:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <HAL_SPI_MspInit+0xe0>)
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e90:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ea2:	2305      	movs	r3, #5
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4806      	ldr	r0, [pc, #24]	; (8001ec8 <HAL_SPI_MspInit+0xe8>)
 8001eae:	f000 fbb3 	bl	8002618 <HAL_GPIO_Init>
}
 8001eb2:	bf00      	nop
 8001eb4:	3730      	adds	r7, #48	; 0x30
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40013000 	.word	0x40013000
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40003800 	.word	0x40003800
 8001ec8:	48000400 	.word	0x48000400

08001ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_MspInit+0x44>)
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <HAL_MspInit+0x44>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6193      	str	r3, [r2, #24]
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_MspInit+0x44>)
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_MspInit+0x44>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <HAL_MspInit+0x44>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	61d3      	str	r3, [r2, #28]
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_MspInit+0x44>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000

08001f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <HardFault_Handler+0x4>

08001f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <MemManage_Handler+0x4>

08001f2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <BusFault_Handler+0x4>

08001f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <UsageFault_Handler+0x4>

08001f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f68:	f000 f932 	bl	80021d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f78:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <_sbrk+0x5c>)
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <_sbrk+0x60>)
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <_sbrk+0x64>)
 8001f8e:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <_sbrk+0x68>)
 8001f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d207      	bcs.n	8001fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa0:	f002 fc8c 	bl	80048bc <__errno>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	230c      	movs	r3, #12
 8001fa8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	e009      	b.n	8001fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <_sbrk+0x64>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fb6:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <_sbrk+0x64>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <_sbrk+0x64>)
 8001fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	2000a000 	.word	0x2000a000
 8001fd0:	00000400 	.word	0x00000400
 8001fd4:	20000464 	.word	0x20000464
 8001fd8:	200005f8 	.word	0x200005f8

08001fdc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <SystemInit+0x28>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe6:	4a07      	ldr	r2, [pc, #28]	; (8002004 <SystemInit+0x28>)
 8001fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <SystemInit+0x28>)
 8001ff2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ff6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <MX_USART1_UART_Init+0x58>)
 800200e:	4a15      	ldr	r2, [pc, #84]	; (8002064 <MX_USART1_UART_Init+0x5c>)
 8002010:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002012:	4b13      	ldr	r3, [pc, #76]	; (8002060 <MX_USART1_UART_Init+0x58>)
 8002014:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002018:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <MX_USART1_UART_Init+0x58>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002020:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <MX_USART1_UART_Init+0x58>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <MX_USART1_UART_Init+0x58>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <MX_USART1_UART_Init+0x58>)
 800202e:	220c      	movs	r2, #12
 8002030:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <MX_USART1_UART_Init+0x58>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <MX_USART1_UART_Init+0x58>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <MX_USART1_UART_Init+0x58>)
 8002040:	2200      	movs	r2, #0
 8002042:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <MX_USART1_UART_Init+0x58>)
 8002046:	2200      	movs	r2, #0
 8002048:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800204a:	4805      	ldr	r0, [pc, #20]	; (8002060 <MX_USART1_UART_Init+0x58>)
 800204c:	f001 ffd8 	bl	8004000 <HAL_UART_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002056:	f7ff fe3f 	bl	8001cd8 <Error_Handler>
  }

}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000056c 	.word	0x2000056c
 8002064:	40013800 	.word	0x40013800

08002068 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	; 0x28
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a17      	ldr	r2, [pc, #92]	; (80020e4 <HAL_UART_MspInit+0x7c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d127      	bne.n	80020da <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800208a:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <HAL_UART_MspInit+0x80>)
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	4a16      	ldr	r2, [pc, #88]	; (80020e8 <HAL_UART_MspInit+0x80>)
 8002090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002094:	6193      	str	r3, [r2, #24]
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_UART_MspInit+0x80>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_UART_MspInit+0x80>)
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	4a10      	ldr	r2, [pc, #64]	; (80020e8 <HAL_UART_MspInit+0x80>)
 80020a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020ac:	6153      	str	r3, [r2, #20]
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_UART_MspInit+0x80>)
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020ba:	2330      	movs	r3, #48	; 0x30
 80020bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c6:	2303      	movs	r3, #3
 80020c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020ca:	2307      	movs	r3, #7
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4619      	mov	r1, r3
 80020d4:	4805      	ldr	r0, [pc, #20]	; (80020ec <HAL_UART_MspInit+0x84>)
 80020d6:	f000 fa9f 	bl	8002618 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80020da:	bf00      	nop
 80020dc:	3728      	adds	r7, #40	; 0x28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40013800 	.word	0x40013800
 80020e8:	40021000 	.word	0x40021000
 80020ec:	48000800 	.word	0x48000800

080020f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002128 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020f6:	e003      	b.n	8002100 <LoopCopyDataInit>

080020f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020fe:	3104      	adds	r1, #4

08002100 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002100:	480b      	ldr	r0, [pc, #44]	; (8002130 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002102:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002104:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002106:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002108:	d3f6      	bcc.n	80020f8 <CopyDataInit>
	ldr	r2, =_sbss
 800210a:	4a0b      	ldr	r2, [pc, #44]	; (8002138 <LoopForever+0x12>)
	b	LoopFillZerobss
 800210c:	e002      	b.n	8002114 <LoopFillZerobss>

0800210e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800210e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002110:	f842 3b04 	str.w	r3, [r2], #4

08002114 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <LoopForever+0x16>)
	cmp	r2, r3
 8002116:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002118:	d3f9      	bcc.n	800210e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800211a:	f7ff ff5f 	bl	8001fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800211e:	f002 fbd3 	bl	80048c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002122:	f7ff fd0d 	bl	8001b40 <main>

08002126 <LoopForever>:

LoopForever:
    b LoopForever
 8002126:	e7fe      	b.n	8002126 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002128:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 800212c:	08007bb0 	.word	0x08007bb0
	ldr	r0, =_sdata
 8002130:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002134:	200000d0 	.word	0x200000d0
	ldr	r2, =_sbss
 8002138:	200000d0 	.word	0x200000d0
	ldr	r3, = _ebss
 800213c:	200005f4 	.word	0x200005f4

08002140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002140:	e7fe      	b.n	8002140 <ADC1_2_IRQHandler>
	...

08002144 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_Init+0x28>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a07      	ldr	r2, [pc, #28]	; (800216c <HAL_Init+0x28>)
 800214e:	f043 0310 	orr.w	r3, r3, #16
 8002152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002154:	2003      	movs	r0, #3
 8002156:	f000 fa2b 	bl	80025b0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215a:	2000      	movs	r0, #0
 800215c:	f000 f808 	bl	8002170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002160:	f7ff feb4 	bl	8001ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40022000 	.word	0x40022000

08002170 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_InitTick+0x54>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_InitTick+0x58>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4619      	mov	r1, r3
 8002182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002186:	fbb3 f3f1 	udiv	r3, r3, r1
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	4618      	mov	r0, r3
 8002190:	f000 fa35 	bl	80025fe <HAL_SYSTICK_Config>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e00e      	b.n	80021bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b0f      	cmp	r3, #15
 80021a2:	d80a      	bhi.n	80021ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a4:	2200      	movs	r2, #0
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	f000 fa0b 	bl	80025c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b0:	4a06      	ldr	r2, [pc, #24]	; (80021cc <HAL_InitTick+0x5c>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e000      	b.n	80021bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000060 	.word	0x20000060
 80021c8:	20000068 	.word	0x20000068
 80021cc:	20000064 	.word	0x20000064

080021d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_IncTick+0x20>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_IncTick+0x24>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <HAL_IncTick+0x24>)
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000068 	.word	0x20000068
 80021f4:	200005ec 	.word	0x200005ec

080021f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <HAL_GetTick+0x14>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	200005ec 	.word	0x200005ec

08002210 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002218:	f7ff ffee 	bl	80021f8 <HAL_GetTick>
 800221c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002228:	d005      	beq.n	8002236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_Delay+0x40>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4413      	add	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002236:	bf00      	nop
 8002238:	f7ff ffde 	bl	80021f8 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	429a      	cmp	r2, r3
 8002246:	d8f7      	bhi.n	8002238 <HAL_Delay+0x28>
  {
  }
}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000068 	.word	0x20000068

08002254 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e0ed      	b.n	8002442 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff fb92 	bl	800199c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0202 	bic.w	r2, r2, #2
 8002286:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002288:	f7ff ffb6 	bl	80021f8 <HAL_GetTick>
 800228c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800228e:	e012      	b.n	80022b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002290:	f7ff ffb2 	bl	80021f8 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b0a      	cmp	r3, #10
 800229c:	d90b      	bls.n	80022b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2205      	movs	r2, #5
 80022ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e0c5      	b.n	8002442 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1e5      	bne.n	8002290 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022d4:	f7ff ff90 	bl	80021f8 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022da:	e012      	b.n	8002302 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022dc:	f7ff ff8c 	bl	80021f8 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b0a      	cmp	r3, #10
 80022e8:	d90b      	bls.n	8002302 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2205      	movs	r2, #5
 80022fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e09f      	b.n	8002442 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0e5      	beq.n	80022dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	7e1b      	ldrb	r3, [r3, #24]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d108      	bne.n	800232a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	e007      	b.n	800233a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002338:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	7e5b      	ldrb	r3, [r3, #25]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d108      	bne.n	8002354 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	e007      	b.n	8002364 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002362:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7e9b      	ldrb	r3, [r3, #26]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d108      	bne.n	800237e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0220 	orr.w	r2, r2, #32
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	e007      	b.n	800238e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0220 	bic.w	r2, r2, #32
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	7edb      	ldrb	r3, [r3, #27]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d108      	bne.n	80023a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0210 	bic.w	r2, r2, #16
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	e007      	b.n	80023b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0210 	orr.w	r2, r2, #16
 80023b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	7f1b      	ldrb	r3, [r3, #28]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d108      	bne.n	80023d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0208 	orr.w	r2, r2, #8
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e007      	b.n	80023e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0208 	bic.w	r2, r2, #8
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	7f5b      	ldrb	r3, [r3, #29]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d108      	bne.n	80023fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0204 	orr.w	r2, r2, #4
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e007      	b.n	800240c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0204 	bic.w	r2, r2, #4
 800240a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	ea42 0103 	orr.w	r1, r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	1e5a      	subs	r2, r3, #1
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <__NVIC_SetPriorityGrouping+0x44>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002468:	4013      	ands	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800247c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800247e:	4a04      	ldr	r2, [pc, #16]	; (8002490 <__NVIC_SetPriorityGrouping+0x44>)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	60d3      	str	r3, [r2, #12]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <__NVIC_GetPriorityGrouping+0x18>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	f003 0307 	and.w	r3, r3, #7
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	db0a      	blt.n	80024da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	490c      	ldr	r1, [pc, #48]	; (80024fc <__NVIC_SetPriority+0x4c>)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	0112      	lsls	r2, r2, #4
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	440b      	add	r3, r1
 80024d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d8:	e00a      	b.n	80024f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4908      	ldr	r1, [pc, #32]	; (8002500 <__NVIC_SetPriority+0x50>)
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	3b04      	subs	r3, #4
 80024e8:	0112      	lsls	r2, r2, #4
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	440b      	add	r3, r1
 80024ee:	761a      	strb	r2, [r3, #24]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000e100 	.word	0xe000e100
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002504:	b480      	push	{r7}
 8002506:	b089      	sub	sp, #36	; 0x24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f1c3 0307 	rsb	r3, r3, #7
 800251e:	2b04      	cmp	r3, #4
 8002520:	bf28      	it	cs
 8002522:	2304      	movcs	r3, #4
 8002524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3304      	adds	r3, #4
 800252a:	2b06      	cmp	r3, #6
 800252c:	d902      	bls.n	8002534 <NVIC_EncodePriority+0x30>
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3b03      	subs	r3, #3
 8002532:	e000      	b.n	8002536 <NVIC_EncodePriority+0x32>
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	f04f 32ff 	mov.w	r2, #4294967295
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	401a      	ands	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800254c:	f04f 31ff 	mov.w	r1, #4294967295
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	43d9      	mvns	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	4313      	orrs	r3, r2
         );
}
 800255e:	4618      	mov	r0, r3
 8002560:	3724      	adds	r7, #36	; 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3b01      	subs	r3, #1
 8002578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800257c:	d301      	bcc.n	8002582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800257e:	2301      	movs	r3, #1
 8002580:	e00f      	b.n	80025a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002582:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <SysTick_Config+0x40>)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3b01      	subs	r3, #1
 8002588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800258a:	210f      	movs	r1, #15
 800258c:	f04f 30ff 	mov.w	r0, #4294967295
 8002590:	f7ff ff8e 	bl	80024b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <SysTick_Config+0x40>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800259a:	4b04      	ldr	r3, [pc, #16]	; (80025ac <SysTick_Config+0x40>)
 800259c:	2207      	movs	r2, #7
 800259e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	e000e010 	.word	0xe000e010

080025b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff ff47 	bl	800244c <__NVIC_SetPriorityGrouping>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025d8:	f7ff ff5c 	bl	8002494 <__NVIC_GetPriorityGrouping>
 80025dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68b9      	ldr	r1, [r7, #8]
 80025e2:	6978      	ldr	r0, [r7, #20]
 80025e4:	f7ff ff8e 	bl	8002504 <NVIC_EncodePriority>
 80025e8:	4602      	mov	r2, r0
 80025ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff5d 	bl	80024b0 <__NVIC_SetPriority>
}
 80025f6:	bf00      	nop
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ffb0 	bl	800256c <SysTick_Config>
 800260c:	4603      	mov	r3, r0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002618:	b480      	push	{r7}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002626:	e154      	b.n	80028d2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2101      	movs	r1, #1
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	fa01 f303 	lsl.w	r3, r1, r3
 8002634:	4013      	ands	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 8146 	beq.w	80028cc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d00b      	beq.n	8002660 <HAL_GPIO_Init+0x48>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b02      	cmp	r3, #2
 800264e:	d007      	beq.n	8002660 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002654:	2b11      	cmp	r3, #17
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b12      	cmp	r3, #18
 800265e:	d130      	bne.n	80026c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	2203      	movs	r2, #3
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002696:	2201      	movs	r2, #1
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4013      	ands	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	091b      	lsrs	r3, r3, #4
 80026ac:	f003 0201 	and.w	r2, r3, #1
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	2203      	movs	r2, #3
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0xea>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b12      	cmp	r3, #18
 8002700:	d123      	bne.n	800274a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	08da      	lsrs	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3208      	adds	r2, #8
 800270a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800270e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	220f      	movs	r2, #15
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	08da      	lsrs	r2, r3, #3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3208      	adds	r2, #8
 8002744:	6939      	ldr	r1, [r7, #16]
 8002746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2203      	movs	r2, #3
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 0203 	and.w	r2, r3, #3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80a0 	beq.w	80028cc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278c:	4b58      	ldr	r3, [pc, #352]	; (80028f0 <HAL_GPIO_Init+0x2d8>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	4a57      	ldr	r2, [pc, #348]	; (80028f0 <HAL_GPIO_Init+0x2d8>)
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6193      	str	r3, [r2, #24]
 8002798:	4b55      	ldr	r3, [pc, #340]	; (80028f0 <HAL_GPIO_Init+0x2d8>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027a4:	4a53      	ldr	r2, [pc, #332]	; (80028f4 <HAL_GPIO_Init+0x2dc>)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	089b      	lsrs	r3, r3, #2
 80027aa:	3302      	adds	r3, #2
 80027ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	220f      	movs	r2, #15
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027ce:	d019      	beq.n	8002804 <HAL_GPIO_Init+0x1ec>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a49      	ldr	r2, [pc, #292]	; (80028f8 <HAL_GPIO_Init+0x2e0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d013      	beq.n	8002800 <HAL_GPIO_Init+0x1e8>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a48      	ldr	r2, [pc, #288]	; (80028fc <HAL_GPIO_Init+0x2e4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d00d      	beq.n	80027fc <HAL_GPIO_Init+0x1e4>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a47      	ldr	r2, [pc, #284]	; (8002900 <HAL_GPIO_Init+0x2e8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d007      	beq.n	80027f8 <HAL_GPIO_Init+0x1e0>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a46      	ldr	r2, [pc, #280]	; (8002904 <HAL_GPIO_Init+0x2ec>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d101      	bne.n	80027f4 <HAL_GPIO_Init+0x1dc>
 80027f0:	2304      	movs	r3, #4
 80027f2:	e008      	b.n	8002806 <HAL_GPIO_Init+0x1ee>
 80027f4:	2305      	movs	r3, #5
 80027f6:	e006      	b.n	8002806 <HAL_GPIO_Init+0x1ee>
 80027f8:	2303      	movs	r3, #3
 80027fa:	e004      	b.n	8002806 <HAL_GPIO_Init+0x1ee>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e002      	b.n	8002806 <HAL_GPIO_Init+0x1ee>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <HAL_GPIO_Init+0x1ee>
 8002804:	2300      	movs	r3, #0
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	f002 0203 	and.w	r2, r2, #3
 800280c:	0092      	lsls	r2, r2, #2
 800280e:	4093      	lsls	r3, r2
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002816:	4937      	ldr	r1, [pc, #220]	; (80028f4 <HAL_GPIO_Init+0x2dc>)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	3302      	adds	r3, #2
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002824:	4b38      	ldr	r3, [pc, #224]	; (8002908 <HAL_GPIO_Init+0x2f0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	43db      	mvns	r3, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002848:	4a2f      	ldr	r2, [pc, #188]	; (8002908 <HAL_GPIO_Init+0x2f0>)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800284e:	4b2e      	ldr	r3, [pc, #184]	; (8002908 <HAL_GPIO_Init+0x2f0>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	43db      	mvns	r3, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002872:	4a25      	ldr	r2, [pc, #148]	; (8002908 <HAL_GPIO_Init+0x2f0>)
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002878:	4b23      	ldr	r3, [pc, #140]	; (8002908 <HAL_GPIO_Init+0x2f0>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	43db      	mvns	r3, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800289c:	4a1a      	ldr	r2, [pc, #104]	; (8002908 <HAL_GPIO_Init+0x2f0>)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028a2:	4b19      	ldr	r3, [pc, #100]	; (8002908 <HAL_GPIO_Init+0x2f0>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028c6:	4a10      	ldr	r2, [pc, #64]	; (8002908 <HAL_GPIO_Init+0x2f0>)
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	3301      	adds	r3, #1
 80028d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f47f aea3 	bne.w	8002628 <HAL_GPIO_Init+0x10>
  }
}
 80028e2:	bf00      	nop
 80028e4:	371c      	adds	r7, #28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40010000 	.word	0x40010000
 80028f8:	48000400 	.word	0x48000400
 80028fc:	48000800 	.word	0x48000800
 8002900:	48000c00 	.word	0x48000c00
 8002904:	48001000 	.word	0x48001000
 8002908:	40010400 	.word	0x40010400

0800290c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
 8002918:	4613      	mov	r3, r2
 800291a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800291c:	787b      	ldrb	r3, [r7, #1]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002922:	887a      	ldrh	r2, [r7, #2]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002928:	e002      	b.n	8002930 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800292a:	887a      	ldrh	r2, [r7, #2]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002942:	af00      	add	r7, sp, #0
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d102      	bne.n	8002956 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	f000 bef4 	b.w	800373e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 816a 	beq.w	8002c3a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002966:	4bb3      	ldr	r3, [pc, #716]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b04      	cmp	r3, #4
 8002970:	d00c      	beq.n	800298c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002972:	4bb0      	ldr	r3, [pc, #704]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b08      	cmp	r3, #8
 800297c:	d159      	bne.n	8002a32 <HAL_RCC_OscConfig+0xf6>
 800297e:	4bad      	ldr	r3, [pc, #692]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298a:	d152      	bne.n	8002a32 <HAL_RCC_OscConfig+0xf6>
 800298c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002990:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029a0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a4:	fab3 f383 	clz	r3, r3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d102      	bne.n	80029be <HAL_RCC_OscConfig+0x82>
 80029b8:	4b9e      	ldr	r3, [pc, #632]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	e015      	b.n	80029ea <HAL_RCC_OscConfig+0xae>
 80029be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029c2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80029d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029d6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80029da:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80029e6:	4b93      	ldr	r3, [pc, #588]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029ee:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80029f2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80029f6:	fa92 f2a2 	rbit	r2, r2
 80029fa:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80029fe:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a02:	fab2 f282 	clz	r2, r2
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	f042 0220 	orr.w	r2, r2, #32
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	f002 021f 	and.w	r2, r2, #31
 8002a12:	2101      	movs	r1, #1
 8002a14:	fa01 f202 	lsl.w	r2, r1, r2
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 810c 	beq.w	8002c38 <HAL_RCC_OscConfig+0x2fc>
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f040 8106 	bne.w	8002c38 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	f000 be86 	b.w	800373e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a32:	1d3b      	adds	r3, r7, #4
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3c:	d106      	bne.n	8002a4c <HAL_RCC_OscConfig+0x110>
 8002a3e:	4b7d      	ldr	r3, [pc, #500]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a7c      	ldr	r2, [pc, #496]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	e030      	b.n	8002aae <HAL_RCC_OscConfig+0x172>
 8002a4c:	1d3b      	adds	r3, r7, #4
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x134>
 8002a56:	4b77      	ldr	r3, [pc, #476]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a76      	ldr	r2, [pc, #472]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	4b74      	ldr	r3, [pc, #464]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a73      	ldr	r2, [pc, #460]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e01e      	b.n	8002aae <HAL_RCC_OscConfig+0x172>
 8002a70:	1d3b      	adds	r3, r7, #4
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a7a:	d10c      	bne.n	8002a96 <HAL_RCC_OscConfig+0x15a>
 8002a7c:	4b6d      	ldr	r3, [pc, #436]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a6c      	ldr	r2, [pc, #432]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002a82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	4b6a      	ldr	r3, [pc, #424]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a69      	ldr	r2, [pc, #420]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	e00b      	b.n	8002aae <HAL_RCC_OscConfig+0x172>
 8002a96:	4b67      	ldr	r3, [pc, #412]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a66      	ldr	r2, [pc, #408]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	4b64      	ldr	r3, [pc, #400]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a63      	ldr	r2, [pc, #396]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aac:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aae:	4b61      	ldr	r3, [pc, #388]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	f023 020f 	bic.w	r2, r3, #15
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	495d      	ldr	r1, [pc, #372]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac2:	1d3b      	adds	r3, r7, #4
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d059      	beq.n	8002b80 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7ff fb94 	bl	80021f8 <HAL_GetTick>
 8002ad0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad4:	e00a      	b.n	8002aec <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad6:	f7ff fb8f 	bl	80021f8 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	; 0x64
 8002ae4:	d902      	bls.n	8002aec <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	f000 be29 	b.w	800373e <HAL_RCC_OscConfig+0xe02>
 8002aec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002af0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002af8:	fa93 f3a3 	rbit	r3, r3
 8002afc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b00:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b04:	fab3 f383 	clz	r3, r3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d102      	bne.n	8002b1e <HAL_RCC_OscConfig+0x1e2>
 8002b18:	4b46      	ldr	r3, [pc, #280]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	e015      	b.n	8002b4a <HAL_RCC_OscConfig+0x20e>
 8002b1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b22:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b36:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b3a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002b46:	4b3b      	ldr	r3, [pc, #236]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b4e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002b52:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002b56:	fa92 f2a2 	rbit	r2, r2
 8002b5a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002b5e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002b62:	fab2 f282 	clz	r2, r2
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	f042 0220 	orr.w	r2, r2, #32
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	f002 021f 	and.w	r2, r2, #31
 8002b72:	2101      	movs	r1, #1
 8002b74:	fa01 f202 	lsl.w	r2, r1, r2
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0ab      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x19a>
 8002b7e:	e05c      	b.n	8002c3a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7ff fb3a 	bl	80021f8 <HAL_GetTick>
 8002b84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b8a:	f7ff fb35 	bl	80021f8 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d902      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	f000 bdcf 	b.w	800373e <HAL_RCC_OscConfig+0xe02>
 8002ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ba4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002bac:	fa93 f3a3 	rbit	r3, r3
 8002bb0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002bb4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb8:	fab3 f383 	clz	r3, r3
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d102      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x296>
 8002bcc:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	e015      	b.n	8002bfe <HAL_RCC_OscConfig+0x2c2>
 8002bd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002be6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002bee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <HAL_RCC_OscConfig+0x2f8>)
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c02:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c06:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c0a:	fa92 f2a2 	rbit	r2, r2
 8002c0e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002c12:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c16:	fab2 f282 	clz	r2, r2
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	f042 0220 	orr.w	r2, r2, #32
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	f002 021f 	and.w	r2, r2, #31
 8002c26:	2101      	movs	r1, #1
 8002c28:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1ab      	bne.n	8002b8a <HAL_RCC_OscConfig+0x24e>
 8002c32:	e002      	b.n	8002c3a <HAL_RCC_OscConfig+0x2fe>
 8002c34:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3a:	1d3b      	adds	r3, r7, #4
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 816f 	beq.w	8002f28 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c4a:	4bd0      	ldr	r3, [pc, #832]	; (8002f8c <HAL_RCC_OscConfig+0x650>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00b      	beq.n	8002c6e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c56:	4bcd      	ldr	r3, [pc, #820]	; (8002f8c <HAL_RCC_OscConfig+0x650>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d16c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x400>
 8002c62:	4bca      	ldr	r3, [pc, #808]	; (8002f8c <HAL_RCC_OscConfig+0x650>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d166      	bne.n	8002d3c <HAL_RCC_OscConfig+0x400>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002c80:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d102      	bne.n	8002c9e <HAL_RCC_OscConfig+0x362>
 8002c98:	4bbc      	ldr	r3, [pc, #752]	; (8002f8c <HAL_RCC_OscConfig+0x650>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	e013      	b.n	8002cc6 <HAL_RCC_OscConfig+0x38a>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002cb6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002cc2:	4bb2      	ldr	r3, [pc, #712]	; (8002f8c <HAL_RCC_OscConfig+0x650>)
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002ccc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002cd0:	fa92 f2a2 	rbit	r2, r2
 8002cd4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002cd8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002cdc:	fab2 f282 	clz	r2, r2
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	f042 0220 	orr.w	r2, r2, #32
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	f002 021f 	and.w	r2, r2, #31
 8002cec:	2101      	movs	r1, #1
 8002cee:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <HAL_RCC_OscConfig+0x3cc>
 8002cf8:	1d3b      	adds	r3, r7, #4
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d002      	beq.n	8002d08 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	f000 bd1b 	b.w	800373e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d08:	4ba0      	ldr	r3, [pc, #640]	; (8002f8c <HAL_RCC_OscConfig+0x650>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d10:	1d3b      	adds	r3, r7, #4
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	21f8      	movs	r1, #248	; 0xf8
 8002d18:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d20:	fa91 f1a1 	rbit	r1, r1
 8002d24:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002d28:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002d2c:	fab1 f181 	clz	r1, r1
 8002d30:	b2c9      	uxtb	r1, r1
 8002d32:	408b      	lsls	r3, r1
 8002d34:	4995      	ldr	r1, [pc, #596]	; (8002f8c <HAL_RCC_OscConfig+0x650>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3a:	e0f5      	b.n	8002f28 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d3c:	1d3b      	adds	r3, r7, #4
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8085 	beq.w	8002e52 <HAL_RCC_OscConfig+0x516>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002d5a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	461a      	mov	r2, r3
 8002d70:	2301      	movs	r3, #1
 8002d72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7ff fa40 	bl	80021f8 <HAL_GetTick>
 8002d78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d7e:	f7ff fa3b 	bl	80021f8 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d902      	bls.n	8002d94 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	f000 bcd5 	b.w	800373e <HAL_RCC_OscConfig+0xe02>
 8002d94:	2302      	movs	r3, #2
 8002d96:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002da6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	095b      	lsrs	r3, r3, #5
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d102      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x488>
 8002dbe:	4b73      	ldr	r3, [pc, #460]	; (8002f8c <HAL_RCC_OscConfig+0x650>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	e013      	b.n	8002dec <HAL_RCC_OscConfig+0x4b0>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ddc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002de0:	fa93 f3a3 	rbit	r3, r3
 8002de4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002de8:	4b68      	ldr	r3, [pc, #416]	; (8002f8c <HAL_RCC_OscConfig+0x650>)
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	2202      	movs	r2, #2
 8002dee:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002df2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002df6:	fa92 f2a2 	rbit	r2, r2
 8002dfa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002dfe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e02:	fab2 f282 	clz	r2, r2
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	f042 0220 	orr.w	r2, r2, #32
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	f002 021f 	and.w	r2, r2, #31
 8002e12:	2101      	movs	r1, #1
 8002e14:	fa01 f202 	lsl.w	r2, r1, r2
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0af      	beq.n	8002d7e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1e:	4b5b      	ldr	r3, [pc, #364]	; (8002f8c <HAL_RCC_OscConfig+0x650>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e26:	1d3b      	adds	r3, r7, #4
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	21f8      	movs	r1, #248	; 0xf8
 8002e2e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002e36:	fa91 f1a1 	rbit	r1, r1
 8002e3a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002e3e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002e42:	fab1 f181 	clz	r1, r1
 8002e46:	b2c9      	uxtb	r1, r1
 8002e48:	408b      	lsls	r3, r1
 8002e4a:	4950      	ldr	r1, [pc, #320]	; (8002f8c <HAL_RCC_OscConfig+0x650>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]
 8002e50:	e06a      	b.n	8002f28 <HAL_RCC_OscConfig+0x5ec>
 8002e52:	2301      	movs	r3, #1
 8002e54:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e5c:	fa93 f3a3 	rbit	r3, r3
 8002e60:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e68:	fab3 f383 	clz	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7e:	f7ff f9bb 	bl	80021f8 <HAL_GetTick>
 8002e82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e86:	e00a      	b.n	8002e9e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e88:	f7ff f9b6 	bl	80021f8 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d902      	bls.n	8002e9e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	f000 bc50 	b.w	800373e <HAL_RCC_OscConfig+0xe02>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ea8:	fa93 f3a3 	rbit	r3, r3
 8002eac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb4:	fab3 f383 	clz	r3, r3
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	095b      	lsrs	r3, r3, #5
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d102      	bne.n	8002ece <HAL_RCC_OscConfig+0x592>
 8002ec8:	4b30      	ldr	r3, [pc, #192]	; (8002f8c <HAL_RCC_OscConfig+0x650>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	e013      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5ba>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002ed8:	fa93 f3a3 	rbit	r3, r3
 8002edc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ee6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002eea:	fa93 f3a3 	rbit	r3, r3
 8002eee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002ef2:	4b26      	ldr	r3, [pc, #152]	; (8002f8c <HAL_RCC_OscConfig+0x650>)
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002efc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f00:	fa92 f2a2 	rbit	r2, r2
 8002f04:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f08:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f0c:	fab2 f282 	clz	r2, r2
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	f042 0220 	orr.w	r2, r2, #32
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	f002 021f 	and.w	r2, r2, #31
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1af      	bne.n	8002e88 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 80da 	beq.w	80030ec <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f38:	1d3b      	adds	r3, r7, #4
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d069      	beq.n	8003016 <HAL_RCC_OscConfig+0x6da>
 8002f42:	2301      	movs	r3, #1
 8002f44:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f4c:	fa93 f3a3 	rbit	r3, r3
 8002f50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f58:	fab3 f383 	clz	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_RCC_OscConfig+0x654>)
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	461a      	mov	r2, r3
 8002f68:	2301      	movs	r3, #1
 8002f6a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6c:	f7ff f944 	bl	80021f8 <HAL_GetTick>
 8002f70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f74:	e00e      	b.n	8002f94 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f76:	f7ff f93f 	bl	80021f8 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d906      	bls.n	8002f94 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e3d9      	b.n	800373e <HAL_RCC_OscConfig+0xe02>
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	10908120 	.word	0x10908120
 8002f94:	2302      	movs	r3, #2
 8002f96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002fa6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002faa:	2202      	movs	r2, #2
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	fa93 f2a3 	rbit	r2, r3
 8002fb8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	fa93 f2a3 	rbit	r2, r3
 8002fd0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002fd4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd6:	4ba5      	ldr	r3, [pc, #660]	; (800326c <HAL_RCC_OscConfig+0x930>)
 8002fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fda:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002fde:	2102      	movs	r1, #2
 8002fe0:	6019      	str	r1, [r3, #0]
 8002fe2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	fa93 f1a3 	rbit	r1, r3
 8002fec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ff0:	6019      	str	r1, [r3, #0]
  return result;
 8002ff2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	fab3 f383 	clz	r3, r3
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003002:	b2db      	uxtb	r3, r3
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	2101      	movs	r1, #1
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0b0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x63a>
 8003014:	e06a      	b.n	80030ec <HAL_RCC_OscConfig+0x7b0>
 8003016:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	fa93 f2a3 	rbit	r2, r3
 8003028:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800302c:	601a      	str	r2, [r3, #0]
  return result;
 800302e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003032:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	4b8c      	ldr	r3, [pc, #560]	; (8003270 <HAL_RCC_OscConfig+0x934>)
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	461a      	mov	r2, r3
 8003044:	2300      	movs	r3, #0
 8003046:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003048:	f7ff f8d6 	bl	80021f8 <HAL_GetTick>
 800304c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003050:	e009      	b.n	8003066 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003052:	f7ff f8d1 	bl	80021f8 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e36b      	b.n	800373e <HAL_RCC_OscConfig+0xe02>
 8003066:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800306a:	2202      	movs	r2, #2
 800306c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	fa93 f2a3 	rbit	r2, r3
 8003078:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003082:	2202      	movs	r2, #2
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	fa93 f2a3 	rbit	r2, r3
 8003090:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800309a:	2202      	movs	r2, #2
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	fa93 f2a3 	rbit	r2, r3
 80030a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ae:	4b6f      	ldr	r3, [pc, #444]	; (800326c <HAL_RCC_OscConfig+0x930>)
 80030b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80030b6:	2102      	movs	r1, #2
 80030b8:	6019      	str	r1, [r3, #0]
 80030ba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	fa93 f1a3 	rbit	r1, r3
 80030c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030c8:	6019      	str	r1, [r3, #0]
  return result;
 80030ca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	fab3 f383 	clz	r3, r3
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	2101      	movs	r1, #1
 80030e2:	fa01 f303 	lsl.w	r3, r1, r3
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1b2      	bne.n	8003052 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ec:	1d3b      	adds	r3, r7, #4
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8158 	beq.w	80033ac <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003102:	4b5a      	ldr	r3, [pc, #360]	; (800326c <HAL_RCC_OscConfig+0x930>)
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d112      	bne.n	8003134 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800310e:	4b57      	ldr	r3, [pc, #348]	; (800326c <HAL_RCC_OscConfig+0x930>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	4a56      	ldr	r2, [pc, #344]	; (800326c <HAL_RCC_OscConfig+0x930>)
 8003114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003118:	61d3      	str	r3, [r2, #28]
 800311a:	4b54      	ldr	r3, [pc, #336]	; (800326c <HAL_RCC_OscConfig+0x930>)
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003122:	f107 0308 	add.w	r3, r7, #8
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	f107 0308 	add.w	r3, r7, #8
 800312c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	4b4f      	ldr	r3, [pc, #316]	; (8003274 <HAL_RCC_OscConfig+0x938>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d11a      	bne.n	8003176 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003140:	4b4c      	ldr	r3, [pc, #304]	; (8003274 <HAL_RCC_OscConfig+0x938>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a4b      	ldr	r2, [pc, #300]	; (8003274 <HAL_RCC_OscConfig+0x938>)
 8003146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314c:	f7ff f854 	bl	80021f8 <HAL_GetTick>
 8003150:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003154:	e009      	b.n	800316a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003156:	f7ff f84f 	bl	80021f8 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	; 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e2e9      	b.n	800373e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316a:	4b42      	ldr	r3, [pc, #264]	; (8003274 <HAL_RCC_OscConfig+0x938>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0ef      	beq.n	8003156 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003176:	1d3b      	adds	r3, r7, #4
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d106      	bne.n	800318e <HAL_RCC_OscConfig+0x852>
 8003180:	4b3a      	ldr	r3, [pc, #232]	; (800326c <HAL_RCC_OscConfig+0x930>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	4a39      	ldr	r2, [pc, #228]	; (800326c <HAL_RCC_OscConfig+0x930>)
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	6213      	str	r3, [r2, #32]
 800318c:	e02f      	b.n	80031ee <HAL_RCC_OscConfig+0x8b2>
 800318e:	1d3b      	adds	r3, r7, #4
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10c      	bne.n	80031b2 <HAL_RCC_OscConfig+0x876>
 8003198:	4b34      	ldr	r3, [pc, #208]	; (800326c <HAL_RCC_OscConfig+0x930>)
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	4a33      	ldr	r2, [pc, #204]	; (800326c <HAL_RCC_OscConfig+0x930>)
 800319e:	f023 0301 	bic.w	r3, r3, #1
 80031a2:	6213      	str	r3, [r2, #32]
 80031a4:	4b31      	ldr	r3, [pc, #196]	; (800326c <HAL_RCC_OscConfig+0x930>)
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	4a30      	ldr	r2, [pc, #192]	; (800326c <HAL_RCC_OscConfig+0x930>)
 80031aa:	f023 0304 	bic.w	r3, r3, #4
 80031ae:	6213      	str	r3, [r2, #32]
 80031b0:	e01d      	b.n	80031ee <HAL_RCC_OscConfig+0x8b2>
 80031b2:	1d3b      	adds	r3, r7, #4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	2b05      	cmp	r3, #5
 80031ba:	d10c      	bne.n	80031d6 <HAL_RCC_OscConfig+0x89a>
 80031bc:	4b2b      	ldr	r3, [pc, #172]	; (800326c <HAL_RCC_OscConfig+0x930>)
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	4a2a      	ldr	r2, [pc, #168]	; (800326c <HAL_RCC_OscConfig+0x930>)
 80031c2:	f043 0304 	orr.w	r3, r3, #4
 80031c6:	6213      	str	r3, [r2, #32]
 80031c8:	4b28      	ldr	r3, [pc, #160]	; (800326c <HAL_RCC_OscConfig+0x930>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	4a27      	ldr	r2, [pc, #156]	; (800326c <HAL_RCC_OscConfig+0x930>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	6213      	str	r3, [r2, #32]
 80031d4:	e00b      	b.n	80031ee <HAL_RCC_OscConfig+0x8b2>
 80031d6:	4b25      	ldr	r3, [pc, #148]	; (800326c <HAL_RCC_OscConfig+0x930>)
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	4a24      	ldr	r2, [pc, #144]	; (800326c <HAL_RCC_OscConfig+0x930>)
 80031dc:	f023 0301 	bic.w	r3, r3, #1
 80031e0:	6213      	str	r3, [r2, #32]
 80031e2:	4b22      	ldr	r3, [pc, #136]	; (800326c <HAL_RCC_OscConfig+0x930>)
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	4a21      	ldr	r2, [pc, #132]	; (800326c <HAL_RCC_OscConfig+0x930>)
 80031e8:	f023 0304 	bic.w	r3, r3, #4
 80031ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d06b      	beq.n	80032d0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f8:	f7fe fffe 	bl	80021f8 <HAL_GetTick>
 80031fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003200:	e00b      	b.n	800321a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003202:	f7fe fff9 	bl	80021f8 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e291      	b.n	800373e <HAL_RCC_OscConfig+0xe02>
 800321a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800321e:	2202      	movs	r2, #2
 8003220:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	fa93 f2a3 	rbit	r2, r3
 800322c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003236:	2202      	movs	r2, #2
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	fa93 f2a3 	rbit	r2, r3
 8003244:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003248:	601a      	str	r2, [r3, #0]
  return result;
 800324a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800324e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f043 0302 	orr.w	r3, r3, #2
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d109      	bne.n	8003278 <HAL_RCC_OscConfig+0x93c>
 8003264:	4b01      	ldr	r3, [pc, #4]	; (800326c <HAL_RCC_OscConfig+0x930>)
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	e014      	b.n	8003294 <HAL_RCC_OscConfig+0x958>
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	10908120 	.word	0x10908120
 8003274:	40007000 	.word	0x40007000
 8003278:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800327c:	2202      	movs	r2, #2
 800327e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	fa93 f2a3 	rbit	r2, r3
 800328a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	4bbb      	ldr	r3, [pc, #748]	; (8003580 <HAL_RCC_OscConfig+0xc44>)
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003298:	2102      	movs	r1, #2
 800329a:	6011      	str	r1, [r2, #0]
 800329c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	fa92 f1a2 	rbit	r1, r2
 80032a6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80032aa:	6011      	str	r1, [r2, #0]
  return result;
 80032ac:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	fab2 f282 	clz	r2, r2
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	f002 021f 	and.w	r2, r2, #31
 80032c2:	2101      	movs	r1, #1
 80032c4:	fa01 f202 	lsl.w	r2, r1, r2
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d099      	beq.n	8003202 <HAL_RCC_OscConfig+0x8c6>
 80032ce:	e063      	b.n	8003398 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d0:	f7fe ff92 	bl	80021f8 <HAL_GetTick>
 80032d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d8:	e00b      	b.n	80032f2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fe ff8d 	bl	80021f8 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e225      	b.n	800373e <HAL_RCC_OscConfig+0xe02>
 80032f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80032f6:	2202      	movs	r2, #2
 80032f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	fa93 f2a3 	rbit	r2, r3
 8003304:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800330e:	2202      	movs	r2, #2
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	fa93 f2a3 	rbit	r2, r3
 800331c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003320:	601a      	str	r2, [r3, #0]
  return result;
 8003322:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003326:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	b2db      	uxtb	r3, r3
 8003332:	f043 0302 	orr.w	r3, r3, #2
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d102      	bne.n	8003342 <HAL_RCC_OscConfig+0xa06>
 800333c:	4b90      	ldr	r3, [pc, #576]	; (8003580 <HAL_RCC_OscConfig+0xc44>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	e00d      	b.n	800335e <HAL_RCC_OscConfig+0xa22>
 8003342:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003346:	2202      	movs	r2, #2
 8003348:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	fa93 f2a3 	rbit	r2, r3
 8003354:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	4b89      	ldr	r3, [pc, #548]	; (8003580 <HAL_RCC_OscConfig+0xc44>)
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003362:	2102      	movs	r1, #2
 8003364:	6011      	str	r1, [r2, #0]
 8003366:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	fa92 f1a2 	rbit	r1, r2
 8003370:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003374:	6011      	str	r1, [r2, #0]
  return result;
 8003376:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	fab2 f282 	clz	r2, r2
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	f002 021f 	and.w	r2, r2, #31
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f202 	lsl.w	r2, r1, r2
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1a0      	bne.n	80032da <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003398:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800339c:	2b01      	cmp	r3, #1
 800339e:	d105      	bne.n	80033ac <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a0:	4b77      	ldr	r3, [pc, #476]	; (8003580 <HAL_RCC_OscConfig+0xc44>)
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	4a76      	ldr	r2, [pc, #472]	; (8003580 <HAL_RCC_OscConfig+0xc44>)
 80033a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033aa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ac:	1d3b      	adds	r3, r7, #4
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 81c2 	beq.w	800373c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033b8:	4b71      	ldr	r3, [pc, #452]	; (8003580 <HAL_RCC_OscConfig+0xc44>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 030c 	and.w	r3, r3, #12
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	f000 819c 	beq.w	80036fe <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c6:	1d3b      	adds	r3, r7, #4
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	f040 8114 	bne.w	80035fa <HAL_RCC_OscConfig+0xcbe>
 80033d2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	fa93 f2a3 	rbit	r2, r3
 80033e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033ea:	601a      	str	r2, [r3, #0]
  return result;
 80033ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033f0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f2:	fab3 f383 	clz	r3, r3
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	461a      	mov	r2, r3
 8003404:	2300      	movs	r3, #0
 8003406:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fe fef6 	bl	80021f8 <HAL_GetTick>
 800340c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003410:	e009      	b.n	8003426 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003412:	f7fe fef1 	bl	80021f8 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e18b      	b.n	800373e <HAL_RCC_OscConfig+0xe02>
 8003426:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800342a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800342e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	fa93 f2a3 	rbit	r2, r3
 800343a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800343e:	601a      	str	r2, [r3, #0]
  return result;
 8003440:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003444:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003446:	fab3 f383 	clz	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d102      	bne.n	8003460 <HAL_RCC_OscConfig+0xb24>
 800345a:	4b49      	ldr	r3, [pc, #292]	; (8003580 <HAL_RCC_OscConfig+0xc44>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	e01b      	b.n	8003498 <HAL_RCC_OscConfig+0xb5c>
 8003460:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003464:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003468:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	fa93 f2a3 	rbit	r2, r3
 8003474:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800347e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	fa93 f2a3 	rbit	r2, r3
 800348e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	4b3a      	ldr	r3, [pc, #232]	; (8003580 <HAL_RCC_OscConfig+0xc44>)
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800349c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034a0:	6011      	str	r1, [r2, #0]
 80034a2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	fa92 f1a2 	rbit	r1, r2
 80034ac:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80034b0:	6011      	str	r1, [r2, #0]
  return result;
 80034b2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	fab2 f282 	clz	r2, r2
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	f042 0220 	orr.w	r2, r2, #32
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	f002 021f 	and.w	r2, r2, #31
 80034c8:	2101      	movs	r1, #1
 80034ca:	fa01 f202 	lsl.w	r2, r1, r2
 80034ce:	4013      	ands	r3, r2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d19e      	bne.n	8003412 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034d4:	4b2a      	ldr	r3, [pc, #168]	; (8003580 <HAL_RCC_OscConfig+0xc44>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034dc:	1d3b      	adds	r3, r7, #4
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034e2:	1d3b      	adds	r3, r7, #4
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	430b      	orrs	r3, r1
 80034ea:	4925      	ldr	r1, [pc, #148]	; (8003580 <HAL_RCC_OscConfig+0xc44>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]
 80034f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	fa93 f2a3 	rbit	r2, r3
 8003504:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003508:	601a      	str	r2, [r3, #0]
  return result;
 800350a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800350e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003510:	fab3 f383 	clz	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800351a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	461a      	mov	r2, r3
 8003522:	2301      	movs	r3, #1
 8003524:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003526:	f7fe fe67 	bl	80021f8 <HAL_GetTick>
 800352a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800352e:	e009      	b.n	8003544 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003530:	f7fe fe62 	bl	80021f8 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e0fc      	b.n	800373e <HAL_RCC_OscConfig+0xe02>
 8003544:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003548:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800354c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	fa93 f2a3 	rbit	r2, r3
 8003558:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800355c:	601a      	str	r2, [r3, #0]
  return result;
 800355e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003562:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003564:	fab3 f383 	clz	r3, r3
 8003568:	b2db      	uxtb	r3, r3
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	d105      	bne.n	8003584 <HAL_RCC_OscConfig+0xc48>
 8003578:	4b01      	ldr	r3, [pc, #4]	; (8003580 <HAL_RCC_OscConfig+0xc44>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	e01e      	b.n	80035bc <HAL_RCC_OscConfig+0xc80>
 800357e:	bf00      	nop
 8003580:	40021000 	.word	0x40021000
 8003584:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003588:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800358c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	fa93 f2a3 	rbit	r2, r3
 8003598:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	fa93 f2a3 	rbit	r2, r3
 80035b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	4b63      	ldr	r3, [pc, #396]	; (8003748 <HAL_RCC_OscConfig+0xe0c>)
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035c4:	6011      	str	r1, [r2, #0]
 80035c6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035ca:	6812      	ldr	r2, [r2, #0]
 80035cc:	fa92 f1a2 	rbit	r1, r2
 80035d0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035d4:	6011      	str	r1, [r2, #0]
  return result;
 80035d6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	fab2 f282 	clz	r2, r2
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	f042 0220 	orr.w	r2, r2, #32
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	f002 021f 	and.w	r2, r2, #31
 80035ec:	2101      	movs	r1, #1
 80035ee:	fa01 f202 	lsl.w	r2, r1, r2
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d09b      	beq.n	8003530 <HAL_RCC_OscConfig+0xbf4>
 80035f8:	e0a0      	b.n	800373c <HAL_RCC_OscConfig+0xe00>
 80035fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	fa93 f2a3 	rbit	r2, r3
 800360e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003612:	601a      	str	r2, [r3, #0]
  return result;
 8003614:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003618:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361a:	fab3 f383 	clz	r3, r3
 800361e:	b2db      	uxtb	r3, r3
 8003620:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003624:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	461a      	mov	r2, r3
 800362c:	2300      	movs	r3, #0
 800362e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003630:	f7fe fde2 	bl	80021f8 <HAL_GetTick>
 8003634:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003638:	e009      	b.n	800364e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800363a:	f7fe fddd 	bl	80021f8 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e077      	b.n	800373e <HAL_RCC_OscConfig+0xe02>
 800364e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003652:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	fa93 f2a3 	rbit	r2, r3
 8003662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003666:	601a      	str	r2, [r3, #0]
  return result;
 8003668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800366c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800366e:	fab3 f383 	clz	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	095b      	lsrs	r3, r3, #5
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b01      	cmp	r3, #1
 8003680:	d102      	bne.n	8003688 <HAL_RCC_OscConfig+0xd4c>
 8003682:	4b31      	ldr	r3, [pc, #196]	; (8003748 <HAL_RCC_OscConfig+0xe0c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	e01b      	b.n	80036c0 <HAL_RCC_OscConfig+0xd84>
 8003688:	f107 0320 	add.w	r3, r7, #32
 800368c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	f107 0320 	add.w	r3, r7, #32
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	fa93 f2a3 	rbit	r2, r3
 800369c:	f107 031c 	add.w	r3, r7, #28
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	f107 0318 	add.w	r3, r7, #24
 80036a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	f107 0318 	add.w	r3, r7, #24
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	fa93 f2a3 	rbit	r2, r3
 80036b6:	f107 0314 	add.w	r3, r7, #20
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	4b22      	ldr	r3, [pc, #136]	; (8003748 <HAL_RCC_OscConfig+0xe0c>)
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	f107 0210 	add.w	r2, r7, #16
 80036c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036c8:	6011      	str	r1, [r2, #0]
 80036ca:	f107 0210 	add.w	r2, r7, #16
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	fa92 f1a2 	rbit	r1, r2
 80036d4:	f107 020c 	add.w	r2, r7, #12
 80036d8:	6011      	str	r1, [r2, #0]
  return result;
 80036da:	f107 020c 	add.w	r2, r7, #12
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	fab2 f282 	clz	r2, r2
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	f042 0220 	orr.w	r2, r2, #32
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	f002 021f 	and.w	r2, r2, #31
 80036f0:	2101      	movs	r1, #1
 80036f2:	fa01 f202 	lsl.w	r2, r1, r2
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d19e      	bne.n	800363a <HAL_RCC_OscConfig+0xcfe>
 80036fc:	e01e      	b.n	800373c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036fe:	1d3b      	adds	r3, r7, #4
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e018      	b.n	800373e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800370c:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <HAL_RCC_OscConfig+0xe0c>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003714:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003718:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800371c:	1d3b      	adds	r3, r7, #4
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	429a      	cmp	r2, r3
 8003724:	d108      	bne.n	8003738 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003726:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800372a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40021000 	.word	0x40021000

0800374c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b09e      	sub	sp, #120	; 0x78
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e162      	b.n	8003a2a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003764:	4b90      	ldr	r3, [pc, #576]	; (80039a8 <HAL_RCC_ClockConfig+0x25c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d910      	bls.n	8003794 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003772:	4b8d      	ldr	r3, [pc, #564]	; (80039a8 <HAL_RCC_ClockConfig+0x25c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 0207 	bic.w	r2, r3, #7
 800377a:	498b      	ldr	r1, [pc, #556]	; (80039a8 <HAL_RCC_ClockConfig+0x25c>)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	4313      	orrs	r3, r2
 8003780:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003782:	4b89      	ldr	r3, [pc, #548]	; (80039a8 <HAL_RCC_ClockConfig+0x25c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d001      	beq.n	8003794 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e14a      	b.n	8003a2a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a0:	4b82      	ldr	r3, [pc, #520]	; (80039ac <HAL_RCC_ClockConfig+0x260>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	497f      	ldr	r1, [pc, #508]	; (80039ac <HAL_RCC_ClockConfig+0x260>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80dc 	beq.w	8003978 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d13c      	bne.n	8003842 <HAL_RCC_ClockConfig+0xf6>
 80037c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037d0:	fa93 f3a3 	rbit	r3, r3
 80037d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80037d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d8:	fab3 f383 	clz	r3, r3
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d102      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xa6>
 80037ec:	4b6f      	ldr	r3, [pc, #444]	; (80039ac <HAL_RCC_ClockConfig+0x260>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	e00f      	b.n	8003812 <HAL_RCC_ClockConfig+0xc6>
 80037f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037fa:	fa93 f3a3 	rbit	r3, r3
 80037fe:	667b      	str	r3, [r7, #100]	; 0x64
 8003800:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003804:	663b      	str	r3, [r7, #96]	; 0x60
 8003806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003808:	fa93 f3a3 	rbit	r3, r3
 800380c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800380e:	4b67      	ldr	r3, [pc, #412]	; (80039ac <HAL_RCC_ClockConfig+0x260>)
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003816:	65ba      	str	r2, [r7, #88]	; 0x58
 8003818:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800381a:	fa92 f2a2 	rbit	r2, r2
 800381e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003820:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003822:	fab2 f282 	clz	r2, r2
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	f042 0220 	orr.w	r2, r2, #32
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	f002 021f 	and.w	r2, r2, #31
 8003832:	2101      	movs	r1, #1
 8003834:	fa01 f202 	lsl.w	r2, r1, r2
 8003838:	4013      	ands	r3, r2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d17b      	bne.n	8003936 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e0f3      	b.n	8003a2a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d13c      	bne.n	80038c4 <HAL_RCC_ClockConfig+0x178>
 800384a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800384e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003852:	fa93 f3a3 	rbit	r3, r3
 8003856:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	095b      	lsrs	r3, r3, #5
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b01      	cmp	r3, #1
 800386c:	d102      	bne.n	8003874 <HAL_RCC_ClockConfig+0x128>
 800386e:	4b4f      	ldr	r3, [pc, #316]	; (80039ac <HAL_RCC_ClockConfig+0x260>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	e00f      	b.n	8003894 <HAL_RCC_ClockConfig+0x148>
 8003874:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003878:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800387c:	fa93 f3a3 	rbit	r3, r3
 8003880:	647b      	str	r3, [r7, #68]	; 0x44
 8003882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003886:	643b      	str	r3, [r7, #64]	; 0x40
 8003888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800388a:	fa93 f3a3 	rbit	r3, r3
 800388e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003890:	4b46      	ldr	r3, [pc, #280]	; (80039ac <HAL_RCC_ClockConfig+0x260>)
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003898:	63ba      	str	r2, [r7, #56]	; 0x38
 800389a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800389c:	fa92 f2a2 	rbit	r2, r2
 80038a0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80038a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038a4:	fab2 f282 	clz	r2, r2
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	f042 0220 	orr.w	r2, r2, #32
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	f002 021f 	and.w	r2, r2, #31
 80038b4:	2101      	movs	r1, #1
 80038b6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d13a      	bne.n	8003936 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0b2      	b.n	8003a2a <HAL_RCC_ClockConfig+0x2de>
 80038c4:	2302      	movs	r3, #2
 80038c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ca:	fa93 f3a3 	rbit	r3, r3
 80038ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d2:	fab3 f383 	clz	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d102      	bne.n	80038ec <HAL_RCC_ClockConfig+0x1a0>
 80038e6:	4b31      	ldr	r3, [pc, #196]	; (80039ac <HAL_RCC_ClockConfig+0x260>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	e00d      	b.n	8003908 <HAL_RCC_ClockConfig+0x1bc>
 80038ec:	2302      	movs	r3, #2
 80038ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f2:	fa93 f3a3 	rbit	r3, r3
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
 80038f8:	2302      	movs	r3, #2
 80038fa:	623b      	str	r3, [r7, #32]
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	fa93 f3a3 	rbit	r3, r3
 8003902:	61fb      	str	r3, [r7, #28]
 8003904:	4b29      	ldr	r3, [pc, #164]	; (80039ac <HAL_RCC_ClockConfig+0x260>)
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2202      	movs	r2, #2
 800390a:	61ba      	str	r2, [r7, #24]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	fa92 f2a2 	rbit	r2, r2
 8003912:	617a      	str	r2, [r7, #20]
  return result;
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	fab2 f282 	clz	r2, r2
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	f042 0220 	orr.w	r2, r2, #32
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	f002 021f 	and.w	r2, r2, #31
 8003926:	2101      	movs	r1, #1
 8003928:	fa01 f202 	lsl.w	r2, r1, r2
 800392c:	4013      	ands	r3, r2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e079      	b.n	8003a2a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003936:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <HAL_RCC_ClockConfig+0x260>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f023 0203 	bic.w	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	491a      	ldr	r1, [pc, #104]	; (80039ac <HAL_RCC_ClockConfig+0x260>)
 8003944:	4313      	orrs	r3, r2
 8003946:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003948:	f7fe fc56 	bl	80021f8 <HAL_GetTick>
 800394c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394e:	e00a      	b.n	8003966 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003950:	f7fe fc52 	bl	80021f8 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	; 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e061      	b.n	8003a2a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003966:	4b11      	ldr	r3, [pc, #68]	; (80039ac <HAL_RCC_ClockConfig+0x260>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 020c 	and.w	r2, r3, #12
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	429a      	cmp	r2, r3
 8003976:	d1eb      	bne.n	8003950 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <HAL_RCC_ClockConfig+0x25c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d214      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <HAL_RCC_ClockConfig+0x25c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 0207 	bic.w	r2, r3, #7
 800398e:	4906      	ldr	r1, [pc, #24]	; (80039a8 <HAL_RCC_ClockConfig+0x25c>)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	4313      	orrs	r3, r2
 8003994:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003996:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <HAL_RCC_ClockConfig+0x25c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d005      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e040      	b.n	8003a2a <HAL_RCC_ClockConfig+0x2de>
 80039a8:	40022000 	.word	0x40022000
 80039ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039bc:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <HAL_RCC_ClockConfig+0x2e8>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	491a      	ldr	r1, [pc, #104]	; (8003a34 <HAL_RCC_ClockConfig+0x2e8>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039da:	4b16      	ldr	r3, [pc, #88]	; (8003a34 <HAL_RCC_ClockConfig+0x2e8>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4912      	ldr	r1, [pc, #72]	; (8003a34 <HAL_RCC_ClockConfig+0x2e8>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039ee:	f000 f829 	bl	8003a44 <HAL_RCC_GetSysClockFreq>
 80039f2:	4601      	mov	r1, r0
 80039f4:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <HAL_RCC_ClockConfig+0x2e8>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039fc:	22f0      	movs	r2, #240	; 0xf0
 80039fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	fa92 f2a2 	rbit	r2, r2
 8003a06:	60fa      	str	r2, [r7, #12]
  return result;
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	fab2 f282 	clz	r2, r2
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	40d3      	lsrs	r3, r2
 8003a12:	4a09      	ldr	r2, [pc, #36]	; (8003a38 <HAL_RCC_ClockConfig+0x2ec>)
 8003a14:	5cd3      	ldrb	r3, [r2, r3]
 8003a16:	fa21 f303 	lsr.w	r3, r1, r3
 8003a1a:	4a08      	ldr	r2, [pc, #32]	; (8003a3c <HAL_RCC_ClockConfig+0x2f0>)
 8003a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a1e:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <HAL_RCC_ClockConfig+0x2f4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe fba4 	bl	8002170 <HAL_InitTick>
  
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3778      	adds	r7, #120	; 0x78
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40021000 	.word	0x40021000
 8003a38:	08007b3c 	.word	0x08007b3c
 8003a3c:	20000060 	.word	0x20000060
 8003a40:	20000064 	.word	0x20000064

08003a44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b08b      	sub	sp, #44	; 0x2c
 8003a48:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	2300      	movs	r3, #0
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a5e:	4b29      	ldr	r3, [pc, #164]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d002      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x30>
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d003      	beq.n	8003a7a <HAL_RCC_GetSysClockFreq+0x36>
 8003a72:	e03c      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a74:	4b24      	ldr	r3, [pc, #144]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a76:	623b      	str	r3, [r7, #32]
      break;
 8003a78:	e03c      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a80:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a84:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	fa92 f2a2 	rbit	r2, r2
 8003a8c:	607a      	str	r2, [r7, #4]
  return result;
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	fab2 f282 	clz	r2, r2
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	40d3      	lsrs	r3, r2
 8003a98:	4a1c      	ldr	r2, [pc, #112]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a9a:	5cd3      	ldrb	r3, [r2, r3]
 8003a9c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a9e:	4b19      	ldr	r3, [pc, #100]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	220f      	movs	r2, #15
 8003aa8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	fa92 f2a2 	rbit	r2, r2
 8003ab0:	60fa      	str	r2, [r7, #12]
  return result;
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	fab2 f282 	clz	r2, r2
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	40d3      	lsrs	r3, r2
 8003abc:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003abe:	5cd3      	ldrb	r3, [r2, r3]
 8003ac0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003acc:	4a0e      	ldr	r2, [pc, #56]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
 8003adc:	e004      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	4a0c      	ldr	r2, [pc, #48]	; (8003b14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ae2:	fb02 f303 	mul.w	r3, r2, r3
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	623b      	str	r3, [r7, #32]
      break;
 8003aec:	e002      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003aee:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003af0:	623b      	str	r3, [r7, #32]
      break;
 8003af2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003af4:	6a3b      	ldr	r3, [r7, #32]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	372c      	adds	r7, #44	; 0x2c
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40021000 	.word	0x40021000
 8003b08:	007a1200 	.word	0x007a1200
 8003b0c:	08007b54 	.word	0x08007b54
 8003b10:	08007b64 	.word	0x08007b64
 8003b14:	003d0900 	.word	0x003d0900

08003b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b1c:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20000060 	.word	0x20000060

08003b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b36:	f7ff ffef 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 8003b3a:	4601      	mov	r1, r0
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b44:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	fa92 f2a2 	rbit	r2, r2
 8003b50:	603a      	str	r2, [r7, #0]
  return result;
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	fab2 f282 	clz	r2, r2
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	40d3      	lsrs	r3, r2
 8003b5c:	4a04      	ldr	r2, [pc, #16]	; (8003b70 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b5e:	5cd3      	ldrb	r3, [r2, r3]
 8003b60:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b64:	4618      	mov	r0, r3
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	08007b4c 	.word	0x08007b4c

08003b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b7a:	f7ff ffcd 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 8003b7e:	4601      	mov	r1, r0
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b88:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003b8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	fa92 f2a2 	rbit	r2, r2
 8003b94:	603a      	str	r2, [r7, #0]
  return result;
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	fab2 f282 	clz	r2, r2
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	40d3      	lsrs	r3, r2
 8003ba0:	4a04      	ldr	r2, [pc, #16]	; (8003bb4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003ba2:	5cd3      	ldrb	r3, [r2, r3]
 8003ba4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	08007b4c 	.word	0x08007b4c

08003bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b092      	sub	sp, #72	; 0x48
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 80d7 	beq.w	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bdc:	4b4e      	ldr	r3, [pc, #312]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10e      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be8:	4b4b      	ldr	r3, [pc, #300]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	4a4a      	ldr	r2, [pc, #296]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	61d3      	str	r3, [r2, #28]
 8003bf4:	4b48      	ldr	r3, [pc, #288]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c00:	2301      	movs	r3, #1
 8003c02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c06:	4b45      	ldr	r3, [pc, #276]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d118      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c12:	4b42      	ldr	r3, [pc, #264]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a41      	ldr	r2, [pc, #260]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1e:	f7fe faeb 	bl	80021f8 <HAL_GetTick>
 8003c22:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c24:	e008      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c26:	f7fe fae7 	bl	80021f8 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b64      	cmp	r3, #100	; 0x64
 8003c32:	d901      	bls.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e14b      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c38:	4b38      	ldr	r3, [pc, #224]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c44:	4b34      	ldr	r3, [pc, #208]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 8084 	beq.w	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d07c      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c64:	4b2c      	ldr	r3, [pc, #176]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c76:	fa93 f3a3 	rbit	r3, r3
 8003c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c7e:	fab3 f383 	clz	r3, r3
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	461a      	mov	r2, r3
 8003c86:	4b26      	ldr	r3, [pc, #152]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	2301      	movs	r3, #1
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9a:	fa93 f3a3 	rbit	r3, r3
 8003c9e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ca2:	fab3 f383 	clz	r3, r3
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4b1d      	ldr	r3, [pc, #116]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cb6:	4a18      	ldr	r2, [pc, #96]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d04b      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc6:	f7fe fa97 	bl	80021f8 <HAL_GetTick>
 8003cca:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cce:	f7fe fa93 	bl	80021f8 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e0f5      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cea:	fa93 f3a3 	rbit	r3, r3
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	623b      	str	r3, [r7, #32]
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	fa93 f3a3 	rbit	r3, r3
 8003cfa:	61fb      	str	r3, [r7, #28]
  return result;
 8003cfc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfe:	fab3 f383 	clz	r3, r3
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f043 0302 	orr.w	r3, r3, #2
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d108      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003d12:	4b01      	ldr	r3, [pc, #4]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	e00d      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	40007000 	.word	0x40007000
 8003d20:	10908100 	.word	0x10908100
 8003d24:	2302      	movs	r3, #2
 8003d26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	fa93 f3a3 	rbit	r3, r3
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	4b69      	ldr	r3, [pc, #420]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	2202      	movs	r2, #2
 8003d36:	613a      	str	r2, [r7, #16]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	fa92 f2a2 	rbit	r2, r2
 8003d3e:	60fa      	str	r2, [r7, #12]
  return result;
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	fab2 f282 	clz	r2, r2
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	f002 021f 	and.w	r2, r2, #31
 8003d52:	2101      	movs	r1, #1
 8003d54:	fa01 f202 	lsl.w	r2, r1, r2
 8003d58:	4013      	ands	r3, r2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0b7      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d5e:	4b5e      	ldr	r3, [pc, #376]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	495b      	ldr	r1, [pc, #364]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d105      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d78:	4b57      	ldr	r3, [pc, #348]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	4a56      	ldr	r2, [pc, #344]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d90:	4b51      	ldr	r3, [pc, #324]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	f023 0203 	bic.w	r2, r3, #3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	494e      	ldr	r1, [pc, #312]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d008      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dae:	4b4a      	ldr	r3, [pc, #296]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	4947      	ldr	r1, [pc, #284]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dcc:	4b42      	ldr	r3, [pc, #264]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	493f      	ldr	r1, [pc, #252]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d008      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dea:	4b3b      	ldr	r3, [pc, #236]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	f023 0210 	bic.w	r2, r3, #16
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	4938      	ldr	r1, [pc, #224]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003e08:	4b33      	ldr	r3, [pc, #204]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	4930      	ldr	r1, [pc, #192]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e26:	4b2c      	ldr	r3, [pc, #176]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	f023 0220 	bic.w	r2, r3, #32
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	4929      	ldr	r1, [pc, #164]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e44:	4b24      	ldr	r3, [pc, #144]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	4921      	ldr	r1, [pc, #132]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e62:	4b1d      	ldr	r3, [pc, #116]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	491a      	ldr	r1, [pc, #104]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e80:	4b15      	ldr	r3, [pc, #84]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	4912      	ldr	r1, [pc, #72]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e9e:	4b0e      	ldr	r3, [pc, #56]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	490b      	ldr	r1, [pc, #44]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ebc:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	4903      	ldr	r1, [pc, #12]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3748      	adds	r7, #72	; 0x48
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40021000 	.word	0x40021000

08003edc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e084      	b.n	8003ff8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d106      	bne.n	8003f0e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7fd ff69 	bl	8001de0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2202      	movs	r2, #2
 8003f12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f24:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f2e:	d902      	bls.n	8003f36 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	e002      	b.n	8003f3c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f3a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f44:	d007      	beq.n	8003f56 <HAL_SPI_Init+0x7a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f4e:	d002      	beq.n	8003f56 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10b      	bne.n	8003f76 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f66:	d903      	bls.n	8003f70 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30
 8003f6e:	e002      	b.n	8003f76 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	ea42 0103 	orr.w	r1, r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	0c1b      	lsrs	r3, r3, #16
 8003fb6:	f003 0204 	and.w	r2, r3, #4
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	ea42 0103 	orr.w	r1, r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69da      	ldr	r2, [r3, #28]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fe6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e040      	b.n	8004094 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fe f820 	bl	8002068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2224      	movs	r2, #36	; 0x24
 800402c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0201 	bic.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f8c0 	bl	80041c4 <UART_SetConfig>
 8004044:	4603      	mov	r3, r0
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e022      	b.n	8004094 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 face 	bl	80045f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800406a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800407a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fb55 	bl	800473c <UART_CheckIdleState>
 8004092:	4603      	mov	r3, r0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08a      	sub	sp, #40	; 0x28
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	4613      	mov	r3, r2
 80040aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	f040 8081 	bne.w	80041b8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_UART_Transmit+0x26>
 80040bc:	88fb      	ldrh	r3, [r7, #6]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e079      	b.n	80041ba <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_UART_Transmit+0x38>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e072      	b.n	80041ba <HAL_UART_Transmit+0x11e>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2221      	movs	r2, #33	; 0x21
 80040e6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80040e8:	f7fe f886 	bl	80021f8 <HAL_GetTick>
 80040ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	88fa      	ldrh	r2, [r7, #6]
 80040f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	88fa      	ldrh	r2, [r7, #6]
 80040fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004106:	d108      	bne.n	800411a <HAL_UART_Transmit+0x7e>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d104      	bne.n	800411a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004110:	2300      	movs	r3, #0
 8004112:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	e003      	b.n	8004122 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004122:	e02d      	b.n	8004180 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2200      	movs	r2, #0
 800412c:	2180      	movs	r1, #128	; 0x80
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 fb49 	bl	80047c6 <UART_WaitOnFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e03d      	b.n	80041ba <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10b      	bne.n	800415c <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	881a      	ldrh	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004150:	b292      	uxth	r2, r2
 8004152:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	3302      	adds	r3, #2
 8004158:	61bb      	str	r3, [r7, #24]
 800415a:	e008      	b.n	800416e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	781a      	ldrb	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	b292      	uxth	r2, r2
 8004166:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	3301      	adds	r3, #1
 800416c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1cb      	bne.n	8004124 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2200      	movs	r2, #0
 8004194:	2140      	movs	r1, #64	; 0x40
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 fb15 	bl	80047c6 <UART_WaitOnFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e009      	b.n	80041ba <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2220      	movs	r2, #32
 80041aa:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3720      	adds	r7, #32
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80041f6:	f023 030c 	bic.w	r3, r3, #12
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6812      	ldr	r2, [r2, #0]
 80041fe:	6939      	ldr	r1, [r7, #16]
 8004200:	430b      	orrs	r3, r1
 8004202:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	430a      	orrs	r2, r1
 800423c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4aa9      	ldr	r2, [pc, #676]	; (80044e8 <UART_SetConfig+0x324>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d121      	bne.n	800428c <UART_SetConfig+0xc8>
 8004248:	4ba8      	ldr	r3, [pc, #672]	; (80044ec <UART_SetConfig+0x328>)
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	f003 0303 	and.w	r3, r3, #3
 8004250:	2b03      	cmp	r3, #3
 8004252:	d817      	bhi.n	8004284 <UART_SetConfig+0xc0>
 8004254:	a201      	add	r2, pc, #4	; (adr r2, 800425c <UART_SetConfig+0x98>)
 8004256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425a:	bf00      	nop
 800425c:	0800426d 	.word	0x0800426d
 8004260:	08004279 	.word	0x08004279
 8004264:	0800427f 	.word	0x0800427f
 8004268:	08004273 	.word	0x08004273
 800426c:	2301      	movs	r3, #1
 800426e:	77fb      	strb	r3, [r7, #31]
 8004270:	e0b2      	b.n	80043d8 <UART_SetConfig+0x214>
 8004272:	2302      	movs	r3, #2
 8004274:	77fb      	strb	r3, [r7, #31]
 8004276:	e0af      	b.n	80043d8 <UART_SetConfig+0x214>
 8004278:	2304      	movs	r3, #4
 800427a:	77fb      	strb	r3, [r7, #31]
 800427c:	e0ac      	b.n	80043d8 <UART_SetConfig+0x214>
 800427e:	2308      	movs	r3, #8
 8004280:	77fb      	strb	r3, [r7, #31]
 8004282:	e0a9      	b.n	80043d8 <UART_SetConfig+0x214>
 8004284:	2310      	movs	r3, #16
 8004286:	77fb      	strb	r3, [r7, #31]
 8004288:	bf00      	nop
 800428a:	e0a5      	b.n	80043d8 <UART_SetConfig+0x214>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a97      	ldr	r2, [pc, #604]	; (80044f0 <UART_SetConfig+0x32c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d123      	bne.n	80042de <UART_SetConfig+0x11a>
 8004296:	4b95      	ldr	r3, [pc, #596]	; (80044ec <UART_SetConfig+0x328>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800429e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a2:	d012      	beq.n	80042ca <UART_SetConfig+0x106>
 80042a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a8:	d802      	bhi.n	80042b0 <UART_SetConfig+0xec>
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <UART_SetConfig+0xfa>
 80042ae:	e012      	b.n	80042d6 <UART_SetConfig+0x112>
 80042b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042b4:	d00c      	beq.n	80042d0 <UART_SetConfig+0x10c>
 80042b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042ba:	d003      	beq.n	80042c4 <UART_SetConfig+0x100>
 80042bc:	e00b      	b.n	80042d6 <UART_SetConfig+0x112>
 80042be:	2300      	movs	r3, #0
 80042c0:	77fb      	strb	r3, [r7, #31]
 80042c2:	e089      	b.n	80043d8 <UART_SetConfig+0x214>
 80042c4:	2302      	movs	r3, #2
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e086      	b.n	80043d8 <UART_SetConfig+0x214>
 80042ca:	2304      	movs	r3, #4
 80042cc:	77fb      	strb	r3, [r7, #31]
 80042ce:	e083      	b.n	80043d8 <UART_SetConfig+0x214>
 80042d0:	2308      	movs	r3, #8
 80042d2:	77fb      	strb	r3, [r7, #31]
 80042d4:	e080      	b.n	80043d8 <UART_SetConfig+0x214>
 80042d6:	2310      	movs	r3, #16
 80042d8:	77fb      	strb	r3, [r7, #31]
 80042da:	bf00      	nop
 80042dc:	e07c      	b.n	80043d8 <UART_SetConfig+0x214>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a84      	ldr	r2, [pc, #528]	; (80044f4 <UART_SetConfig+0x330>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d123      	bne.n	8004330 <UART_SetConfig+0x16c>
 80042e8:	4b80      	ldr	r3, [pc, #512]	; (80044ec <UART_SetConfig+0x328>)
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80042f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042f4:	d012      	beq.n	800431c <UART_SetConfig+0x158>
 80042f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042fa:	d802      	bhi.n	8004302 <UART_SetConfig+0x13e>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d007      	beq.n	8004310 <UART_SetConfig+0x14c>
 8004300:	e012      	b.n	8004328 <UART_SetConfig+0x164>
 8004302:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004306:	d00c      	beq.n	8004322 <UART_SetConfig+0x15e>
 8004308:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800430c:	d003      	beq.n	8004316 <UART_SetConfig+0x152>
 800430e:	e00b      	b.n	8004328 <UART_SetConfig+0x164>
 8004310:	2300      	movs	r3, #0
 8004312:	77fb      	strb	r3, [r7, #31]
 8004314:	e060      	b.n	80043d8 <UART_SetConfig+0x214>
 8004316:	2302      	movs	r3, #2
 8004318:	77fb      	strb	r3, [r7, #31]
 800431a:	e05d      	b.n	80043d8 <UART_SetConfig+0x214>
 800431c:	2304      	movs	r3, #4
 800431e:	77fb      	strb	r3, [r7, #31]
 8004320:	e05a      	b.n	80043d8 <UART_SetConfig+0x214>
 8004322:	2308      	movs	r3, #8
 8004324:	77fb      	strb	r3, [r7, #31]
 8004326:	e057      	b.n	80043d8 <UART_SetConfig+0x214>
 8004328:	2310      	movs	r3, #16
 800432a:	77fb      	strb	r3, [r7, #31]
 800432c:	bf00      	nop
 800432e:	e053      	b.n	80043d8 <UART_SetConfig+0x214>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a70      	ldr	r2, [pc, #448]	; (80044f8 <UART_SetConfig+0x334>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d123      	bne.n	8004382 <UART_SetConfig+0x1be>
 800433a:	4b6c      	ldr	r3, [pc, #432]	; (80044ec <UART_SetConfig+0x328>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004346:	d012      	beq.n	800436e <UART_SetConfig+0x1aa>
 8004348:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800434c:	d802      	bhi.n	8004354 <UART_SetConfig+0x190>
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <UART_SetConfig+0x19e>
 8004352:	e012      	b.n	800437a <UART_SetConfig+0x1b6>
 8004354:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004358:	d00c      	beq.n	8004374 <UART_SetConfig+0x1b0>
 800435a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800435e:	d003      	beq.n	8004368 <UART_SetConfig+0x1a4>
 8004360:	e00b      	b.n	800437a <UART_SetConfig+0x1b6>
 8004362:	2300      	movs	r3, #0
 8004364:	77fb      	strb	r3, [r7, #31]
 8004366:	e037      	b.n	80043d8 <UART_SetConfig+0x214>
 8004368:	2302      	movs	r3, #2
 800436a:	77fb      	strb	r3, [r7, #31]
 800436c:	e034      	b.n	80043d8 <UART_SetConfig+0x214>
 800436e:	2304      	movs	r3, #4
 8004370:	77fb      	strb	r3, [r7, #31]
 8004372:	e031      	b.n	80043d8 <UART_SetConfig+0x214>
 8004374:	2308      	movs	r3, #8
 8004376:	77fb      	strb	r3, [r7, #31]
 8004378:	e02e      	b.n	80043d8 <UART_SetConfig+0x214>
 800437a:	2310      	movs	r3, #16
 800437c:	77fb      	strb	r3, [r7, #31]
 800437e:	bf00      	nop
 8004380:	e02a      	b.n	80043d8 <UART_SetConfig+0x214>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a5d      	ldr	r2, [pc, #372]	; (80044fc <UART_SetConfig+0x338>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d123      	bne.n	80043d4 <UART_SetConfig+0x210>
 800438c:	4b57      	ldr	r3, [pc, #348]	; (80044ec <UART_SetConfig+0x328>)
 800438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004390:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004398:	d012      	beq.n	80043c0 <UART_SetConfig+0x1fc>
 800439a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800439e:	d802      	bhi.n	80043a6 <UART_SetConfig+0x1e2>
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d007      	beq.n	80043b4 <UART_SetConfig+0x1f0>
 80043a4:	e012      	b.n	80043cc <UART_SetConfig+0x208>
 80043a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043aa:	d00c      	beq.n	80043c6 <UART_SetConfig+0x202>
 80043ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043b0:	d003      	beq.n	80043ba <UART_SetConfig+0x1f6>
 80043b2:	e00b      	b.n	80043cc <UART_SetConfig+0x208>
 80043b4:	2300      	movs	r3, #0
 80043b6:	77fb      	strb	r3, [r7, #31]
 80043b8:	e00e      	b.n	80043d8 <UART_SetConfig+0x214>
 80043ba:	2302      	movs	r3, #2
 80043bc:	77fb      	strb	r3, [r7, #31]
 80043be:	e00b      	b.n	80043d8 <UART_SetConfig+0x214>
 80043c0:	2304      	movs	r3, #4
 80043c2:	77fb      	strb	r3, [r7, #31]
 80043c4:	e008      	b.n	80043d8 <UART_SetConfig+0x214>
 80043c6:	2308      	movs	r3, #8
 80043c8:	77fb      	strb	r3, [r7, #31]
 80043ca:	e005      	b.n	80043d8 <UART_SetConfig+0x214>
 80043cc:	2310      	movs	r3, #16
 80043ce:	77fb      	strb	r3, [r7, #31]
 80043d0:	bf00      	nop
 80043d2:	e001      	b.n	80043d8 <UART_SetConfig+0x214>
 80043d4:	2310      	movs	r3, #16
 80043d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e0:	f040 808e 	bne.w	8004500 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80043e4:	7ffb      	ldrb	r3, [r7, #31]
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d85e      	bhi.n	80044a8 <UART_SetConfig+0x2e4>
 80043ea:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <UART_SetConfig+0x22c>)
 80043ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f0:	08004415 	.word	0x08004415
 80043f4:	08004435 	.word	0x08004435
 80043f8:	08004455 	.word	0x08004455
 80043fc:	080044a9 	.word	0x080044a9
 8004400:	08004471 	.word	0x08004471
 8004404:	080044a9 	.word	0x080044a9
 8004408:	080044a9 	.word	0x080044a9
 800440c:	080044a9 	.word	0x080044a9
 8004410:	08004491 	.word	0x08004491
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004414:	f7ff fb8c 	bl	8003b30 <HAL_RCC_GetPCLK1Freq>
 8004418:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	005a      	lsls	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	085b      	lsrs	r3, r3, #1
 8004424:	441a      	add	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	fbb2 f3f3 	udiv	r3, r2, r3
 800442e:	b29b      	uxth	r3, r3
 8004430:	61bb      	str	r3, [r7, #24]
        break;
 8004432:	e03c      	b.n	80044ae <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004434:	f7ff fb9e 	bl	8003b74 <HAL_RCC_GetPCLK2Freq>
 8004438:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	005a      	lsls	r2, r3, #1
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	441a      	add	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	fbb2 f3f3 	udiv	r3, r2, r3
 800444e:	b29b      	uxth	r3, r3
 8004450:	61bb      	str	r3, [r7, #24]
        break;
 8004452:	e02c      	b.n	80044ae <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	085b      	lsrs	r3, r3, #1
 800445a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800445e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6852      	ldr	r2, [r2, #4]
 8004466:	fbb3 f3f2 	udiv	r3, r3, r2
 800446a:	b29b      	uxth	r3, r3
 800446c:	61bb      	str	r3, [r7, #24]
        break;
 800446e:	e01e      	b.n	80044ae <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004470:	f7ff fae8 	bl	8003a44 <HAL_RCC_GetSysClockFreq>
 8004474:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	005a      	lsls	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	085b      	lsrs	r3, r3, #1
 8004480:	441a      	add	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	fbb2 f3f3 	udiv	r3, r2, r3
 800448a:	b29b      	uxth	r3, r3
 800448c:	61bb      	str	r3, [r7, #24]
        break;
 800448e:	e00e      	b.n	80044ae <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	085b      	lsrs	r3, r3, #1
 8004496:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	61bb      	str	r3, [r7, #24]
        break;
 80044a6:	e002      	b.n	80044ae <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	75fb      	strb	r3, [r7, #23]
        break;
 80044ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b0f      	cmp	r3, #15
 80044b2:	d916      	bls.n	80044e2 <UART_SetConfig+0x31e>
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ba:	d212      	bcs.n	80044e2 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f023 030f 	bic.w	r3, r3, #15
 80044c4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	085b      	lsrs	r3, r3, #1
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	897b      	ldrh	r3, [r7, #10]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	897a      	ldrh	r2, [r7, #10]
 80044de:	60da      	str	r2, [r3, #12]
 80044e0:	e07e      	b.n	80045e0 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	75fb      	strb	r3, [r7, #23]
 80044e6:	e07b      	b.n	80045e0 <UART_SetConfig+0x41c>
 80044e8:	40013800 	.word	0x40013800
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40004400 	.word	0x40004400
 80044f4:	40004800 	.word	0x40004800
 80044f8:	40004c00 	.word	0x40004c00
 80044fc:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8004500:	7ffb      	ldrb	r3, [r7, #31]
 8004502:	2b08      	cmp	r3, #8
 8004504:	d85b      	bhi.n	80045be <UART_SetConfig+0x3fa>
 8004506:	a201      	add	r2, pc, #4	; (adr r2, 800450c <UART_SetConfig+0x348>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	08004531 	.word	0x08004531
 8004510:	0800454f 	.word	0x0800454f
 8004514:	0800456d 	.word	0x0800456d
 8004518:	080045bf 	.word	0x080045bf
 800451c:	08004589 	.word	0x08004589
 8004520:	080045bf 	.word	0x080045bf
 8004524:	080045bf 	.word	0x080045bf
 8004528:	080045bf 	.word	0x080045bf
 800452c:	080045a7 	.word	0x080045a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004530:	f7ff fafe 	bl	8003b30 <HAL_RCC_GetPCLK1Freq>
 8004534:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	085a      	lsrs	r2, r3, #1
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	441a      	add	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	fbb2 f3f3 	udiv	r3, r2, r3
 8004548:	b29b      	uxth	r3, r3
 800454a:	61bb      	str	r3, [r7, #24]
        break;
 800454c:	e03a      	b.n	80045c4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800454e:	f7ff fb11 	bl	8003b74 <HAL_RCC_GetPCLK2Freq>
 8004552:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	085a      	lsrs	r2, r3, #1
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	441a      	add	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	fbb2 f3f3 	udiv	r3, r2, r3
 8004566:	b29b      	uxth	r3, r3
 8004568:	61bb      	str	r3, [r7, #24]
        break;
 800456a:	e02b      	b.n	80045c4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	085b      	lsrs	r3, r3, #1
 8004572:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004576:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6852      	ldr	r2, [r2, #4]
 800457e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004582:	b29b      	uxth	r3, r3
 8004584:	61bb      	str	r3, [r7, #24]
        break;
 8004586:	e01d      	b.n	80045c4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004588:	f7ff fa5c 	bl	8003a44 <HAL_RCC_GetSysClockFreq>
 800458c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	085a      	lsrs	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	441a      	add	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	61bb      	str	r3, [r7, #24]
        break;
 80045a4:	e00e      	b.n	80045c4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	085b      	lsrs	r3, r3, #1
 80045ac:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	61bb      	str	r3, [r7, #24]
        break;
 80045bc:	e002      	b.n	80045c4 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	75fb      	strb	r3, [r7, #23]
        break;
 80045c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b0f      	cmp	r3, #15
 80045c8:	d908      	bls.n	80045dc <UART_SetConfig+0x418>
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d0:	d204      	bcs.n	80045dc <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	60da      	str	r2, [r3, #12]
 80045da:	e001      	b.n	80045e0 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80045ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3720      	adds	r7, #32
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop

080045f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	f003 0310 	and.w	r3, r3, #16
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01a      	beq.n	800470e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046f6:	d10a      	bne.n	800470e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	605a      	str	r2, [r3, #4]
  }
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af02      	add	r7, sp, #8
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800474a:	f7fd fd55 	bl	80021f8 <HAL_GetTick>
 800474e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b08      	cmp	r3, #8
 800475c:	d10e      	bne.n	800477c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800475e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f82a 	bl	80047c6 <UART_WaitOnFlagUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e020      	b.n	80047be <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b04      	cmp	r3, #4
 8004788:	d10e      	bne.n	80047a8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800478a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f814 	bl	80047c6 <UART_WaitOnFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e00a      	b.n	80047be <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	603b      	str	r3, [r7, #0]
 80047d2:	4613      	mov	r3, r2
 80047d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d6:	e05d      	b.n	8004894 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047de:	d059      	beq.n	8004894 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e0:	f7fd fd0a 	bl	80021f8 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d302      	bcc.n	80047f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d11b      	bne.n	800482e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004804:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0201 	bic.w	r2, r2, #1
 8004814:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e042      	b.n	80048b4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	d02b      	beq.n	8004894 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800484a:	d123      	bne.n	8004894 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004854:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004864:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0201 	bic.w	r2, r2, #1
 8004874:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2220      	movs	r2, #32
 8004886:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e00f      	b.n	80048b4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	69da      	ldr	r2, [r3, #28]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4013      	ands	r3, r2
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	bf0c      	ite	eq
 80048a4:	2301      	moveq	r3, #1
 80048a6:	2300      	movne	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	79fb      	ldrb	r3, [r7, #7]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d092      	beq.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <__errno>:
 80048bc:	4b01      	ldr	r3, [pc, #4]	; (80048c4 <__errno+0x8>)
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	2000006c 	.word	0x2000006c

080048c8 <__libc_init_array>:
 80048c8:	b570      	push	{r4, r5, r6, lr}
 80048ca:	4e0d      	ldr	r6, [pc, #52]	; (8004900 <__libc_init_array+0x38>)
 80048cc:	4c0d      	ldr	r4, [pc, #52]	; (8004904 <__libc_init_array+0x3c>)
 80048ce:	1ba4      	subs	r4, r4, r6
 80048d0:	10a4      	asrs	r4, r4, #2
 80048d2:	2500      	movs	r5, #0
 80048d4:	42a5      	cmp	r5, r4
 80048d6:	d109      	bne.n	80048ec <__libc_init_array+0x24>
 80048d8:	4e0b      	ldr	r6, [pc, #44]	; (8004908 <__libc_init_array+0x40>)
 80048da:	4c0c      	ldr	r4, [pc, #48]	; (800490c <__libc_init_array+0x44>)
 80048dc:	f000 fc26 	bl	800512c <_init>
 80048e0:	1ba4      	subs	r4, r4, r6
 80048e2:	10a4      	asrs	r4, r4, #2
 80048e4:	2500      	movs	r5, #0
 80048e6:	42a5      	cmp	r5, r4
 80048e8:	d105      	bne.n	80048f6 <__libc_init_array+0x2e>
 80048ea:	bd70      	pop	{r4, r5, r6, pc}
 80048ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048f0:	4798      	blx	r3
 80048f2:	3501      	adds	r5, #1
 80048f4:	e7ee      	b.n	80048d4 <__libc_init_array+0xc>
 80048f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048fa:	4798      	blx	r3
 80048fc:	3501      	adds	r5, #1
 80048fe:	e7f2      	b.n	80048e6 <__libc_init_array+0x1e>
 8004900:	08007ba8 	.word	0x08007ba8
 8004904:	08007ba8 	.word	0x08007ba8
 8004908:	08007ba8 	.word	0x08007ba8
 800490c:	08007bac 	.word	0x08007bac

08004910 <memset>:
 8004910:	4402      	add	r2, r0
 8004912:	4603      	mov	r3, r0
 8004914:	4293      	cmp	r3, r2
 8004916:	d100      	bne.n	800491a <memset+0xa>
 8004918:	4770      	bx	lr
 800491a:	f803 1b01 	strb.w	r1, [r3], #1
 800491e:	e7f9      	b.n	8004914 <memset+0x4>

08004920 <siprintf>:
 8004920:	b40e      	push	{r1, r2, r3}
 8004922:	b500      	push	{lr}
 8004924:	b09c      	sub	sp, #112	; 0x70
 8004926:	ab1d      	add	r3, sp, #116	; 0x74
 8004928:	9002      	str	r0, [sp, #8]
 800492a:	9006      	str	r0, [sp, #24]
 800492c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004930:	4809      	ldr	r0, [pc, #36]	; (8004958 <siprintf+0x38>)
 8004932:	9107      	str	r1, [sp, #28]
 8004934:	9104      	str	r1, [sp, #16]
 8004936:	4909      	ldr	r1, [pc, #36]	; (800495c <siprintf+0x3c>)
 8004938:	f853 2b04 	ldr.w	r2, [r3], #4
 800493c:	9105      	str	r1, [sp, #20]
 800493e:	6800      	ldr	r0, [r0, #0]
 8004940:	9301      	str	r3, [sp, #4]
 8004942:	a902      	add	r1, sp, #8
 8004944:	f000 f866 	bl	8004a14 <_svfiprintf_r>
 8004948:	9b02      	ldr	r3, [sp, #8]
 800494a:	2200      	movs	r2, #0
 800494c:	701a      	strb	r2, [r3, #0]
 800494e:	b01c      	add	sp, #112	; 0x70
 8004950:	f85d eb04 	ldr.w	lr, [sp], #4
 8004954:	b003      	add	sp, #12
 8004956:	4770      	bx	lr
 8004958:	2000006c 	.word	0x2000006c
 800495c:	ffff0208 	.word	0xffff0208

08004960 <__ssputs_r>:
 8004960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004964:	688e      	ldr	r6, [r1, #8]
 8004966:	429e      	cmp	r6, r3
 8004968:	4682      	mov	sl, r0
 800496a:	460c      	mov	r4, r1
 800496c:	4690      	mov	r8, r2
 800496e:	4699      	mov	r9, r3
 8004970:	d837      	bhi.n	80049e2 <__ssputs_r+0x82>
 8004972:	898a      	ldrh	r2, [r1, #12]
 8004974:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004978:	d031      	beq.n	80049de <__ssputs_r+0x7e>
 800497a:	6825      	ldr	r5, [r4, #0]
 800497c:	6909      	ldr	r1, [r1, #16]
 800497e:	1a6f      	subs	r7, r5, r1
 8004980:	6965      	ldr	r5, [r4, #20]
 8004982:	2302      	movs	r3, #2
 8004984:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004988:	fb95 f5f3 	sdiv	r5, r5, r3
 800498c:	f109 0301 	add.w	r3, r9, #1
 8004990:	443b      	add	r3, r7
 8004992:	429d      	cmp	r5, r3
 8004994:	bf38      	it	cc
 8004996:	461d      	movcc	r5, r3
 8004998:	0553      	lsls	r3, r2, #21
 800499a:	d530      	bpl.n	80049fe <__ssputs_r+0x9e>
 800499c:	4629      	mov	r1, r5
 800499e:	f000 fb2b 	bl	8004ff8 <_malloc_r>
 80049a2:	4606      	mov	r6, r0
 80049a4:	b950      	cbnz	r0, 80049bc <__ssputs_r+0x5c>
 80049a6:	230c      	movs	r3, #12
 80049a8:	f8ca 3000 	str.w	r3, [sl]
 80049ac:	89a3      	ldrh	r3, [r4, #12]
 80049ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049b2:	81a3      	strh	r3, [r4, #12]
 80049b4:	f04f 30ff 	mov.w	r0, #4294967295
 80049b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049bc:	463a      	mov	r2, r7
 80049be:	6921      	ldr	r1, [r4, #16]
 80049c0:	f000 faa8 	bl	8004f14 <memcpy>
 80049c4:	89a3      	ldrh	r3, [r4, #12]
 80049c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ce:	81a3      	strh	r3, [r4, #12]
 80049d0:	6126      	str	r6, [r4, #16]
 80049d2:	6165      	str	r5, [r4, #20]
 80049d4:	443e      	add	r6, r7
 80049d6:	1bed      	subs	r5, r5, r7
 80049d8:	6026      	str	r6, [r4, #0]
 80049da:	60a5      	str	r5, [r4, #8]
 80049dc:	464e      	mov	r6, r9
 80049de:	454e      	cmp	r6, r9
 80049e0:	d900      	bls.n	80049e4 <__ssputs_r+0x84>
 80049e2:	464e      	mov	r6, r9
 80049e4:	4632      	mov	r2, r6
 80049e6:	4641      	mov	r1, r8
 80049e8:	6820      	ldr	r0, [r4, #0]
 80049ea:	f000 fa9e 	bl	8004f2a <memmove>
 80049ee:	68a3      	ldr	r3, [r4, #8]
 80049f0:	1b9b      	subs	r3, r3, r6
 80049f2:	60a3      	str	r3, [r4, #8]
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	441e      	add	r6, r3
 80049f8:	6026      	str	r6, [r4, #0]
 80049fa:	2000      	movs	r0, #0
 80049fc:	e7dc      	b.n	80049b8 <__ssputs_r+0x58>
 80049fe:	462a      	mov	r2, r5
 8004a00:	f000 fb54 	bl	80050ac <_realloc_r>
 8004a04:	4606      	mov	r6, r0
 8004a06:	2800      	cmp	r0, #0
 8004a08:	d1e2      	bne.n	80049d0 <__ssputs_r+0x70>
 8004a0a:	6921      	ldr	r1, [r4, #16]
 8004a0c:	4650      	mov	r0, sl
 8004a0e:	f000 faa5 	bl	8004f5c <_free_r>
 8004a12:	e7c8      	b.n	80049a6 <__ssputs_r+0x46>

08004a14 <_svfiprintf_r>:
 8004a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a18:	461d      	mov	r5, r3
 8004a1a:	898b      	ldrh	r3, [r1, #12]
 8004a1c:	061f      	lsls	r7, r3, #24
 8004a1e:	b09d      	sub	sp, #116	; 0x74
 8004a20:	4680      	mov	r8, r0
 8004a22:	460c      	mov	r4, r1
 8004a24:	4616      	mov	r6, r2
 8004a26:	d50f      	bpl.n	8004a48 <_svfiprintf_r+0x34>
 8004a28:	690b      	ldr	r3, [r1, #16]
 8004a2a:	b96b      	cbnz	r3, 8004a48 <_svfiprintf_r+0x34>
 8004a2c:	2140      	movs	r1, #64	; 0x40
 8004a2e:	f000 fae3 	bl	8004ff8 <_malloc_r>
 8004a32:	6020      	str	r0, [r4, #0]
 8004a34:	6120      	str	r0, [r4, #16]
 8004a36:	b928      	cbnz	r0, 8004a44 <_svfiprintf_r+0x30>
 8004a38:	230c      	movs	r3, #12
 8004a3a:	f8c8 3000 	str.w	r3, [r8]
 8004a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a42:	e0c8      	b.n	8004bd6 <_svfiprintf_r+0x1c2>
 8004a44:	2340      	movs	r3, #64	; 0x40
 8004a46:	6163      	str	r3, [r4, #20]
 8004a48:	2300      	movs	r3, #0
 8004a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a4c:	2320      	movs	r3, #32
 8004a4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a52:	2330      	movs	r3, #48	; 0x30
 8004a54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a58:	9503      	str	r5, [sp, #12]
 8004a5a:	f04f 0b01 	mov.w	fp, #1
 8004a5e:	4637      	mov	r7, r6
 8004a60:	463d      	mov	r5, r7
 8004a62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a66:	b10b      	cbz	r3, 8004a6c <_svfiprintf_r+0x58>
 8004a68:	2b25      	cmp	r3, #37	; 0x25
 8004a6a:	d13e      	bne.n	8004aea <_svfiprintf_r+0xd6>
 8004a6c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004a70:	d00b      	beq.n	8004a8a <_svfiprintf_r+0x76>
 8004a72:	4653      	mov	r3, sl
 8004a74:	4632      	mov	r2, r6
 8004a76:	4621      	mov	r1, r4
 8004a78:	4640      	mov	r0, r8
 8004a7a:	f7ff ff71 	bl	8004960 <__ssputs_r>
 8004a7e:	3001      	adds	r0, #1
 8004a80:	f000 80a4 	beq.w	8004bcc <_svfiprintf_r+0x1b8>
 8004a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a86:	4453      	add	r3, sl
 8004a88:	9309      	str	r3, [sp, #36]	; 0x24
 8004a8a:	783b      	ldrb	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 809d 	beq.w	8004bcc <_svfiprintf_r+0x1b8>
 8004a92:	2300      	movs	r3, #0
 8004a94:	f04f 32ff 	mov.w	r2, #4294967295
 8004a98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a9c:	9304      	str	r3, [sp, #16]
 8004a9e:	9307      	str	r3, [sp, #28]
 8004aa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004aa4:	931a      	str	r3, [sp, #104]	; 0x68
 8004aa6:	462f      	mov	r7, r5
 8004aa8:	2205      	movs	r2, #5
 8004aaa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004aae:	4850      	ldr	r0, [pc, #320]	; (8004bf0 <_svfiprintf_r+0x1dc>)
 8004ab0:	f7fb fb8e 	bl	80001d0 <memchr>
 8004ab4:	9b04      	ldr	r3, [sp, #16]
 8004ab6:	b9d0      	cbnz	r0, 8004aee <_svfiprintf_r+0xda>
 8004ab8:	06d9      	lsls	r1, r3, #27
 8004aba:	bf44      	itt	mi
 8004abc:	2220      	movmi	r2, #32
 8004abe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ac2:	071a      	lsls	r2, r3, #28
 8004ac4:	bf44      	itt	mi
 8004ac6:	222b      	movmi	r2, #43	; 0x2b
 8004ac8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004acc:	782a      	ldrb	r2, [r5, #0]
 8004ace:	2a2a      	cmp	r2, #42	; 0x2a
 8004ad0:	d015      	beq.n	8004afe <_svfiprintf_r+0xea>
 8004ad2:	9a07      	ldr	r2, [sp, #28]
 8004ad4:	462f      	mov	r7, r5
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	250a      	movs	r5, #10
 8004ada:	4639      	mov	r1, r7
 8004adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ae0:	3b30      	subs	r3, #48	; 0x30
 8004ae2:	2b09      	cmp	r3, #9
 8004ae4:	d94d      	bls.n	8004b82 <_svfiprintf_r+0x16e>
 8004ae6:	b1b8      	cbz	r0, 8004b18 <_svfiprintf_r+0x104>
 8004ae8:	e00f      	b.n	8004b0a <_svfiprintf_r+0xf6>
 8004aea:	462f      	mov	r7, r5
 8004aec:	e7b8      	b.n	8004a60 <_svfiprintf_r+0x4c>
 8004aee:	4a40      	ldr	r2, [pc, #256]	; (8004bf0 <_svfiprintf_r+0x1dc>)
 8004af0:	1a80      	subs	r0, r0, r2
 8004af2:	fa0b f000 	lsl.w	r0, fp, r0
 8004af6:	4318      	orrs	r0, r3
 8004af8:	9004      	str	r0, [sp, #16]
 8004afa:	463d      	mov	r5, r7
 8004afc:	e7d3      	b.n	8004aa6 <_svfiprintf_r+0x92>
 8004afe:	9a03      	ldr	r2, [sp, #12]
 8004b00:	1d11      	adds	r1, r2, #4
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	9103      	str	r1, [sp, #12]
 8004b06:	2a00      	cmp	r2, #0
 8004b08:	db01      	blt.n	8004b0e <_svfiprintf_r+0xfa>
 8004b0a:	9207      	str	r2, [sp, #28]
 8004b0c:	e004      	b.n	8004b18 <_svfiprintf_r+0x104>
 8004b0e:	4252      	negs	r2, r2
 8004b10:	f043 0302 	orr.w	r3, r3, #2
 8004b14:	9207      	str	r2, [sp, #28]
 8004b16:	9304      	str	r3, [sp, #16]
 8004b18:	783b      	ldrb	r3, [r7, #0]
 8004b1a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b1c:	d10c      	bne.n	8004b38 <_svfiprintf_r+0x124>
 8004b1e:	787b      	ldrb	r3, [r7, #1]
 8004b20:	2b2a      	cmp	r3, #42	; 0x2a
 8004b22:	d133      	bne.n	8004b8c <_svfiprintf_r+0x178>
 8004b24:	9b03      	ldr	r3, [sp, #12]
 8004b26:	1d1a      	adds	r2, r3, #4
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	9203      	str	r2, [sp, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	bfb8      	it	lt
 8004b30:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b34:	3702      	adds	r7, #2
 8004b36:	9305      	str	r3, [sp, #20]
 8004b38:	4d2e      	ldr	r5, [pc, #184]	; (8004bf4 <_svfiprintf_r+0x1e0>)
 8004b3a:	7839      	ldrb	r1, [r7, #0]
 8004b3c:	2203      	movs	r2, #3
 8004b3e:	4628      	mov	r0, r5
 8004b40:	f7fb fb46 	bl	80001d0 <memchr>
 8004b44:	b138      	cbz	r0, 8004b56 <_svfiprintf_r+0x142>
 8004b46:	2340      	movs	r3, #64	; 0x40
 8004b48:	1b40      	subs	r0, r0, r5
 8004b4a:	fa03 f000 	lsl.w	r0, r3, r0
 8004b4e:	9b04      	ldr	r3, [sp, #16]
 8004b50:	4303      	orrs	r3, r0
 8004b52:	3701      	adds	r7, #1
 8004b54:	9304      	str	r3, [sp, #16]
 8004b56:	7839      	ldrb	r1, [r7, #0]
 8004b58:	4827      	ldr	r0, [pc, #156]	; (8004bf8 <_svfiprintf_r+0x1e4>)
 8004b5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b5e:	2206      	movs	r2, #6
 8004b60:	1c7e      	adds	r6, r7, #1
 8004b62:	f7fb fb35 	bl	80001d0 <memchr>
 8004b66:	2800      	cmp	r0, #0
 8004b68:	d038      	beq.n	8004bdc <_svfiprintf_r+0x1c8>
 8004b6a:	4b24      	ldr	r3, [pc, #144]	; (8004bfc <_svfiprintf_r+0x1e8>)
 8004b6c:	bb13      	cbnz	r3, 8004bb4 <_svfiprintf_r+0x1a0>
 8004b6e:	9b03      	ldr	r3, [sp, #12]
 8004b70:	3307      	adds	r3, #7
 8004b72:	f023 0307 	bic.w	r3, r3, #7
 8004b76:	3308      	adds	r3, #8
 8004b78:	9303      	str	r3, [sp, #12]
 8004b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b7c:	444b      	add	r3, r9
 8004b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b80:	e76d      	b.n	8004a5e <_svfiprintf_r+0x4a>
 8004b82:	fb05 3202 	mla	r2, r5, r2, r3
 8004b86:	2001      	movs	r0, #1
 8004b88:	460f      	mov	r7, r1
 8004b8a:	e7a6      	b.n	8004ada <_svfiprintf_r+0xc6>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	3701      	adds	r7, #1
 8004b90:	9305      	str	r3, [sp, #20]
 8004b92:	4619      	mov	r1, r3
 8004b94:	250a      	movs	r5, #10
 8004b96:	4638      	mov	r0, r7
 8004b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b9c:	3a30      	subs	r2, #48	; 0x30
 8004b9e:	2a09      	cmp	r2, #9
 8004ba0:	d903      	bls.n	8004baa <_svfiprintf_r+0x196>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0c8      	beq.n	8004b38 <_svfiprintf_r+0x124>
 8004ba6:	9105      	str	r1, [sp, #20]
 8004ba8:	e7c6      	b.n	8004b38 <_svfiprintf_r+0x124>
 8004baa:	fb05 2101 	mla	r1, r5, r1, r2
 8004bae:	2301      	movs	r3, #1
 8004bb0:	4607      	mov	r7, r0
 8004bb2:	e7f0      	b.n	8004b96 <_svfiprintf_r+0x182>
 8004bb4:	ab03      	add	r3, sp, #12
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	4622      	mov	r2, r4
 8004bba:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <_svfiprintf_r+0x1ec>)
 8004bbc:	a904      	add	r1, sp, #16
 8004bbe:	4640      	mov	r0, r8
 8004bc0:	f3af 8000 	nop.w
 8004bc4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004bc8:	4681      	mov	r9, r0
 8004bca:	d1d6      	bne.n	8004b7a <_svfiprintf_r+0x166>
 8004bcc:	89a3      	ldrh	r3, [r4, #12]
 8004bce:	065b      	lsls	r3, r3, #25
 8004bd0:	f53f af35 	bmi.w	8004a3e <_svfiprintf_r+0x2a>
 8004bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bd6:	b01d      	add	sp, #116	; 0x74
 8004bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bdc:	ab03      	add	r3, sp, #12
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	4622      	mov	r2, r4
 8004be2:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <_svfiprintf_r+0x1ec>)
 8004be4:	a904      	add	r1, sp, #16
 8004be6:	4640      	mov	r0, r8
 8004be8:	f000 f882 	bl	8004cf0 <_printf_i>
 8004bec:	e7ea      	b.n	8004bc4 <_svfiprintf_r+0x1b0>
 8004bee:	bf00      	nop
 8004bf0:	08007b74 	.word	0x08007b74
 8004bf4:	08007b7a 	.word	0x08007b7a
 8004bf8:	08007b7e 	.word	0x08007b7e
 8004bfc:	00000000 	.word	0x00000000
 8004c00:	08004961 	.word	0x08004961

08004c04 <_printf_common>:
 8004c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c08:	4691      	mov	r9, r2
 8004c0a:	461f      	mov	r7, r3
 8004c0c:	688a      	ldr	r2, [r1, #8]
 8004c0e:	690b      	ldr	r3, [r1, #16]
 8004c10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c14:	4293      	cmp	r3, r2
 8004c16:	bfb8      	it	lt
 8004c18:	4613      	movlt	r3, r2
 8004c1a:	f8c9 3000 	str.w	r3, [r9]
 8004c1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c22:	4606      	mov	r6, r0
 8004c24:	460c      	mov	r4, r1
 8004c26:	b112      	cbz	r2, 8004c2e <_printf_common+0x2a>
 8004c28:	3301      	adds	r3, #1
 8004c2a:	f8c9 3000 	str.w	r3, [r9]
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	0699      	lsls	r1, r3, #26
 8004c32:	bf42      	ittt	mi
 8004c34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c38:	3302      	addmi	r3, #2
 8004c3a:	f8c9 3000 	strmi.w	r3, [r9]
 8004c3e:	6825      	ldr	r5, [r4, #0]
 8004c40:	f015 0506 	ands.w	r5, r5, #6
 8004c44:	d107      	bne.n	8004c56 <_printf_common+0x52>
 8004c46:	f104 0a19 	add.w	sl, r4, #25
 8004c4a:	68e3      	ldr	r3, [r4, #12]
 8004c4c:	f8d9 2000 	ldr.w	r2, [r9]
 8004c50:	1a9b      	subs	r3, r3, r2
 8004c52:	42ab      	cmp	r3, r5
 8004c54:	dc28      	bgt.n	8004ca8 <_printf_common+0xa4>
 8004c56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c5a:	6822      	ldr	r2, [r4, #0]
 8004c5c:	3300      	adds	r3, #0
 8004c5e:	bf18      	it	ne
 8004c60:	2301      	movne	r3, #1
 8004c62:	0692      	lsls	r2, r2, #26
 8004c64:	d42d      	bmi.n	8004cc2 <_printf_common+0xbe>
 8004c66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c6a:	4639      	mov	r1, r7
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	47c0      	blx	r8
 8004c70:	3001      	adds	r0, #1
 8004c72:	d020      	beq.n	8004cb6 <_printf_common+0xb2>
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	68e5      	ldr	r5, [r4, #12]
 8004c78:	f8d9 2000 	ldr.w	r2, [r9]
 8004c7c:	f003 0306 	and.w	r3, r3, #6
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	bf08      	it	eq
 8004c84:	1aad      	subeq	r5, r5, r2
 8004c86:	68a3      	ldr	r3, [r4, #8]
 8004c88:	6922      	ldr	r2, [r4, #16]
 8004c8a:	bf0c      	ite	eq
 8004c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c90:	2500      	movne	r5, #0
 8004c92:	4293      	cmp	r3, r2
 8004c94:	bfc4      	itt	gt
 8004c96:	1a9b      	subgt	r3, r3, r2
 8004c98:	18ed      	addgt	r5, r5, r3
 8004c9a:	f04f 0900 	mov.w	r9, #0
 8004c9e:	341a      	adds	r4, #26
 8004ca0:	454d      	cmp	r5, r9
 8004ca2:	d11a      	bne.n	8004cda <_printf_common+0xd6>
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	e008      	b.n	8004cba <_printf_common+0xb6>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	4652      	mov	r2, sl
 8004cac:	4639      	mov	r1, r7
 8004cae:	4630      	mov	r0, r6
 8004cb0:	47c0      	blx	r8
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	d103      	bne.n	8004cbe <_printf_common+0xba>
 8004cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cbe:	3501      	adds	r5, #1
 8004cc0:	e7c3      	b.n	8004c4a <_printf_common+0x46>
 8004cc2:	18e1      	adds	r1, r4, r3
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	2030      	movs	r0, #48	; 0x30
 8004cc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ccc:	4422      	add	r2, r4
 8004cce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cd2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cd6:	3302      	adds	r3, #2
 8004cd8:	e7c5      	b.n	8004c66 <_printf_common+0x62>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	4622      	mov	r2, r4
 8004cde:	4639      	mov	r1, r7
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	47c0      	blx	r8
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	d0e6      	beq.n	8004cb6 <_printf_common+0xb2>
 8004ce8:	f109 0901 	add.w	r9, r9, #1
 8004cec:	e7d8      	b.n	8004ca0 <_printf_common+0x9c>
	...

08004cf0 <_printf_i>:
 8004cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cf4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004cf8:	460c      	mov	r4, r1
 8004cfa:	7e09      	ldrb	r1, [r1, #24]
 8004cfc:	b085      	sub	sp, #20
 8004cfe:	296e      	cmp	r1, #110	; 0x6e
 8004d00:	4617      	mov	r7, r2
 8004d02:	4606      	mov	r6, r0
 8004d04:	4698      	mov	r8, r3
 8004d06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d08:	f000 80b3 	beq.w	8004e72 <_printf_i+0x182>
 8004d0c:	d822      	bhi.n	8004d54 <_printf_i+0x64>
 8004d0e:	2963      	cmp	r1, #99	; 0x63
 8004d10:	d036      	beq.n	8004d80 <_printf_i+0x90>
 8004d12:	d80a      	bhi.n	8004d2a <_printf_i+0x3a>
 8004d14:	2900      	cmp	r1, #0
 8004d16:	f000 80b9 	beq.w	8004e8c <_printf_i+0x19c>
 8004d1a:	2958      	cmp	r1, #88	; 0x58
 8004d1c:	f000 8083 	beq.w	8004e26 <_printf_i+0x136>
 8004d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d28:	e032      	b.n	8004d90 <_printf_i+0xa0>
 8004d2a:	2964      	cmp	r1, #100	; 0x64
 8004d2c:	d001      	beq.n	8004d32 <_printf_i+0x42>
 8004d2e:	2969      	cmp	r1, #105	; 0x69
 8004d30:	d1f6      	bne.n	8004d20 <_printf_i+0x30>
 8004d32:	6820      	ldr	r0, [r4, #0]
 8004d34:	6813      	ldr	r3, [r2, #0]
 8004d36:	0605      	lsls	r5, r0, #24
 8004d38:	f103 0104 	add.w	r1, r3, #4
 8004d3c:	d52a      	bpl.n	8004d94 <_printf_i+0xa4>
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6011      	str	r1, [r2, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	da03      	bge.n	8004d4e <_printf_i+0x5e>
 8004d46:	222d      	movs	r2, #45	; 0x2d
 8004d48:	425b      	negs	r3, r3
 8004d4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d4e:	486f      	ldr	r0, [pc, #444]	; (8004f0c <_printf_i+0x21c>)
 8004d50:	220a      	movs	r2, #10
 8004d52:	e039      	b.n	8004dc8 <_printf_i+0xd8>
 8004d54:	2973      	cmp	r1, #115	; 0x73
 8004d56:	f000 809d 	beq.w	8004e94 <_printf_i+0x1a4>
 8004d5a:	d808      	bhi.n	8004d6e <_printf_i+0x7e>
 8004d5c:	296f      	cmp	r1, #111	; 0x6f
 8004d5e:	d020      	beq.n	8004da2 <_printf_i+0xb2>
 8004d60:	2970      	cmp	r1, #112	; 0x70
 8004d62:	d1dd      	bne.n	8004d20 <_printf_i+0x30>
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	f043 0320 	orr.w	r3, r3, #32
 8004d6a:	6023      	str	r3, [r4, #0]
 8004d6c:	e003      	b.n	8004d76 <_printf_i+0x86>
 8004d6e:	2975      	cmp	r1, #117	; 0x75
 8004d70:	d017      	beq.n	8004da2 <_printf_i+0xb2>
 8004d72:	2978      	cmp	r1, #120	; 0x78
 8004d74:	d1d4      	bne.n	8004d20 <_printf_i+0x30>
 8004d76:	2378      	movs	r3, #120	; 0x78
 8004d78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d7c:	4864      	ldr	r0, [pc, #400]	; (8004f10 <_printf_i+0x220>)
 8004d7e:	e055      	b.n	8004e2c <_printf_i+0x13c>
 8004d80:	6813      	ldr	r3, [r2, #0]
 8004d82:	1d19      	adds	r1, r3, #4
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6011      	str	r1, [r2, #0]
 8004d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d90:	2301      	movs	r3, #1
 8004d92:	e08c      	b.n	8004eae <_printf_i+0x1be>
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6011      	str	r1, [r2, #0]
 8004d98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d9c:	bf18      	it	ne
 8004d9e:	b21b      	sxthne	r3, r3
 8004da0:	e7cf      	b.n	8004d42 <_printf_i+0x52>
 8004da2:	6813      	ldr	r3, [r2, #0]
 8004da4:	6825      	ldr	r5, [r4, #0]
 8004da6:	1d18      	adds	r0, r3, #4
 8004da8:	6010      	str	r0, [r2, #0]
 8004daa:	0628      	lsls	r0, r5, #24
 8004dac:	d501      	bpl.n	8004db2 <_printf_i+0xc2>
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	e002      	b.n	8004db8 <_printf_i+0xc8>
 8004db2:	0668      	lsls	r0, r5, #25
 8004db4:	d5fb      	bpl.n	8004dae <_printf_i+0xbe>
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	4854      	ldr	r0, [pc, #336]	; (8004f0c <_printf_i+0x21c>)
 8004dba:	296f      	cmp	r1, #111	; 0x6f
 8004dbc:	bf14      	ite	ne
 8004dbe:	220a      	movne	r2, #10
 8004dc0:	2208      	moveq	r2, #8
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dc8:	6865      	ldr	r5, [r4, #4]
 8004dca:	60a5      	str	r5, [r4, #8]
 8004dcc:	2d00      	cmp	r5, #0
 8004dce:	f2c0 8095 	blt.w	8004efc <_printf_i+0x20c>
 8004dd2:	6821      	ldr	r1, [r4, #0]
 8004dd4:	f021 0104 	bic.w	r1, r1, #4
 8004dd8:	6021      	str	r1, [r4, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d13d      	bne.n	8004e5a <_printf_i+0x16a>
 8004dde:	2d00      	cmp	r5, #0
 8004de0:	f040 808e 	bne.w	8004f00 <_printf_i+0x210>
 8004de4:	4665      	mov	r5, ip
 8004de6:	2a08      	cmp	r2, #8
 8004de8:	d10b      	bne.n	8004e02 <_printf_i+0x112>
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	07db      	lsls	r3, r3, #31
 8004dee:	d508      	bpl.n	8004e02 <_printf_i+0x112>
 8004df0:	6923      	ldr	r3, [r4, #16]
 8004df2:	6862      	ldr	r2, [r4, #4]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	bfde      	ittt	le
 8004df8:	2330      	movle	r3, #48	; 0x30
 8004dfa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004dfe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e02:	ebac 0305 	sub.w	r3, ip, r5
 8004e06:	6123      	str	r3, [r4, #16]
 8004e08:	f8cd 8000 	str.w	r8, [sp]
 8004e0c:	463b      	mov	r3, r7
 8004e0e:	aa03      	add	r2, sp, #12
 8004e10:	4621      	mov	r1, r4
 8004e12:	4630      	mov	r0, r6
 8004e14:	f7ff fef6 	bl	8004c04 <_printf_common>
 8004e18:	3001      	adds	r0, #1
 8004e1a:	d14d      	bne.n	8004eb8 <_printf_i+0x1c8>
 8004e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e20:	b005      	add	sp, #20
 8004e22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e26:	4839      	ldr	r0, [pc, #228]	; (8004f0c <_printf_i+0x21c>)
 8004e28:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e2c:	6813      	ldr	r3, [r2, #0]
 8004e2e:	6821      	ldr	r1, [r4, #0]
 8004e30:	1d1d      	adds	r5, r3, #4
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6015      	str	r5, [r2, #0]
 8004e36:	060a      	lsls	r2, r1, #24
 8004e38:	d50b      	bpl.n	8004e52 <_printf_i+0x162>
 8004e3a:	07ca      	lsls	r2, r1, #31
 8004e3c:	bf44      	itt	mi
 8004e3e:	f041 0120 	orrmi.w	r1, r1, #32
 8004e42:	6021      	strmi	r1, [r4, #0]
 8004e44:	b91b      	cbnz	r3, 8004e4e <_printf_i+0x15e>
 8004e46:	6822      	ldr	r2, [r4, #0]
 8004e48:	f022 0220 	bic.w	r2, r2, #32
 8004e4c:	6022      	str	r2, [r4, #0]
 8004e4e:	2210      	movs	r2, #16
 8004e50:	e7b7      	b.n	8004dc2 <_printf_i+0xd2>
 8004e52:	064d      	lsls	r5, r1, #25
 8004e54:	bf48      	it	mi
 8004e56:	b29b      	uxthmi	r3, r3
 8004e58:	e7ef      	b.n	8004e3a <_printf_i+0x14a>
 8004e5a:	4665      	mov	r5, ip
 8004e5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e60:	fb02 3311 	mls	r3, r2, r1, r3
 8004e64:	5cc3      	ldrb	r3, [r0, r3]
 8004e66:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	2900      	cmp	r1, #0
 8004e6e:	d1f5      	bne.n	8004e5c <_printf_i+0x16c>
 8004e70:	e7b9      	b.n	8004de6 <_printf_i+0xf6>
 8004e72:	6813      	ldr	r3, [r2, #0]
 8004e74:	6825      	ldr	r5, [r4, #0]
 8004e76:	6961      	ldr	r1, [r4, #20]
 8004e78:	1d18      	adds	r0, r3, #4
 8004e7a:	6010      	str	r0, [r2, #0]
 8004e7c:	0628      	lsls	r0, r5, #24
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	d501      	bpl.n	8004e86 <_printf_i+0x196>
 8004e82:	6019      	str	r1, [r3, #0]
 8004e84:	e002      	b.n	8004e8c <_printf_i+0x19c>
 8004e86:	066a      	lsls	r2, r5, #25
 8004e88:	d5fb      	bpl.n	8004e82 <_printf_i+0x192>
 8004e8a:	8019      	strh	r1, [r3, #0]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	6123      	str	r3, [r4, #16]
 8004e90:	4665      	mov	r5, ip
 8004e92:	e7b9      	b.n	8004e08 <_printf_i+0x118>
 8004e94:	6813      	ldr	r3, [r2, #0]
 8004e96:	1d19      	adds	r1, r3, #4
 8004e98:	6011      	str	r1, [r2, #0]
 8004e9a:	681d      	ldr	r5, [r3, #0]
 8004e9c:	6862      	ldr	r2, [r4, #4]
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	f7fb f995 	bl	80001d0 <memchr>
 8004ea6:	b108      	cbz	r0, 8004eac <_printf_i+0x1bc>
 8004ea8:	1b40      	subs	r0, r0, r5
 8004eaa:	6060      	str	r0, [r4, #4]
 8004eac:	6863      	ldr	r3, [r4, #4]
 8004eae:	6123      	str	r3, [r4, #16]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eb6:	e7a7      	b.n	8004e08 <_printf_i+0x118>
 8004eb8:	6923      	ldr	r3, [r4, #16]
 8004eba:	462a      	mov	r2, r5
 8004ebc:	4639      	mov	r1, r7
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	47c0      	blx	r8
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	d0aa      	beq.n	8004e1c <_printf_i+0x12c>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	079b      	lsls	r3, r3, #30
 8004eca:	d413      	bmi.n	8004ef4 <_printf_i+0x204>
 8004ecc:	68e0      	ldr	r0, [r4, #12]
 8004ece:	9b03      	ldr	r3, [sp, #12]
 8004ed0:	4298      	cmp	r0, r3
 8004ed2:	bfb8      	it	lt
 8004ed4:	4618      	movlt	r0, r3
 8004ed6:	e7a3      	b.n	8004e20 <_printf_i+0x130>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	464a      	mov	r2, r9
 8004edc:	4639      	mov	r1, r7
 8004ede:	4630      	mov	r0, r6
 8004ee0:	47c0      	blx	r8
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	d09a      	beq.n	8004e1c <_printf_i+0x12c>
 8004ee6:	3501      	adds	r5, #1
 8004ee8:	68e3      	ldr	r3, [r4, #12]
 8004eea:	9a03      	ldr	r2, [sp, #12]
 8004eec:	1a9b      	subs	r3, r3, r2
 8004eee:	42ab      	cmp	r3, r5
 8004ef0:	dcf2      	bgt.n	8004ed8 <_printf_i+0x1e8>
 8004ef2:	e7eb      	b.n	8004ecc <_printf_i+0x1dc>
 8004ef4:	2500      	movs	r5, #0
 8004ef6:	f104 0919 	add.w	r9, r4, #25
 8004efa:	e7f5      	b.n	8004ee8 <_printf_i+0x1f8>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1ac      	bne.n	8004e5a <_printf_i+0x16a>
 8004f00:	7803      	ldrb	r3, [r0, #0]
 8004f02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f0a:	e76c      	b.n	8004de6 <_printf_i+0xf6>
 8004f0c:	08007b85 	.word	0x08007b85
 8004f10:	08007b96 	.word	0x08007b96

08004f14 <memcpy>:
 8004f14:	b510      	push	{r4, lr}
 8004f16:	1e43      	subs	r3, r0, #1
 8004f18:	440a      	add	r2, r1
 8004f1a:	4291      	cmp	r1, r2
 8004f1c:	d100      	bne.n	8004f20 <memcpy+0xc>
 8004f1e:	bd10      	pop	{r4, pc}
 8004f20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f28:	e7f7      	b.n	8004f1a <memcpy+0x6>

08004f2a <memmove>:
 8004f2a:	4288      	cmp	r0, r1
 8004f2c:	b510      	push	{r4, lr}
 8004f2e:	eb01 0302 	add.w	r3, r1, r2
 8004f32:	d807      	bhi.n	8004f44 <memmove+0x1a>
 8004f34:	1e42      	subs	r2, r0, #1
 8004f36:	4299      	cmp	r1, r3
 8004f38:	d00a      	beq.n	8004f50 <memmove+0x26>
 8004f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f3e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004f42:	e7f8      	b.n	8004f36 <memmove+0xc>
 8004f44:	4283      	cmp	r3, r0
 8004f46:	d9f5      	bls.n	8004f34 <memmove+0xa>
 8004f48:	1881      	adds	r1, r0, r2
 8004f4a:	1ad2      	subs	r2, r2, r3
 8004f4c:	42d3      	cmn	r3, r2
 8004f4e:	d100      	bne.n	8004f52 <memmove+0x28>
 8004f50:	bd10      	pop	{r4, pc}
 8004f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f56:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004f5a:	e7f7      	b.n	8004f4c <memmove+0x22>

08004f5c <_free_r>:
 8004f5c:	b538      	push	{r3, r4, r5, lr}
 8004f5e:	4605      	mov	r5, r0
 8004f60:	2900      	cmp	r1, #0
 8004f62:	d045      	beq.n	8004ff0 <_free_r+0x94>
 8004f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f68:	1f0c      	subs	r4, r1, #4
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	bfb8      	it	lt
 8004f6e:	18e4      	addlt	r4, r4, r3
 8004f70:	f000 f8d2 	bl	8005118 <__malloc_lock>
 8004f74:	4a1f      	ldr	r2, [pc, #124]	; (8004ff4 <_free_r+0x98>)
 8004f76:	6813      	ldr	r3, [r2, #0]
 8004f78:	4610      	mov	r0, r2
 8004f7a:	b933      	cbnz	r3, 8004f8a <_free_r+0x2e>
 8004f7c:	6063      	str	r3, [r4, #4]
 8004f7e:	6014      	str	r4, [r2, #0]
 8004f80:	4628      	mov	r0, r5
 8004f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f86:	f000 b8c8 	b.w	800511a <__malloc_unlock>
 8004f8a:	42a3      	cmp	r3, r4
 8004f8c:	d90c      	bls.n	8004fa8 <_free_r+0x4c>
 8004f8e:	6821      	ldr	r1, [r4, #0]
 8004f90:	1862      	adds	r2, r4, r1
 8004f92:	4293      	cmp	r3, r2
 8004f94:	bf04      	itt	eq
 8004f96:	681a      	ldreq	r2, [r3, #0]
 8004f98:	685b      	ldreq	r3, [r3, #4]
 8004f9a:	6063      	str	r3, [r4, #4]
 8004f9c:	bf04      	itt	eq
 8004f9e:	1852      	addeq	r2, r2, r1
 8004fa0:	6022      	streq	r2, [r4, #0]
 8004fa2:	6004      	str	r4, [r0, #0]
 8004fa4:	e7ec      	b.n	8004f80 <_free_r+0x24>
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	b10a      	cbz	r2, 8004fb0 <_free_r+0x54>
 8004fac:	42a2      	cmp	r2, r4
 8004fae:	d9fa      	bls.n	8004fa6 <_free_r+0x4a>
 8004fb0:	6819      	ldr	r1, [r3, #0]
 8004fb2:	1858      	adds	r0, r3, r1
 8004fb4:	42a0      	cmp	r0, r4
 8004fb6:	d10b      	bne.n	8004fd0 <_free_r+0x74>
 8004fb8:	6820      	ldr	r0, [r4, #0]
 8004fba:	4401      	add	r1, r0
 8004fbc:	1858      	adds	r0, r3, r1
 8004fbe:	4282      	cmp	r2, r0
 8004fc0:	6019      	str	r1, [r3, #0]
 8004fc2:	d1dd      	bne.n	8004f80 <_free_r+0x24>
 8004fc4:	6810      	ldr	r0, [r2, #0]
 8004fc6:	6852      	ldr	r2, [r2, #4]
 8004fc8:	605a      	str	r2, [r3, #4]
 8004fca:	4401      	add	r1, r0
 8004fcc:	6019      	str	r1, [r3, #0]
 8004fce:	e7d7      	b.n	8004f80 <_free_r+0x24>
 8004fd0:	d902      	bls.n	8004fd8 <_free_r+0x7c>
 8004fd2:	230c      	movs	r3, #12
 8004fd4:	602b      	str	r3, [r5, #0]
 8004fd6:	e7d3      	b.n	8004f80 <_free_r+0x24>
 8004fd8:	6820      	ldr	r0, [r4, #0]
 8004fda:	1821      	adds	r1, r4, r0
 8004fdc:	428a      	cmp	r2, r1
 8004fde:	bf04      	itt	eq
 8004fe0:	6811      	ldreq	r1, [r2, #0]
 8004fe2:	6852      	ldreq	r2, [r2, #4]
 8004fe4:	6062      	str	r2, [r4, #4]
 8004fe6:	bf04      	itt	eq
 8004fe8:	1809      	addeq	r1, r1, r0
 8004fea:	6021      	streq	r1, [r4, #0]
 8004fec:	605c      	str	r4, [r3, #4]
 8004fee:	e7c7      	b.n	8004f80 <_free_r+0x24>
 8004ff0:	bd38      	pop	{r3, r4, r5, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000468 	.word	0x20000468

08004ff8 <_malloc_r>:
 8004ff8:	b570      	push	{r4, r5, r6, lr}
 8004ffa:	1ccd      	adds	r5, r1, #3
 8004ffc:	f025 0503 	bic.w	r5, r5, #3
 8005000:	3508      	adds	r5, #8
 8005002:	2d0c      	cmp	r5, #12
 8005004:	bf38      	it	cc
 8005006:	250c      	movcc	r5, #12
 8005008:	2d00      	cmp	r5, #0
 800500a:	4606      	mov	r6, r0
 800500c:	db01      	blt.n	8005012 <_malloc_r+0x1a>
 800500e:	42a9      	cmp	r1, r5
 8005010:	d903      	bls.n	800501a <_malloc_r+0x22>
 8005012:	230c      	movs	r3, #12
 8005014:	6033      	str	r3, [r6, #0]
 8005016:	2000      	movs	r0, #0
 8005018:	bd70      	pop	{r4, r5, r6, pc}
 800501a:	f000 f87d 	bl	8005118 <__malloc_lock>
 800501e:	4a21      	ldr	r2, [pc, #132]	; (80050a4 <_malloc_r+0xac>)
 8005020:	6814      	ldr	r4, [r2, #0]
 8005022:	4621      	mov	r1, r4
 8005024:	b991      	cbnz	r1, 800504c <_malloc_r+0x54>
 8005026:	4c20      	ldr	r4, [pc, #128]	; (80050a8 <_malloc_r+0xb0>)
 8005028:	6823      	ldr	r3, [r4, #0]
 800502a:	b91b      	cbnz	r3, 8005034 <_malloc_r+0x3c>
 800502c:	4630      	mov	r0, r6
 800502e:	f000 f863 	bl	80050f8 <_sbrk_r>
 8005032:	6020      	str	r0, [r4, #0]
 8005034:	4629      	mov	r1, r5
 8005036:	4630      	mov	r0, r6
 8005038:	f000 f85e 	bl	80050f8 <_sbrk_r>
 800503c:	1c43      	adds	r3, r0, #1
 800503e:	d124      	bne.n	800508a <_malloc_r+0x92>
 8005040:	230c      	movs	r3, #12
 8005042:	6033      	str	r3, [r6, #0]
 8005044:	4630      	mov	r0, r6
 8005046:	f000 f868 	bl	800511a <__malloc_unlock>
 800504a:	e7e4      	b.n	8005016 <_malloc_r+0x1e>
 800504c:	680b      	ldr	r3, [r1, #0]
 800504e:	1b5b      	subs	r3, r3, r5
 8005050:	d418      	bmi.n	8005084 <_malloc_r+0x8c>
 8005052:	2b0b      	cmp	r3, #11
 8005054:	d90f      	bls.n	8005076 <_malloc_r+0x7e>
 8005056:	600b      	str	r3, [r1, #0]
 8005058:	50cd      	str	r5, [r1, r3]
 800505a:	18cc      	adds	r4, r1, r3
 800505c:	4630      	mov	r0, r6
 800505e:	f000 f85c 	bl	800511a <__malloc_unlock>
 8005062:	f104 000b 	add.w	r0, r4, #11
 8005066:	1d23      	adds	r3, r4, #4
 8005068:	f020 0007 	bic.w	r0, r0, #7
 800506c:	1ac3      	subs	r3, r0, r3
 800506e:	d0d3      	beq.n	8005018 <_malloc_r+0x20>
 8005070:	425a      	negs	r2, r3
 8005072:	50e2      	str	r2, [r4, r3]
 8005074:	e7d0      	b.n	8005018 <_malloc_r+0x20>
 8005076:	428c      	cmp	r4, r1
 8005078:	684b      	ldr	r3, [r1, #4]
 800507a:	bf16      	itet	ne
 800507c:	6063      	strne	r3, [r4, #4]
 800507e:	6013      	streq	r3, [r2, #0]
 8005080:	460c      	movne	r4, r1
 8005082:	e7eb      	b.n	800505c <_malloc_r+0x64>
 8005084:	460c      	mov	r4, r1
 8005086:	6849      	ldr	r1, [r1, #4]
 8005088:	e7cc      	b.n	8005024 <_malloc_r+0x2c>
 800508a:	1cc4      	adds	r4, r0, #3
 800508c:	f024 0403 	bic.w	r4, r4, #3
 8005090:	42a0      	cmp	r0, r4
 8005092:	d005      	beq.n	80050a0 <_malloc_r+0xa8>
 8005094:	1a21      	subs	r1, r4, r0
 8005096:	4630      	mov	r0, r6
 8005098:	f000 f82e 	bl	80050f8 <_sbrk_r>
 800509c:	3001      	adds	r0, #1
 800509e:	d0cf      	beq.n	8005040 <_malloc_r+0x48>
 80050a0:	6025      	str	r5, [r4, #0]
 80050a2:	e7db      	b.n	800505c <_malloc_r+0x64>
 80050a4:	20000468 	.word	0x20000468
 80050a8:	2000046c 	.word	0x2000046c

080050ac <_realloc_r>:
 80050ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ae:	4607      	mov	r7, r0
 80050b0:	4614      	mov	r4, r2
 80050b2:	460e      	mov	r6, r1
 80050b4:	b921      	cbnz	r1, 80050c0 <_realloc_r+0x14>
 80050b6:	4611      	mov	r1, r2
 80050b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050bc:	f7ff bf9c 	b.w	8004ff8 <_malloc_r>
 80050c0:	b922      	cbnz	r2, 80050cc <_realloc_r+0x20>
 80050c2:	f7ff ff4b 	bl	8004f5c <_free_r>
 80050c6:	4625      	mov	r5, r4
 80050c8:	4628      	mov	r0, r5
 80050ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050cc:	f000 f826 	bl	800511c <_malloc_usable_size_r>
 80050d0:	42a0      	cmp	r0, r4
 80050d2:	d20f      	bcs.n	80050f4 <_realloc_r+0x48>
 80050d4:	4621      	mov	r1, r4
 80050d6:	4638      	mov	r0, r7
 80050d8:	f7ff ff8e 	bl	8004ff8 <_malloc_r>
 80050dc:	4605      	mov	r5, r0
 80050de:	2800      	cmp	r0, #0
 80050e0:	d0f2      	beq.n	80050c8 <_realloc_r+0x1c>
 80050e2:	4631      	mov	r1, r6
 80050e4:	4622      	mov	r2, r4
 80050e6:	f7ff ff15 	bl	8004f14 <memcpy>
 80050ea:	4631      	mov	r1, r6
 80050ec:	4638      	mov	r0, r7
 80050ee:	f7ff ff35 	bl	8004f5c <_free_r>
 80050f2:	e7e9      	b.n	80050c8 <_realloc_r+0x1c>
 80050f4:	4635      	mov	r5, r6
 80050f6:	e7e7      	b.n	80050c8 <_realloc_r+0x1c>

080050f8 <_sbrk_r>:
 80050f8:	b538      	push	{r3, r4, r5, lr}
 80050fa:	4c06      	ldr	r4, [pc, #24]	; (8005114 <_sbrk_r+0x1c>)
 80050fc:	2300      	movs	r3, #0
 80050fe:	4605      	mov	r5, r0
 8005100:	4608      	mov	r0, r1
 8005102:	6023      	str	r3, [r4, #0]
 8005104:	f7fc ff34 	bl	8001f70 <_sbrk>
 8005108:	1c43      	adds	r3, r0, #1
 800510a:	d102      	bne.n	8005112 <_sbrk_r+0x1a>
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	b103      	cbz	r3, 8005112 <_sbrk_r+0x1a>
 8005110:	602b      	str	r3, [r5, #0]
 8005112:	bd38      	pop	{r3, r4, r5, pc}
 8005114:	200005f0 	.word	0x200005f0

08005118 <__malloc_lock>:
 8005118:	4770      	bx	lr

0800511a <__malloc_unlock>:
 800511a:	4770      	bx	lr

0800511c <_malloc_usable_size_r>:
 800511c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005120:	1f18      	subs	r0, r3, #4
 8005122:	2b00      	cmp	r3, #0
 8005124:	bfbc      	itt	lt
 8005126:	580b      	ldrlt	r3, [r1, r0]
 8005128:	18c0      	addlt	r0, r0, r3
 800512a:	4770      	bx	lr

0800512c <_init>:
 800512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512e:	bf00      	nop
 8005130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005132:	bc08      	pop	{r3}
 8005134:	469e      	mov	lr, r3
 8005136:	4770      	bx	lr

08005138 <_fini>:
 8005138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513a:	bf00      	nop
 800513c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513e:	bc08      	pop	{r3}
 8005140:	469e      	mov	lr, r3
 8005142:	4770      	bx	lr
