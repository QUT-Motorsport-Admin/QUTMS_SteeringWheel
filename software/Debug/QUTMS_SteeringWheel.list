
QUTMS_SteeringWheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007184  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d070  08007318  08007318  00017318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014388  08014388  000302c4  2**0
                  CONTENTS
  4 .ARM          00000000  08014388  08014388  000302c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014388  08014388  000302c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014388  08014388  00024388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801438c  0801438c  0002438c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  08014390  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  200002c4  08014654  000302c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  08014654  0003068c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008671  00000000  00000000  000302f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000164c  00000000  00000000  00038965  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000688  00000000  00000000  00039fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000187dc  00000000  00000000  0003a640  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000065d9  00000000  00000000  00052e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00091403  00000000  00000000  000593f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000ea7f8  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000550  00000000  00000000  000ea878  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  000023b0  00000000  00000000  000eadc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080072fc 	.word	0x080072fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	080072fc 	.word	0x080072fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <ili9488_Init>:

#define  LCD_IO_WriteData16_to_2x8(dt)    {LCD_IO_WriteData8((dt) >> 8); LCD_IO_WriteData8(dt); }

//-----------------------------------------------------------------------------
void ili9488_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  if((Is_ili9488_Initialized & ILI9488_LCD_INITIALIZED) == 0)
 8000c8c:	4b43      	ldr	r3, [pc, #268]	; (8000d9c <ili9488_Init+0x114>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d115      	bne.n	8000cc4 <ili9488_Init+0x3c>
  {
    Is_ili9488_Initialized |= ILI9488_LCD_INITIALIZED;
 8000c98:	4b40      	ldr	r3, [pc, #256]	; (8000d9c <ili9488_Init+0x114>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4b3e      	ldr	r3, [pc, #248]	; (8000d9c <ili9488_Init+0x114>)
 8000ca4:	701a      	strb	r2, [r3, #0]
    if((Is_ili9488_Initialized & ILI9488_IO_INITIALIZED) == 0)
 8000ca6:	4b3d      	ldr	r3, [pc, #244]	; (8000d9c <ili9488_Init+0x114>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <ili9488_Init+0x2e>
      LCD_IO_Init();
 8000cb2:	f000 fd67 	bl	8001784 <LCD_IO_Init>
    Is_ili9488_Initialized |= ILI9488_IO_INITIALIZED;
 8000cb6:	4b39      	ldr	r3, [pc, #228]	; (8000d9c <ili9488_Init+0x114>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	f043 0302 	orr.w	r3, r3, #2
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <ili9488_Init+0x114>)
 8000cc2:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(105);
 8000cc4:	2069      	movs	r0, #105	; 0x69
 8000cc6:	f000 fd39 	bl	800173c <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SWRESET);
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f000 fe12 	bl	80018f4 <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8000cd0:	2005      	movs	r0, #5
 8000cd2:	f000 fd33 	bl	800173c <LCD_Delay>
  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRP1, (uint8_t *)"\x00\x03\x09\x08\x16\x0A\x3F\x78\x4C\x09\x0A\x08\x16\x1A\x0F", 15);
 8000cd6:	220f      	movs	r2, #15
 8000cd8:	4931      	ldr	r1, [pc, #196]	; (8000da0 <ili9488_Init+0x118>)
 8000cda:	20e0      	movs	r0, #224	; 0xe0
 8000cdc:	f000 fe74 	bl	80019c8 <LCD_IO_WriteCmd8MultipleData8>
  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRN1, (uint8_t *)"\x00\x16\x19\x03\x0F\x05\x32\x45\x46\x04\x0E\x0D\x35\x37\x0F", 15);
 8000ce0:	220f      	movs	r2, #15
 8000ce2:	4930      	ldr	r1, [pc, #192]	; (8000da4 <ili9488_Init+0x11c>)
 8000ce4:	20e1      	movs	r0, #225	; 0xe1
 8000ce6:	f000 fe6f 	bl	80019c8 <LCD_IO_WriteCmd8MultipleData8>
  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_PWCTR1, (uint8_t *)"\x17\x15", 2);
 8000cea:	2202      	movs	r2, #2
 8000cec:	492e      	ldr	r1, [pc, #184]	; (8000da8 <ili9488_Init+0x120>)
 8000cee:	20c0      	movs	r0, #192	; 0xc0
 8000cf0:	f000 fe6a 	bl	80019c8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8000cf4:	2005      	movs	r0, #5
 8000cf6:	f000 fd21 	bl	800173c <LCD_Delay>
  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8(ILI9488_PWCTR2); LCD_IO_WriteData8(0x41);
 8000cfa:	20c1      	movs	r0, #193	; 0xc1
 8000cfc:	f000 fdfa 	bl	80018f4 <LCD_IO_WriteCmd8>
 8000d00:	2041      	movs	r0, #65	; 0x41
 8000d02:	f000 fe17 	bl	8001934 <LCD_IO_WriteData8>
  LCD_Delay(5);
 8000d06:	2005      	movs	r0, #5
 8000d08:	f000 fd18 	bl	800173c <LCD_Delay>
  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_VMCTR1, (uint8_t *)"\x00\x12\x80", 3);
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	4927      	ldr	r1, [pc, #156]	; (8000dac <ili9488_Init+0x124>)
 8000d10:	20c5      	movs	r0, #197	; 0xc5
 8000d12:	f000 fe59 	bl	80019c8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8000d16:	2005      	movs	r0, #5
 8000d18:	f000 fd10 	bl	800173c <LCD_Delay>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x66); // Interface Pixel Format (24 bit)
 8000d1c:	203a      	movs	r0, #58	; 0x3a
 8000d1e:	f000 fde9 	bl	80018f4 <LCD_IO_WriteCmd8>
 8000d22:	2066      	movs	r0, #102	; 0x66
 8000d24:	f000 fe06 	bl	8001934 <LCD_IO_WriteData8>
  #if LCD_SPI_MODE != 2
  // LCD_IO_WriteCmd8(0xFB); LCD_IO_WriteData8(0x80);
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x80); // Interface Mode Control (SDO NOT USE)
  #else
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x00); // Interface Mode Control (SDO USE)
 8000d28:	20b0      	movs	r0, #176	; 0xb0
 8000d2a:	f000 fde3 	bl	80018f4 <LCD_IO_WriteCmd8>
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f000 fe00 	bl	8001934 <LCD_IO_WriteData8>
  #endif
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x55); // Interface Pixel Format (16 bit)
  #endif
  LCD_IO_WriteCmd8(ILI9488_FRMCTR1); LCD_IO_WriteData8(0xA0); // Frame rate (60Hz)
 8000d34:	20b1      	movs	r0, #177	; 0xb1
 8000d36:	f000 fddd 	bl	80018f4 <LCD_IO_WriteCmd8>
 8000d3a:	20a0      	movs	r0, #160	; 0xa0
 8000d3c:	f000 fdfa 	bl	8001934 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_INVCTR); LCD_IO_WriteData8(0x02); // Display Inversion Control (2-dot)
 8000d40:	20b4      	movs	r0, #180	; 0xb4
 8000d42:	f000 fdd7 	bl	80018f4 <LCD_IO_WriteCmd8>
 8000d46:	2002      	movs	r0, #2
 8000d48:	f000 fdf4 	bl	8001934 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_DFUNCTR, (uint8_t *)"\x02\x02", 2); // Display Function Control RGB/MCU Interface Control
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	4918      	ldr	r1, [pc, #96]	; (8000db0 <ili9488_Init+0x128>)
 8000d50:	20b6      	movs	r0, #182	; 0xb6
 8000d52:	f000 fe39 	bl	80019c8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9488_IMGFUNCT); LCD_IO_WriteData8(0x00); // Set Image Functio (Disable 24 bit data)
 8000d56:	20e9      	movs	r0, #233	; 0xe9
 8000d58:	f000 fdcc 	bl	80018f4 <LCD_IO_WriteCmd8>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f000 fde9 	bl	8001934 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_ADJCTR3, (uint8_t *)"\xA9\x51\x2C\x82", 4); // Adjust Control (D7 stream, loose)
 8000d62:	2204      	movs	r2, #4
 8000d64:	4913      	ldr	r1, [pc, #76]	; (8000db4 <ili9488_Init+0x12c>)
 8000d66:	20f7      	movs	r0, #247	; 0xf7
 8000d68:	f000 fe2e 	bl	80019c8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8000d6c:	2005      	movs	r0, #5
 8000d6e:	f000 fce5 	bl	800173c <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Exit Sleep
 8000d72:	2011      	movs	r0, #17
 8000d74:	f000 fdbe 	bl	80018f4 <LCD_IO_WriteCmd8>
  LCD_Delay(120);
 8000d78:	2078      	movs	r0, #120	; 0x78
 8000d7a:	f000 fcdf 	bl	800173c <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_DISPON);      // Display on
 8000d7e:	2029      	movs	r0, #41	; 0x29
 8000d80:	f000 fdb8 	bl	80018f4 <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8000d84:	2005      	movs	r0, #5
 8000d86:	f000 fcd9 	bl	800173c <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 8000d8a:	2036      	movs	r0, #54	; 0x36
 8000d8c:	f000 fdb2 	bl	80018f4 <LCD_IO_WriteCmd8>
 8000d90:	2048      	movs	r0, #72	; 0x48
 8000d92:	f000 fdcf 	bl	8001934 <LCD_IO_WriteData8>
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200002e0 	.word	0x200002e0
 8000da0:	08007318 	.word	0x08007318
 8000da4:	08007328 	.word	0x08007328
 8000da8:	08007338 	.word	0x08007338
 8000dac:	0800733c 	.word	0x0800733c
 8000db0:	08007340 	.word	0x08007340
 8000db4:	08007344 	.word	0x08007344

08000db8 <ili9488_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOn(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Display on
 8000dbc:	2011      	movs	r0, #17
 8000dbe:	f000 fd99 	bl	80018f4 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(1);
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f000 fcc6 	bl	8001754 <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <ili9488_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOff(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPIN);       // Display off
 8000dd0:	2010      	movs	r0, #16
 8000dd2:	f000 fd8f 	bl	80018f4 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(0);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f000 fcbc 	bl	8001754 <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <ili9488_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9488_GetLcdPixelWidth(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ILI9488_MAX_X + 1;
 8000de4:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <ili9488_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9488_GetLcdPixelHeight(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  return ILI9488_MAX_Y + 1;
 8000df6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <ili9488_ReadID>:
  * @brief  Get the ILI9488 ID.
  * @param  None
  * @retval The ILI9488 ID
  */
uint16_t ili9488_ReadID(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();

  if(Is_ili9488_Initialized == 0)
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <ili9488_ReadID+0x40>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <ili9488_ReadID+0x16>
  {
    ili9488_Init();
 8000e16:	f7ff ff37 	bl	8000c88 <ili9488_Init>
  }

  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData8(0x04, (uint8_t *)&id, 3, 0);
 8000e1a:	1d39      	adds	r1, r7, #4
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	2203      	movs	r2, #3
 8000e20:	2004      	movs	r0, #4
 8000e22:	f000 fe1b 	bl	8001a5c <LCD_IO_ReadCmd8MultipleData8>
  id <<= 1;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	607b      	str	r3, [r7, #4]
  #endif
  // printf("ID:%08X\r\n", (unsigned int)id);

  ILI9488_LCDMUTEX_POP();

  if(id == 0x00668054)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a06      	ldr	r2, [pc, #24]	; (8000e48 <ili9488_ReadID+0x44>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d102      	bne.n	8000e3a <ili9488_ReadID+0x36>
    return 0x9488;
 8000e34:	f249 4388 	movw	r3, #38024	; 0x9488
 8000e38:	e000      	b.n	8000e3c <ili9488_ReadID+0x38>
  return 0;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200002e0 	.word	0x200002e0
 8000e48:	00668054 	.word	0x00668054

08000e4c <ili9488_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9488_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	460a      	mov	r2, r1
 8000e56:	80fb      	strh	r3, [r7, #6]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	80bb      	strh	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8000e5c:	202a      	movs	r0, #42	; 0x2a
 8000e5e:	f000 fd49 	bl	80018f4 <LCD_IO_WriteCmd8>
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 fd62 	bl	8001934 <LCD_IO_WriteData8>
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 fd5d 	bl	8001934 <LCD_IO_WriteData8>
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 fd56 	bl	8001934 <LCD_IO_WriteData8>
 8000e88:	88fb      	ldrh	r3, [r7, #6]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 fd51 	bl	8001934 <LCD_IO_WriteData8>
 8000e92:	202b      	movs	r0, #43	; 0x2b
 8000e94:	f000 fd2e 	bl	80018f4 <LCD_IO_WriteCmd8>
 8000e98:	88bb      	ldrh	r3, [r7, #4]
 8000e9a:	0a1b      	lsrs	r3, r3, #8
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fd47 	bl	8001934 <LCD_IO_WriteData8>
 8000ea6:	88bb      	ldrh	r3, [r7, #4]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 fd42 	bl	8001934 <LCD_IO_WriteData8>
 8000eb0:	88bb      	ldrh	r3, [r7, #4]
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fd3b 	bl	8001934 <LCD_IO_WriteData8>
 8000ebe:	88bb      	ldrh	r3, [r7, #4]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fd36 	bl	8001934 <LCD_IO_WriteData8>
  ILI9488_LCDMUTEX_POP();
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <ili9488_write16to24>:

/* The SPI mode not capable the 16bpp mode -> convert to 24bpp */
#if ILI9488_INTERFACE == 0
extern inline void ili9488_write16to24(uint16_t RGBCode);
inline void ili9488_write16to24(uint16_t RGBCode)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData8((RGBCode & 0xF800) >> 8);
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	121b      	asrs	r3, r3, #8
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	f023 0307 	bic.w	r3, r3, #7
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fd24 	bl	8001934 <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x07E0) >> 3);
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	10db      	asrs	r3, r3, #3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	f023 0303 	bic.w	r3, r3, #3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 fd1b 	bl	8001934 <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x001F) << 3);
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 fd15 	bl	8001934 <LCD_IO_WriteData8>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <ili9488_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9488_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	80fb      	strh	r3, [r7, #6]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	80bb      	strh	r3, [r7, #4]
 8000f20:	4613      	mov	r3, r2
 8000f22:	807b      	strh	r3, [r7, #2]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8000f24:	202a      	movs	r0, #42	; 0x2a
 8000f26:	f000 fce5 	bl	80018f4 <LCD_IO_WriteCmd8>
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 fcfe 	bl	8001934 <LCD_IO_WriteData8>
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 fcf9 	bl	8001934 <LCD_IO_WriteData8>
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fcf2 	bl	8001934 <LCD_IO_WriteData8>
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 fced 	bl	8001934 <LCD_IO_WriteData8>
 8000f5a:	202b      	movs	r0, #43	; 0x2b
 8000f5c:	f000 fcca 	bl	80018f4 <LCD_IO_WriteCmd8>
 8000f60:	88bb      	ldrh	r3, [r7, #4]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 fce3 	bl	8001934 <LCD_IO_WriteData8>
 8000f6e:	88bb      	ldrh	r3, [r7, #4]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fcde 	bl	8001934 <LCD_IO_WriteData8>
 8000f78:	88bb      	ldrh	r3, [r7, #4]
 8000f7a:	0a1b      	lsrs	r3, r3, #8
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 fcd7 	bl	8001934 <LCD_IO_WriteData8>
 8000f86:	88bb      	ldrh	r3, [r7, #4]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 fcd2 	bl	8001934 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8000f90:	202c      	movs	r0, #44	; 0x2c
 8000f92:	f000 fcaf 	bl	80018f4 <LCD_IO_WriteCmd8>
  ili9488_write16to24(RGBCode);
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff99 	bl	8000ed0 <ili9488_write16to24>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_RAMWR); LCD_IO_WriteData16(RGBCode);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <ili9488_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9488_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	460a      	mov	r2, r1
 8000fb0:	80fb      	strh	r3, [r7, #6]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8000fb6:	202a      	movs	r0, #42	; 0x2a
 8000fb8:	f000 fc9c 	bl	80018f4 <LCD_IO_WriteCmd8>
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	0a1b      	lsrs	r3, r3, #8
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fcb5 	bl	8001934 <LCD_IO_WriteData8>
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 fcb0 	bl	8001934 <LCD_IO_WriteData8>
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	0a1b      	lsrs	r3, r3, #8
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 fca9 	bl	8001934 <LCD_IO_WriteData8>
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fca4 	bl	8001934 <LCD_IO_WriteData8>
 8000fec:	202b      	movs	r0, #43	; 0x2b
 8000fee:	f000 fc81 	bl	80018f4 <LCD_IO_WriteCmd8>
 8000ff2:	88bb      	ldrh	r3, [r7, #4]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fc9a 	bl	8001934 <LCD_IO_WriteData8>
 8001000:	88bb      	ldrh	r3, [r7, #4]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	4618      	mov	r0, r3
 8001006:	f000 fc95 	bl	8001934 <LCD_IO_WriteData8>
 800100a:	88bb      	ldrh	r3, [r7, #4]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	b29b      	uxth	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fc8e 	bl	8001934 <LCD_IO_WriteData8>
 8001018:	88bb      	ldrh	r3, [r7, #4]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fc89 	bl	8001934 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, &ret, 1, 1);
 8001022:	f107 010e 	add.w	r1, r7, #14
 8001026:	2301      	movs	r3, #1
 8001028:	2201      	movs	r2, #1
 800102a:	202e      	movs	r0, #46	; 0x2e
 800102c:	f000 fd3e 	bl	8001aac <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, &ret, 1, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
  return ret;
 8001030:	89fb      	ldrh	r3, [r7, #14]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <ili9488_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9488_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4604      	mov	r4, r0
 8001044:	4608      	mov	r0, r1
 8001046:	4611      	mov	r1, r2
 8001048:	461a      	mov	r2, r3
 800104a:	4623      	mov	r3, r4
 800104c:	80fb      	strh	r3, [r7, #6]
 800104e:	4603      	mov	r3, r0
 8001050:	80bb      	strh	r3, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	807b      	strh	r3, [r7, #2]
 8001056:	4613      	mov	r3, r2
 8001058:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  yStart = Ypos; yEnd = Ypos + Height - 1;
 800105a:	4a2a      	ldr	r2, [pc, #168]	; (8001104 <ili9488_SetDisplayWindow+0xc8>)
 800105c:	88bb      	ldrh	r3, [r7, #4]
 800105e:	8013      	strh	r3, [r2, #0]
 8001060:	88ba      	ldrh	r2, [r7, #4]
 8001062:	883b      	ldrh	r3, [r7, #0]
 8001064:	4413      	add	r3, r2
 8001066:	b29b      	uxth	r3, r3
 8001068:	3b01      	subs	r3, #1
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b26      	ldr	r3, [pc, #152]	; (8001108 <ili9488_SetDisplayWindow+0xcc>)
 800106e:	801a      	strh	r2, [r3, #0]
  LCD_IO_WriteCmd8(ILI9488_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8001070:	202a      	movs	r0, #42	; 0x2a
 8001072:	f000 fc3f 	bl	80018f4 <LCD_IO_WriteCmd8>
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	b29b      	uxth	r3, r3
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fc58 	bl	8001934 <LCD_IO_WriteData8>
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	4618      	mov	r0, r3
 800108a:	f000 fc53 	bl	8001934 <LCD_IO_WriteData8>
 800108e:	88fa      	ldrh	r2, [r7, #6]
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	4413      	add	r3, r2
 8001094:	3b01      	subs	r3, #1
 8001096:	121b      	asrs	r3, r3, #8
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fc4a 	bl	8001934 <LCD_IO_WriteData8>
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	887b      	ldrh	r3, [r7, #2]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4413      	add	r3, r2
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	3b01      	subs	r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 fc3f 	bl	8001934 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 80010b6:	202b      	movs	r0, #43	; 0x2b
 80010b8:	f000 fc1c 	bl	80018f4 <LCD_IO_WriteCmd8>
 80010bc:	88bb      	ldrh	r3, [r7, #4]
 80010be:	0a1b      	lsrs	r3, r3, #8
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fc35 	bl	8001934 <LCD_IO_WriteData8>
 80010ca:	88bb      	ldrh	r3, [r7, #4]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fc30 	bl	8001934 <LCD_IO_WriteData8>
 80010d4:	88ba      	ldrh	r2, [r7, #4]
 80010d6:	883b      	ldrh	r3, [r7, #0]
 80010d8:	4413      	add	r3, r2
 80010da:	3b01      	subs	r3, #1
 80010dc:	121b      	asrs	r3, r3, #8
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fc27 	bl	8001934 <LCD_IO_WriteData8>
 80010e6:	88bb      	ldrh	r3, [r7, #4]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	883b      	ldrh	r3, [r7, #0]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4413      	add	r3, r2
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	3b01      	subs	r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fc1c 	bl	8001934 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - Height - Ypos); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - 1 - Ypos);
  #endif
  #endif

  ILI9488_LCDMUTEX_POP();
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bd90      	pop	{r4, r7, pc}
 8001104:	200002e2 	.word	0x200002e2
 8001108:	200002e4 	.word	0x200002e4

0800110c <ili9488_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b085      	sub	sp, #20
 8001110:	af02      	add	r7, sp, #8
 8001112:	4604      	mov	r4, r0
 8001114:	4608      	mov	r0, r1
 8001116:	4611      	mov	r1, r2
 8001118:	461a      	mov	r2, r3
 800111a:	4623      	mov	r3, r4
 800111c:	80fb      	strh	r3, [r7, #6]
 800111e:	4603      	mov	r3, r0
 8001120:	80bb      	strh	r3, [r7, #4]
 8001122:	460b      	mov	r3, r1
 8001124:	807b      	strh	r3, [r7, #2]
 8001126:	4613      	mov	r3, r2
 8001128:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, Length, 1, RGBCode);
 800112a:	883a      	ldrh	r2, [r7, #0]
 800112c:	8879      	ldrh	r1, [r7, #2]
 800112e:	88b8      	ldrh	r0, [r7, #4]
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	f000 f820 	bl	800117a <ili9488_FillRect>
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bd90      	pop	{r4, r7, pc}

08001142 <ili9488_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001142:	b590      	push	{r4, r7, lr}
 8001144:	b085      	sub	sp, #20
 8001146:	af02      	add	r7, sp, #8
 8001148:	4604      	mov	r4, r0
 800114a:	4608      	mov	r0, r1
 800114c:	4611      	mov	r1, r2
 800114e:	461a      	mov	r2, r3
 8001150:	4623      	mov	r3, r4
 8001152:	80fb      	strh	r3, [r7, #6]
 8001154:	4603      	mov	r3, r0
 8001156:	80bb      	strh	r3, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
 800115c:	4613      	mov	r3, r2
 800115e:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, 1, Length, RGBCode);
 8001160:	883a      	ldrh	r2, [r7, #0]
 8001162:	8879      	ldrh	r1, [r7, #2]
 8001164:	88b8      	ldrh	r0, [r7, #4]
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	4613      	mov	r3, r2
 800116c:	2201      	movs	r2, #1
 800116e:	f000 f804 	bl	800117a <ili9488_FillRect>
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bd90      	pop	{r4, r7, pc}

0800117a <ili9488_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9488_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 800117a:	b590      	push	{r4, r7, lr}
 800117c:	b085      	sub	sp, #20
 800117e:	af00      	add	r7, sp, #0
 8001180:	4604      	mov	r4, r0
 8001182:	4608      	mov	r0, r1
 8001184:	4611      	mov	r1, r2
 8001186:	461a      	mov	r2, r3
 8001188:	4623      	mov	r3, r4
 800118a:	80fb      	strh	r3, [r7, #6]
 800118c:	4603      	mov	r3, r0
 800118e:	80bb      	strh	r3, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
 8001194:	4613      	mov	r3, r2
 8001196:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8001198:	883b      	ldrh	r3, [r7, #0]
 800119a:	887a      	ldrh	r2, [r7, #2]
 800119c:	88b9      	ldrh	r1, [r7, #4]
 800119e:	88f8      	ldrh	r0, [r7, #6]
 80011a0:	f7ff ff4c 	bl	800103c <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 80011a4:	202c      	movs	r0, #44	; 0x2c
 80011a6:	f000 fba5 	bl	80018f4 <LCD_IO_WriteCmd8>
  uint32_t XYsize = Xsize * Ysize;
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	883a      	ldrh	r2, [r7, #0]
 80011ae:	fb02 f303 	mul.w	r3, r2, r3
 80011b2:	60fb      	str	r3, [r7, #12]
  while(XYsize--)
 80011b4:	e003      	b.n	80011be <ili9488_FillRect+0x44>
    ili9488_write16to24(RGBCode);
 80011b6:	8c3b      	ldrh	r3, [r7, #32]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fe89 	bl	8000ed0 <ili9488_write16to24>
  while(XYsize--)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	1e5a      	subs	r2, r3, #1
 80011c2:	60fa      	str	r2, [r7, #12]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1f6      	bne.n	80011b6 <ili9488_FillRect+0x3c>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8DataFill16(ILI9488_RAMWR, RGBCode, Xsize * Ysize);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd90      	pop	{r4, r7, pc}

080011d0 <ili9488_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9488_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	603a      	str	r2, [r7, #0]
 80011da:	80fb      	strh	r3, [r7, #6]
 80011dc:	460b      	mov	r3, r1
 80011de:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  /* Read bitmap size */
  Ypos += pbmp[22] + (pbmp[23] << 8) - 1;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	3316      	adds	r3, #22
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	3317      	adds	r3, #23
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	4413      	add	r3, r2
 80011fe:	b29a      	uxth	r2, r3
 8001200:	88bb      	ldrh	r3, [r7, #4]
 8001202:	4413      	add	r3, r2
 8001204:	b29b      	uxth	r3, r3
 8001206:	3b01      	subs	r3, #1
 8001208:	80bb      	strh	r3, [r7, #4]
  size = *(volatile uint16_t *) (pbmp + 2);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	3302      	adds	r3, #2
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	b29b      	uxth	r3, r3
 8001212:	60fb      	str	r3, [r7, #12]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	3304      	adds	r3, #4
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	b29b      	uxth	r3, r3
 800121c:	041b      	lsls	r3, r3, #16
 800121e:	461a      	mov	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	330a      	adds	r3, #10
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	b29b      	uxth	r3, r3
 800122e:	60bb      	str	r3, [r7, #8]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	330c      	adds	r3, #12
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	b29b      	uxth	r3, r3
 8001238:	041b      	lsls	r3, r3, #16
 800123a:	461a      	mov	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4313      	orrs	r3, r2
 8001240:	60bb      	str	r3, [r7, #8]
  size = (size - index)/2;
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	085b      	lsrs	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	603b      	str	r3, [r7, #0]

  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_UP);
 8001254:	2036      	movs	r0, #54	; 0x36
 8001256:	f000 fb4d 	bl	80018f4 <LCD_IO_WriteCmd8>
 800125a:	20c8      	movs	r0, #200	; 0xc8
 800125c:	f000 fb6a 	bl	8001934 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yEnd); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yStart);
 8001260:	202b      	movs	r0, #43	; 0x2b
 8001262:	f000 fb47 	bl	80018f4 <LCD_IO_WriteCmd8>
 8001266:	4b21      	ldr	r3, [pc, #132]	; (80012ec <ili9488_DrawBitmap+0x11c>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 800126e:	3301      	adds	r3, #1
 8001270:	121b      	asrs	r3, r3, #8
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4618      	mov	r0, r3
 8001276:	f000 fb5d 	bl	8001934 <LCD_IO_WriteData8>
 800127a:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <ili9488_DrawBitmap+0x11c>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	f06f 0320 	mvn.w	r3, #32
 8001284:	1a9b      	subs	r3, r3, r2
 8001286:	b2db      	uxtb	r3, r3
 8001288:	4618      	mov	r0, r3
 800128a:	f000 fb53 	bl	8001934 <LCD_IO_WriteData8>
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <ili9488_DrawBitmap+0x120>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 8001296:	3301      	adds	r3, #1
 8001298:	121b      	asrs	r3, r3, #8
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f000 fb49 	bl	8001934 <LCD_IO_WriteData8>
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <ili9488_DrawBitmap+0x120>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	f06f 0320 	mvn.w	r3, #32
 80012ac:	1a9b      	subs	r3, r3, r2
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fb3f 	bl	8001934 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 80012b6:	202c      	movs	r0, #44	; 0x2c
 80012b8:	f000 fb1c 	bl	80018f4 <LCD_IO_WriteCmd8>
  while(size--)
 80012bc:	e007      	b.n	80012ce <ili9488_DrawBitmap+0xfe>
  {
    ili9488_write16to24(*(uint16_t *)pbmp);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fe04 	bl	8000ed0 <ili9488_write16to24>
    pbmp+= 2;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	3302      	adds	r3, #2
 80012cc:	603b      	str	r3, [r7, #0]
  while(size--)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1e5a      	subs	r2, r3, #1
 80012d2:	60fa      	str	r2, [r7, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f2      	bne.n	80012be <ili9488_DrawBitmap+0xee>
  }
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 80012d8:	2036      	movs	r0, #54	; 0x36
 80012da:	f000 fb0b 	bl	80018f4 <LCD_IO_WriteCmd8>
 80012de:	2048      	movs	r0, #72	; 0x48
 80012e0:	f000 fb28 	bl	8001934 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, (uint16_t *)pbmp, size);
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
  #endif

  ILI9488_LCDMUTEX_POP();
}
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200002e4 	.word	0x200002e4
 80012f0:	200002e2 	.word	0x200002e2

080012f4 <ili9488_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4604      	mov	r4, r0
 80012fc:	4608      	mov	r0, r1
 80012fe:	4611      	mov	r1, r2
 8001300:	461a      	mov	r2, r3
 8001302:	4623      	mov	r3, r4
 8001304:	80fb      	strh	r3, [r7, #6]
 8001306:	4603      	mov	r3, r0
 8001308:	80bb      	strh	r3, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	807b      	strh	r3, [r7, #2]
 800130e:	4613      	mov	r3, r2
 8001310:	803b      	strh	r3, [r7, #0]
  uint32_t size;

  size = (Xsize * Ysize);
 8001312:	887b      	ldrh	r3, [r7, #2]
 8001314:	883a      	ldrh	r2, [r7, #0]
 8001316:	fb02 f303 	mul.w	r3, r2, r3
 800131a:	60fb      	str	r3, [r7, #12]

  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 800131c:	883b      	ldrh	r3, [r7, #0]
 800131e:	887a      	ldrh	r2, [r7, #2]
 8001320:	88b9      	ldrh	r1, [r7, #4]
 8001322:	88f8      	ldrh	r0, [r7, #6]
 8001324:	f7ff fe8a 	bl	800103c <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8001328:	202c      	movs	r0, #44	; 0x2c
 800132a:	f000 fae3 	bl	80018f4 <LCD_IO_WriteCmd8>
  while(size--)
 800132e:	e007      	b.n	8001340 <ili9488_DrawRGBImage+0x4c>
  {
    ili9488_write16to24(*pdata);
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fdcb 	bl	8000ed0 <ili9488_write16to24>
    pdata++;
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	3302      	adds	r3, #2
 800133e:	623b      	str	r3, [r7, #32]
  while(size--)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	1e5a      	subs	r2, r3, #1
 8001344:	60fa      	str	r2, [r7, #12]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f2      	bne.n	8001330 <ili9488_DrawRGBImage+0x3c>
  }
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, pdata, size);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 800134a:	bf00      	nop
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}

08001352 <ili9488_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 8001352:	b590      	push	{r4, r7, lr}
 8001354:	b085      	sub	sp, #20
 8001356:	af00      	add	r7, sp, #0
 8001358:	4604      	mov	r4, r0
 800135a:	4608      	mov	r0, r1
 800135c:	4611      	mov	r1, r2
 800135e:	461a      	mov	r2, r3
 8001360:	4623      	mov	r3, r4
 8001362:	80fb      	strh	r3, [r7, #6]
 8001364:	4603      	mov	r3, r0
 8001366:	80bb      	strh	r3, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]
 800136c:	4613      	mov	r3, r2
 800136e:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  size = (Xsize * Ysize);
 8001374:	887b      	ldrh	r3, [r7, #2]
 8001376:	883a      	ldrh	r2, [r7, #0]
 8001378:	fb02 f303 	mul.w	r3, r2, r3
 800137c:	60fb      	str	r3, [r7, #12]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 800137e:	883b      	ldrh	r3, [r7, #0]
 8001380:	887a      	ldrh	r2, [r7, #2]
 8001382:	88b9      	ldrh	r1, [r7, #4]
 8001384:	88f8      	ldrh	r0, [r7, #6]
 8001386:	f7ff fe59 	bl	800103c <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, pdata, size, 1);
 800138a:	2301      	movs	r3, #1
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	6a39      	ldr	r1, [r7, #32]
 8001390:	202e      	movs	r0, #46	; 0x2e
 8001392:	f000 fb8b 	bl	8001aac <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, pdata, size, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	bd90      	pop	{r4, r7, pc}
	...

080013a0 <ili9488_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9488_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	80fb      	strh	r3, [r7, #6]
 80013aa:	460b      	mov	r3, r1
 80013ac:	80bb      	strh	r3, [r7, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	807b      	strh	r3, [r7, #2]
  static uint16_t scrparam[4] = {0, 0, 0, 0};
  ILI9488_LCDMUTEX_PUSH();
  #if (ILI9488_ORIENTATION == 0)
  if((TopFix != scrparam[1]) || (BottonFix != scrparam[3]))
 80013b2:	4b2a      	ldr	r3, [pc, #168]	; (800145c <ili9488_Scroll+0xbc>)
 80013b4:	885b      	ldrh	r3, [r3, #2]
 80013b6:	88ba      	ldrh	r2, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d104      	bne.n	80013c6 <ili9488_Scroll+0x26>
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <ili9488_Scroll+0xbc>)
 80013be:	88db      	ldrh	r3, [r3, #6]
 80013c0:	887a      	ldrh	r2, [r7, #2]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d015      	beq.n	80013f2 <ili9488_Scroll+0x52>
  {
    scrparam[1] = TopFix;
 80013c6:	4a25      	ldr	r2, [pc, #148]	; (800145c <ili9488_Scroll+0xbc>)
 80013c8:	88bb      	ldrh	r3, [r7, #4]
 80013ca:	8053      	strh	r3, [r2, #2]
    scrparam[3] = BottonFix;
 80013cc:	4a23      	ldr	r2, [pc, #140]	; (800145c <ili9488_Scroll+0xbc>)
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	80d3      	strh	r3, [r2, #6]
    scrparam[2] = ILI9488_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 80013d2:	88bb      	ldrh	r3, [r7, #4]
 80013d4:	425b      	negs	r3, r3
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	887b      	ldrh	r3, [r7, #2]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	b29b      	uxth	r3, r3
 80013de:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <ili9488_Scroll+0xbc>)
 80013e6:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9488_VSCRDEF, &scrparam[1], 3);
 80013e8:	2203      	movs	r2, #3
 80013ea:	491d      	ldr	r1, [pc, #116]	; (8001460 <ili9488_Scroll+0xc0>)
 80013ec:	2033      	movs	r0, #51	; 0x33
 80013ee:	f000 fb0d 	bl	8001a0c <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll = (0 - Scroll) % scrparam[2];
 80013f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f6:	425b      	negs	r3, r3
 80013f8:	4a18      	ldr	r2, [pc, #96]	; (800145c <ili9488_Scroll+0xbc>)
 80013fa:	8892      	ldrh	r2, [r2, #4]
 80013fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8001400:	fb02 f201 	mul.w	r2, r2, r1
 8001404:	1a9b      	subs	r3, r3, r2
 8001406:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8001408:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800140c:	2b00      	cmp	r3, #0
 800140e:	da0a      	bge.n	8001426 <ili9488_Scroll+0x86>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <ili9488_Scroll+0xbc>)
 8001412:	889a      	ldrh	r2, [r3, #4]
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	4413      	add	r3, r2
 8001418:	b29a      	uxth	r2, r3
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <ili9488_Scroll+0xbc>)
 800141c:	885b      	ldrh	r3, [r3, #2]
 800141e:	4413      	add	r3, r2
 8001420:	b29b      	uxth	r3, r3
 8001422:	80fb      	strh	r3, [r7, #6]
 8001424:	e005      	b.n	8001432 <ili9488_Scroll+0x92>
  else
    Scroll = Scroll + scrparam[1];
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <ili9488_Scroll+0xbc>)
 8001428:	885a      	ldrh	r2, [r3, #2]
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	4413      	add	r3, r2
 800142e:	b29b      	uxth	r3, r3
 8001430:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #endif
  if(Scroll != scrparam[0])
 8001432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001436:	4a09      	ldr	r2, [pc, #36]	; (800145c <ili9488_Scroll+0xbc>)
 8001438:	8812      	ldrh	r2, [r2, #0]
 800143a:	4293      	cmp	r3, r2
 800143c:	d009      	beq.n	8001452 <ili9488_Scroll+0xb2>
  {
    scrparam[0] = Scroll;
 800143e:	88fa      	ldrh	r2, [r7, #6]
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <ili9488_Scroll+0xbc>)
 8001442:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9488_VSCRSADD, scrparam[0], 1);
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <ili9488_Scroll+0xbc>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	2201      	movs	r2, #1
 800144a:	4619      	mov	r1, r3
 800144c:	2037      	movs	r0, #55	; 0x37
 800144e:	f000 fa91 	bl	8001974 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9488_LCDMUTEX_POP();
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200002e8 	.word	0x200002e8
 8001460:	200002ea 	.word	0x200002ea

08001464 <LcdDirRead>:

#elif   LCD_SPI_MODE == 2
/* Fullduplex SPI : the direction is fix */
extern inline void LcdDirRead(uint32_t d);
inline void LcdDirRead(uint32_t d)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 800146c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001476:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800147a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800147e:	6013      	str	r3, [r2, #0]
  while(d--)
 8001480:	e00c      	b.n	800149c <LcdDirRead+0x38>
  {
    GPIOX_CLR(LCD_SCK);
 8001482:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001486:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800148a:	619a      	str	r2, [r3, #24]
    LCD_READ_DELAY;
 800148c:	2001      	movs	r0, #1
 800148e:	f000 f945 	bl	800171c <LCD_IO_Delay>
    GPIOX_CLR(LCD_SCK);
 8001492:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001496:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800149a:	619a      	str	r2, [r3, #24]
  while(d--)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	1e5a      	subs	r2, r3, #1
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1ed      	bne.n	8001482 <LcdDirRead+0x1e>
  }
  GPIOX_MODER(MODE_ALTER, LCD_SCK);
 80014a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80014b0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014b8:	6013      	str	r3, [r2, #0]
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_READ << SPI_CR1_BR_Pos);
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <LcdDirRead+0x70>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80014c2:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <LcdDirRead+0x70>)
 80014c4:	f043 0320 	orr.w	r3, r3, #32
 80014c8:	6013      	str	r3, [r2, #0]
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40013000 	.word	0x40013000

080014d8 <LcdDirWrite>:

extern inline void LcdDirWrite(void);
inline void LcdDirWrite(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <LcdDirWrite+0x20>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <LcdDirWrite+0x20>)
 80014e6:	f043 0318 	orr.w	r3, r3, #24
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40013000 	.word	0x40013000

080014fc <LcdWrite8>:
#endif

//-----------------------------------------------------------------------------
extern inline void LcdWrite8(uint8_t d8);
inline void LcdWrite8(uint8_t d8)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  *(volatile uint8_t *)&SPIX->DR = d8;
 8001506:	4a07      	ldr	r2, [pc, #28]	; (8001524 <LcdWrite8+0x28>)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	7013      	strb	r3, [r2, #0]
  LCD_IO_Delay(0);
 800150c:	2000      	movs	r0, #0
 800150e:	f000 f905 	bl	800171c <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8001512:	bf00      	nop
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <LcdWrite8+0x2c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1fb      	bne.n	8001514 <LcdWrite8+0x18>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	4001300c 	.word	0x4001300c
 8001528:	4226011c 	.word	0x4226011c

0800152c <LcdRead8>:

//-----------------------------------------------------------------------------
extern inline uint8_t LcdRead8(void);
inline uint8_t LcdRead8(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
  uint8_t d8;
  while(!BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos));
 8001532:	bf00      	nop
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <LcdRead8+0x28>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0fb      	beq.n	8001534 <LcdRead8+0x8>
  LCD_IO_Delay(0);
 800153c:	2000      	movs	r0, #0
 800153e:	f000 f8ed 	bl	800171c <LCD_IO_Delay>
  d8 = *(uint8_t *)&SPIX->DR;
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <LcdRead8+0x2c>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
  return d8;
 8001548:	79fb      	ldrb	r3, [r7, #7]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	42260100 	.word	0x42260100
 8001558:	4001300c 	.word	0x4001300c

0800155c <LcdCmdWrite8>:

//-----------------------------------------------------------------------------
extern inline void LcdCmdWrite8(uint8_t cmd8);
inline void LcdCmdWrite8(uint8_t cmd8)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  LCD_RS_CMD;
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <LcdCmdWrite8+0x38>)
 8001568:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800156c:	619a      	str	r2, [r3, #24]
  *(volatile uint8_t *)&SPIX->DR = cmd8;
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <LcdCmdWrite8+0x3c>)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	7013      	strb	r3, [r2, #0]
  LCD_IO_Delay(0);
 8001574:	2000      	movs	r0, #0
 8001576:	f000 f8d1 	bl	800171c <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 800157a:	bf00      	nop
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <LcdCmdWrite8+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1fb      	bne.n	800157c <LcdCmdWrite8+0x20>
  LCD_RS_DATA;
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <LcdCmdWrite8+0x38>)
 8001586:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800158a:	619a      	str	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	48000800 	.word	0x48000800
 8001598:	4001300c 	.word	0x4001300c
 800159c:	4226011c 	.word	0x4226011c

080015a0 <LcdWrite16>:

//-----------------------------------------------------------------------------
extern inline void LcdWrite16(uint16_t d16);
inline void LcdWrite16(uint16_t d16)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	80fb      	strh	r3, [r7, #6]
  SPIX->DR = d16;
 80015aa:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <LcdWrite16+0x28>)
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(0);
 80015b0:	2000      	movs	r0, #0
 80015b2:	f000 f8b3 	bl	800171c <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 80015b6:	bf00      	nop
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <LcdWrite16+0x2c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1fb      	bne.n	80015b8 <LcdWrite16+0x18>
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40013000 	.word	0x40013000
 80015cc:	4226011c 	.word	0x4226011c

080015d0 <LCD_IO_WriteMultiData8>:
#if DMANUM(LCD_DMA_TX) == 0 || LCD_SPI == 0

/* SPI TX no DMA */

void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  while(Size--)
 80015dc:	e00a      	b.n	80015f4 <LCD_IO_WriteMultiData8+0x24>
  {
    LcdWrite8(*pData);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff8a 	bl	80014fc <LcdWrite8>
    if(dinc)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <LCD_IO_WriteMultiData8+0x24>
      pData++;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3301      	adds	r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
  while(Size--)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	1e5a      	subs	r2, r3, #1
 80015f8:	60ba      	str	r2, [r7, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1ef      	bne.n	80015de <LCD_IO_WriteMultiData8+0xe>
  }
  LCD_CS_OFF;
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <LCD_IO_WriteMultiData8+0x40>)
 8001600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001604:	619a      	str	r2, [r3, #24]
}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	48000800 	.word	0x48000800

08001614 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  while(Size--)
 8001620:	e00a      	b.n	8001638 <LCD_IO_WriteMultiData16+0x24>
  {
    LcdWrite16(*pData);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ffba 	bl	80015a0 <LcdWrite16>
    if(dinc)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <LCD_IO_WriteMultiData16+0x24>
      pData++;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	3302      	adds	r3, #2
 8001636:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1e5a      	subs	r2, r3, #1
 800163c:	60ba      	str	r2, [r7, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1ef      	bne.n	8001622 <LCD_IO_WriteMultiData16+0xe>
  }
  LCD_CS_OFF;
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <LCD_IO_WriteMultiData16+0x40>)
 8001644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001648:	619a      	str	r2, [r3, #24]
}
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	48000800 	.word	0x48000800

08001658 <LCD_IO_ReadMultiData8>:
//-----------------------------------------------------------------------------
#if LCD_SPI_MODE != 0
#if DMANUM(LCD_DMA_RX) == 0 || LCD_SPI == 0

void LCD_IO_ReadMultiData8(uint8_t * pData, uint32_t Size)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint8_t d8;
  while(Size--)
 8001662:	e009      	b.n	8001678 <LCD_IO_ReadMultiData8+0x20>
  {
    d8 = LcdRead8();
 8001664:	f7ff ff62 	bl	800152c <LcdRead8>
 8001668:	4603      	mov	r3, r0
 800166a:	73fb      	strb	r3, [r7, #15]
    *pData = d8;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	701a      	strb	r2, [r3, #0]
    pData++;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3301      	adds	r3, #1
 8001676:	607b      	str	r3, [r7, #4]
  while(Size--)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	1e5a      	subs	r2, r3, #1
 800167c:	603a      	str	r2, [r7, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <LCD_IO_ReadMultiData8+0xc>
  }
  LCD_CS_OFF;
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <LCD_IO_ReadMultiData8+0x40>)
 8001684:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001688:	619a      	str	r2, [r3, #24]
  LcdDirWrite();
 800168a:	f7ff ff25 	bl	80014d8 <LcdDirWrite>
}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	48000800 	.word	0x48000800

0800169c <LCD_IO_ReadMultiData16to24>:
  LcdDirWrite();
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData16to24(uint16_t * pData, uint32_t Size)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint8_t  rgb888[3];
  while(Size--)
 80016a6:	e027      	b.n	80016f8 <LCD_IO_ReadMultiData16to24+0x5c>
  {
    rgb888[0] = LcdRead8();
 80016a8:	f7ff ff40 	bl	800152c <LcdRead8>
 80016ac:	4603      	mov	r3, r0
 80016ae:	733b      	strb	r3, [r7, #12]
    rgb888[1] = LcdRead8();
 80016b0:	f7ff ff3c 	bl	800152c <LcdRead8>
 80016b4:	4603      	mov	r3, r0
 80016b6:	737b      	strb	r3, [r7, #13]
    rgb888[2] = LcdRead8();
 80016b8:	f7ff ff38 	bl	800152c <LcdRead8>
 80016bc:	4603      	mov	r3, r0
 80016be:	73bb      	strb	r3, [r7, #14]
    *pData = (rgb888[0] & 0XF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3;
 80016c0:	7b3b      	ldrb	r3, [r7, #12]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016ca:	f023 0307 	bic.w	r3, r3, #7
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	7b7b      	ldrb	r3, [r7, #13]
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80016da:	b21b      	sxth	r3, r3
 80016dc:	4313      	orrs	r3, r2
 80016de:	b21a      	sxth	r2, r3
 80016e0:	7bbb      	ldrb	r3, [r7, #14]
 80016e2:	08db      	lsrs	r3, r3, #3
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	801a      	strh	r2, [r3, #0]
    pData++;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3302      	adds	r3, #2
 80016f6:	607b      	str	r3, [r7, #4]
  while(Size--)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	1e5a      	subs	r2, r3, #1
 80016fc:	603a      	str	r2, [r7, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1d2      	bne.n	80016a8 <LCD_IO_ReadMultiData16to24+0xc>
  }
  LCD_CS_OFF;
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <LCD_IO_ReadMultiData16to24+0x7c>)
 8001704:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001708:	619a      	str	r2, [r3, #24]
  LcdDirWrite();
 800170a:	f7ff fee5 	bl	80014d8 <LcdDirWrite>
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	48000800 	.word	0x48000800

0800171c <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  while(c--);
 8001724:	bf00      	nop
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	1e5a      	subs	r2, r3, #1
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1fa      	bne.n	8001726 <LCD_IO_Delay+0xa>
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f002 f84d 	bl	80037e4 <HAL_Delay>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  if(Bl)
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <LCD_IO_Bl_OnOff+0x18>
    #if LCD_BLON == 1
    GPIOX_SET(LCD_BL);
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <LCD_IO_Bl_OnOff+0x2c>)
 8001766:	2204      	movs	r2, #4
 8001768:	619a      	str	r2, [r3, #24]
    GPIOX_CLR(LCD_BL);
    #else
    GPIOX_SET(LCD_BL);
    #endif
  #endif
}
 800176a:	e003      	b.n	8001774 <LCD_IO_Bl_OnOff+0x20>
    GPIOX_CLR(LCD_BL);
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <LCD_IO_Bl_OnOff+0x2c>)
 800176e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001772:	619a      	str	r2, [r3, #24]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	48000800 	.word	0x48000800

08001784 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHBENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8001788:	4b56      	ldr	r3, [pc, #344]	; (80018e4 <LCD_IO_Init+0x160>)
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	4a55      	ldr	r2, [pc, #340]	; (80018e4 <LCD_IO_Init+0x160>)
 800178e:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8001792:	6153      	str	r3, [r2, #20]
                 GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_MISO |
                 DMA1_CLOCK_TX | DMA1_CLOCK_RX;

  /* MISO = input in full duplex mode */
  #if LCD_SPI_MODE == 2                 // Full duplex
  GPIOX_MODER(MODE_DIGITAL_INPUT, LCD_MISO);
 8001794:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800179e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017a2:	6013      	str	r3, [r2, #0]
  #endif

  /* Backlight = output, light on */
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_BL);
 80017a4:	4b50      	ldr	r3, [pc, #320]	; (80018e8 <LCD_IO_Init+0x164>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80017ac:	4a4e      	ldr	r2, [pc, #312]	; (80018e8 <LCD_IO_Init+0x164>)
 80017ae:	f043 0310 	orr.w	r3, r3, #16
 80017b2:	6013      	str	r3, [r2, #0]
  LCD_IO_Bl_OnOff(1);
 80017b4:	2001      	movs	r0, #1
 80017b6:	f7ff ffcd 	bl	8001754 <LCD_IO_Bl_OnOff>
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 80017ba:	4b4b      	ldr	r3, [pc, #300]	; (80018e8 <LCD_IO_Init+0x164>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 0303 	bic.w	r3, r3, #3
 80017c2:	4a49      	ldr	r2, [pc, #292]	; (80018e8 <LCD_IO_Init+0x164>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <LCD_IO_Init+0x164>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	4a46      	ldr	r2, [pc, #280]	; (80018e8 <LCD_IO_Init+0x164>)
 80017d0:	f023 0303 	bic.w	r3, r3, #3
 80017d4:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 80017d6:	4b44      	ldr	r3, [pc, #272]	; (80018e8 <LCD_IO_Init+0x164>)
 80017d8:	2201      	movs	r2, #1
 80017da:	619a      	str	r2, [r3, #24]
  #endif

  LCD_RS_DATA;
 80017dc:	4b42      	ldr	r3, [pc, #264]	; (80018e8 <LCD_IO_Init+0x164>)
 80017de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017e2:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 80017e4:	4b40      	ldr	r3, [pc, #256]	; (80018e8 <LCD_IO_Init+0x164>)
 80017e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ea:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 80017ec:	4b3e      	ldr	r3, [pc, #248]	; (80018e8 <LCD_IO_Init+0x164>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80017f4:	4a3c      	ldr	r2, [pc, #240]	; (80018e8 <LCD_IO_Init+0x164>)
 80017f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017fa:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 80017fc:	4b3a      	ldr	r3, [pc, #232]	; (80018e8 <LCD_IO_Init+0x164>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001804:	4a38      	ldr	r2, [pc, #224]	; (80018e8 <LCD_IO_Init+0x164>)
 8001806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800180a:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 800180c:	4b36      	ldr	r3, [pc, #216]	; (80018e8 <LCD_IO_Init+0x164>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4a35      	ldr	r2, [pc, #212]	; (80018e8 <LCD_IO_Init+0x164>)
 8001812:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8001816:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8001818:	4b33      	ldr	r3, [pc, #204]	; (80018e8 <LCD_IO_Init+0x164>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4a32      	ldr	r2, [pc, #200]	; (80018e8 <LCD_IO_Init+0x164>)
 800181e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001822:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 8001824:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800182e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001832:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 8001834:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800183e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001842:	6093      	str	r3, [r2, #8]
  GPIOX_SET(LCD_SCK);                   // SCK = 1
 8001844:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001848:	2220      	movs	r2, #32
 800184a:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);

  #else

  /* Hardware SPI */
  LCD_SPI_RCC_EN;
 800184c:	4b27      	ldr	r3, [pc, #156]	; (80018ec <LCD_IO_Init+0x168>)
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]

  GPIOX_AFR(LCD_SPI_AFR, LCD_SCK);
 8001852:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800185c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001860:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8001864:	6213      	str	r3, [r2, #32]
  GPIOX_MODER(MODE_ALTER, LCD_SCK);
 8001866:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001870:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001874:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001878:	6013      	str	r3, [r2, #0]
  GPIOX_AFR(LCD_SPI_AFR, LCD_MOSI);
 800187a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001884:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001888:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 800188c:	6213      	str	r3, [r2, #32]
  GPIOX_MODER(MODE_ALTER, LCD_MOSI);
 800188e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001898:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800189c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018a0:	6013      	str	r3, [r2, #0]
  #if LCD_SPI_MODE == 1
  /* Half duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
  #else // #if LCD_SPI_MODE == 1
  /* TX or full duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <LCD_IO_Init+0x16c>)
 80018a4:	f240 321f 	movw	r2, #799	; 0x31f
 80018a8:	601a      	str	r2, [r3, #0]
  #endif // #else LCD_SPI_MODE == 1
  SPIX->CR2 = (7 << SPI_CR2_DS_Pos);
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <LCD_IO_Init+0x16c>)
 80018ac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018b0:	605a      	str	r2, [r3, #4]
  SPIX->CR1 |= SPI_CR1_SPE;
 80018b2:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <LCD_IO_Init+0x16c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <LCD_IO_Init+0x16c>)
 80018b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018bc:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 80018be:	200a      	movs	r0, #10
 80018c0:	f7ff ff3c 	bl	800173c <LCD_Delay>
  LCD_RST_ON;
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <LCD_IO_Init+0x164>)
 80018c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018ca:	619a      	str	r2, [r3, #24]
  LCD_Delay(10);
 80018cc:	200a      	movs	r0, #10
 80018ce:	f7ff ff35 	bl	800173c <LCD_Delay>
  LCD_RST_OFF;
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <LCD_IO_Init+0x164>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	619a      	str	r2, [r3, #24]
  #endif
  LCD_Delay(10);
 80018d8:	200a      	movs	r0, #10
 80018da:	f7ff ff2f 	bl	800173c <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	48000800 	.word	0x48000800
 80018ec:	42420330 	.word	0x42420330
 80018f0:	40013000 	.word	0x40013000

080018f4 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <LCD_IO_WriteCmd8+0x38>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <LCD_IO_WriteCmd8+0x38>)
 8001904:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001908:	6053      	str	r3, [r2, #4]
  LCD_CS_ON;
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <LCD_IO_WriteCmd8+0x3c>)
 800190c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001910:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fe21 	bl	800155c <LcdCmdWrite8>
  LCD_CS_OFF;
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <LCD_IO_WriteCmd8+0x3c>)
 800191c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001920:	619a      	str	r2, [r3, #24]
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40013000 	.word	0x40013000
 8001930:	48000800 	.word	0x48000800

08001934 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <LCD_IO_WriteData8+0x38>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <LCD_IO_WriteData8+0x38>)
 8001944:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001948:	6053      	str	r3, [r2, #4]
  LCD_CS_ON;
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <LCD_IO_WriteData8+0x3c>)
 800194c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001950:	619a      	str	r2, [r3, #24]
  LcdWrite8(Data);
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fdd1 	bl	80014fc <LcdWrite8>
  LCD_CS_OFF;
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <LCD_IO_WriteData8+0x3c>)
 800195c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001960:	619a      	str	r2, [r3, #24]
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40013000 	.word	0x40013000
 8001970:	48000800 	.word	0x48000800

08001974 <LCD_IO_WriteCmd8DataFill16>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	603a      	str	r2, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
 8001980:	460b      	mov	r3, r1
 8001982:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  LcdSpiMode8();
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <LCD_IO_WriteCmd8DataFill16+0x4c>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <LCD_IO_WriteCmd8DataFill16+0x4c>)
 800198a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800198e:	6053      	str	r3, [r2, #4]
  LCD_CS_ON;
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <LCD_IO_WriteCmd8DataFill16+0x50>)
 8001992:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001996:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fdde 	bl	800155c <LcdCmdWrite8>
  LcdSpiMode16();
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <LCD_IO_WriteCmd8DataFill16+0x4c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <LCD_IO_WriteCmd8DataFill16+0x4c>)
 80019a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019aa:	6053      	str	r3, [r2, #4]
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	2200      	movs	r2, #0
 80019b0:	6839      	ldr	r1, [r7, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fe2e 	bl	8001614 <LCD_IO_WriteMultiData16>
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40013000 	.word	0x40013000
 80019c4:	48000800 	.word	0x48000800

080019c8 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 80019dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019e0:	6053      	str	r3, [r2, #4]
  LCD_CS_ON;
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 80019e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019e8:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fdb5 	bl	800155c <LcdCmdWrite8>
  LCD_IO_WriteMultiData8(pData, Size, 1);
 80019f2:	2201      	movs	r2, #1
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	68b8      	ldr	r0, [r7, #8]
 80019f8:	f7ff fdea 	bl	80015d0 <LCD_IO_WriteMultiData8>
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40013000 	.word	0x40013000
 8001a08:	48000800 	.word	0x48000800

08001a0c <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
 8001a18:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <LCD_IO_WriteCmd8MultipleData16+0x48>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4a0d      	ldr	r2, [pc, #52]	; (8001a54 <LCD_IO_WriteCmd8MultipleData16+0x48>)
 8001a20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a24:	6053      	str	r3, [r2, #4]
  LCD_CS_ON;
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <LCD_IO_WriteCmd8MultipleData16+0x4c>)
 8001a28:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a2c:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fd93 	bl	800155c <LcdCmdWrite8>
  LcdSpiMode16();
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <LCD_IO_WriteCmd8MultipleData16+0x48>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <LCD_IO_WriteCmd8MultipleData16+0x48>)
 8001a3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a40:	6053      	str	r3, [r2, #4]
  LCD_IO_WriteMultiData16(pData, Size, 1);
 8001a42:	2201      	movs	r2, #1
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	68b8      	ldr	r0, [r7, #8]
 8001a48:	f7ff fde4 	bl	8001614 <LCD_IO_WriteMultiData16>
}
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40013000 	.word	0x40013000
 8001a58:	48000800 	.word	0x48000800

08001a5c <LCD_IO_ReadCmd8MultipleData8>:
__weak void LCD_IO_ReadCmd16MultipleData24to16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
#else

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	4603      	mov	r3, r0
 8001a6a:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <LCD_IO_ReadCmd8MultipleData8+0x48>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	4a0c      	ldr	r2, [pc, #48]	; (8001aa4 <LCD_IO_ReadCmd8MultipleData8+0x48>)
 8001a72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a76:	6053      	str	r3, [r2, #4]
  LCD_CS_ON;
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <LCD_IO_ReadCmd8MultipleData8+0x4c>)
 8001a7a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a7e:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fd6a 	bl	800155c <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8001a8e:	6838      	ldr	r0, [r7, #0]
 8001a90:	f7ff fce8 	bl	8001464 <LcdDirRead>
  LCD_IO_ReadMultiData8(pData, Size);
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	68b8      	ldr	r0, [r7, #8]
 8001a98:	f7ff fdde 	bl	8001658 <LCD_IO_ReadMultiData8>
}
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40013000 	.word	0x40013000
 8001aa8:	48000800 	.word	0x48000800

08001aac <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_IO_ReadMultiData16(pData, Size);
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	4603      	mov	r3, r0
 8001aba:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
 8001abc:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <LCD_IO_ReadCmd8MultipleData24to16+0x48>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4a0c      	ldr	r2, [pc, #48]	; (8001af4 <LCD_IO_ReadCmd8MultipleData24to16+0x48>)
 8001ac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ac6:	6053      	str	r3, [r2, #4]
  LCD_CS_ON;
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <LCD_IO_ReadCmd8MultipleData24to16+0x4c>)
 8001aca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ace:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fd42 	bl	800155c <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8001ade:	6838      	ldr	r0, [r7, #0]
 8001ae0:	f7ff fcc0 	bl	8001464 <LcdDirRead>
  LCD_IO_ReadMultiData16to24(pData, Size);
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	68b8      	ldr	r0, [r7, #8]
 8001ae8:	f7ff fdd8 	bl	800169c <LCD_IO_ReadMultiData16to24>
}
 8001aec:	bf00      	nop
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40013000 	.word	0x40013000
 8001af8:	48000800 	.word	0x48000800

08001afc <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <BSP_LCD_Init+0x40>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_COLOR_MAGENTA;
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <BSP_LCD_Init+0x44>)
 8001b10:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001b14:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <BSP_LCD_Init+0x44>)
 8001b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b1c:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <BSP_LCD_Init+0x44>)
 8001b20:	4a08      	ldr	r2, [pc, #32]	; (8001b44 <BSP_LCD_Init+0x48>)
 8001b22:	609a      	str	r2, [r3, #8]
  
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_COLOR_MAGENTA);
 8001b24:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8001b28:	f000 f86e 	bl	8001c08 <BSP_LCD_Clear>
  #endif
  
  ret = LCD_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001b30:	79fb      	ldrb	r3, [r7, #7]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000074 	.word	0x20000074
 8001b40:	20000668 	.word	0x20000668
 8001b44:	20000028 	.word	0x20000028

08001b48 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <BSP_LCD_GetXSize+0x14>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	4798      	blx	r3
 8001b54:	4603      	mov	r3, r0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000074 	.word	0x20000074

08001b60 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <BSP_LCD_GetYSize+0x14>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	4798      	blx	r3
 8001b6c:	4603      	mov	r3, r0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000074 	.word	0x20000074

08001b78 <BSP_LCD_GetTextColor>:
  * @brief  Gets the LCD text color.
  * @param  None 
  * @retval Used text color.
  */
uint16_t BSP_LCD_GetTextColor(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return DrawProp.TextColor;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <BSP_LCD_GetTextColor+0x14>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	b29b      	uxth	r3, r3
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	20000668 	.word	0x20000668

08001b90 <BSP_LCD_GetBackColor>:
  * @brief  Gets the LCD background color.
  * @param  None
  * @retval Used background color
  */
uint16_t BSP_LCD_GetBackColor(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return DrawProp.BackColor;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <BSP_LCD_GetBackColor+0x14>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	b29b      	uxth	r3, r3
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	20000668 	.word	0x20000668

08001ba8 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	4a03      	ldr	r2, [pc, #12]	; (8001bc4 <BSP_LCD_SetTextColor+0x1c>)
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	20000668 	.word	0x20000668

08001bc8 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	4a03      	ldr	r2, [pc, #12]	; (8001be4 <BSP_LCD_SetBackColor+0x1c>)
 8001bd6:	6053      	str	r3, [r2, #4]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	20000668 	.word	0x20000668

08001be8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 8001bf0:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <BSP_LCD_SetFont+0x1c>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6093      	str	r3, [r2, #8]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000668 	.word	0x20000668

08001c08 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8001c08:	b5b0      	push	{r4, r5, r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <BSP_LCD_Clear+0x38>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001c18:	f7ff ff96 	bl	8001b48 <BSP_LCD_GetXSize>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461d      	mov	r5, r3
 8001c20:	f7ff ff9e 	bl	8001b60 <BSP_LCD_GetYSize>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	462a      	mov	r2, r5
 8001c30:	2100      	movs	r1, #0
 8001c32:	2000      	movs	r0, #0
 8001c34:	47a0      	blx	r4
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000074 	.word	0x20000074

08001c44 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	80bb      	strh	r3, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <BSP_LCD_DisplayChar+0x50>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8001c60:	490c      	ldr	r1, [pc, #48]	; (8001c94 <BSP_LCD_DisplayChar+0x50>)
 8001c62:	6889      	ldr	r1, [r1, #8]
 8001c64:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001c66:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <BSP_LCD_DisplayChar+0x50>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	889b      	ldrh	r3, [r3, #4]
 8001c70:	3307      	adds	r3, #7
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	da00      	bge.n	8001c78 <BSP_LCD_DisplayChar+0x34>
 8001c76:	3307      	adds	r3, #7
 8001c78:	10db      	asrs	r3, r3, #3
 8001c7a:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001c7e:	441a      	add	r2, r3
 8001c80:	88b9      	ldrh	r1, [r7, #4]
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 fa99 	bl	80021bc <DrawChar>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000668 	.word	0x20000668

08001c98 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60ba      	str	r2, [r7, #8]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	81fb      	strh	r3, [r7, #14]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	81bb      	strh	r3, [r7, #12]
 8001caa:	4613      	mov	r3, r2
 8001cac:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	83fb      	strh	r3, [r7, #30]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001cc2:	e002      	b.n	8001cca <BSP_LCD_DisplayStringAt+0x32>
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	61bb      	str	r3, [r7, #24]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	617a      	str	r2, [r7, #20]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f6      	bne.n	8001cc4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8001cd6:	f7ff ff37 	bl	8001b48 <BSP_LCD_GetXSize>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b33      	ldr	r3, [pc, #204]	; (8001dac <BSP_LCD_DisplayStringAt+0x114>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	889b      	ldrh	r3, [r3, #4]
 8001ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d014      	beq.n	8001d1c <BSP_LCD_DisplayStringAt+0x84>
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d00f      	beq.n	8001d16 <BSP_LCD_DisplayStringAt+0x7e>
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d11e      	bne.n	8001d38 <BSP_LCD_DisplayStringAt+0xa0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	4a2a      	ldr	r2, [pc, #168]	; (8001dac <BSP_LCD_DisplayStringAt+0x114>)
 8001d02:	6892      	ldr	r2, [r2, #8]
 8001d04:	8892      	ldrh	r2, [r2, #4]
 8001d06:	fb02 f303 	mul.w	r3, r2, r3
 8001d0a:	085b      	lsrs	r3, r3, #1
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	89fb      	ldrh	r3, [r7, #14]
 8001d10:	4413      	add	r3, r2
 8001d12:	83fb      	strh	r3, [r7, #30]
      break;
 8001d14:	e013      	b.n	8001d3e <BSP_LCD_DisplayStringAt+0xa6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001d16:	89fb      	ldrh	r3, [r7, #14]
 8001d18:	83fb      	strh	r3, [r7, #30]
      break;
 8001d1a:	e010      	b.n	8001d3e <BSP_LCD_DisplayStringAt+0xa6>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	4b21      	ldr	r3, [pc, #132]	; (8001dac <BSP_LCD_DisplayStringAt+0x114>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	889b      	ldrh	r3, [r3, #4]
 8001d2a:	fb12 f303 	smulbb	r3, r2, r3
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	89fb      	ldrh	r3, [r7, #14]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	83fb      	strh	r3, [r7, #30]
      break;
 8001d36:	e002      	b.n	8001d3e <BSP_LCD_DisplayStringAt+0xa6>
    }    
  default:
    {
      refcolumn = Xpos;
 8001d38:	89fb      	ldrh	r3, [r7, #14]
 8001d3a:	83fb      	strh	r3, [r7, #30]
      break;
 8001d3c:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8001d3e:	e012      	b.n	8001d66 <BSP_LCD_DisplayStringAt+0xce>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	781a      	ldrb	r2, [r3, #0]
 8001d44:	89b9      	ldrh	r1, [r7, #12]
 8001d46:	8bfb      	ldrh	r3, [r7, #30]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff7b 	bl	8001c44 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <BSP_LCD_DisplayStringAt+0x114>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	889a      	ldrh	r2, [r3, #4]
 8001d54:	8bfb      	ldrh	r3, [r7, #30]
 8001d56:	4413      	add	r3, r2
 8001d58:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
    i++;
 8001d60:	8bbb      	ldrh	r3, [r7, #28]
 8001d62:	3301      	adds	r3, #1
 8001d64:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	bf14      	ite	ne
 8001d6e:	2301      	movne	r3, #1
 8001d70:	2300      	moveq	r3, #0
 8001d72:	b2dc      	uxtb	r4, r3
 8001d74:	f7ff fee8 	bl	8001b48 <BSP_LCD_GetXSize>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	8bbb      	ldrh	r3, [r7, #28]
 8001d7e:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <BSP_LCD_DisplayStringAt+0x114>)
 8001d80:	6892      	ldr	r2, [r2, #8]
 8001d82:	8892      	ldrh	r2, [r2, #4]
 8001d84:	fb02 f303 	mul.w	r3, r2, r3
 8001d88:	1acb      	subs	r3, r1, r3
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <BSP_LCD_DisplayStringAt+0x114>)
 8001d8e:	6892      	ldr	r2, [r2, #8]
 8001d90:	8892      	ldrh	r2, [r2, #4]
 8001d92:	4293      	cmp	r3, r2
 8001d94:	bfac      	ite	ge
 8001d96:	2301      	movge	r3, #1
 8001d98:	2300      	movlt	r3, #0
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	4023      	ands	r3, r4
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1cd      	bne.n	8001d40 <BSP_LCD_DisplayStringAt+0xa8>
  }
}
 8001da4:	bf00      	nop
 8001da6:	3724      	adds	r7, #36	; 0x24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd90      	pop	{r4, r7, pc}
 8001dac:	20000668 	.word	0x20000668

08001db0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	80bb      	strh	r3, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 8001dc2:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <BSP_LCD_DrawPixel+0x34>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <BSP_LCD_DrawPixel+0x34>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	887a      	ldrh	r2, [r7, #2]
 8001dd4:	88b9      	ldrh	r1, [r7, #4]
 8001dd6:	88f8      	ldrh	r0, [r7, #6]
 8001dd8:	4798      	blx	r3
  }
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000074 	.word	0x20000074

08001de8 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
 8001df2:	460b      	mov	r3, r1
 8001df4:	80bb      	strh	r3, [r7, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <BSP_LCD_DrawHLine+0x6c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00a      	beq.n	8001e1e <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8001e08:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <BSP_LCD_DrawHLine+0x6c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6a1c      	ldr	r4, [r3, #32]
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <BSP_LCD_DrawHLine+0x70>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	b298      	uxth	r0, r3
 8001e14:	887b      	ldrh	r3, [r7, #2]
 8001e16:	88ba      	ldrh	r2, [r7, #4]
 8001e18:	88f9      	ldrh	r1, [r7, #6]
 8001e1a:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8001e1c:	e015      	b.n	8001e4a <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	e00e      	b.n	8001e42 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	b298      	uxth	r0, r3
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <BSP_LCD_DrawHLine+0x70>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	88bb      	ldrh	r3, [r7, #4]
 8001e36:	4619      	mov	r1, r3
 8001e38:	f7ff ffba 	bl	8001db0 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d3ec      	bcc.n	8001e24 <BSP_LCD_DrawHLine+0x3c>
}
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd90      	pop	{r4, r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000074 	.word	0x20000074
 8001e58:	20000668 	.word	0x20000668

08001e5c <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	80fb      	strh	r3, [r7, #6]
 8001e66:	460b      	mov	r3, r1
 8001e68:	80bb      	strh	r3, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <BSP_LCD_DrawVLine+0x6c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00a      	beq.n	8001e92 <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <BSP_LCD_DrawVLine+0x6c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <BSP_LCD_DrawVLine+0x70>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	b298      	uxth	r0, r3
 8001e88:	887b      	ldrh	r3, [r7, #2]
 8001e8a:	88ba      	ldrh	r2, [r7, #4]
 8001e8c:	88f9      	ldrh	r1, [r7, #6]
 8001e8e:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 8001e90:	e015      	b.n	8001ebe <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	e00e      	b.n	8001eb6 <BSP_LCD_DrawVLine+0x5a>
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	88bb      	ldrh	r3, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	b299      	uxth	r1, r3
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <BSP_LCD_DrawVLine+0x70>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ff80 	bl	8001db0 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	887b      	ldrh	r3, [r7, #2]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d3ec      	bcc.n	8001e98 <BSP_LCD_DrawVLine+0x3c>
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd90      	pop	{r4, r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000074 	.word	0x20000074
 8001ecc:	20000668 	.word	0x20000668

08001ed0 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b08b      	sub	sp, #44	; 0x2c
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	4608      	mov	r0, r1
 8001eda:	4611      	mov	r1, r2
 8001edc:	461a      	mov	r2, r3
 8001ede:	4623      	mov	r3, r4
 8001ee0:	80fb      	strh	r3, [r7, #6]
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	80bb      	strh	r3, [r7, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	807b      	strh	r3, [r7, #2]
 8001eea:	4613      	mov	r3, r2
 8001eec:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8001eee:	2300      	movs	r3, #0
 8001ef0:	823b      	strh	r3, [r7, #16]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	81fb      	strh	r3, [r7, #14]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001efa:	2300      	movs	r3, #0
 8001efc:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001efe:	2300      	movs	r3, #0
 8001f00:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f02:	2300      	movs	r3, #0
 8001f04:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8001f06:	2300      	movs	r3, #0
 8001f08:	83fb      	strh	r3, [r7, #30]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	83bb      	strh	r3, [r7, #28]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	837b      	strh	r3, [r7, #26]
 8001f12:	2300      	movs	r3, #0
 8001f14:	833b      	strh	r3, [r7, #24]
 8001f16:	2300      	movs	r3, #0
 8001f18:	82fb      	strh	r3, [r7, #22]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8001f22:	887a      	ldrh	r2, [r7, #2]
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	bfb8      	it	lt
 8001f2c:	425b      	neglt	r3, r3
 8001f2e:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8001f30:	883a      	ldrh	r2, [r7, #0]
 8001f32:	88bb      	ldrh	r3, [r7, #4]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	bfb8      	it	lt
 8001f3a:	425b      	neglt	r3, r3
 8001f3c:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8001f42:	88bb      	ldrh	r3, [r7, #4]
 8001f44:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d304      	bcc.n	8001f58 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	843b      	strh	r3, [r7, #32]
 8001f56:	e005      	b.n	8001f64 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8001f58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f5c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8001f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f62:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8001f64:	883a      	ldrh	r2, [r7, #0]
 8001f66:	88bb      	ldrh	r3, [r7, #4]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d304      	bcc.n	8001f76 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8001f70:	2301      	movs	r3, #1
 8001f72:	83bb      	strh	r3, [r7, #28]
 8001f74:	e005      	b.n	8001f82 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8001f76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f7a:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8001f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f80:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8001f82:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001f86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	db10      	blt.n	8001fb0 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8001f8e:	2300      	movs	r3, #0
 8001f90:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8001f92:	2300      	movs	r3, #0
 8001f94:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8001f96:	8a3b      	ldrh	r3, [r7, #16]
 8001f98:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8001f9a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001f9e:	0fda      	lsrs	r2, r3, #31
 8001fa0:	4413      	add	r3, r2
 8001fa2:	105b      	asrs	r3, r3, #1
 8001fa4:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8001fa6:	89fb      	ldrh	r3, [r7, #14]
 8001fa8:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8001faa:	8a3b      	ldrh	r3, [r7, #16]
 8001fac:	82bb      	strh	r3, [r7, #20]
 8001fae:	e00f      	b.n	8001fd0 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8001fb8:	89fb      	ldrh	r3, [r7, #14]
 8001fba:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8001fbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fc0:	0fda      	lsrs	r2, r3, #31
 8001fc2:	4413      	add	r3, r2
 8001fc4:	105b      	asrs	r3, r3, #1
 8001fc6:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8001fc8:	8a3b      	ldrh	r3, [r7, #16]
 8001fca:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8001fcc:	89fb      	ldrh	r3, [r7, #14]
 8001fce:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	827b      	strh	r3, [r7, #18]
 8001fd4:	e031      	b.n	800203a <BSP_LCD_DrawLine+0x16a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp.TextColor);  /* Draw the current pixel */
 8001fd6:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001fd8:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <BSP_LCD_DrawLine+0x180>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	f7ff fee5 	bl	8001db0 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8001fe6:	8b3a      	ldrh	r2, [r7, #24]
 8001fe8:	8afb      	ldrh	r3, [r7, #22]
 8001fea:	4413      	add	r3, r2
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8001ff0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001ff4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	db0e      	blt.n	800201a <BSP_LCD_DrawLine+0x14a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8001ffc:	8b3a      	ldrh	r2, [r7, #24]
 8001ffe:	8b7b      	ldrh	r3, [r7, #26]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	b29b      	uxth	r3, r3
 8002004:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8002006:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002008:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800200a:	4413      	add	r3, r2
 800200c:	b29b      	uxth	r3, r3
 800200e:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8002010:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002012:	8bfb      	ldrh	r3, [r7, #30]
 8002014:	4413      	add	r3, r2
 8002016:	b29b      	uxth	r3, r3
 8002018:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 800201a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800201c:	8c3b      	ldrh	r3, [r7, #32]
 800201e:	4413      	add	r3, r2
 8002020:	b29b      	uxth	r3, r3
 8002022:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8002024:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002026:	8bbb      	ldrh	r3, [r7, #28]
 8002028:	4413      	add	r3, r2
 800202a:	b29b      	uxth	r3, r3
 800202c:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800202e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002032:	b29b      	uxth	r3, r3
 8002034:	3301      	adds	r3, #1
 8002036:	b29b      	uxth	r3, r3
 8002038:	827b      	strh	r3, [r7, #18]
 800203a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800203e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002042:	429a      	cmp	r2, r3
 8002044:	ddc7      	ble.n	8001fd6 <BSP_LCD_DrawLine+0x106>
  }
}
 8002046:	bf00      	nop
 8002048:	372c      	adds	r7, #44	; 0x2c
 800204a:	46bd      	mov	sp, r7
 800204c:	bd90      	pop	{r4, r7, pc}
 800204e:	bf00      	nop
 8002050:	20000668 	.word	0x20000668

08002054 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4604      	mov	r4, r0
 800205c:	4608      	mov	r0, r1
 800205e:	4611      	mov	r1, r2
 8002060:	461a      	mov	r2, r3
 8002062:	4623      	mov	r3, r4
 8002064:	80fb      	strh	r3, [r7, #6]
 8002066:	4603      	mov	r3, r0
 8002068:	80bb      	strh	r3, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	807b      	strh	r3, [r7, #2]
 800206e:	4613      	mov	r3, r2
 8002070:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8002072:	887a      	ldrh	r2, [r7, #2]
 8002074:	88b9      	ldrh	r1, [r7, #4]
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff feb5 	bl	8001de8 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos + Height - 1), Width);
 800207e:	88ba      	ldrh	r2, [r7, #4]
 8002080:	883b      	ldrh	r3, [r7, #0]
 8002082:	4413      	add	r3, r2
 8002084:	b29b      	uxth	r3, r3
 8002086:	3b01      	subs	r3, #1
 8002088:	b299      	uxth	r1, r3
 800208a:	887a      	ldrh	r2, [r7, #2]
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff feaa 	bl	8001de8 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8002094:	883a      	ldrh	r2, [r7, #0]
 8002096:	88b9      	ldrh	r1, [r7, #4]
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fede 	bl	8001e5c <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width - 1), Ypos, Height);
 80020a0:	88fa      	ldrh	r2, [r7, #6]
 80020a2:	887b      	ldrh	r3, [r7, #2]
 80020a4:	4413      	add	r3, r2
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	883a      	ldrh	r2, [r7, #0]
 80020ae:	88b9      	ldrh	r1, [r7, #4]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fed3 	bl	8001e5c <BSP_LCD_DrawVLine>
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd90      	pop	{r4, r7, pc}
	...

080020c0 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	603a      	str	r2, [r7, #0]
 80020ca:	80fb      	strh	r3, [r7, #6]
 80020cc:	460b      	mov	r3, r1
 80020ce:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	3312      	adds	r3, #18
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	3313      	adds	r3, #19
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	441a      	add	r2, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	3314      	adds	r3, #20
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	041b      	lsls	r3, r3, #16
 80020f2:	441a      	add	r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	3315      	adds	r3, #21
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	061b      	lsls	r3, r3, #24
 80020fc:	4413      	add	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	3316      	adds	r3, #22
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	3317      	adds	r3, #23
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	441a      	add	r2, r3
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	3318      	adds	r3, #24
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	441a      	add	r2, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	3319      	adds	r3, #25
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	061b      	lsls	r3, r3, #24
 8002124:	4413      	add	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	b29b      	uxth	r3, r3
 8002130:	88b9      	ldrh	r1, [r7, #4]
 8002132:	88f8      	ldrh	r0, [r7, #6]
 8002134:	f000 f934 	bl	80023a0 <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8002138:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <BSP_LCD_DrawBitmap+0xb0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	2b00      	cmp	r3, #0
 8002140:	d006      	beq.n	8002150 <BSP_LCD_DrawBitmap+0x90>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <BSP_LCD_DrawBitmap+0xb0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	88b9      	ldrh	r1, [r7, #4]
 800214a:	88f8      	ldrh	r0, [r7, #6]
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8002150:	f7ff fcfa 	bl	8001b48 <BSP_LCD_GetXSize>
 8002154:	4603      	mov	r3, r0
 8002156:	461c      	mov	r4, r3
 8002158:	f7ff fd02 	bl	8001b60 <BSP_LCD_GetYSize>
 800215c:	4603      	mov	r3, r0
 800215e:	4622      	mov	r2, r4
 8002160:	2100      	movs	r1, #0
 8002162:	2000      	movs	r0, #0
 8002164:	f000 f91c 	bl	80023a0 <SetDisplayWindow>
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	bd90      	pop	{r4, r7, pc}
 8002170:	20000074 	.word	0x20000074

08002174 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002174:	b5b0      	push	{r4, r5, r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af02      	add	r7, sp, #8
 800217a:	4604      	mov	r4, r0
 800217c:	4608      	mov	r0, r1
 800217e:	4611      	mov	r1, r2
 8002180:	461a      	mov	r2, r3
 8002182:	4623      	mov	r3, r4
 8002184:	80fb      	strh	r3, [r7, #6]
 8002186:	4603      	mov	r3, r0
 8002188:	80bb      	strh	r3, [r7, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	807b      	strh	r3, [r7, #2]
 800218e:	4613      	mov	r3, r2
 8002190:	803b      	strh	r3, [r7, #0]
  lcd_drv->FillRect(Xpos, Ypos, Width, Height, DrawProp.TextColor);
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <BSP_LCD_FillRect+0x40>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002198:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <BSP_LCD_FillRect+0x44>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	b29b      	uxth	r3, r3
 800219e:	883d      	ldrh	r5, [r7, #0]
 80021a0:	887a      	ldrh	r2, [r7, #2]
 80021a2:	88b9      	ldrh	r1, [r7, #4]
 80021a4:	88f8      	ldrh	r0, [r7, #6]
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	462b      	mov	r3, r5
 80021aa:	47a0      	blx	r4
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bdb0      	pop	{r4, r5, r7, pc}
 80021b4:	20000074 	.word	0x20000074
 80021b8:	20000668 	.word	0x20000668

080021bc <DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	; 0x28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	603a      	str	r2, [r7, #0]
 80021c6:	80fb      	strh	r3, [r7, #6]
 80021c8:	460b      	mov	r3, r1
 80021ca:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
 80021d4:	2300      	movs	r3, #0
 80021d6:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	82fb      	strh	r3, [r7, #22]
 80021dc:	2300      	movs	r3, #0
 80021de:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
  
  height = DrawProp.pFont->Height;
 80021ec:	4b63      	ldr	r3, [pc, #396]	; (800237c <DrawChar+0x1c0>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	88db      	ldrh	r3, [r3, #6]
 80021f2:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 80021f4:	4b61      	ldr	r3, [pc, #388]	; (800237c <DrawChar+0x1c0>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	889b      	ldrh	r3, [r3, #4]
 80021fa:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 80021fc:	8afa      	ldrh	r2, [r7, #22]
 80021fe:	8abb      	ldrh	r3, [r7, #20]
 8002200:	fb12 f303 	smulbb	r3, r2, r3
 8002204:	b29b      	uxth	r3, r3
 8002206:	331b      	adds	r3, #27
 8002208:	b29b      	uxth	r3, r3
 800220a:	4a5d      	ldr	r2, [pc, #372]	; (8002380 <DrawChar+0x1c4>)
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	b29b      	uxth	r3, r3
 8002210:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 8002212:	8afb      	ldrh	r3, [r7, #22]
 8002214:	8aba      	ldrh	r2, [r7, #20]
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	331b      	adds	r3, #27
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	141a      	asrs	r2, r3, #16
 8002220:	4b58      	ldr	r3, [pc, #352]	; (8002384 <DrawChar+0x1c8>)
 8002222:	b292      	uxth	r2, r2
 8002224:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 8002226:	4b58      	ldr	r3, [pc, #352]	; (8002388 <DrawChar+0x1cc>)
 8002228:	2236      	movs	r2, #54	; 0x36
 800222a:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 800222c:	4a57      	ldr	r2, [pc, #348]	; (800238c <DrawChar+0x1d0>)
 800222e:	8abb      	ldrh	r3, [r7, #20]
 8002230:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 8002232:	8abb      	ldrh	r3, [r7, #20]
 8002234:	141a      	asrs	r2, r3, #16
 8002236:	4b56      	ldr	r3, [pc, #344]	; (8002390 <DrawChar+0x1d4>)
 8002238:	b292      	uxth	r2, r2
 800223a:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 800223c:	4a55      	ldr	r2, [pc, #340]	; (8002394 <DrawChar+0x1d8>)
 800223e:	8afb      	ldrh	r3, [r7, #22]
 8002240:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 8002242:	8afb      	ldrh	r3, [r7, #22]
 8002244:	141a      	asrs	r2, r3, #16
 8002246:	4b54      	ldr	r3, [pc, #336]	; (8002398 <DrawChar+0x1dc>)
 8002248:	b292      	uxth	r2, r2
 800224a:	801a      	strh	r2, [r3, #0]
  
  offset =  8 *((width + 7)/8) - width ;
 800224c:	8abb      	ldrh	r3, [r7, #20]
 800224e:	3307      	adds	r3, #7
 8002250:	2b00      	cmp	r3, #0
 8002252:	da00      	bge.n	8002256 <DrawChar+0x9a>
 8002254:	3307      	adds	r3, #7
 8002256:	10db      	asrs	r3, r3, #3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	b2da      	uxtb	r2, r3
 800225e:	8abb      	ldrh	r3, [r7, #20]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
 800226a:	e078      	b.n	800235e <DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 800226c:	8abb      	ldrh	r3, [r7, #20]
 800226e:	3307      	adds	r3, #7
 8002270:	2b00      	cmp	r3, #0
 8002272:	da00      	bge.n	8002276 <DrawChar+0xba>
 8002274:	3307      	adds	r3, #7
 8002276:	10db      	asrs	r3, r3, #3
 8002278:	461a      	mov	r2, r3
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	fb03 f302 	mul.w	r3, r3, r2
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	4413      	add	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 8002286:	8abb      	ldrh	r3, [r7, #20]
 8002288:	3b11      	subs	r3, #17
 800228a:	2b07      	cmp	r3, #7
 800228c:	d80c      	bhi.n	80022a8 <DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	041a      	lsls	r2, r3, #16
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3301      	adds	r3, #1
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	4313      	orrs	r3, r2
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	3202      	adds	r2, #2
 80022a2:	7812      	ldrb	r2, [r2, #0]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 2)
 80022a8:	8abb      	ldrh	r3, [r7, #20]
 80022aa:	3b09      	subs	r3, #9
 80022ac:	2b07      	cmp	r3, #7
 80022ae:	d807      	bhi.n	80022c0 <DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	3201      	adds	r2, #1
 80022ba:	7812      	ldrb	r2, [r2, #0]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 1)
 80022c0:	8abb      	ldrh	r3, [r7, #20]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	2b07      	cmp	r3, #7
 80022c6:	d802      	bhi.n	80022ce <DrawChar+0x112>
    {
      line =  pchar[0];
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	61fb      	str	r3, [r7, #28]
    }    
    
    for (counterw = 0; counterw < width; counterw++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
 80022d2:	e03d      	b.n	8002350 <DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 80022d4:	8afa      	ldrh	r2, [r7, #22]
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	3b01      	subs	r3, #1
 80022dc:	8aba      	ldrh	r2, [r7, #20]
 80022de:	fb02 f203 	mul.w	r2, r2, r3
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	4413      	add	r3, r2
 80022e6:	331b      	adds	r3, #27
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 80022ec:	8aba      	ldrh	r2, [r7, #20]
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	1ad2      	subs	r2, r2, r3
 80022f2:	7cfb      	ldrb	r3, [r7, #19]
 80022f4:	4413      	add	r3, r2
 80022f6:	3b01      	subs	r3, #1
 80022f8:	2201      	movs	r2, #1
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	4013      	ands	r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d010      	beq.n	800232a <DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 8002308:	4b1c      	ldr	r3, [pc, #112]	; (800237c <DrawChar+0x1c0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b2d9      	uxtb	r1, r3
 800230e:	4a23      	ldr	r2, [pc, #140]	; (800239c <DrawChar+0x1e0>)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	4413      	add	r3, r2
 8002314:	460a      	mov	r2, r1
 8002316:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 8002318:	4b18      	ldr	r3, [pc, #96]	; (800237c <DrawChar+0x1c0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	0a1a      	lsrs	r2, r3, #8
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	3301      	adds	r3, #1
 8002322:	b2d1      	uxtb	r1, r2
 8002324:	4a1d      	ldr	r2, [pc, #116]	; (800239c <DrawChar+0x1e0>)
 8002326:	54d1      	strb	r1, [r2, r3]
 8002328:	e00f      	b.n	800234a <DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 800232a:	4b14      	ldr	r3, [pc, #80]	; (800237c <DrawChar+0x1c0>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	b2d9      	uxtb	r1, r3
 8002330:	4a1a      	ldr	r2, [pc, #104]	; (800239c <DrawChar+0x1e0>)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	4413      	add	r3, r2
 8002336:	460a      	mov	r2, r1
 8002338:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <DrawChar+0x1c0>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	0a1a      	lsrs	r2, r3, #8
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	3301      	adds	r3, #1
 8002344:	b2d1      	uxtb	r1, r2
 8002346:	4a15      	ldr	r2, [pc, #84]	; (800239c <DrawChar+0x1e0>)
 8002348:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	3301      	adds	r3, #1
 800234e:	623b      	str	r3, [r7, #32]
 8002350:	8abb      	ldrh	r3, [r7, #20]
 8002352:	6a3a      	ldr	r2, [r7, #32]
 8002354:	429a      	cmp	r2, r3
 8002356:	d3bd      	bcc.n	80022d4 <DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	3301      	adds	r3, #1
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
 800235e:	8afb      	ldrh	r3, [r7, #22]
 8002360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002362:	429a      	cmp	r2, r3
 8002364:	d382      	bcc.n	800226c <DrawChar+0xb0>
      } 
    }
  }
  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 8002366:	88b9      	ldrh	r1, [r7, #4]
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	4a0c      	ldr	r2, [pc, #48]	; (800239c <DrawChar+0x1e0>)
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fea7 	bl	80020c0 <BSP_LCD_DrawBitmap>
}
 8002372:	bf00      	nop
 8002374:	3728      	adds	r7, #40	; 0x28
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000668 	.word	0x20000668
 8002380:	200002f2 	.word	0x200002f2
 8002384:	200002f4 	.word	0x200002f4
 8002388:	200002fa 	.word	0x200002fa
 800238c:	20000302 	.word	0x20000302
 8002390:	20000304 	.word	0x20000304
 8002394:	20000306 	.word	0x20000306
 8002398:	20000308 	.word	0x20000308
 800239c:	200002f0 	.word	0x200002f0

080023a0 <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4604      	mov	r4, r0
 80023a8:	4608      	mov	r0, r1
 80023aa:	4611      	mov	r1, r2
 80023ac:	461a      	mov	r2, r3
 80023ae:	4623      	mov	r3, r4
 80023b0:	80fb      	strh	r3, [r7, #6]
 80023b2:	4603      	mov	r3, r0
 80023b4:	80bb      	strh	r3, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	807b      	strh	r3, [r7, #2]
 80023ba:	4613      	mov	r3, r2
 80023bc:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <SetDisplayWindow+0x40>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d007      	beq.n	80023d8 <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <SetDisplayWindow+0x40>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	69dc      	ldr	r4, [r3, #28]
 80023ce:	883b      	ldrh	r3, [r7, #0]
 80023d0:	887a      	ldrh	r2, [r7, #2]
 80023d2:	88b9      	ldrh	r1, [r7, #4]
 80023d4:	88f8      	ldrh	r0, [r7, #6]
 80023d6:	47a0      	blx	r4
  }  
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd90      	pop	{r4, r7, pc}
 80023e0:	20000074 	.word	0x20000074

080023e4 <changeDriver>:
    { "Acceleration", 20, 10, 12, 10 },
    { "Skidpad", 11, 3, 55, 50 },
    { "Autocross", 45, 1, 57, 100 }
};

void changeDriver(Driver_Profile driver_profile){
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	463b      	mov	r3, r7
 80023ec:	e883 0003 	stmia.w	r3, {r0, r1}
	current_driver = driver_profile;
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <changeDriver+0x28>)
 80023f2:	461a      	mov	r2, r3
 80023f4:	463b      	mov	r3, r7
 80023f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023fa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	200000e8 	.word	0x200000e8

08002410 <changeEvent>:

void changeEvent(Event_Profile event_profile){
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	463b      	mov	r3, r7
 8002418:	e883 0003 	stmia.w	r3, {r0, r1}
	current_event = event_profile;
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <changeEvent+0x28>)
 800241e:	461a      	mov	r2, r3
 8002420:	463b      	mov	r3, r7
 8002422:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002426:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20000678 	.word	0x20000678

0800243c <clearArea>:
char* menus[4] = { "Driver Select", "Event Select", "Car Config", "Advanced" };
bool menu_pot_incremented = false;
bool menu_pot_decremented = false;

/* General UI functions */
void clearArea(uint16_t x, uint16_t y, uint16_t width, uint16_t height){
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	4604      	mov	r4, r0
 8002444:	4608      	mov	r0, r1
 8002446:	4611      	mov	r1, r2
 8002448:	461a      	mov	r2, r3
 800244a:	4623      	mov	r3, r4
 800244c:	80fb      	strh	r3, [r7, #6]
 800244e:	4603      	mov	r3, r0
 8002450:	80bb      	strh	r3, [r7, #4]
 8002452:	460b      	mov	r3, r1
 8002454:	807b      	strh	r3, [r7, #2]
 8002456:	4613      	mov	r3, r2
 8002458:	803b      	strh	r3, [r7, #0]
    // Save existing color settings
    uint32_t text_color_backup = BSP_LCD_GetTextColor();
 800245a:	f7ff fb8d 	bl	8001b78 <BSP_LCD_GetTextColor>
 800245e:	4603      	mov	r3, r0
 8002460:	60fb      	str	r3, [r7, #12]
    uint32_t back_color_backup = BSP_LCD_GetBackColor();
 8002462:	f7ff fb95 	bl	8001b90 <BSP_LCD_GetBackColor>
 8002466:	4603      	mov	r3, r0
 8002468:	60bb      	str	r3, [r7, #8]

    /* Draw a rectangle with background color */
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800246a:	2000      	movs	r0, #0
 800246c:	f7ff fbac 	bl	8001bc8 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002470:	2000      	movs	r0, #0
 8002472:	f7ff fb99 	bl	8001ba8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(x, y, width, height);
 8002476:	883b      	ldrh	r3, [r7, #0]
 8002478:	887a      	ldrh	r2, [r7, #2]
 800247a:	88b9      	ldrh	r1, [r7, #4]
 800247c:	88f8      	ldrh	r0, [r7, #6]
 800247e:	f7ff fe79 	bl	8002174 <BSP_LCD_FillRect>

    // Restore existing color settings
    BSP_LCD_SetTextColor(text_color_backup);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	b29b      	uxth	r3, r3
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fb8e 	bl	8001ba8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(back_color_backup);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	b29b      	uxth	r3, r3
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fb99 	bl	8001bc8 <BSP_LCD_SetBackColor>
}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bd90      	pop	{r4, r7, pc}
	...

080024a0 <drawScreen>:
void drawScreen(UI_Screen ui_screen) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7ff fbac 	bl	8001c08 <BSP_LCD_Clear>
    selected_menu_option = 0; // Reset menu selection
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <drawScreen+0x7c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
    switch (ui_screen) {
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d825      	bhi.n	8002508 <drawScreen+0x68>
 80024bc:	a201      	add	r2, pc, #4	; (adr r2, 80024c4 <drawScreen+0x24>)
 80024be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c2:	bf00      	nop
 80024c4:	080024d9 	.word	0x080024d9
 80024c8:	08002509 	.word	0x08002509
 80024cc:	080024e5 	.word	0x080024e5
 80024d0:	080024f1 	.word	0x080024f1
 80024d4:	080024fd 	.word	0x080024fd
        case SM_SCREEN:
            drawSMScreen();
 80024d8:	f000 fa62 	bl	80029a0 <drawSMScreen>
			max_menu_option = 4;
 80024dc:	4b10      	ldr	r3, [pc, #64]	; (8002520 <drawScreen+0x80>)
 80024de:	2204      	movs	r2, #4
 80024e0:	701a      	strb	r2, [r3, #0]
            break;
 80024e2:	e017      	b.n	8002514 <drawScreen+0x74>
        case DRIVER_SELECTION_SCREEN:
            drawDriverSelectionScreen();
 80024e4:	f000 faee 	bl	8002ac4 <drawDriverSelectionScreen>
			max_menu_option = sizeof(drivers) / sizeof(drivers[0]);
 80024e8:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <drawScreen+0x80>)
 80024ea:	2204      	movs	r2, #4
 80024ec:	701a      	strb	r2, [r3, #0]
            break;
 80024ee:	e011      	b.n	8002514 <drawScreen+0x74>
        case EVENT_SELECTION_SCREEN:
            drawEventSelectionScreen();
 80024f0:	f000 fb6a 	bl	8002bc8 <drawEventSelectionScreen>
			max_menu_option = sizeof(events) / sizeof(events[0]);
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <drawScreen+0x80>)
 80024f6:	2204      	movs	r2, #4
 80024f8:	701a      	strb	r2, [r3, #0]
            break;
 80024fa:	e00b      	b.n	8002514 <drawScreen+0x74>
        case CAR_CONFIGURATION_SCREEN:
            drawCarConfigurationScreen();
 80024fc:	f000 fbe6 	bl	8002ccc <drawCarConfigurationScreen>
			max_menu_option = 4;
 8002500:	4b07      	ldr	r3, [pc, #28]	; (8002520 <drawScreen+0x80>)
 8002502:	2204      	movs	r2, #4
 8002504:	701a      	strb	r2, [r3, #0]
            break;
 8002506:	e005      	b.n	8002514 <drawScreen+0x74>
        default:
            drawRTDScreen();
 8002508:	f000 f84e 	bl	80025a8 <drawRTDScreen>
			max_menu_option = 0;
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <drawScreen+0x80>)
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
            break;
 8002512:	bf00      	nop
    }
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000680 	.word	0x20000680
 8002520:	20000681 	.word	0x20000681

08002524 <updateMenuScroll>:
void updateMenuScroll() {
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
	if (menu_pot_incremented && selected_menu_option < max_menu_option) {
 8002528:	4b11      	ldr	r3, [pc, #68]	; (8002570 <updateMenuScroll+0x4c>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00c      	beq.n	800254a <updateMenuScroll+0x26>
 8002530:	4b10      	ldr	r3, [pc, #64]	; (8002574 <updateMenuScroll+0x50>)
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	4b10      	ldr	r3, [pc, #64]	; (8002578 <updateMenuScroll+0x54>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d206      	bcs.n	800254a <updateMenuScroll+0x26>
		selected_menu_option++;
 800253c:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <updateMenuScroll+0x50>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	3301      	adds	r3, #1
 8002542:	b2da      	uxtb	r2, r3
 8002544:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <updateMenuScroll+0x50>)
 8002546:	701a      	strb	r2, [r3, #0]
	}
	else if (menu_pot_decremented && selected_menu_option > 0) {
		selected_menu_option--;
	}
}
 8002548:	e00d      	b.n	8002566 <updateMenuScroll+0x42>
	else if (menu_pot_decremented && selected_menu_option > 0) {
 800254a:	4b0c      	ldr	r3, [pc, #48]	; (800257c <updateMenuScroll+0x58>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d009      	beq.n	8002566 <updateMenuScroll+0x42>
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <updateMenuScroll+0x50>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <updateMenuScroll+0x42>
		selected_menu_option--;
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <updateMenuScroll+0x50>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	3b01      	subs	r3, #1
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4b04      	ldr	r3, [pc, #16]	; (8002574 <updateMenuScroll+0x50>)
 8002564:	701a      	strb	r2, [r3, #0]
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	20000656 	.word	0x20000656
 8002574:	20000680 	.word	0x20000680
 8002578:	20000681 	.word	0x20000681
 800257c:	20000657 	.word	0x20000657

08002580 <drawStartupScreen>:

/* UI Pages */
void drawStartupScreen() {
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
    BSP_LCD_SetTextColor(primary_back_color);
 8002584:	201f      	movs	r0, #31
 8002586:	f7ff fb0f 	bl	8001ba8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font_RobotoMedium24);
 800258a:	4805      	ldr	r0, [pc, #20]	; (80025a0 <drawStartupScreen+0x20>)
 800258c:	f7ff fb2c 	bl	8001be8 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(screen_margin - 10, 24 + ((31 / 2) - 12), "START SCREEN", CENTER_MODE);
 8002590:	2301      	movs	r3, #1
 8002592:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <drawStartupScreen+0x24>)
 8002594:	211b      	movs	r1, #27
 8002596:	2004      	movs	r0, #4
 8002598:	f7ff fb7e 	bl	8001c98 <BSP_LCD_DisplayStringAt>
}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20000018 	.word	0x20000018
 80025a4:	080073e0 	.word	0x080073e0

080025a8 <drawRTDScreen>:

void drawRTDScreen() {
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
	// Draw header bar
	drawHeaderBar(READY_TO_DRIVE);
 80025ae:	2001      	movs	r0, #1
 80025b0:	f000 fbd8 	bl	8002d64 <drawHeaderBar>

	// Draw accumulator bars
	drawAccumulatorDeltaBar(38);
 80025b4:	2026      	movs	r0, #38	; 0x26
 80025b6:	f000 fc05 	bl	8002dc4 <drawAccumulatorDeltaBar>
	drawAccumulatorTotalBar(138);
 80025ba:	208a      	movs	r0, #138	; 0x8a
 80025bc:	f000 fd98 	bl	80030f0 <drawAccumulatorTotalBar>

	// Draw divider bar
	BSP_LCD_SetTextColor(primary_back_color);
 80025c0:	201f      	movs	r0, #31
 80025c2:	f7ff faf1 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 240, 320, 5);
 80025c6:	2305      	movs	r3, #5
 80025c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80025cc:	21f0      	movs	r1, #240	; 0xf0
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7ff fdd0 	bl	8002174 <BSP_LCD_FillRect>

	char* reading[5] = { "Accumul (v)", "Accumul (C)", "Gearbox (C)", "Inverter (C)", "Motor   (C)"};
 80025d4:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <drawRTDScreen+0xa0>)
 80025d6:	1d3c      	adds	r4, r7, #4
 80025d8:	461d      	mov	r5, r3
 80025da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025de:	682b      	ldr	r3, [r5, #0]
 80025e0:	6023      	str	r3, [r4, #0]
	uint16_t startingXPos = 245;
 80025e2:	23f5      	movs	r3, #245	; 0xf5
 80025e4:	837b      	strh	r3, [r7, #26]
	drawReading(startingXPos, reading[0], "?", false);
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	8b78      	ldrh	r0, [r7, #26]
 80025ea:	2300      	movs	r3, #0
 80025ec:	4a17      	ldr	r2, [pc, #92]	; (800264c <drawRTDScreen+0xa4>)
 80025ee:	f000 fe63 	bl	80032b8 <drawReading>
	for (int i = 1; i < 4; i++) {
 80025f2:	2301      	movs	r3, #1
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	e018      	b.n	800262a <drawRTDScreen+0x82>
		drawReading(startingXPos + (reading_line_height * i), reading[i], "?", true);
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	0052      	lsls	r2, r2, #1
 8002600:	441a      	add	r2, r3
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	b29a      	uxth	r2, r3
 8002608:	8b7b      	ldrh	r3, [r7, #26]
 800260a:	4413      	add	r3, r2
 800260c:	b298      	uxth	r0, r3
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	f107 0220 	add.w	r2, r7, #32
 8002616:	4413      	add	r3, r2
 8002618:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 800261c:	2301      	movs	r3, #1
 800261e:	4a0b      	ldr	r2, [pc, #44]	; (800264c <drawRTDScreen+0xa4>)
 8002620:	f000 fe4a 	bl	80032b8 <drawReading>
	for (int i = 1; i < 4; i++) {
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	3301      	adds	r3, #1
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	2b03      	cmp	r3, #3
 800262e:	dde3      	ble.n	80025f8 <drawRTDScreen+0x50>
	}
	drawReading(startingXPos + (reading_line_height * 4), reading[4], "?", false);
 8002630:	8b7b      	ldrh	r3, [r7, #26]
 8002632:	33bc      	adds	r3, #188	; 0xbc
 8002634:	b298      	uxth	r0, r3
 8002636:	6979      	ldr	r1, [r7, #20]
 8002638:	2300      	movs	r3, #0
 800263a:	4a04      	ldr	r2, [pc, #16]	; (800264c <drawRTDScreen+0xa4>)
 800263c:	f000 fe3c 	bl	80032b8 <drawReading>
}
 8002640:	bf00      	nop
 8002642:	3720      	adds	r7, #32
 8002644:	46bd      	mov	sp, r7
 8002646:	bdb0      	pop	{r4, r5, r7, pc}
 8002648:	08007434 	.word	0x08007434
 800264c:	080073f0 	.word	0x080073f0

08002650 <updateRTDScreen>:
void updateRTDScreen() {
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
    // Update accumulator bars
    updateAccumulatorDeltaBar(38);
 8002656:	2026      	movs	r0, #38	; 0x26
 8002658:	f000 fcaa 	bl	8002fb0 <updateAccumulatorDeltaBar>
    updateAccumulatorTotalBar(138);
 800265c:	208a      	movs	r0, #138	; 0x8a
 800265e:	f000 fdbd 	bl	80031dc <updateAccumulatorTotalBar>

    // Update critical readings
    uint32_t reading_value;
    uint16_t startingYPos = 245;
 8002662:	23f5      	movs	r3, #245	; 0xf5
 8002664:	80fb      	strh	r3, [r7, #6]

    // Accumul. (v)
    clearArea(screen_width - 60, startingYPos + (reading_line_height * 0) + ((reading_line_height / 2) - 12), 90, 24);
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	330b      	adds	r3, #11
 800266a:	b299      	uxth	r1, r3
 800266c:	2318      	movs	r3, #24
 800266e:	225a      	movs	r2, #90	; 0x5a
 8002670:	f44f 7082 	mov.w	r0, #260	; 0x104
 8002674:	f7ff fee2 	bl	800243c <clearArea>
    sprintf(reading_value, "%.0f", accumul_volts);
 8002678:	683c      	ldr	r4, [r7, #0]
 800267a:	4bc2      	ldr	r3, [pc, #776]	; (8002984 <updateRTDScreen+0x334>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7fd ff62 	bl	8000548 <__aeabi_f2d>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	49bf      	ldr	r1, [pc, #764]	; (8002988 <updateRTDScreen+0x338>)
 800268a:	4620      	mov	r0, r4
 800268c:	f001 ff42 	bl	8004514 <siprintf>
    if (accumul_volts > 50) {
 8002690:	4bbc      	ldr	r3, [pc, #752]	; (8002984 <updateRTDScreen+0x334>)
 8002692:	edd3 7a00 	vldr	s15, [r3]
 8002696:	ed9f 7abd 	vldr	s14, [pc, #756]	; 800298c <updateRTDScreen+0x33c>
 800269a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800269e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a2:	dd07      	ble.n	80026b4 <updateRTDScreen+0x64>
        updateReading(startingYPos + (reading_line_height * 0), reading_value, warning_color);
 80026a4:	6839      	ldr	r1, [r7, #0]
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fe55 	bl	800335c <updateReading>
 80026b2:	e022      	b.n	80026fa <updateRTDScreen+0xaa>
    }
    else if (accumul_volts <= 50 && accumul_volts > 30) {
 80026b4:	4bb3      	ldr	r3, [pc, #716]	; (8002984 <updateRTDScreen+0x334>)
 80026b6:	edd3 7a00 	vldr	s15, [r3]
 80026ba:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800298c <updateRTDScreen+0x33c>
 80026be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c6:	d811      	bhi.n	80026ec <updateRTDScreen+0x9c>
 80026c8:	4bae      	ldr	r3, [pc, #696]	; (8002984 <updateRTDScreen+0x334>)
 80026ca:	edd3 7a00 	vldr	s15, [r3]
 80026ce:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80026d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026da:	dd07      	ble.n	80026ec <updateRTDScreen+0x9c>
        updateReading(startingYPos + (reading_line_height * 0), reading_value, caution_color);
 80026dc:	6839      	ldr	r1, [r7, #0]
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fe39 	bl	800335c <updateReading>
 80026ea:	e006      	b.n	80026fa <updateRTDScreen+0xaa>
    }
    else {
        updateReading(startingYPos + (reading_line_height * 0), reading_value, nominal_color);
 80026ec:	6839      	ldr	r1, [r7, #0]
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 fe31 	bl	800335c <updateReading>
    }

    // Accumul. (C)
    clearArea(screen_width - 60, startingYPos + (reading_line_height * 1) + ((reading_line_height / 2) - 12), 90, 24);
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	333a      	adds	r3, #58	; 0x3a
 80026fe:	b299      	uxth	r1, r3
 8002700:	2318      	movs	r3, #24
 8002702:	225a      	movs	r2, #90	; 0x5a
 8002704:	f44f 7082 	mov.w	r0, #260	; 0x104
 8002708:	f7ff fe98 	bl	800243c <clearArea>
    sprintf(reading_value, "%.0f", accumul_temp);
 800270c:	683c      	ldr	r4, [r7, #0]
 800270e:	4ba0      	ldr	r3, [pc, #640]	; (8002990 <updateRTDScreen+0x340>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd ff18 	bl	8000548 <__aeabi_f2d>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	499a      	ldr	r1, [pc, #616]	; (8002988 <updateRTDScreen+0x338>)
 800271e:	4620      	mov	r0, r4
 8002720:	f001 fef8 	bl	8004514 <siprintf>
    if (accumul_temp > 50) {
 8002724:	4b9a      	ldr	r3, [pc, #616]	; (8002990 <updateRTDScreen+0x340>)
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800298c <updateRTDScreen+0x33c>
 800272e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002736:	dd09      	ble.n	800274c <updateRTDScreen+0xfc>
		updateReading(startingYPos + (reading_line_height * 1), reading_value, warning_color);
 8002738:	88fb      	ldrh	r3, [r7, #6]
 800273a:	332f      	adds	r3, #47	; 0x2f
 800273c:	b29b      	uxth	r3, r3
 800273e:	6839      	ldr	r1, [r7, #0]
 8002740:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fe09 	bl	800335c <updateReading>
 800274a:	e026      	b.n	800279a <updateRTDScreen+0x14a>
	}
	else if (accumul_temp <= 50 && accumul_temp > 30) {
 800274c:	4b90      	ldr	r3, [pc, #576]	; (8002990 <updateRTDScreen+0x340>)
 800274e:	edd3 7a00 	vldr	s15, [r3]
 8002752:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 800298c <updateRTDScreen+0x33c>
 8002756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800275a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275e:	d813      	bhi.n	8002788 <updateRTDScreen+0x138>
 8002760:	4b8b      	ldr	r3, [pc, #556]	; (8002990 <updateRTDScreen+0x340>)
 8002762:	edd3 7a00 	vldr	s15, [r3]
 8002766:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800276a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800276e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002772:	dd09      	ble.n	8002788 <updateRTDScreen+0x138>
		updateReading(startingYPos + (reading_line_height * 1), reading_value, caution_color);
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	332f      	adds	r3, #47	; 0x2f
 8002778:	b29b      	uxth	r3, r3
 800277a:	6839      	ldr	r1, [r7, #0]
 800277c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fdeb 	bl	800335c <updateReading>
 8002786:	e008      	b.n	800279a <updateRTDScreen+0x14a>
	}
	else {
		updateReading(startingYPos + (reading_line_height * 1), reading_value, nominal_color);
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	332f      	adds	r3, #47	; 0x2f
 800278c:	b29b      	uxth	r3, r3
 800278e:	6839      	ldr	r1, [r7, #0]
 8002790:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fde1 	bl	800335c <updateReading>
	}

    // Gearbox  (C)
    clearArea(screen_width - 60, startingYPos + (reading_line_height * 2) + ((reading_line_height / 2) - 12), 90, 24);
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	3369      	adds	r3, #105	; 0x69
 800279e:	b299      	uxth	r1, r3
 80027a0:	2318      	movs	r3, #24
 80027a2:	225a      	movs	r2, #90	; 0x5a
 80027a4:	f44f 7082 	mov.w	r0, #260	; 0x104
 80027a8:	f7ff fe48 	bl	800243c <clearArea>
	sprintf(reading_value, "%.0f", gearbox_temp);
 80027ac:	683c      	ldr	r4, [r7, #0]
 80027ae:	4b79      	ldr	r3, [pc, #484]	; (8002994 <updateRTDScreen+0x344>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fd fec8 	bl	8000548 <__aeabi_f2d>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4972      	ldr	r1, [pc, #456]	; (8002988 <updateRTDScreen+0x338>)
 80027be:	4620      	mov	r0, r4
 80027c0:	f001 fea8 	bl	8004514 <siprintf>
	if (gearbox_temp > 50) {
 80027c4:	4b73      	ldr	r3, [pc, #460]	; (8002994 <updateRTDScreen+0x344>)
 80027c6:	edd3 7a00 	vldr	s15, [r3]
 80027ca:	ed9f 7a70 	vldr	s14, [pc, #448]	; 800298c <updateRTDScreen+0x33c>
 80027ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d6:	dd09      	ble.n	80027ec <updateRTDScreen+0x19c>
		updateReading(startingYPos + (reading_line_height * 2), reading_value, warning_color);
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	335e      	adds	r3, #94	; 0x5e
 80027dc:	b29b      	uxth	r3, r3
 80027de:	6839      	ldr	r1, [r7, #0]
 80027e0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fdb9 	bl	800335c <updateReading>
 80027ea:	e026      	b.n	800283a <updateRTDScreen+0x1ea>
	}
	else if (gearbox_temp <= 50 && gearbox_temp > 30) {
 80027ec:	4b69      	ldr	r3, [pc, #420]	; (8002994 <updateRTDScreen+0x344>)
 80027ee:	edd3 7a00 	vldr	s15, [r3]
 80027f2:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800298c <updateRTDScreen+0x33c>
 80027f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fe:	d813      	bhi.n	8002828 <updateRTDScreen+0x1d8>
 8002800:	4b64      	ldr	r3, [pc, #400]	; (8002994 <updateRTDScreen+0x344>)
 8002802:	edd3 7a00 	vldr	s15, [r3]
 8002806:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800280a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800280e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002812:	dd09      	ble.n	8002828 <updateRTDScreen+0x1d8>
		updateReading(startingYPos + (reading_line_height * 2), reading_value, caution_color);
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	335e      	adds	r3, #94	; 0x5e
 8002818:	b29b      	uxth	r3, r3
 800281a:	6839      	ldr	r1, [r7, #0]
 800281c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002820:	4618      	mov	r0, r3
 8002822:	f000 fd9b 	bl	800335c <updateReading>
 8002826:	e008      	b.n	800283a <updateRTDScreen+0x1ea>
	}
	else {
		updateReading(startingYPos + (reading_line_height * 2), reading_value, nominal_color);
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	335e      	adds	r3, #94	; 0x5e
 800282c:	b29b      	uxth	r3, r3
 800282e:	6839      	ldr	r1, [r7, #0]
 8002830:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fd91 	bl	800335c <updateReading>
	}

    // Inverter (C)
	clearArea(screen_width - 60, startingYPos + (reading_line_height * 3) + ((reading_line_height / 2) - 12), 90, 24);
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	3398      	adds	r3, #152	; 0x98
 800283e:	b299      	uxth	r1, r3
 8002840:	2318      	movs	r3, #24
 8002842:	225a      	movs	r2, #90	; 0x5a
 8002844:	f44f 7082 	mov.w	r0, #260	; 0x104
 8002848:	f7ff fdf8 	bl	800243c <clearArea>
	sprintf(reading_value, "%.0f", inverter_temp);
 800284c:	683c      	ldr	r4, [r7, #0]
 800284e:	4b52      	ldr	r3, [pc, #328]	; (8002998 <updateRTDScreen+0x348>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fd fe78 	bl	8000548 <__aeabi_f2d>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	494a      	ldr	r1, [pc, #296]	; (8002988 <updateRTDScreen+0x338>)
 800285e:	4620      	mov	r0, r4
 8002860:	f001 fe58 	bl	8004514 <siprintf>
	if (inverter_temp > 50) {
 8002864:	4b4c      	ldr	r3, [pc, #304]	; (8002998 <updateRTDScreen+0x348>)
 8002866:	edd3 7a00 	vldr	s15, [r3]
 800286a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800298c <updateRTDScreen+0x33c>
 800286e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002876:	dd09      	ble.n	800288c <updateRTDScreen+0x23c>
		updateReading(startingYPos + (reading_line_height * 3), reading_value, warning_color);
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	338d      	adds	r3, #141	; 0x8d
 800287c:	b29b      	uxth	r3, r3
 800287e:	6839      	ldr	r1, [r7, #0]
 8002880:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fd69 	bl	800335c <updateReading>
 800288a:	e026      	b.n	80028da <updateRTDScreen+0x28a>
	}
	else if (inverter_temp <= 50 && inverter_temp > 30) {
 800288c:	4b42      	ldr	r3, [pc, #264]	; (8002998 <updateRTDScreen+0x348>)
 800288e:	edd3 7a00 	vldr	s15, [r3]
 8002892:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800298c <updateRTDScreen+0x33c>
 8002896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289e:	d813      	bhi.n	80028c8 <updateRTDScreen+0x278>
 80028a0:	4b3d      	ldr	r3, [pc, #244]	; (8002998 <updateRTDScreen+0x348>)
 80028a2:	edd3 7a00 	vldr	s15, [r3]
 80028a6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80028aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b2:	dd09      	ble.n	80028c8 <updateRTDScreen+0x278>
		updateReading(startingYPos + (reading_line_height * 3), reading_value, caution_color);
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	338d      	adds	r3, #141	; 0x8d
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	6839      	ldr	r1, [r7, #0]
 80028bc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 fd4b 	bl	800335c <updateReading>
 80028c6:	e008      	b.n	80028da <updateRTDScreen+0x28a>
	}
	else {
		updateReading(startingYPos + (reading_line_height * 3), reading_value, nominal_color);
 80028c8:	88fb      	ldrh	r3, [r7, #6]
 80028ca:	338d      	adds	r3, #141	; 0x8d
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	6839      	ldr	r1, [r7, #0]
 80028d0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 fd41 	bl	800335c <updateReading>
	}

    // Motor    (C)
	clearArea(screen_width - 60, startingYPos + (reading_line_height * 4) + ((reading_line_height / 2) - 12), 90, 24);
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	33c7      	adds	r3, #199	; 0xc7
 80028de:	b299      	uxth	r1, r3
 80028e0:	2318      	movs	r3, #24
 80028e2:	225a      	movs	r2, #90	; 0x5a
 80028e4:	f44f 7082 	mov.w	r0, #260	; 0x104
 80028e8:	f7ff fda8 	bl	800243c <clearArea>
	sprintf(reading_value, "%.0f", motor_temp);
 80028ec:	683c      	ldr	r4, [r7, #0]
 80028ee:	4b2b      	ldr	r3, [pc, #172]	; (800299c <updateRTDScreen+0x34c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd fe28 	bl	8000548 <__aeabi_f2d>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4922      	ldr	r1, [pc, #136]	; (8002988 <updateRTDScreen+0x338>)
 80028fe:	4620      	mov	r0, r4
 8002900:	f001 fe08 	bl	8004514 <siprintf>
	if (inverter_temp > 50) {
 8002904:	4b24      	ldr	r3, [pc, #144]	; (8002998 <updateRTDScreen+0x348>)
 8002906:	edd3 7a00 	vldr	s15, [r3]
 800290a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800298c <updateRTDScreen+0x33c>
 800290e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002916:	dd09      	ble.n	800292c <updateRTDScreen+0x2dc>
		updateReading(startingYPos + (reading_line_height * 4), reading_value, warning_color);
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	33bc      	adds	r3, #188	; 0xbc
 800291c:	b29b      	uxth	r3, r3
 800291e:	6839      	ldr	r1, [r7, #0]
 8002920:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fd19 	bl	800335c <updateReading>
	}
	else {
		updateReading(startingYPos + (reading_line_height * 4), reading_value, nominal_color);
	}

}
 800292a:	e026      	b.n	800297a <updateRTDScreen+0x32a>
	else if (motor_temp <= 50 && motor_temp > 30) {
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <updateRTDScreen+0x34c>)
 800292e:	edd3 7a00 	vldr	s15, [r3]
 8002932:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800298c <updateRTDScreen+0x33c>
 8002936:	eef4 7ac7 	vcmpe.f32	s15, s14
 800293a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293e:	d813      	bhi.n	8002968 <updateRTDScreen+0x318>
 8002940:	4b16      	ldr	r3, [pc, #88]	; (800299c <updateRTDScreen+0x34c>)
 8002942:	edd3 7a00 	vldr	s15, [r3]
 8002946:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800294a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800294e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002952:	dd09      	ble.n	8002968 <updateRTDScreen+0x318>
		updateReading(startingYPos + (reading_line_height * 4), reading_value, caution_color);
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	33bc      	adds	r3, #188	; 0xbc
 8002958:	b29b      	uxth	r3, r3
 800295a:	6839      	ldr	r1, [r7, #0]
 800295c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fcfb 	bl	800335c <updateReading>
}
 8002966:	e008      	b.n	800297a <updateRTDScreen+0x32a>
		updateReading(startingYPos + (reading_line_height * 4), reading_value, nominal_color);
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	33bc      	adds	r3, #188	; 0xbc
 800296c:	b29b      	uxth	r3, r3
 800296e:	6839      	ldr	r1, [r7, #0]
 8002970:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fcf1 	bl	800335c <updateReading>
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bd90      	pop	{r4, r7, pc}
 8002982:	bf00      	nop
 8002984:	200000cc 	.word	0x200000cc
 8002988:	08007448 	.word	0x08007448
 800298c:	42480000 	.word	0x42480000
 8002990:	200000d0 	.word	0x200000d0
 8002994:	200000d4 	.word	0x200000d4
 8002998:	200000d8 	.word	0x200000d8
 800299c:	200000dc 	.word	0x200000dc

080029a0 <drawSMScreen>:

void drawSMScreen() {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
	// Draw header bar
	drawHeaderBar(STATIC_MODE);
 80029a6:	2000      	movs	r0, #0
 80029a8:	f000 f9dc 	bl	8002d64 <drawHeaderBar>

	// Draw accumulator bars
	drawAccumulatorDeltaBar(35);
 80029ac:	2023      	movs	r0, #35	; 0x23
 80029ae:	f000 fa09 	bl	8002dc4 <drawAccumulatorDeltaBar>
	drawAccumulatorTotalBar(126);
 80029b2:	207e      	movs	r0, #126	; 0x7e
 80029b4:	f000 fb9c 	bl	80030f0 <drawAccumulatorTotalBar>

	// Draw divider bar
	BSP_LCD_SetTextColor(primary_back_color);
 80029b8:	201f      	movs	r0, #31
 80029ba:	f7ff f8f5 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 217, screen_width, 31);
 80029be:	231f      	movs	r3, #31
 80029c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80029c4:	21d9      	movs	r1, #217	; 0xd9
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7ff fbd4 	bl	8002174 <BSP_LCD_FillRect>

	// Draw configuration options
	drawMenuItem(248, menus[0], false);
 80029cc:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <drawSMScreen+0x84>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2200      	movs	r2, #0
 80029d2:	4619      	mov	r1, r3
 80029d4:	20f8      	movs	r0, #248	; 0xf8
 80029d6:	f000 fce1 	bl	800339c <drawMenuItem>
	for (int i = 1; i < 3; i++) {
 80029da:	2301      	movs	r3, #1
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	e012      	b.n	8002a06 <drawSMScreen+0x66>
		drawMenuItem(248 + (menu_line_height * i), menus[i], true);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	0192      	lsls	r2, r2, #6
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	33f8      	adds	r3, #248	; 0xf8
 80029ee:	b298      	uxth	r0, r3
 80029f0:	4a0c      	ldr	r2, [pc, #48]	; (8002a24 <drawSMScreen+0x84>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f8:	2201      	movs	r2, #1
 80029fa:	4619      	mov	r1, r3
 80029fc:	f000 fcce 	bl	800339c <drawMenuItem>
	for (int i = 1; i < 3; i++) {
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3301      	adds	r3, #1
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	dde9      	ble.n	80029e0 <drawSMScreen+0x40>
	}
	drawMenuItem(248 + (menu_line_height * 3), menus[3], false);
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <drawSMScreen+0x84>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	4619      	mov	r1, r3
 8002a14:	f240 10b5 	movw	r0, #437	; 0x1b5
 8002a18:	f000 fcc0 	bl	800339c <drawMenuItem>
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	200000b8 	.word	0x200000b8

08002a28 <updateSMScreen>:
void updateSMScreen() {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
    // Update accumulator bar
    updateAccumulatorTotalBar(126);
 8002a2e:	207e      	movs	r0, #126	; 0x7e
 8002a30:	f000 fbd4 	bl	80031dc <updateAccumulatorTotalBar>

    // Draw configuration options
    for (int i = 0; i < 4; i++) {
 8002a34:	2300      	movs	r3, #0
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	e038      	b.n	8002aac <updateSMScreen+0x84>
        if (i == selected_menu_option) {
 8002a3a:	4b20      	ldr	r3, [pc, #128]	; (8002abc <updateSMScreen+0x94>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d11f      	bne.n	8002a86 <updateSMScreen+0x5e>
            clearArea(0, 248 + (menu_line_height * i) + ((menu_line_height / 2) - 12), screen_width, 24);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	0192      	lsls	r2, r2, #6
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	f203 130b 	addw	r3, r3, #267	; 0x10b
 8002a56:	b299      	uxth	r1, r3
 8002a58:	2318      	movs	r3, #24
 8002a5a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f7ff fcec 	bl	800243c <clearArea>
            updateMenuItem(248 + (menu_line_height * i), menus[i], true); // Highlight selected item
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	0192      	lsls	r2, r2, #6
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	33f8      	adds	r3, #248	; 0xf8
 8002a72:	b298      	uxth	r0, r3
 8002a74:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <updateSMScreen+0x98>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f000 fcc2 	bl	8003408 <updateMenuItem>
 8002a84:	e00f      	b.n	8002aa6 <updateSMScreen+0x7e>
        }
        else updateMenuItem(248 + (menu_line_height * i), menus[i], false);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	0192      	lsls	r2, r2, #6
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	33f8      	adds	r3, #248	; 0xf8
 8002a94:	b298      	uxth	r0, r3
 8002a96:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <updateSMScreen+0x98>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f000 fcb1 	bl	8003408 <updateMenuItem>
    for (int i = 0; i < 4; i++) {
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	ddc3      	ble.n	8002a3a <updateSMScreen+0x12>
    }
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000680 	.word	0x20000680
 8002ac0:	200000b8 	.word	0x200000b8

08002ac4 <drawDriverSelectionScreen>:

void drawDriverSelectionScreen() {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
	// Draw header bar
	drawHeaderBar(STATIC_MODE);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f000 f94a 	bl	8002d64 <drawHeaderBar>
	BSP_LCD_SetTextColor(primary_back_color);
 8002ad0:	201f      	movs	r0, #31
 8002ad2:	f7ff f869 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 24, screen_width, 31);
 8002ad6:	231f      	movs	r3, #31
 8002ad8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002adc:	2118      	movs	r1, #24
 8002ade:	2000      	movs	r0, #0
 8002ae0:	f7ff fb48 	bl	8002174 <BSP_LCD_FillRect>

	// Draw page label
	BSP_LCD_SetBackColor(primary_back_color);
 8002ae4:	201f      	movs	r0, #31
 8002ae6:	f7ff f86f 	bl	8001bc8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(primary_text_color);
 8002aea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002aee:	f7ff f85b 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font_RobotoMedium24);
 8002af2:	4816      	ldr	r0, [pc, #88]	; (8002b4c <drawDriverSelectionScreen+0x88>)
 8002af4:	f7ff f878 	bl	8001be8 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 24 + ((31 / 2) - 12), "Driver Select", CENTER_MODE);
 8002af8:	2301      	movs	r3, #1
 8002afa:	4a15      	ldr	r2, [pc, #84]	; (8002b50 <drawDriverSelectionScreen+0x8c>)
 8002afc:	211b      	movs	r1, #27
 8002afe:	2000      	movs	r0, #0
 8002b00:	f7ff f8ca 	bl	8001c98 <BSP_LCD_DisplayStringAt>

	// Draw settings
	drawMenuItem(55, drivers[0].driver_name, false);
 8002b04:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <drawDriverSelectionScreen+0x90>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	2037      	movs	r0, #55	; 0x37
 8002b0e:	f000 fc45 	bl	800339c <drawMenuItem>
	for (int i = 1; i < 4; i++) {
 8002b12:	2301      	movs	r3, #1
 8002b14:	607b      	str	r3, [r7, #4]
 8002b16:	e012      	b.n	8002b3e <drawDriverSelectionScreen+0x7a>
		drawMenuItem(55 + (menu_line_height * i), drivers[i].driver_name, true);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	0192      	lsls	r2, r2, #6
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3337      	adds	r3, #55	; 0x37
 8002b26:	b298      	uxth	r0, r3
 8002b28:	4a0a      	ldr	r2, [pc, #40]	; (8002b54 <drawDriverSelectionScreen+0x90>)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b30:	2201      	movs	r2, #1
 8002b32:	4619      	mov	r1, r3
 8002b34:	f000 fc32 	bl	800339c <drawMenuItem>
	for (int i = 1; i < 4; i++) {
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	dde9      	ble.n	8002b18 <drawDriverSelectionScreen+0x54>
	}
}
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000018 	.word	0x20000018
 8002b50:	080073a8 	.word	0x080073a8
 8002b54:	20000078 	.word	0x20000078

08002b58 <updateDriverSelectionScreen>:
void updateDriverSelectionScreen(){
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
    // Draw settings
    for (int i = 0; i < 4; i++) {
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	e012      	b.n	8002b8a <updateDriverSelectionScreen+0x32>
        updateMenuItem(55 + (menu_line_height * i), drivers[i].driver_name, false);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	0192      	lsls	r2, r2, #6
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3337      	adds	r3, #55	; 0x37
 8002b72:	b298      	uxth	r0, r3
 8002b74:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <updateDriverSelectionScreen+0x68>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	4619      	mov	r1, r3
 8002b80:	f000 fc42 	bl	8003408 <updateMenuItem>
    for (int i = 0; i < 4; i++) {
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3301      	adds	r3, #1
 8002b88:	607b      	str	r3, [r7, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	dde9      	ble.n	8002b64 <updateDriverSelectionScreen+0xc>
    }

    // Redraw selected item
    updateMenuItem(55 + (menu_line_height * selected_menu_option), drivers[selected_menu_option].driver_name, true);
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <updateDriverSelectionScreen+0x6c>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	0192      	lsls	r2, r2, #6
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3337      	adds	r3, #55	; 0x37
 8002ba0:	b298      	uxth	r0, r3
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <updateDriverSelectionScreen+0x6c>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <updateDriverSelectionScreen+0x68>)
 8002baa:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f000 fc29 	bl	8003408 <updateMenuItem>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000078 	.word	0x20000078
 8002bc4:	20000680 	.word	0x20000680

08002bc8 <drawEventSelectionScreen>:

void drawEventSelectionScreen() {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
	// Draw header bar
	drawHeaderBar(STATIC_MODE);
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f000 f8c8 	bl	8002d64 <drawHeaderBar>
	BSP_LCD_SetTextColor(primary_back_color);
 8002bd4:	201f      	movs	r0, #31
 8002bd6:	f7fe ffe7 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 24, screen_width, 31);
 8002bda:	231f      	movs	r3, #31
 8002bdc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002be0:	2118      	movs	r1, #24
 8002be2:	2000      	movs	r0, #0
 8002be4:	f7ff fac6 	bl	8002174 <BSP_LCD_FillRect>

	// Draw page label
	BSP_LCD_SetBackColor(primary_back_color);
 8002be8:	201f      	movs	r0, #31
 8002bea:	f7fe ffed 	bl	8001bc8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(primary_text_color);
 8002bee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002bf2:	f7fe ffd9 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font_RobotoMedium24);
 8002bf6:	4816      	ldr	r0, [pc, #88]	; (8002c50 <drawEventSelectionScreen+0x88>)
 8002bf8:	f7fe fff6 	bl	8001be8 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(screen_margin - 10, 24 + ((31 / 2) - 12), "Event Select", CENTER_MODE);
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	4a15      	ldr	r2, [pc, #84]	; (8002c54 <drawEventSelectionScreen+0x8c>)
 8002c00:	211b      	movs	r1, #27
 8002c02:	2004      	movs	r0, #4
 8002c04:	f7ff f848 	bl	8001c98 <BSP_LCD_DisplayStringAt>

	// Draw settings
	drawMenuItem(55, events[0].event_name, false);
 8002c08:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <drawEventSelectionScreen+0x90>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	4619      	mov	r1, r3
 8002c10:	2037      	movs	r0, #55	; 0x37
 8002c12:	f000 fbc3 	bl	800339c <drawMenuItem>
	for (int i = 1; i < 4; i++) {
 8002c16:	2301      	movs	r3, #1
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	e012      	b.n	8002c42 <drawEventSelectionScreen+0x7a>
		drawMenuItem(55 + (menu_line_height * i), events[i].event_name, true);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	0192      	lsls	r2, r2, #6
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3337      	adds	r3, #55	; 0x37
 8002c2a:	b298      	uxth	r0, r3
 8002c2c:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <drawEventSelectionScreen+0x90>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c34:	2201      	movs	r2, #1
 8002c36:	4619      	mov	r1, r3
 8002c38:	f000 fbb0 	bl	800339c <drawMenuItem>
	for (int i = 1; i < 4; i++) {
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	607b      	str	r3, [r7, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	dde9      	ble.n	8002c1c <drawEventSelectionScreen+0x54>
	}
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000018 	.word	0x20000018
 8002c54:	080073b8 	.word	0x080073b8
 8002c58:	20000098 	.word	0x20000098

08002c5c <updateEventSelectionScreen>:
void updateEventSelectionScreen() {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
    // Draw settings
    for (int i = 0; i < 4; i++) {
 8002c62:	2300      	movs	r3, #0
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	e012      	b.n	8002c8e <updateEventSelectionScreen+0x32>
        updateMenuItem(55 + (menu_line_height * i), events[i].event_name, false);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	0192      	lsls	r2, r2, #6
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3337      	adds	r3, #55	; 0x37
 8002c76:	b298      	uxth	r0, r3
 8002c78:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <updateEventSelectionScreen+0x68>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c80:	2200      	movs	r2, #0
 8002c82:	4619      	mov	r1, r3
 8002c84:	f000 fbc0 	bl	8003408 <updateMenuItem>
    for (int i = 0; i < 4; i++) {
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	dde9      	ble.n	8002c68 <updateEventSelectionScreen+0xc>
    }

    // Redraw selected item
    updateMenuItem(55 + (menu_line_height * selected_menu_option), events[selected_menu_option].event_name, true);
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <updateEventSelectionScreen+0x6c>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	0192      	lsls	r2, r2, #6
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3337      	adds	r3, #55	; 0x37
 8002ca4:	b298      	uxth	r0, r3
 8002ca6:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <updateEventSelectionScreen+0x6c>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <updateEventSelectionScreen+0x68>)
 8002cae:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f000 fba7 	bl	8003408 <updateMenuItem>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000098 	.word	0x20000098
 8002cc8:	20000680 	.word	0x20000680

08002ccc <drawCarConfigurationScreen>:

void drawCarConfigurationScreen() {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
	// Draw header bar
	drawHeaderBar(STATIC_MODE);
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f000 f847 	bl	8002d64 <drawHeaderBar>
	BSP_LCD_SetTextColor(primary_back_color);
 8002cd6:	201f      	movs	r0, #31
 8002cd8:	f7fe ff66 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 24, screen_width, 31);
 8002cdc:	231f      	movs	r3, #31
 8002cde:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ce2:	2118      	movs	r1, #24
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7ff fa45 	bl	8002174 <BSP_LCD_FillRect>

	// Draw page label
	BSP_LCD_SetBackColor(primary_back_color);
 8002cea:	201f      	movs	r0, #31
 8002cec:	f7fe ff6c 	bl	8001bc8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(primary_text_color);
 8002cf0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cf4:	f7fe ff58 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font_RobotoMedium22);
 8002cf8:	4813      	ldr	r0, [pc, #76]	; (8002d48 <drawCarConfigurationScreen+0x7c>)
 8002cfa:	f7fe ff75 	bl	8001be8 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(screen_margin - 10, 24 + ((31 / 2) - 12), "Car Config", CENTER_MODE);
 8002cfe:	2301      	movs	r3, #1
 8002d00:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <drawCarConfigurationScreen+0x80>)
 8002d02:	211b      	movs	r1, #27
 8002d04:	2004      	movs	r0, #4
 8002d06:	f7fe ffc7 	bl	8001c98 <BSP_LCD_DisplayStringAt>

	// Draw settings
	drawMenuItemWithValue(55 + (menu_line_height * 0), "Reg Braking", current_driver.car_configuration.regen_braking, false);
 8002d0a:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <drawCarConfigurationScreen+0x84>)
 8002d0c:	791a      	ldrb	r2, [r3, #4]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	4910      	ldr	r1, [pc, #64]	; (8002d54 <drawCarConfigurationScreen+0x88>)
 8002d12:	2037      	movs	r0, #55	; 0x37
 8002d14:	f000 fba0 	bl	8003458 <drawMenuItemWithValue>
    drawMenuItemWithValue(55 + (menu_line_height * 1), "Torq Vector", current_driver.car_configuration.torque_vectoring, true);
 8002d18:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <drawCarConfigurationScreen+0x84>)
 8002d1a:	795a      	ldrb	r2, [r3, #5]
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	490e      	ldr	r1, [pc, #56]	; (8002d58 <drawCarConfigurationScreen+0x8c>)
 8002d20:	2076      	movs	r0, #118	; 0x76
 8002d22:	f000 fb99 	bl	8003458 <drawMenuItemWithValue>
    drawMenuItemWithValue(55 + (menu_line_height * 2), "Dash Bright", current_driver.car_configuration.dash_led_brightness, true);
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <drawCarConfigurationScreen+0x84>)
 8002d28:	799a      	ldrb	r2, [r3, #6]
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	490b      	ldr	r1, [pc, #44]	; (8002d5c <drawCarConfigurationScreen+0x90>)
 8002d2e:	20b5      	movs	r0, #181	; 0xb5
 8002d30:	f000 fb92 	bl	8003458 <drawMenuItemWithValue>
    drawMenuItemWithValue(55 + (menu_line_height * 3), "Scrn Bright", current_driver.car_configuration.screen_brightness, true);
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <drawCarConfigurationScreen+0x84>)
 8002d36:	79da      	ldrb	r2, [r3, #7]
 8002d38:	2301      	movs	r3, #1
 8002d3a:	4909      	ldr	r1, [pc, #36]	; (8002d60 <drawCarConfigurationScreen+0x94>)
 8002d3c:	20f4      	movs	r0, #244	; 0xf4
 8002d3e:	f000 fb8b 	bl	8003458 <drawMenuItemWithValue>
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000010 	.word	0x20000010
 8002d4c:	080073c8 	.word	0x080073c8
 8002d50:	200000e8 	.word	0x200000e8
 8002d54:	08007450 	.word	0x08007450
 8002d58:	0800745c 	.word	0x0800745c
 8002d5c:	08007468 	.word	0x08007468
 8002d60:	08007474 	.word	0x08007474

08002d64 <drawHeaderBar>:
    updateMenuItemWithValue(55 + (menu_line_height * 2), "Dash Bright", current_driver.car_configuration.dash_led_brightness, false);
    updateMenuItemWithValue(55 + (menu_line_height * 3), "Scrn Bright", current_driver.car_configuration.screen_brightness, false);
}

/* UI Components */
void drawHeaderBar(Drive_Mode drive_mode){
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
	// Draw background bar
	BSP_LCD_SetBackColor(primary_back_color);
 8002d6e:	201f      	movs	r0, #31
 8002d70:	f7fe ff2a 	bl	8001bc8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(primary_back_color);
 8002d74:	201f      	movs	r0, #31
 8002d76:	f7fe ff17 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, screen_width, 27);
 8002d7a:	231b      	movs	r3, #27
 8002d7c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d80:	2100      	movs	r1, #0
 8002d82:	2000      	movs	r0, #0
 8002d84:	f7ff f9f6 	bl	8002174 <BSP_LCD_FillRect>

	// Draw drive mode
	char* drive_mode_label = "SM"; // Defaults to Static Mode
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <drawHeaderBar+0x54>)
 8002d8a:	60fb      	str	r3, [r7, #12]
	if (drive_mode == READY_TO_DRIVE) {
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <drawHeaderBar+0x32>
		drive_mode_label = "RTD";
 8002d92:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <drawHeaderBar+0x58>)
 8002d94:	60fb      	str	r3, [r7, #12]
	}

	BSP_LCD_SetTextColor(primary_text_color);
 8002d96:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d9a:	f7fe ff05 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font_RobotoMedium24);
 8002d9e:	4808      	ldr	r0, [pc, #32]	; (8002dc0 <drawHeaderBar+0x5c>)
 8002da0:	f7fe ff22 	bl	8001be8 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 0, drive_mode_label, CENTER_MODE);
 8002da4:	2301      	movs	r3, #1
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	2100      	movs	r1, #0
 8002daa:	2000      	movs	r0, #0
 8002dac:	f7fe ff74 	bl	8001c98 <BSP_LCD_DisplayStringAt>
}
 8002db0:	bf00      	nop
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	08007498 	.word	0x08007498
 8002dbc:	0800749c 	.word	0x0800749c
 8002dc0:	20000018 	.word	0x20000018

08002dc4 <drawAccumulatorDeltaBar>:

void drawAccumulatorDeltaBar(uint16_t yPos) {
 8002dc4:	b590      	push	{r4, r7, lr}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	80fb      	strh	r3, [r7, #6]
	uint8_t barHeight = 90;
 8002dce:	235a      	movs	r3, #90	; 0x5a
 8002dd0:	75fb      	strb	r3, [r7, #23]
	uint16_t barWidth = screen_width - (screen_margin * 2);
 8002dd2:	f44f 7392 	mov.w	r3, #292	; 0x124
 8002dd6:	82bb      	strh	r3, [r7, #20]
	uint16_t maxDelta = (barWidth / 2) - 2; // -2 is for center line and end border
 8002dd8:	8abb      	ldrh	r3, [r7, #20]
 8002dda:	085b      	lsrs	r3, r3, #1
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	3b02      	subs	r3, #2
 8002de0:	827b      	strh	r3, [r7, #18]
	uint16_t currentDelta = abs(maxDelta * accumul_delta);
 8002de2:	8a7b      	ldrh	r3, [r7, #18]
 8002de4:	ee07 3a90 	vmov	s15, r3
 8002de8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dec:	4b6d      	ldr	r3, [pc, #436]	; (8002fa4 <drawAccumulatorDeltaBar+0x1e0>)
 8002dee:	edd3 7a00 	vldr	s15, [r3]
 8002df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dfa:	ee17 3a90 	vmov	r3, s15
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	bfb8      	it	lt
 8002e02:	425b      	neglt	r3, r3
 8002e04:	823b      	strh	r3, [r7, #16]

	// Draw outline
	BSP_LCD_SetTextColor(primary_back_color);
 8002e06:	201f      	movs	r0, #31
 8002e08:	f7fe fece 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(screen_margin, yPos, barWidth, barHeight); // Outer stroke
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	8aba      	ldrh	r2, [r7, #20]
 8002e12:	88f9      	ldrh	r1, [r7, #6]
 8002e14:	200e      	movs	r0, #14
 8002e16:	f7ff f91d 	bl	8002054 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(screen_margin + 1, yPos + 1, barWidth - 2, barHeight - 2); // Inner stroke
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	b299      	uxth	r1, r3
 8002e20:	8abb      	ldrh	r3, [r7, #20]
 8002e22:	3b02      	subs	r3, #2
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	7dfb      	ldrb	r3, [r7, #23]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b02      	subs	r3, #2
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	200f      	movs	r0, #15
 8002e30:	f7ff f910 	bl	8002054 <BSP_LCD_DrawRect>

	// Draw center line
	BSP_LCD_SetTextColor(primary_back_color);
 8002e34:	201f      	movs	r0, #31
 8002e36:	f7fe feb7 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawLine(screen_margin + (barWidth/2) - 1, yPos, screen_margin + (barWidth/2) - 1, yPos + barHeight - 1);
 8002e3a:	8abb      	ldrh	r3, [r7, #20]
 8002e3c:	085b      	lsrs	r3, r3, #1
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	330d      	adds	r3, #13
 8002e42:	b298      	uxth	r0, r3
 8002e44:	8abb      	ldrh	r3, [r7, #20]
 8002e46:	085b      	lsrs	r3, r3, #1
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	330d      	adds	r3, #13
 8002e4c:	b29c      	uxth	r4, r3
 8002e4e:	7dfb      	ldrb	r3, [r7, #23]
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	88fb      	ldrh	r3, [r7, #6]
 8002e54:	4413      	add	r3, r2
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	88f9      	ldrh	r1, [r7, #6]
 8002e5e:	4622      	mov	r2, r4
 8002e60:	f7ff f836 	bl	8001ed0 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(screen_margin + (barWidth/2), yPos, screen_margin + (barWidth/2), yPos + barHeight - 1);
 8002e64:	8abb      	ldrh	r3, [r7, #20]
 8002e66:	085b      	lsrs	r3, r3, #1
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	330e      	adds	r3, #14
 8002e6c:	b298      	uxth	r0, r3
 8002e6e:	8abb      	ldrh	r3, [r7, #20]
 8002e70:	085b      	lsrs	r3, r3, #1
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	330e      	adds	r3, #14
 8002e76:	b29c      	uxth	r4, r3
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	88fb      	ldrh	r3, [r7, #6]
 8002e7e:	4413      	add	r3, r2
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	88f9      	ldrh	r1, [r7, #6]
 8002e88:	4622      	mov	r2, r4
 8002e8a:	f7ff f821 	bl	8001ed0 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(screen_margin + (barWidth/2) + 1, yPos, screen_margin + (barWidth/2) + 1, yPos + barHeight - 1);
 8002e8e:	8abb      	ldrh	r3, [r7, #20]
 8002e90:	085b      	lsrs	r3, r3, #1
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	330f      	adds	r3, #15
 8002e96:	b298      	uxth	r0, r3
 8002e98:	8abb      	ldrh	r3, [r7, #20]
 8002e9a:	085b      	lsrs	r3, r3, #1
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	330f      	adds	r3, #15
 8002ea0:	b29c      	uxth	r4, r3
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	88f9      	ldrh	r1, [r7, #6]
 8002eb2:	4622      	mov	r2, r4
 8002eb4:	f7ff f80c 	bl	8001ed0 <BSP_LCD_DrawLine>


	// Draw inner fill and percentage text
	BSP_LCD_SetFont(&Font_RobotoBlack36);
 8002eb8:	483b      	ldr	r0, [pc, #236]	; (8002fa8 <drawAccumulatorDeltaBar+0x1e4>)
 8002eba:	f7fe fe95 	bl	8001be8 <BSP_LCD_SetFont>
	uint8_t displayText[5];
	sprintf(displayText, "%.2f", accumul_delta);
 8002ebe:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <drawAccumulatorDeltaBar+0x1e0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd fb40 	bl	8000548 <__aeabi_f2d>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	460c      	mov	r4, r1
 8002ecc:	f107 0008 	add.w	r0, r7, #8
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4623      	mov	r3, r4
 8002ed4:	4935      	ldr	r1, [pc, #212]	; (8002fac <drawAccumulatorDeltaBar+0x1e8>)
 8002ed6:	f001 fb1d 	bl	8004514 <siprintf>
	if (accumul_delta < 0) {
 8002eda:	4b32      	ldr	r3, [pc, #200]	; (8002fa4 <drawAccumulatorDeltaBar+0x1e0>)
 8002edc:	edd3 7a00 	vldr	s15, [r3]
 8002ee0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee8:	d52c      	bpl.n	8002f44 <drawAccumulatorDeltaBar+0x180>
		BSP_LCD_SetTextColor(warning_color);
 8002eea:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002eee:	f7fe fe5b 	bl	8001ba8 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect((screen_margin + (barWidth / 2)) - currentDelta - 2, yPos + 2, currentDelta, barHeight - 4);
 8002ef2:	8abb      	ldrh	r3, [r7, #20]
 8002ef4:	085b      	lsrs	r3, r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	8a3b      	ldrh	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	330c      	adds	r3, #12
 8002f00:	b298      	uxth	r0, r3
 8002f02:	88fb      	ldrh	r3, [r7, #6]
 8002f04:	3302      	adds	r3, #2
 8002f06:	b299      	uxth	r1, r3
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b04      	subs	r3, #4
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	8a3a      	ldrh	r2, [r7, #16]
 8002f12:	f7ff f92f 	bl	8002174 <BSP_LCD_FillRect>

		BSP_LCD_SetTextColor(primary_text_color);
 8002f16:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f1a:	f7fe fe45 	bl	8001ba8 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f7fe fe52 	bl	8001bc8 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, yPos + (barHeight / 2) - 21, displayText, CENTER_MODE);
 8002f24:	7dfb      	ldrb	r3, [r7, #23]
 8002f26:	085b      	lsrs	r3, r3, #1
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	4413      	add	r3, r2
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b15      	subs	r3, #21
 8002f34:	b299      	uxth	r1, r3
 8002f36:	f107 0208 	add.w	r2, r7, #8
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f7fe feab 	bl	8001c98 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, yPos + (barHeight / 2) -  21, displayText, CENTER_MODE);
	}

	

}
 8002f42:	e02a      	b.n	8002f9a <drawAccumulatorDeltaBar+0x1d6>
		BSP_LCD_SetTextColor(nominal_color);
 8002f44:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002f48:	f7fe fe2e 	bl	8001ba8 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(screen_margin + (barWidth / 2) + 2, yPos + 2, currentDelta + 1, barHeight - 4);
 8002f4c:	8abb      	ldrh	r3, [r7, #20]
 8002f4e:	085b      	lsrs	r3, r3, #1
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3310      	adds	r3, #16
 8002f54:	b298      	uxth	r0, r3
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	3302      	adds	r3, #2
 8002f5a:	b299      	uxth	r1, r3
 8002f5c:	8a3b      	ldrh	r3, [r7, #16]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b04      	subs	r3, #4
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	f7ff f903 	bl	8002174 <BSP_LCD_FillRect>
		BSP_LCD_SetTextColor(primary_text_color);
 8002f6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f72:	f7fe fe19 	bl	8001ba8 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8002f76:	2000      	movs	r0, #0
 8002f78:	f7fe fe26 	bl	8001bc8 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, yPos + (barHeight / 2) -  21, displayText, CENTER_MODE);
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	085b      	lsrs	r3, r3, #1
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	4413      	add	r3, r2
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3b15      	subs	r3, #21
 8002f8c:	b299      	uxth	r1, r3
 8002f8e:	f107 0208 	add.w	r2, r7, #8
 8002f92:	2301      	movs	r3, #1
 8002f94:	2000      	movs	r0, #0
 8002f96:	f7fe fe7f 	bl	8001c98 <BSP_LCD_DisplayStringAt>
}
 8002f9a:	bf00      	nop
 8002f9c:	371c      	adds	r7, #28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd90      	pop	{r4, r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	200000e4 	.word	0x200000e4
 8002fa8:	20000008 	.word	0x20000008
 8002fac:	080074a0 	.word	0x080074a0

08002fb0 <updateAccumulatorDeltaBar>:

void updateAccumulatorDeltaBar(uint16_t yPos) {
 8002fb0:	b590      	push	{r4, r7, lr}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	80fb      	strh	r3, [r7, #6]
	uint8_t barHeight = 90;
 8002fba:	235a      	movs	r3, #90	; 0x5a
 8002fbc:	75fb      	strb	r3, [r7, #23]
	uint16_t barWidth = screen_width - (screen_margin * 2);
 8002fbe:	f44f 7392 	mov.w	r3, #292	; 0x124
 8002fc2:	82bb      	strh	r3, [r7, #20]
	uint16_t maxDelta = (barWidth / 2) - 2; // -2 is for center line and end border
 8002fc4:	8abb      	ldrh	r3, [r7, #20]
 8002fc6:	085b      	lsrs	r3, r3, #1
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b02      	subs	r3, #2
 8002fcc:	827b      	strh	r3, [r7, #18]
	uint16_t currentDelta = abs(maxDelta * accumul_delta);
 8002fce:	8a7b      	ldrh	r3, [r7, #18]
 8002fd0:	ee07 3a90 	vmov	s15, r3
 8002fd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fd8:	4b42      	ldr	r3, [pc, #264]	; (80030e4 <updateAccumulatorDeltaBar+0x134>)
 8002fda:	edd3 7a00 	vldr	s15, [r3]
 8002fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fe6:	ee17 3a90 	vmov	r3, s15
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bfb8      	it	lt
 8002fee:	425b      	neglt	r3, r3
 8002ff0:	823b      	strh	r3, [r7, #16]

	// Draw inner fill and percentage text
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8002ff2:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002ff6:	f7fe fdd7 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font_RobotoBlack36);
 8002ffa:	483b      	ldr	r0, [pc, #236]	; (80030e8 <updateAccumulatorDeltaBar+0x138>)
 8002ffc:	f7fe fdf4 	bl	8001be8 <BSP_LCD_SetFont>
	uint8_t displayText[5];
	sprintf(displayText, "%.2f", accumul_delta);
 8003000:	4b38      	ldr	r3, [pc, #224]	; (80030e4 <updateAccumulatorDeltaBar+0x134>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7fd fa9f 	bl	8000548 <__aeabi_f2d>
 800300a:	4603      	mov	r3, r0
 800300c:	460c      	mov	r4, r1
 800300e:	f107 0008 	add.w	r0, r7, #8
 8003012:	461a      	mov	r2, r3
 8003014:	4623      	mov	r3, r4
 8003016:	4935      	ldr	r1, [pc, #212]	; (80030ec <updateAccumulatorDeltaBar+0x13c>)
 8003018:	f001 fa7c 	bl	8004514 <siprintf>
	if (accumul_delta < 0) {
 800301c:	4b31      	ldr	r3, [pc, #196]	; (80030e4 <updateAccumulatorDeltaBar+0x134>)
 800301e:	edd3 7a00 	vldr	s15, [r3]
 8003022:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302a:	d52c      	bpl.n	8003086 <updateAccumulatorDeltaBar+0xd6>
		BSP_LCD_SetTextColor(warning_color);
 800302c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003030:	f7fe fdba 	bl	8001ba8 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect((screen_margin + (barWidth / 2)) - currentDelta - 2, yPos + 2, currentDelta, barHeight - 4);
 8003034:	8abb      	ldrh	r3, [r7, #20]
 8003036:	085b      	lsrs	r3, r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	8a3b      	ldrh	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	b29b      	uxth	r3, r3
 8003040:	330c      	adds	r3, #12
 8003042:	b298      	uxth	r0, r3
 8003044:	88fb      	ldrh	r3, [r7, #6]
 8003046:	3302      	adds	r3, #2
 8003048:	b299      	uxth	r1, r3
 800304a:	7dfb      	ldrb	r3, [r7, #23]
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b04      	subs	r3, #4
 8003050:	b29b      	uxth	r3, r3
 8003052:	8a3a      	ldrh	r2, [r7, #16]
 8003054:	f7ff f88e 	bl	8002174 <BSP_LCD_FillRect>

		BSP_LCD_SetTextColor(primary_text_color);
 8003058:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800305c:	f7fe fda4 	bl	8001ba8 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003060:	2000      	movs	r0, #0
 8003062:	f7fe fdb1 	bl	8001bc8 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, yPos + (barHeight / 2) - 21, displayText, CENTER_MODE);
 8003066:	7dfb      	ldrb	r3, [r7, #23]
 8003068:	085b      	lsrs	r3, r3, #1
 800306a:	b2db      	uxtb	r3, r3
 800306c:	b29a      	uxth	r2, r3
 800306e:	88fb      	ldrh	r3, [r7, #6]
 8003070:	4413      	add	r3, r2
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b15      	subs	r3, #21
 8003076:	b299      	uxth	r1, r3
 8003078:	f107 0208 	add.w	r2, r7, #8
 800307c:	2301      	movs	r3, #1
 800307e:	2000      	movs	r0, #0
 8003080:	f7fe fe0a 	bl	8001c98 <BSP_LCD_DisplayStringAt>

		BSP_LCD_SetTextColor(primary_text_color);
		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
		BSP_LCD_DisplayStringAt(0, yPos + (barHeight / 2) -  21, displayText, CENTER_MODE);
	}
}
 8003084:	e02a      	b.n	80030dc <updateAccumulatorDeltaBar+0x12c>
		BSP_LCD_SetTextColor(nominal_color);
 8003086:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800308a:	f7fe fd8d 	bl	8001ba8 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(screen_margin + (barWidth / 2) + 2, yPos + 2, currentDelta + 1, barHeight - 4);
 800308e:	8abb      	ldrh	r3, [r7, #20]
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	b29b      	uxth	r3, r3
 8003094:	3310      	adds	r3, #16
 8003096:	b298      	uxth	r0, r3
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	3302      	adds	r3, #2
 800309c:	b299      	uxth	r1, r3
 800309e:	8a3b      	ldrh	r3, [r7, #16]
 80030a0:	3301      	adds	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	7dfb      	ldrb	r3, [r7, #23]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b04      	subs	r3, #4
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f7ff f862 	bl	8002174 <BSP_LCD_FillRect>
		BSP_LCD_SetTextColor(primary_text_color);
 80030b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80030b4:	f7fe fd78 	bl	8001ba8 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80030b8:	2000      	movs	r0, #0
 80030ba:	f7fe fd85 	bl	8001bc8 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, yPos + (barHeight / 2) -  21, displayText, CENTER_MODE);
 80030be:	7dfb      	ldrb	r3, [r7, #23]
 80030c0:	085b      	lsrs	r3, r3, #1
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	4413      	add	r3, r2
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b15      	subs	r3, #21
 80030ce:	b299      	uxth	r1, r3
 80030d0:	f107 0208 	add.w	r2, r7, #8
 80030d4:	2301      	movs	r3, #1
 80030d6:	2000      	movs	r0, #0
 80030d8:	f7fe fdde 	bl	8001c98 <BSP_LCD_DisplayStringAt>
}
 80030dc:	bf00      	nop
 80030de:	371c      	adds	r7, #28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd90      	pop	{r4, r7, pc}
 80030e4:	200000e4 	.word	0x200000e4
 80030e8:	20000008 	.word	0x20000008
 80030ec:	080074a0 	.word	0x080074a0

080030f0 <drawAccumulatorTotalBar>:

void drawAccumulatorTotalBar(uint16_t yPos) {
 80030f0:	b590      	push	{r4, r7, lr}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	80fb      	strh	r3, [r7, #6]
	uint16_t currentCharge = accumul_charge;
 80030fa:	4b35      	ldr	r3, [pc, #212]	; (80031d0 <drawAccumulatorTotalBar+0xe0>)
 80030fc:	edd3 7a00 	vldr	s15, [r3]
 8003100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003104:	ee17 3a90 	vmov	r3, s15
 8003108:	82fb      	strh	r3, [r7, #22]
	uint8_t barHeight = 90;
 800310a:	235a      	movs	r3, #90	; 0x5a
 800310c:	757b      	strb	r3, [r7, #21]
	uint16_t barWidth = screen_width - (screen_margin * 2);
 800310e:	f44f 7392 	mov.w	r3, #292	; 0x124
 8003112:	827b      	strh	r3, [r7, #18]

	// Draw outline
	BSP_LCD_SetTextColor(primary_back_color);
 8003114:	201f      	movs	r0, #31
 8003116:	f7fe fd47 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(screen_margin, yPos, barWidth, barHeight); // Outer stroke
 800311a:	7d7b      	ldrb	r3, [r7, #21]
 800311c:	b29b      	uxth	r3, r3
 800311e:	8a7a      	ldrh	r2, [r7, #18]
 8003120:	88f9      	ldrh	r1, [r7, #6]
 8003122:	200e      	movs	r0, #14
 8003124:	f7fe ff96 	bl	8002054 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(screen_margin + 1, yPos + 1, barWidth - 2, barHeight - 2); // Inner stroke
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	3301      	adds	r3, #1
 800312c:	b299      	uxth	r1, r3
 800312e:	8a7b      	ldrh	r3, [r7, #18]
 8003130:	3b02      	subs	r3, #2
 8003132:	b29a      	uxth	r2, r3
 8003134:	7d7b      	ldrb	r3, [r7, #21]
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b02      	subs	r3, #2
 800313a:	b29b      	uxth	r3, r3
 800313c:	200f      	movs	r0, #15
 800313e:	f7fe ff89 	bl	8002054 <BSP_LCD_DrawRect>

	if(accumul_charge < 0){
 8003142:	4b23      	ldr	r3, [pc, #140]	; (80031d0 <drawAccumulatorTotalBar+0xe0>)
 8003144:	edd3 7a00 	vldr	s15, [r3]
 8003148:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800314c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003150:	d503      	bpl.n	800315a <drawAccumulatorTotalBar+0x6a>
		accumul_charge = 0;
 8003152:	4b1f      	ldr	r3, [pc, #124]	; (80031d0 <drawAccumulatorTotalBar+0xe0>)
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
	}

	// Draw inner fill
	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800315a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800315e:	f7fe fd23 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(screen_margin + 2, yPos + 2, currentCharge, barHeight - 4);
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	3302      	adds	r3, #2
 8003166:	b299      	uxth	r1, r3
 8003168:	7d7b      	ldrb	r3, [r7, #21]
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b04      	subs	r3, #4
 800316e:	b29b      	uxth	r3, r3
 8003170:	8afa      	ldrh	r2, [r7, #22]
 8003172:	2010      	movs	r0, #16
 8003174:	f7fe fffe 	bl	8002174 <BSP_LCD_FillRect>

	// Draw percentage text
	uint8_t displayText[5];
	sprintf(displayText, "%.0f", accumul_charge);
 8003178:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <drawAccumulatorTotalBar+0xe0>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd f9e3 	bl	8000548 <__aeabi_f2d>
 8003182:	4603      	mov	r3, r0
 8003184:	460c      	mov	r4, r1
 8003186:	f107 000c 	add.w	r0, r7, #12
 800318a:	461a      	mov	r2, r3
 800318c:	4623      	mov	r3, r4
 800318e:	4911      	ldr	r1, [pc, #68]	; (80031d4 <drawAccumulatorTotalBar+0xe4>)
 8003190:	f001 f9c0 	bl	8004514 <siprintf>

	BSP_LCD_SetTextColor(primary_text_color);
 8003194:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003198:	f7fe fd06 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font_RobotoBlack36);
 800319c:	480e      	ldr	r0, [pc, #56]	; (80031d8 <drawAccumulatorTotalBar+0xe8>)
 800319e:	f7fe fd23 	bl	8001be8 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80031a2:	2000      	movs	r0, #0
 80031a4:	f7fe fd10 	bl	8001bc8 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(0, yPos + (barHeight/2) - 21, displayText, CENTER_MODE);
 80031a8:	7d7b      	ldrb	r3, [r7, #21]
 80031aa:	085b      	lsrs	r3, r3, #1
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	4413      	add	r3, r2
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b15      	subs	r3, #21
 80031b8:	b299      	uxth	r1, r3
 80031ba:	f107 020c 	add.w	r2, r7, #12
 80031be:	2301      	movs	r3, #1
 80031c0:	2000      	movs	r0, #0
 80031c2:	f7fe fd69 	bl	8001c98 <BSP_LCD_DisplayStringAt>
}
 80031c6:	bf00      	nop
 80031c8:	371c      	adds	r7, #28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd90      	pop	{r4, r7, pc}
 80031ce:	bf00      	nop
 80031d0:	200000e0 	.word	0x200000e0
 80031d4:	08007448 	.word	0x08007448
 80031d8:	20000008 	.word	0x20000008

080031dc <updateAccumulatorTotalBar>:
void updateAccumulatorTotalBar(uint16_t yPos) {
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	80fb      	strh	r3, [r7, #6]
	uint8_t barHeight = 90;
 80031e6:	235a      	movs	r3, #90	; 0x5a
 80031e8:	75fb      	strb	r3, [r7, #23]
	uint16_t barWidth = screen_width - (screen_margin * 2);
 80031ea:	f44f 7392 	mov.w	r3, #292	; 0x124
 80031ee:	82bb      	strh	r3, [r7, #20]

	// Clear inner fill
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80031f0:	2000      	movs	r0, #0
 80031f2:	f7fe fcd9 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(screen_margin + 2, yPos + 2, barWidth - 4, barHeight - 4);
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	3302      	adds	r3, #2
 80031fa:	b299      	uxth	r1, r3
 80031fc:	8abb      	ldrh	r3, [r7, #20]
 80031fe:	3b04      	subs	r3, #4
 8003200:	b29a      	uxth	r2, r3
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	b29b      	uxth	r3, r3
 8003206:	3b04      	subs	r3, #4
 8003208:	b29b      	uxth	r3, r3
 800320a:	2010      	movs	r0, #16
 800320c:	f7fe ffb2 	bl	8002174 <BSP_LCD_FillRect>

	if(accumul_charge < 0){
 8003210:	4b26      	ldr	r3, [pc, #152]	; (80032ac <updateAccumulatorTotalBar+0xd0>)
 8003212:	edd3 7a00 	vldr	s15, [r3]
 8003216:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800321a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321e:	d503      	bpl.n	8003228 <updateAccumulatorTotalBar+0x4c>
		accumul_charge = 0;
 8003220:	4b22      	ldr	r3, [pc, #136]	; (80032ac <updateAccumulatorTotalBar+0xd0>)
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
	}

	// Draw inner fill
	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8003228:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800322c:	f7fe fcbc 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(screen_margin + 2, yPos + 2, accumul_charge, barHeight - 4);
 8003230:	88fb      	ldrh	r3, [r7, #6]
 8003232:	3302      	adds	r3, #2
 8003234:	b299      	uxth	r1, r3
 8003236:	4b1d      	ldr	r3, [pc, #116]	; (80032ac <updateAccumulatorTotalBar+0xd0>)
 8003238:	edd3 7a00 	vldr	s15, [r3]
 800323c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003240:	ee17 3a90 	vmov	r3, s15
 8003244:	b29a      	uxth	r2, r3
 8003246:	7dfb      	ldrb	r3, [r7, #23]
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b04      	subs	r3, #4
 800324c:	b29b      	uxth	r3, r3
 800324e:	2010      	movs	r0, #16
 8003250:	f7fe ff90 	bl	8002174 <BSP_LCD_FillRect>

	// Draw percentage text
	uint8_t displayText[5];
	sprintf(displayText, "%.0f", accumul_charge);
 8003254:	4b15      	ldr	r3, [pc, #84]	; (80032ac <updateAccumulatorTotalBar+0xd0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd f975 	bl	8000548 <__aeabi_f2d>
 800325e:	4603      	mov	r3, r0
 8003260:	460c      	mov	r4, r1
 8003262:	f107 000c 	add.w	r0, r7, #12
 8003266:	461a      	mov	r2, r3
 8003268:	4623      	mov	r3, r4
 800326a:	4911      	ldr	r1, [pc, #68]	; (80032b0 <updateAccumulatorTotalBar+0xd4>)
 800326c:	f001 f952 	bl	8004514 <siprintf>

	BSP_LCD_SetTextColor(primary_text_color);
 8003270:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003274:	f7fe fc98 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font_RobotoBlack36);
 8003278:	480e      	ldr	r0, [pc, #56]	; (80032b4 <updateAccumulatorTotalBar+0xd8>)
 800327a:	f7fe fcb5 	bl	8001be8 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800327e:	2000      	movs	r0, #0
 8003280:	f7fe fca2 	bl	8001bc8 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(0, yPos + (barHeight / 2) - 21, displayText, CENTER_MODE);
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	b2db      	uxtb	r3, r3
 800328a:	b29a      	uxth	r2, r3
 800328c:	88fb      	ldrh	r3, [r7, #6]
 800328e:	4413      	add	r3, r2
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b15      	subs	r3, #21
 8003294:	b299      	uxth	r1, r3
 8003296:	f107 020c 	add.w	r2, r7, #12
 800329a:	2301      	movs	r3, #1
 800329c:	2000      	movs	r0, #0
 800329e:	f7fe fcfb 	bl	8001c98 <BSP_LCD_DisplayStringAt>
}
 80032a2:	bf00      	nop
 80032a4:	371c      	adds	r7, #28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd90      	pop	{r4, r7, pc}
 80032aa:	bf00      	nop
 80032ac:	200000e0 	.word	0x200000e0
 80032b0:	08007448 	.word	0x08007448
 80032b4:	20000008 	.word	0x20000008

080032b8 <drawReading>:

void drawReading(uint16_t y, uint8_t* label, uint8_t* value, bool draw_borders) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	461a      	mov	r2, r3
 80032c4:	4603      	mov	r3, r0
 80032c6:	81fb      	strh	r3, [r7, #14]
 80032c8:	4613      	mov	r3, r2
 80032ca:	737b      	strb	r3, [r7, #13]
	// Draw outline
	BSP_LCD_SetTextColor(primary_back_color);
 80032cc:	201f      	movs	r0, #31
 80032ce:	f7fe fc6b 	bl	8001ba8 <BSP_LCD_SetTextColor>
	if (draw_borders) {
 80032d2:	7b7b      	ldrb	r3, [r7, #13]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00f      	beq.n	80032f8 <drawReading+0x40>
		// Top line
		BSP_LCD_DrawHLine(0, y, screen_width);
 80032d8:	89fb      	ldrh	r3, [r7, #14]
 80032da:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80032de:	4619      	mov	r1, r3
 80032e0:	2000      	movs	r0, #0
 80032e2:	f7fe fd81 	bl	8001de8 <BSP_LCD_DrawHLine>
		// Bottom line
		BSP_LCD_DrawHLine(0, y + reading_line_height, screen_width);
 80032e6:	89fb      	ldrh	r3, [r7, #14]
 80032e8:	332f      	adds	r3, #47	; 0x2f
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80032f0:	4619      	mov	r1, r3
 80032f2:	2000      	movs	r0, #0
 80032f4:	f7fe fd78 	bl	8001de8 <BSP_LCD_DrawHLine>
	}
	// Value vertical divider
	BSP_LCD_DrawLine(244, y, 244, y + reading_line_height);
 80032f8:	89fb      	ldrh	r3, [r7, #14]
 80032fa:	332f      	adds	r3, #47	; 0x2f
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	89f9      	ldrh	r1, [r7, #14]
 8003300:	22f4      	movs	r2, #244	; 0xf4
 8003302:	20f4      	movs	r0, #244	; 0xf4
 8003304:	f7fe fde4 	bl	8001ed0 <BSP_LCD_DrawLine>

	// Draw label text
	BSP_LCD_SetTextColor(primary_text_color);
 8003308:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800330c:	f7fe fc4c 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font_RobotoMedium26);
 8003310:	4810      	ldr	r0, [pc, #64]	; (8003354 <drawReading+0x9c>)
 8003312:	f7fe fc69 	bl	8001be8 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003316:	2000      	movs	r0, #0
 8003318:	f7fe fc56 	bl	8001bc8 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(15, y + ((reading_line_height / 2) - 13), label, LEFT_MODE);
 800331c:	89fb      	ldrh	r3, [r7, #14]
 800331e:	330a      	adds	r3, #10
 8003320:	b299      	uxth	r1, r3
 8003322:	2303      	movs	r3, #3
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	200f      	movs	r0, #15
 8003328:	f7fe fcb6 	bl	8001c98 <BSP_LCD_DisplayStringAt>

	// Draw value text
	BSP_LCD_SetFont(&Font_RobotoMedium28);
 800332c:	480a      	ldr	r0, [pc, #40]	; (8003358 <drawReading+0xa0>)
 800332e:	f7fe fc5b 	bl	8001be8 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8003332:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8003336:	f7fe fc37 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(screen_width / 2 - 28, y + ((reading_line_height / 2) - 16), value, CENTER_MODE);
 800333a:	89fb      	ldrh	r3, [r7, #14]
 800333c:	3307      	adds	r3, #7
 800333e:	b299      	uxth	r1, r3
 8003340:	2301      	movs	r3, #1
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	2084      	movs	r0, #132	; 0x84
 8003346:	f7fe fca7 	bl	8001c98 <BSP_LCD_DisplayStringAt>
}
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000020 	.word	0x20000020
 8003358:	20000028 	.word	0x20000028

0800335c <updateReading>:
void updateReading(uint16_t y, uint8_t* value, uint32_t text_color) {
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	81fb      	strh	r3, [r7, #14]
    // Update value text
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800336a:	2000      	movs	r0, #0
 800336c:	f7fe fc2c 	bl	8001bc8 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(text_color);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	b29b      	uxth	r3, r3
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe fc17 	bl	8001ba8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font_RobotoMedium28);
 800337a:	4807      	ldr	r0, [pc, #28]	; (8003398 <updateReading+0x3c>)
 800337c:	f7fe fc34 	bl	8001be8 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(screen_width / 2 - 28, y + ((reading_line_height / 2) - 16), value, CENTER_MODE);
 8003380:	89fb      	ldrh	r3, [r7, #14]
 8003382:	3307      	adds	r3, #7
 8003384:	b299      	uxth	r1, r3
 8003386:	2301      	movs	r3, #1
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	2084      	movs	r0, #132	; 0x84
 800338c:	f7fe fc84 	bl	8001c98 <BSP_LCD_DisplayStringAt>
}
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20000028 	.word	0x20000028

0800339c <drawMenuItem>:

void drawMenuItem(uint16_t y, uint8_t* label, bool draw_borders) {
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	6039      	str	r1, [r7, #0]
 80033a6:	80fb      	strh	r3, [r7, #6]
 80033a8:	4613      	mov	r3, r2
 80033aa:	717b      	strb	r3, [r7, #5]
	// Draw outline
	BSP_LCD_SetTextColor(primary_back_color);
 80033ac:	201f      	movs	r0, #31
 80033ae:	f7fe fbfb 	bl	8001ba8 <BSP_LCD_SetTextColor>
	if (draw_borders) {
 80033b2:	797b      	ldrb	r3, [r7, #5]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00f      	beq.n	80033d8 <drawMenuItem+0x3c>
		// Top line
		BSP_LCD_DrawHLine(0, y, screen_width);
 80033b8:	88fb      	ldrh	r3, [r7, #6]
 80033ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80033be:	4619      	mov	r1, r3
 80033c0:	2000      	movs	r0, #0
 80033c2:	f7fe fd11 	bl	8001de8 <BSP_LCD_DrawHLine>
		// Bottom line
		BSP_LCD_DrawHLine(0, y + menu_line_height, screen_width);
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	333f      	adds	r3, #63	; 0x3f
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80033d0:	4619      	mov	r1, r3
 80033d2:	2000      	movs	r0, #0
 80033d4:	f7fe fd08 	bl	8001de8 <BSP_LCD_DrawHLine>
	}

	// Draw label text
	BSP_LCD_SetTextColor(primary_text_color);
 80033d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80033dc:	f7fe fbe4 	bl	8001ba8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80033e0:	2000      	movs	r0, #0
 80033e2:	f7fe fbf1 	bl	8001bc8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font_RobotoMedium26);
 80033e6:	4807      	ldr	r0, [pc, #28]	; (8003404 <drawMenuItem+0x68>)
 80033e8:	f7fe fbfe 	bl	8001be8 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, y + ((menu_line_height / 2) - 12), label, CENTER_MODE);
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	3313      	adds	r3, #19
 80033f0:	b299      	uxth	r1, r3
 80033f2:	2301      	movs	r3, #1
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	2000      	movs	r0, #0
 80033f8:	f7fe fc4e 	bl	8001c98 <BSP_LCD_DisplayStringAt>
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20000020 	.word	0x20000020

08003408 <updateMenuItem>:
void updateMenuItem(uint16_t y, uint8_t* label, bool selected) {
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	6039      	str	r1, [r7, #0]
 8003412:	80fb      	strh	r3, [r7, #6]
 8003414:	4613      	mov	r3, r2
 8003416:	717b      	strb	r3, [r7, #5]
    // Draw label text
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003418:	2000      	movs	r0, #0
 800341a:	f7fe fbd5 	bl	8001bc8 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(primary_text_color);
 800341e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003422:	f7fe fbc1 	bl	8001ba8 <BSP_LCD_SetTextColor>
    if(selected) BSP_LCD_SetTextColor(selection_color);
 8003426:	797b      	ldrb	r3, [r7, #5]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <updateMenuItem+0x2c>
 800342c:	f64f 2020 	movw	r0, #64032	; 0xfa20
 8003430:	f7fe fbba 	bl	8001ba8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font_RobotoMedium26);
 8003434:	4807      	ldr	r0, [pc, #28]	; (8003454 <updateMenuItem+0x4c>)
 8003436:	f7fe fbd7 	bl	8001be8 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, y + ((menu_line_height / 2) - 12), label, CENTER_MODE);
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	3313      	adds	r3, #19
 800343e:	b299      	uxth	r1, r3
 8003440:	2301      	movs	r3, #1
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	2000      	movs	r0, #0
 8003446:	f7fe fc27 	bl	8001c98 <BSP_LCD_DisplayStringAt>
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000020 	.word	0x20000020

08003458 <drawMenuItemWithValue>:

void drawMenuItemWithValue(uint16_t y, uint8_t* label, uint8_t value, bool draw_borders) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6039      	str	r1, [r7, #0]
 8003460:	4611      	mov	r1, r2
 8003462:	461a      	mov	r2, r3
 8003464:	4603      	mov	r3, r0
 8003466:	80fb      	strh	r3, [r7, #6]
 8003468:	460b      	mov	r3, r1
 800346a:	717b      	strb	r3, [r7, #5]
 800346c:	4613      	mov	r3, r2
 800346e:	713b      	strb	r3, [r7, #4]
    // Draw outline
    BSP_LCD_SetTextColor(primary_back_color);
 8003470:	201f      	movs	r0, #31
 8003472:	f7fe fb99 	bl	8001ba8 <BSP_LCD_SetTextColor>
    if (draw_borders) {
 8003476:	793b      	ldrb	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00f      	beq.n	800349c <drawMenuItemWithValue+0x44>
        // Top line
        BSP_LCD_DrawHLine(0, y, screen_width);
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003482:	4619      	mov	r1, r3
 8003484:	2000      	movs	r0, #0
 8003486:	f7fe fcaf 	bl	8001de8 <BSP_LCD_DrawHLine>
        // Bottom line
        BSP_LCD_DrawHLine(0, y + menu_line_height, screen_width);
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	333f      	adds	r3, #63	; 0x3f
 800348e:	b29b      	uxth	r3, r3
 8003490:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003494:	4619      	mov	r1, r3
 8003496:	2000      	movs	r0, #0
 8003498:	f7fe fca6 	bl	8001de8 <BSP_LCD_DrawHLine>
    }
    // Value vertical divider
    BSP_LCD_DrawLine(225, y, 225, y + menu_line_height);
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	333f      	adds	r3, #63	; 0x3f
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	88f9      	ldrh	r1, [r7, #6]
 80034a4:	22e1      	movs	r2, #225	; 0xe1
 80034a6:	20e1      	movs	r0, #225	; 0xe1
 80034a8:	f7fe fd12 	bl	8001ed0 <BSP_LCD_DrawLine>

    // Draw label text
    BSP_LCD_SetTextColor(primary_text_color);
 80034ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80034b0:	f7fe fb7a 	bl	8001ba8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font_RobotoMedium22);
 80034b4:	4812      	ldr	r0, [pc, #72]	; (8003500 <drawMenuItemWithValue+0xa8>)
 80034b6:	f7fe fb97 	bl	8001be8 <BSP_LCD_SetFont>
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80034ba:	2000      	movs	r0, #0
 80034bc:	f7fe fb84 	bl	8001bc8 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(15, y + ((menu_line_height / 2) - 12), label, LEFT_MODE);
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	3313      	adds	r3, #19
 80034c4:	b299      	uxth	r1, r3
 80034c6:	2303      	movs	r3, #3
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	200f      	movs	r0, #15
 80034cc:	f7fe fbe4 	bl	8001c98 <BSP_LCD_DisplayStringAt>

    // Draw value text
	uint8_t displayValue[5];
	sprintf(displayValue, "%.0f", value);
 80034d0:	797a      	ldrb	r2, [r7, #5]
 80034d2:	f107 0308 	add.w	r3, r7, #8
 80034d6:	490b      	ldr	r1, [pc, #44]	; (8003504 <drawMenuItemWithValue+0xac>)
 80034d8:	4618      	mov	r0, r3
 80034da:	f001 f81b 	bl	8004514 <siprintf>
    BSP_LCD_SetFont(&Font_RobotoBlack26);
 80034de:	480a      	ldr	r0, [pc, #40]	; (8003508 <drawMenuItemWithValue+0xb0>)
 80034e0:	f7fe fb82 	bl	8001be8 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(screen_width / 2 - 37, y + ((menu_line_height / 2) - 12), displayValue, CENTER_MODE);
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	3313      	adds	r3, #19
 80034e8:	b299      	uxth	r1, r3
 80034ea:	f107 0208 	add.w	r2, r7, #8
 80034ee:	2301      	movs	r3, #1
 80034f0:	207b      	movs	r0, #123	; 0x7b
 80034f2:	f7fe fbd1 	bl	8001c98 <BSP_LCD_DisplayStringAt>
}
 80034f6:	bf00      	nop
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000010 	.word	0x20000010
 8003504:	08007448 	.word	0x08007448
 8003508:	20000000 	.word	0x20000000

0800350c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// Setup LCD
	  BSP_LCD_Init();
 8003510:	f7fe faf4 	bl	8001afc <BSP_LCD_Init>

	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */

	  // Show startup screen
	  drawStartupScreen();
 8003514:	f7ff f834 	bl	8002580 <drawStartupScreen>
	  HAL_Delay(1000);
 8003518:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800351c:	f000 f962 	bl	80037e4 <HAL_Delay>

	  // Show first screen
	  drawScreen(current_screen);
 8003520:	4b47      	ldr	r3, [pc, #284]	; (8003640 <main+0x134>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f7fe ffbb 	bl	80024a0 <drawScreen>

	  // start can
	  selected_menu_option = 1;
 800352a:	4b46      	ldr	r3, [pc, #280]	; (8003644 <main+0x138>)
 800352c:	2201      	movs	r2, #1
 800352e:	701a      	strb	r2, [r3, #0]
	  current_driver = drivers[0];
 8003530:	4b45      	ldr	r3, [pc, #276]	; (8003648 <main+0x13c>)
 8003532:	4a46      	ldr	r2, [pc, #280]	; (800364c <main+0x140>)
 8003534:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003538:	e883 0003 	stmia.w	r3, {r0, r1}
	    //HAL_ADC_Start(&hadc1);
	    //HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	    //raw = HAL_ADC_GetValue(&hadc1);

	    // Update screen
	    if (current_screen == RTD_SCREEN) {
 800353c:	4b40      	ldr	r3, [pc, #256]	; (8003640 <main+0x134>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d102      	bne.n	800354a <main+0x3e>
	    	// Update screen
	    	updateRTDScreen();
 8003544:	f7ff f884 	bl	8002650 <updateRTDScreen>
 8003548:	e074      	b.n	8003634 <main+0x128>
	    }
	    else if (current_screen == SM_SCREEN) {
 800354a:	4b3d      	ldr	r3, [pc, #244]	; (8003640 <main+0x134>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d124      	bne.n	800359c <main+0x90>
	        // Update screen
	    	updateSMScreen();
 8003552:	f7ff fa69 	bl	8002a28 <updateSMScreen>

	        // Handle navigation
	        updateMenuScroll();
 8003556:	f7fe ffe5 	bl	8002524 <updateMenuScroll>

	        // Handle activate of settings
	        if (activate_btn_pressed) {
 800355a:	4b3d      	ldr	r3, [pc, #244]	; (8003650 <main+0x144>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d067      	beq.n	8003634 <main+0x128>
	            switch (selected_menu_option) {
 8003564:	4b37      	ldr	r3, [pc, #220]	; (8003644 <main+0x138>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b03      	cmp	r3, #3
 800356a:	d863      	bhi.n	8003634 <main+0x128>
 800356c:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <main+0x68>)
 800356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003572:	bf00      	nop
 8003574:	08003585 	.word	0x08003585
 8003578:	0800358d 	.word	0x0800358d
 800357c:	08003595 	.word	0x08003595
 8003580:	08003635 	.word	0x08003635
	            case 0:
	                drawScreen(DRIVER_SELECTION_SCREEN);
 8003584:	2002      	movs	r0, #2
 8003586:	f7fe ff8b 	bl	80024a0 <drawScreen>
	                break;
 800358a:	e053      	b.n	8003634 <main+0x128>
	            case 1:
	                drawScreen(EVENT_SELECTION_SCREEN);
 800358c:	2003      	movs	r0, #3
 800358e:	f7fe ff87 	bl	80024a0 <drawScreen>
	                break;
 8003592:	e04f      	b.n	8003634 <main+0x128>
	            case 2:
	                drawScreen(CAR_CONFIGURATION_SCREEN);
 8003594:	2004      	movs	r0, #4
 8003596:	f7fe ff83 	bl	80024a0 <drawScreen>
	                break;
 800359a:	e04b      	b.n	8003634 <main+0x128>
	                //drawAdvancedScreen();
	                break;
	            }
	        }
	    }
	    else if (current_screen == DRIVER_SELECTION_SCREEN) {
 800359c:	4b28      	ldr	r3, [pc, #160]	; (8003640 <main+0x134>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d11a      	bne.n	80035da <main+0xce>
	    	// Update screen
	    	updateDriverSelectionScreen();
 80035a4:	f7ff fad8 	bl	8002b58 <updateDriverSelectionScreen>

	    	// Handle navigation
	    	updateMenuScroll();
 80035a8:	f7fe ffbc 	bl	8002524 <updateMenuScroll>

	        // Handle activate of settings
	        if (activate_btn_pressed) {
 80035ac:	4b28      	ldr	r3, [pc, #160]	; (8003650 <main+0x144>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d008      	beq.n	80035c8 <main+0xbc>
	            changeDriver(drivers[selected_menu_option]);
 80035b6:	4b23      	ldr	r3, [pc, #140]	; (8003644 <main+0x138>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	4a24      	ldr	r2, [pc, #144]	; (800364c <main+0x140>)
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	4413      	add	r3, r2
 80035c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80035c4:	f7fe ff0e 	bl	80023e4 <changeDriver>
	        }

	        if (back_btn_pressed) {
 80035c8:	4b22      	ldr	r3, [pc, #136]	; (8003654 <main+0x148>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d030      	beq.n	8003634 <main+0x128>
	            drawScreen(SM_SCREEN);
 80035d2:	2000      	movs	r0, #0
 80035d4:	f7fe ff64 	bl	80024a0 <drawScreen>
 80035d8:	e02c      	b.n	8003634 <main+0x128>
	        }
	    }
	    else if (current_screen == EVENT_SELECTION_SCREEN) {
 80035da:	4b19      	ldr	r3, [pc, #100]	; (8003640 <main+0x134>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d11a      	bne.n	8003618 <main+0x10c>
	    	// Update screen
	        updateEventSelectionScreen();
 80035e2:	f7ff fb3b 	bl	8002c5c <updateEventSelectionScreen>

	        // Handle navigation
	        updateMenuScroll();
 80035e6:	f7fe ff9d 	bl	8002524 <updateMenuScroll>

	        // Handle activate of settings
	        if (activate_btn_pressed) {
 80035ea:	4b19      	ldr	r3, [pc, #100]	; (8003650 <main+0x144>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <main+0xfa>
	            changeEvent(events[selected_menu_option]);
 80035f4:	4b13      	ldr	r3, [pc, #76]	; (8003644 <main+0x138>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	4a17      	ldr	r2, [pc, #92]	; (8003658 <main+0x14c>)
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003602:	f7fe ff05 	bl	8002410 <changeEvent>
	        }

	        if (back_btn_pressed) {
 8003606:	4b13      	ldr	r3, [pc, #76]	; (8003654 <main+0x148>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d011      	beq.n	8003634 <main+0x128>
	            drawScreen(SM_SCREEN);
 8003610:	2000      	movs	r0, #0
 8003612:	f7fe ff45 	bl	80024a0 <drawScreen>
 8003616:	e00d      	b.n	8003634 <main+0x128>
	        }
	    }
	    else if (current_screen == CAR_CONFIGURATION_SCREEN) {
 8003618:	4b09      	ldr	r3, [pc, #36]	; (8003640 <main+0x134>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b04      	cmp	r3, #4
 800361e:	d109      	bne.n	8003634 <main+0x128>
	    	// Update screen
	    	//updateCarConfigurationScreen();

	        // Handle navigation
	        updateMenuScroll();
 8003620:	f7fe ff80 	bl	8002524 <updateMenuScroll>

	        // Handle activate/value change of settings


	        if (back_btn_pressed) {
 8003624:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <main+0x148>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <main+0x128>
	            drawScreen(SM_SCREEN);
 800362e:	2000      	movs	r0, #0
 8003630:	f7fe ff36 	bl	80024a0 <drawScreen>
	        }
	    }

	    // Handle back button

	    HAL_Delay(400);
 8003634:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003638:	f000 f8d4 	bl	80037e4 <HAL_Delay>
	    if (current_screen == RTD_SCREEN) {
 800363c:	e77e      	b.n	800353c <main+0x30>
 800363e:	bf00      	nop
 8003640:	200000c8 	.word	0x200000c8
 8003644:	20000680 	.word	0x20000680
 8003648:	200000e8 	.word	0x200000e8
 800364c:	20000078 	.word	0x20000078
 8003650:	20000658 	.word	0x20000658
 8003654:	20000659 	.word	0x20000659
 8003658:	20000098 	.word	0x20000098

0800365c <NMI_Handler>:
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
 8003660:	bf00      	nop
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <HardFault_Handler>:
 800366a:	b480      	push	{r7}
 800366c:	af00      	add	r7, sp, #0
 800366e:	e7fe      	b.n	800366e <HardFault_Handler+0x4>

08003670 <MemManage_Handler>:
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
 8003674:	e7fe      	b.n	8003674 <MemManage_Handler+0x4>

08003676 <BusFault_Handler>:
 8003676:	b480      	push	{r7}
 8003678:	af00      	add	r7, sp, #0
 800367a:	e7fe      	b.n	800367a <BusFault_Handler+0x4>

0800367c <UsageFault_Handler>:
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
 8003680:	e7fe      	b.n	8003680 <UsageFault_Handler+0x4>

08003682 <SVC_Handler>:
 8003682:	b480      	push	{r7}
 8003684:	af00      	add	r7, sp, #0
 8003686:	bf00      	nop
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <DebugMon_Handler>:
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <PendSV_Handler>:
 800369e:	b480      	push	{r7}
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	bf00      	nop
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <SysTick_Handler>:
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	f000 f878 	bl	80037a4 <HAL_IncTick>
 80036b4:	bf00      	nop
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <_sbrk>:
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	4a14      	ldr	r2, [pc, #80]	; (8003714 <_sbrk+0x5c>)
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <_sbrk+0x60>)
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	4b13      	ldr	r3, [pc, #76]	; (800371c <_sbrk+0x64>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <_sbrk+0x22>
 80036d4:	4b11      	ldr	r3, [pc, #68]	; (800371c <_sbrk+0x64>)
 80036d6:	4a12      	ldr	r2, [pc, #72]	; (8003720 <_sbrk+0x68>)
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	4b10      	ldr	r3, [pc, #64]	; (800371c <_sbrk+0x64>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d207      	bcs.n	80036f8 <_sbrk+0x40>
 80036e8:	f000 f89e 	bl	8003828 <__errno>
 80036ec:	4602      	mov	r2, r0
 80036ee:	230c      	movs	r3, #12
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	f04f 33ff 	mov.w	r3, #4294967295
 80036f6:	e009      	b.n	800370c <_sbrk+0x54>
 80036f8:	4b08      	ldr	r3, [pc, #32]	; (800371c <_sbrk+0x64>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	4b07      	ldr	r3, [pc, #28]	; (800371c <_sbrk+0x64>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	4a05      	ldr	r2, [pc, #20]	; (800371c <_sbrk+0x64>)
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	2000a000 	.word	0x2000a000
 8003718:	00000400 	.word	0x00000400
 800371c:	2000065c 	.word	0x2000065c
 8003720:	20000690 	.word	0x20000690

08003724 <SystemInit>:
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <SystemInit+0x28>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	4a07      	ldr	r2, [pc, #28]	; (800374c <SystemInit+0x28>)
 8003730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <SystemInit+0x28>)
 800373a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	bf00      	nop
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <Reset_Handler>:
 8003750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003788 <LoopForever+0x2>
 8003754:	2100      	movs	r1, #0
 8003756:	e003      	b.n	8003760 <LoopCopyDataInit>

08003758 <CopyDataInit>:
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <LoopForever+0x6>)
 800375a:	585b      	ldr	r3, [r3, r1]
 800375c:	5043      	str	r3, [r0, r1]
 800375e:	3104      	adds	r1, #4

08003760 <LoopCopyDataInit>:
 8003760:	480b      	ldr	r0, [pc, #44]	; (8003790 <LoopForever+0xa>)
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <LoopForever+0xe>)
 8003764:	1842      	adds	r2, r0, r1
 8003766:	429a      	cmp	r2, r3
 8003768:	d3f6      	bcc.n	8003758 <CopyDataInit>
 800376a:	4a0b      	ldr	r2, [pc, #44]	; (8003798 <LoopForever+0x12>)
 800376c:	e002      	b.n	8003774 <LoopFillZerobss>

0800376e <FillZerobss>:
 800376e:	2300      	movs	r3, #0
 8003770:	f842 3b04 	str.w	r3, [r2], #4

08003774 <LoopFillZerobss>:
 8003774:	4b09      	ldr	r3, [pc, #36]	; (800379c <LoopForever+0x16>)
 8003776:	429a      	cmp	r2, r3
 8003778:	d3f9      	bcc.n	800376e <FillZerobss>
 800377a:	f7ff ffd3 	bl	8003724 <SystemInit>
 800377e:	f000 f859 	bl	8003834 <__libc_init_array>
 8003782:	f7ff fec3 	bl	800350c <main>

08003786 <LoopForever>:
 8003786:	e7fe      	b.n	8003786 <LoopForever>
 8003788:	2000a000 	.word	0x2000a000
 800378c:	08014390 	.word	0x08014390
 8003790:	20000000 	.word	0x20000000
 8003794:	200002c4 	.word	0x200002c4
 8003798:	200002c4 	.word	0x200002c4
 800379c:	2000068c 	.word	0x2000068c

080037a0 <ADC1_2_IRQHandler>:
 80037a0:	e7fe      	b.n	80037a0 <ADC1_2_IRQHandler>
	...

080037a4 <HAL_IncTick>:
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <HAL_IncTick+0x20>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <HAL_IncTick+0x24>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4413      	add	r3, r2
 80037b4:	4a04      	ldr	r2, [pc, #16]	; (80037c8 <HAL_IncTick+0x24>)
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	bf00      	nop
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	200000f0 	.word	0x200000f0
 80037c8:	20000684 	.word	0x20000684

080037cc <HAL_GetTick>:
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <HAL_GetTick+0x14>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20000684 	.word	0x20000684

080037e4 <HAL_Delay>:
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	f7ff ffee 	bl	80037cc <HAL_GetTick>
 80037f0:	60b8      	str	r0, [r7, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fc:	d005      	beq.n	800380a <HAL_Delay+0x26>
 80037fe:	4b09      	ldr	r3, [pc, #36]	; (8003824 <HAL_Delay+0x40>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4413      	add	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	bf00      	nop
 800380c:	f7ff ffde 	bl	80037cc <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	429a      	cmp	r2, r3
 800381a:	d8f7      	bhi.n	800380c <HAL_Delay+0x28>
 800381c:	bf00      	nop
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	200000f0 	.word	0x200000f0

08003828 <__errno>:
 8003828:	4b01      	ldr	r3, [pc, #4]	; (8003830 <__errno+0x8>)
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	200000f4 	.word	0x200000f4

08003834 <__libc_init_array>:
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	4e0d      	ldr	r6, [pc, #52]	; (800386c <__libc_init_array+0x38>)
 8003838:	4c0d      	ldr	r4, [pc, #52]	; (8003870 <__libc_init_array+0x3c>)
 800383a:	1ba4      	subs	r4, r4, r6
 800383c:	10a4      	asrs	r4, r4, #2
 800383e:	2500      	movs	r5, #0
 8003840:	42a5      	cmp	r5, r4
 8003842:	d109      	bne.n	8003858 <__libc_init_array+0x24>
 8003844:	4e0b      	ldr	r6, [pc, #44]	; (8003874 <__libc_init_array+0x40>)
 8003846:	4c0c      	ldr	r4, [pc, #48]	; (8003878 <__libc_init_array+0x44>)
 8003848:	f003 fd58 	bl	80072fc <_init>
 800384c:	1ba4      	subs	r4, r4, r6
 800384e:	10a4      	asrs	r4, r4, #2
 8003850:	2500      	movs	r5, #0
 8003852:	42a5      	cmp	r5, r4
 8003854:	d105      	bne.n	8003862 <__libc_init_array+0x2e>
 8003856:	bd70      	pop	{r4, r5, r6, pc}
 8003858:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800385c:	4798      	blx	r3
 800385e:	3501      	adds	r5, #1
 8003860:	e7ee      	b.n	8003840 <__libc_init_array+0xc>
 8003862:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003866:	4798      	blx	r3
 8003868:	3501      	adds	r5, #1
 800386a:	e7f2      	b.n	8003852 <__libc_init_array+0x1e>
 800386c:	08014388 	.word	0x08014388
 8003870:	08014388 	.word	0x08014388
 8003874:	08014388 	.word	0x08014388
 8003878:	0801438c 	.word	0x0801438c

0800387c <memset>:
 800387c:	4402      	add	r2, r0
 800387e:	4603      	mov	r3, r0
 8003880:	4293      	cmp	r3, r2
 8003882:	d100      	bne.n	8003886 <memset+0xa>
 8003884:	4770      	bx	lr
 8003886:	f803 1b01 	strb.w	r1, [r3], #1
 800388a:	e7f9      	b.n	8003880 <memset+0x4>

0800388c <__cvt>:
 800388c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003890:	ec55 4b10 	vmov	r4, r5, d0
 8003894:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003896:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800389a:	2d00      	cmp	r5, #0
 800389c:	460e      	mov	r6, r1
 800389e:	4691      	mov	r9, r2
 80038a0:	4619      	mov	r1, r3
 80038a2:	bfb8      	it	lt
 80038a4:	4622      	movlt	r2, r4
 80038a6:	462b      	mov	r3, r5
 80038a8:	f027 0720 	bic.w	r7, r7, #32
 80038ac:	bfbb      	ittet	lt
 80038ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80038b2:	461d      	movlt	r5, r3
 80038b4:	2300      	movge	r3, #0
 80038b6:	232d      	movlt	r3, #45	; 0x2d
 80038b8:	bfb8      	it	lt
 80038ba:	4614      	movlt	r4, r2
 80038bc:	2f46      	cmp	r7, #70	; 0x46
 80038be:	700b      	strb	r3, [r1, #0]
 80038c0:	d004      	beq.n	80038cc <__cvt+0x40>
 80038c2:	2f45      	cmp	r7, #69	; 0x45
 80038c4:	d100      	bne.n	80038c8 <__cvt+0x3c>
 80038c6:	3601      	adds	r6, #1
 80038c8:	2102      	movs	r1, #2
 80038ca:	e000      	b.n	80038ce <__cvt+0x42>
 80038cc:	2103      	movs	r1, #3
 80038ce:	ab03      	add	r3, sp, #12
 80038d0:	9301      	str	r3, [sp, #4]
 80038d2:	ab02      	add	r3, sp, #8
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	4632      	mov	r2, r6
 80038d8:	4653      	mov	r3, sl
 80038da:	ec45 4b10 	vmov	d0, r4, r5
 80038de:	f001 fd77 	bl	80053d0 <_dtoa_r>
 80038e2:	2f47      	cmp	r7, #71	; 0x47
 80038e4:	4680      	mov	r8, r0
 80038e6:	d102      	bne.n	80038ee <__cvt+0x62>
 80038e8:	f019 0f01 	tst.w	r9, #1
 80038ec:	d026      	beq.n	800393c <__cvt+0xb0>
 80038ee:	2f46      	cmp	r7, #70	; 0x46
 80038f0:	eb08 0906 	add.w	r9, r8, r6
 80038f4:	d111      	bne.n	800391a <__cvt+0x8e>
 80038f6:	f898 3000 	ldrb.w	r3, [r8]
 80038fa:	2b30      	cmp	r3, #48	; 0x30
 80038fc:	d10a      	bne.n	8003914 <__cvt+0x88>
 80038fe:	2200      	movs	r2, #0
 8003900:	2300      	movs	r3, #0
 8003902:	4620      	mov	r0, r4
 8003904:	4629      	mov	r1, r5
 8003906:	f7fd f8df 	bl	8000ac8 <__aeabi_dcmpeq>
 800390a:	b918      	cbnz	r0, 8003914 <__cvt+0x88>
 800390c:	f1c6 0601 	rsb	r6, r6, #1
 8003910:	f8ca 6000 	str.w	r6, [sl]
 8003914:	f8da 3000 	ldr.w	r3, [sl]
 8003918:	4499      	add	r9, r3
 800391a:	2200      	movs	r2, #0
 800391c:	2300      	movs	r3, #0
 800391e:	4620      	mov	r0, r4
 8003920:	4629      	mov	r1, r5
 8003922:	f7fd f8d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8003926:	b938      	cbnz	r0, 8003938 <__cvt+0xac>
 8003928:	2230      	movs	r2, #48	; 0x30
 800392a:	9b03      	ldr	r3, [sp, #12]
 800392c:	454b      	cmp	r3, r9
 800392e:	d205      	bcs.n	800393c <__cvt+0xb0>
 8003930:	1c59      	adds	r1, r3, #1
 8003932:	9103      	str	r1, [sp, #12]
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	e7f8      	b.n	800392a <__cvt+0x9e>
 8003938:	f8cd 900c 	str.w	r9, [sp, #12]
 800393c:	9b03      	ldr	r3, [sp, #12]
 800393e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003940:	eba3 0308 	sub.w	r3, r3, r8
 8003944:	4640      	mov	r0, r8
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	b004      	add	sp, #16
 800394a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800394e <__exponent>:
 800394e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003950:	2900      	cmp	r1, #0
 8003952:	4604      	mov	r4, r0
 8003954:	bfba      	itte	lt
 8003956:	4249      	neglt	r1, r1
 8003958:	232d      	movlt	r3, #45	; 0x2d
 800395a:	232b      	movge	r3, #43	; 0x2b
 800395c:	2909      	cmp	r1, #9
 800395e:	f804 2b02 	strb.w	r2, [r4], #2
 8003962:	7043      	strb	r3, [r0, #1]
 8003964:	dd20      	ble.n	80039a8 <__exponent+0x5a>
 8003966:	f10d 0307 	add.w	r3, sp, #7
 800396a:	461f      	mov	r7, r3
 800396c:	260a      	movs	r6, #10
 800396e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003972:	fb06 1115 	mls	r1, r6, r5, r1
 8003976:	3130      	adds	r1, #48	; 0x30
 8003978:	2d09      	cmp	r5, #9
 800397a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800397e:	f103 32ff 	add.w	r2, r3, #4294967295
 8003982:	4629      	mov	r1, r5
 8003984:	dc09      	bgt.n	800399a <__exponent+0x4c>
 8003986:	3130      	adds	r1, #48	; 0x30
 8003988:	3b02      	subs	r3, #2
 800398a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800398e:	42bb      	cmp	r3, r7
 8003990:	4622      	mov	r2, r4
 8003992:	d304      	bcc.n	800399e <__exponent+0x50>
 8003994:	1a10      	subs	r0, r2, r0
 8003996:	b003      	add	sp, #12
 8003998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800399a:	4613      	mov	r3, r2
 800399c:	e7e7      	b.n	800396e <__exponent+0x20>
 800399e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039a2:	f804 2b01 	strb.w	r2, [r4], #1
 80039a6:	e7f2      	b.n	800398e <__exponent+0x40>
 80039a8:	2330      	movs	r3, #48	; 0x30
 80039aa:	4419      	add	r1, r3
 80039ac:	7083      	strb	r3, [r0, #2]
 80039ae:	1d02      	adds	r2, r0, #4
 80039b0:	70c1      	strb	r1, [r0, #3]
 80039b2:	e7ef      	b.n	8003994 <__exponent+0x46>

080039b4 <_printf_float>:
 80039b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b8:	b08d      	sub	sp, #52	; 0x34
 80039ba:	460c      	mov	r4, r1
 80039bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80039c0:	4616      	mov	r6, r2
 80039c2:	461f      	mov	r7, r3
 80039c4:	4605      	mov	r5, r0
 80039c6:	f002 fde7 	bl	8006598 <_localeconv_r>
 80039ca:	6803      	ldr	r3, [r0, #0]
 80039cc:	9304      	str	r3, [sp, #16]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fc fbfe 	bl	80001d0 <strlen>
 80039d4:	2300      	movs	r3, #0
 80039d6:	930a      	str	r3, [sp, #40]	; 0x28
 80039d8:	f8d8 3000 	ldr.w	r3, [r8]
 80039dc:	9005      	str	r0, [sp, #20]
 80039de:	3307      	adds	r3, #7
 80039e0:	f023 0307 	bic.w	r3, r3, #7
 80039e4:	f103 0208 	add.w	r2, r3, #8
 80039e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80039ec:	f8d4 b000 	ldr.w	fp, [r4]
 80039f0:	f8c8 2000 	str.w	r2, [r8]
 80039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80039fc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003a00:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003a04:	9307      	str	r3, [sp, #28]
 8003a06:	f8cd 8018 	str.w	r8, [sp, #24]
 8003a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0e:	4ba7      	ldr	r3, [pc, #668]	; (8003cac <_printf_float+0x2f8>)
 8003a10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a14:	f7fd f88a 	bl	8000b2c <__aeabi_dcmpun>
 8003a18:	bb70      	cbnz	r0, 8003a78 <_printf_float+0xc4>
 8003a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a1e:	4ba3      	ldr	r3, [pc, #652]	; (8003cac <_printf_float+0x2f8>)
 8003a20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a24:	f7fd f864 	bl	8000af0 <__aeabi_dcmple>
 8003a28:	bb30      	cbnz	r0, 8003a78 <_printf_float+0xc4>
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	4640      	mov	r0, r8
 8003a30:	4649      	mov	r1, r9
 8003a32:	f7fd f853 	bl	8000adc <__aeabi_dcmplt>
 8003a36:	b110      	cbz	r0, 8003a3e <_printf_float+0x8a>
 8003a38:	232d      	movs	r3, #45	; 0x2d
 8003a3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a3e:	4a9c      	ldr	r2, [pc, #624]	; (8003cb0 <_printf_float+0x2fc>)
 8003a40:	4b9c      	ldr	r3, [pc, #624]	; (8003cb4 <_printf_float+0x300>)
 8003a42:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003a46:	bf8c      	ite	hi
 8003a48:	4690      	movhi	r8, r2
 8003a4a:	4698      	movls	r8, r3
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	f02b 0204 	bic.w	r2, fp, #4
 8003a52:	6123      	str	r3, [r4, #16]
 8003a54:	6022      	str	r2, [r4, #0]
 8003a56:	f04f 0900 	mov.w	r9, #0
 8003a5a:	9700      	str	r7, [sp, #0]
 8003a5c:	4633      	mov	r3, r6
 8003a5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003a60:	4621      	mov	r1, r4
 8003a62:	4628      	mov	r0, r5
 8003a64:	f000 f9e6 	bl	8003e34 <_printf_common>
 8003a68:	3001      	adds	r0, #1
 8003a6a:	f040 808d 	bne.w	8003b88 <_printf_float+0x1d4>
 8003a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a72:	b00d      	add	sp, #52	; 0x34
 8003a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a78:	4642      	mov	r2, r8
 8003a7a:	464b      	mov	r3, r9
 8003a7c:	4640      	mov	r0, r8
 8003a7e:	4649      	mov	r1, r9
 8003a80:	f7fd f854 	bl	8000b2c <__aeabi_dcmpun>
 8003a84:	b110      	cbz	r0, 8003a8c <_printf_float+0xd8>
 8003a86:	4a8c      	ldr	r2, [pc, #560]	; (8003cb8 <_printf_float+0x304>)
 8003a88:	4b8c      	ldr	r3, [pc, #560]	; (8003cbc <_printf_float+0x308>)
 8003a8a:	e7da      	b.n	8003a42 <_printf_float+0x8e>
 8003a8c:	6861      	ldr	r1, [r4, #4]
 8003a8e:	1c4b      	adds	r3, r1, #1
 8003a90:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003a94:	a80a      	add	r0, sp, #40	; 0x28
 8003a96:	d13e      	bne.n	8003b16 <_printf_float+0x162>
 8003a98:	2306      	movs	r3, #6
 8003a9a:	6063      	str	r3, [r4, #4]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003aa2:	ab09      	add	r3, sp, #36	; 0x24
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	ec49 8b10 	vmov	d0, r8, r9
 8003aaa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003aae:	6022      	str	r2, [r4, #0]
 8003ab0:	f8cd a004 	str.w	sl, [sp, #4]
 8003ab4:	6861      	ldr	r1, [r4, #4]
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	f7ff fee8 	bl	800388c <__cvt>
 8003abc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003ac0:	2b47      	cmp	r3, #71	; 0x47
 8003ac2:	4680      	mov	r8, r0
 8003ac4:	d109      	bne.n	8003ada <_printf_float+0x126>
 8003ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ac8:	1cd8      	adds	r0, r3, #3
 8003aca:	db02      	blt.n	8003ad2 <_printf_float+0x11e>
 8003acc:	6862      	ldr	r2, [r4, #4]
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	dd47      	ble.n	8003b62 <_printf_float+0x1ae>
 8003ad2:	f1aa 0a02 	sub.w	sl, sl, #2
 8003ad6:	fa5f fa8a 	uxtb.w	sl, sl
 8003ada:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003ade:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ae0:	d824      	bhi.n	8003b2c <_printf_float+0x178>
 8003ae2:	3901      	subs	r1, #1
 8003ae4:	4652      	mov	r2, sl
 8003ae6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003aea:	9109      	str	r1, [sp, #36]	; 0x24
 8003aec:	f7ff ff2f 	bl	800394e <__exponent>
 8003af0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003af2:	1813      	adds	r3, r2, r0
 8003af4:	2a01      	cmp	r2, #1
 8003af6:	4681      	mov	r9, r0
 8003af8:	6123      	str	r3, [r4, #16]
 8003afa:	dc02      	bgt.n	8003b02 <_printf_float+0x14e>
 8003afc:	6822      	ldr	r2, [r4, #0]
 8003afe:	07d1      	lsls	r1, r2, #31
 8003b00:	d501      	bpl.n	8003b06 <_printf_float+0x152>
 8003b02:	3301      	adds	r3, #1
 8003b04:	6123      	str	r3, [r4, #16]
 8003b06:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0a5      	beq.n	8003a5a <_printf_float+0xa6>
 8003b0e:	232d      	movs	r3, #45	; 0x2d
 8003b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b14:	e7a1      	b.n	8003a5a <_printf_float+0xa6>
 8003b16:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003b1a:	f000 8177 	beq.w	8003e0c <_printf_float+0x458>
 8003b1e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003b22:	d1bb      	bne.n	8003a9c <_printf_float+0xe8>
 8003b24:	2900      	cmp	r1, #0
 8003b26:	d1b9      	bne.n	8003a9c <_printf_float+0xe8>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e7b6      	b.n	8003a9a <_printf_float+0xe6>
 8003b2c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003b30:	d119      	bne.n	8003b66 <_printf_float+0x1b2>
 8003b32:	2900      	cmp	r1, #0
 8003b34:	6863      	ldr	r3, [r4, #4]
 8003b36:	dd0c      	ble.n	8003b52 <_printf_float+0x19e>
 8003b38:	6121      	str	r1, [r4, #16]
 8003b3a:	b913      	cbnz	r3, 8003b42 <_printf_float+0x18e>
 8003b3c:	6822      	ldr	r2, [r4, #0]
 8003b3e:	07d2      	lsls	r2, r2, #31
 8003b40:	d502      	bpl.n	8003b48 <_printf_float+0x194>
 8003b42:	3301      	adds	r3, #1
 8003b44:	440b      	add	r3, r1
 8003b46:	6123      	str	r3, [r4, #16]
 8003b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b4a:	65a3      	str	r3, [r4, #88]	; 0x58
 8003b4c:	f04f 0900 	mov.w	r9, #0
 8003b50:	e7d9      	b.n	8003b06 <_printf_float+0x152>
 8003b52:	b913      	cbnz	r3, 8003b5a <_printf_float+0x1a6>
 8003b54:	6822      	ldr	r2, [r4, #0]
 8003b56:	07d0      	lsls	r0, r2, #31
 8003b58:	d501      	bpl.n	8003b5e <_printf_float+0x1aa>
 8003b5a:	3302      	adds	r3, #2
 8003b5c:	e7f3      	b.n	8003b46 <_printf_float+0x192>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e7f1      	b.n	8003b46 <_printf_float+0x192>
 8003b62:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003b66:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	db05      	blt.n	8003b7a <_printf_float+0x1c6>
 8003b6e:	6822      	ldr	r2, [r4, #0]
 8003b70:	6123      	str	r3, [r4, #16]
 8003b72:	07d1      	lsls	r1, r2, #31
 8003b74:	d5e8      	bpl.n	8003b48 <_printf_float+0x194>
 8003b76:	3301      	adds	r3, #1
 8003b78:	e7e5      	b.n	8003b46 <_printf_float+0x192>
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	bfd4      	ite	le
 8003b7e:	f1c3 0302 	rsble	r3, r3, #2
 8003b82:	2301      	movgt	r3, #1
 8003b84:	4413      	add	r3, r2
 8003b86:	e7de      	b.n	8003b46 <_printf_float+0x192>
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	055a      	lsls	r2, r3, #21
 8003b8c:	d407      	bmi.n	8003b9e <_printf_float+0x1ea>
 8003b8e:	6923      	ldr	r3, [r4, #16]
 8003b90:	4642      	mov	r2, r8
 8003b92:	4631      	mov	r1, r6
 8003b94:	4628      	mov	r0, r5
 8003b96:	47b8      	blx	r7
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d12b      	bne.n	8003bf4 <_printf_float+0x240>
 8003b9c:	e767      	b.n	8003a6e <_printf_float+0xba>
 8003b9e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003ba2:	f240 80dc 	bls.w	8003d5e <_printf_float+0x3aa>
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003bae:	f7fc ff8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d033      	beq.n	8003c1e <_printf_float+0x26a>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	4a41      	ldr	r2, [pc, #260]	; (8003cc0 <_printf_float+0x30c>)
 8003bba:	4631      	mov	r1, r6
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	47b8      	blx	r7
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	f43f af54 	beq.w	8003a6e <_printf_float+0xba>
 8003bc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	db02      	blt.n	8003bd4 <_printf_float+0x220>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	07d8      	lsls	r0, r3, #31
 8003bd2:	d50f      	bpl.n	8003bf4 <_printf_float+0x240>
 8003bd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bd8:	4631      	mov	r1, r6
 8003bda:	4628      	mov	r0, r5
 8003bdc:	47b8      	blx	r7
 8003bde:	3001      	adds	r0, #1
 8003be0:	f43f af45 	beq.w	8003a6e <_printf_float+0xba>
 8003be4:	f04f 0800 	mov.w	r8, #0
 8003be8:	f104 091a 	add.w	r9, r4, #26
 8003bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	4543      	cmp	r3, r8
 8003bf2:	dc09      	bgt.n	8003c08 <_printf_float+0x254>
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	079b      	lsls	r3, r3, #30
 8003bf8:	f100 8103 	bmi.w	8003e02 <_printf_float+0x44e>
 8003bfc:	68e0      	ldr	r0, [r4, #12]
 8003bfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c00:	4298      	cmp	r0, r3
 8003c02:	bfb8      	it	lt
 8003c04:	4618      	movlt	r0, r3
 8003c06:	e734      	b.n	8003a72 <_printf_float+0xbe>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	464a      	mov	r2, r9
 8003c0c:	4631      	mov	r1, r6
 8003c0e:	4628      	mov	r0, r5
 8003c10:	47b8      	blx	r7
 8003c12:	3001      	adds	r0, #1
 8003c14:	f43f af2b 	beq.w	8003a6e <_printf_float+0xba>
 8003c18:	f108 0801 	add.w	r8, r8, #1
 8003c1c:	e7e6      	b.n	8003bec <_printf_float+0x238>
 8003c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	dc2b      	bgt.n	8003c7c <_printf_float+0x2c8>
 8003c24:	2301      	movs	r3, #1
 8003c26:	4a26      	ldr	r2, [pc, #152]	; (8003cc0 <_printf_float+0x30c>)
 8003c28:	4631      	mov	r1, r6
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	47b8      	blx	r7
 8003c2e:	3001      	adds	r0, #1
 8003c30:	f43f af1d 	beq.w	8003a6e <_printf_float+0xba>
 8003c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c36:	b923      	cbnz	r3, 8003c42 <_printf_float+0x28e>
 8003c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c3a:	b913      	cbnz	r3, 8003c42 <_printf_float+0x28e>
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	07d9      	lsls	r1, r3, #31
 8003c40:	d5d8      	bpl.n	8003bf4 <_printf_float+0x240>
 8003c42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c46:	4631      	mov	r1, r6
 8003c48:	4628      	mov	r0, r5
 8003c4a:	47b8      	blx	r7
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	f43f af0e 	beq.w	8003a6e <_printf_float+0xba>
 8003c52:	f04f 0900 	mov.w	r9, #0
 8003c56:	f104 0a1a 	add.w	sl, r4, #26
 8003c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c5c:	425b      	negs	r3, r3
 8003c5e:	454b      	cmp	r3, r9
 8003c60:	dc01      	bgt.n	8003c66 <_printf_float+0x2b2>
 8003c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c64:	e794      	b.n	8003b90 <_printf_float+0x1dc>
 8003c66:	2301      	movs	r3, #1
 8003c68:	4652      	mov	r2, sl
 8003c6a:	4631      	mov	r1, r6
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	47b8      	blx	r7
 8003c70:	3001      	adds	r0, #1
 8003c72:	f43f aefc 	beq.w	8003a6e <_printf_float+0xba>
 8003c76:	f109 0901 	add.w	r9, r9, #1
 8003c7a:	e7ee      	b.n	8003c5a <_printf_float+0x2a6>
 8003c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c80:	429a      	cmp	r2, r3
 8003c82:	bfa8      	it	ge
 8003c84:	461a      	movge	r2, r3
 8003c86:	2a00      	cmp	r2, #0
 8003c88:	4691      	mov	r9, r2
 8003c8a:	dd07      	ble.n	8003c9c <_printf_float+0x2e8>
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	4631      	mov	r1, r6
 8003c90:	4642      	mov	r2, r8
 8003c92:	4628      	mov	r0, r5
 8003c94:	47b8      	blx	r7
 8003c96:	3001      	adds	r0, #1
 8003c98:	f43f aee9 	beq.w	8003a6e <_printf_float+0xba>
 8003c9c:	f104 031a 	add.w	r3, r4, #26
 8003ca0:	f04f 0b00 	mov.w	fp, #0
 8003ca4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ca8:	9306      	str	r3, [sp, #24]
 8003caa:	e015      	b.n	8003cd8 <_printf_float+0x324>
 8003cac:	7fefffff 	.word	0x7fefffff
 8003cb0:	080140d4 	.word	0x080140d4
 8003cb4:	080140d0 	.word	0x080140d0
 8003cb8:	080140dc 	.word	0x080140dc
 8003cbc:	080140d8 	.word	0x080140d8
 8003cc0:	080140e0 	.word	0x080140e0
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	9a06      	ldr	r2, [sp, #24]
 8003cc8:	4631      	mov	r1, r6
 8003cca:	4628      	mov	r0, r5
 8003ccc:	47b8      	blx	r7
 8003cce:	3001      	adds	r0, #1
 8003cd0:	f43f aecd 	beq.w	8003a6e <_printf_float+0xba>
 8003cd4:	f10b 0b01 	add.w	fp, fp, #1
 8003cd8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003cdc:	ebaa 0309 	sub.w	r3, sl, r9
 8003ce0:	455b      	cmp	r3, fp
 8003ce2:	dcef      	bgt.n	8003cc4 <_printf_float+0x310>
 8003ce4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	44d0      	add	r8, sl
 8003cec:	db15      	blt.n	8003d1a <_printf_float+0x366>
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	07da      	lsls	r2, r3, #31
 8003cf2:	d412      	bmi.n	8003d1a <_printf_float+0x366>
 8003cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003cf8:	eba3 020a 	sub.w	r2, r3, sl
 8003cfc:	eba3 0a01 	sub.w	sl, r3, r1
 8003d00:	4592      	cmp	sl, r2
 8003d02:	bfa8      	it	ge
 8003d04:	4692      	movge	sl, r2
 8003d06:	f1ba 0f00 	cmp.w	sl, #0
 8003d0a:	dc0e      	bgt.n	8003d2a <_printf_float+0x376>
 8003d0c:	f04f 0800 	mov.w	r8, #0
 8003d10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003d14:	f104 091a 	add.w	r9, r4, #26
 8003d18:	e019      	b.n	8003d4e <_printf_float+0x39a>
 8003d1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d1e:	4631      	mov	r1, r6
 8003d20:	4628      	mov	r0, r5
 8003d22:	47b8      	blx	r7
 8003d24:	3001      	adds	r0, #1
 8003d26:	d1e5      	bne.n	8003cf4 <_printf_float+0x340>
 8003d28:	e6a1      	b.n	8003a6e <_printf_float+0xba>
 8003d2a:	4653      	mov	r3, sl
 8003d2c:	4642      	mov	r2, r8
 8003d2e:	4631      	mov	r1, r6
 8003d30:	4628      	mov	r0, r5
 8003d32:	47b8      	blx	r7
 8003d34:	3001      	adds	r0, #1
 8003d36:	d1e9      	bne.n	8003d0c <_printf_float+0x358>
 8003d38:	e699      	b.n	8003a6e <_printf_float+0xba>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	464a      	mov	r2, r9
 8003d3e:	4631      	mov	r1, r6
 8003d40:	4628      	mov	r0, r5
 8003d42:	47b8      	blx	r7
 8003d44:	3001      	adds	r0, #1
 8003d46:	f43f ae92 	beq.w	8003a6e <_printf_float+0xba>
 8003d4a:	f108 0801 	add.w	r8, r8, #1
 8003d4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	eba3 030a 	sub.w	r3, r3, sl
 8003d58:	4543      	cmp	r3, r8
 8003d5a:	dcee      	bgt.n	8003d3a <_printf_float+0x386>
 8003d5c:	e74a      	b.n	8003bf4 <_printf_float+0x240>
 8003d5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d60:	2a01      	cmp	r2, #1
 8003d62:	dc01      	bgt.n	8003d68 <_printf_float+0x3b4>
 8003d64:	07db      	lsls	r3, r3, #31
 8003d66:	d53a      	bpl.n	8003dde <_printf_float+0x42a>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	4642      	mov	r2, r8
 8003d6c:	4631      	mov	r1, r6
 8003d6e:	4628      	mov	r0, r5
 8003d70:	47b8      	blx	r7
 8003d72:	3001      	adds	r0, #1
 8003d74:	f43f ae7b 	beq.w	8003a6e <_printf_float+0xba>
 8003d78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d7c:	4631      	mov	r1, r6
 8003d7e:	4628      	mov	r0, r5
 8003d80:	47b8      	blx	r7
 8003d82:	3001      	adds	r0, #1
 8003d84:	f108 0801 	add.w	r8, r8, #1
 8003d88:	f43f ae71 	beq.w	8003a6e <_printf_float+0xba>
 8003d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f103 3aff 	add.w	sl, r3, #4294967295
 8003d94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f7fc fe95 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d9e:	b9c8      	cbnz	r0, 8003dd4 <_printf_float+0x420>
 8003da0:	4653      	mov	r3, sl
 8003da2:	4642      	mov	r2, r8
 8003da4:	4631      	mov	r1, r6
 8003da6:	4628      	mov	r0, r5
 8003da8:	47b8      	blx	r7
 8003daa:	3001      	adds	r0, #1
 8003dac:	d10e      	bne.n	8003dcc <_printf_float+0x418>
 8003dae:	e65e      	b.n	8003a6e <_printf_float+0xba>
 8003db0:	2301      	movs	r3, #1
 8003db2:	4652      	mov	r2, sl
 8003db4:	4631      	mov	r1, r6
 8003db6:	4628      	mov	r0, r5
 8003db8:	47b8      	blx	r7
 8003dba:	3001      	adds	r0, #1
 8003dbc:	f43f ae57 	beq.w	8003a6e <_printf_float+0xba>
 8003dc0:	f108 0801 	add.w	r8, r8, #1
 8003dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	4543      	cmp	r3, r8
 8003dca:	dcf1      	bgt.n	8003db0 <_printf_float+0x3fc>
 8003dcc:	464b      	mov	r3, r9
 8003dce:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003dd2:	e6de      	b.n	8003b92 <_printf_float+0x1de>
 8003dd4:	f04f 0800 	mov.w	r8, #0
 8003dd8:	f104 0a1a 	add.w	sl, r4, #26
 8003ddc:	e7f2      	b.n	8003dc4 <_printf_float+0x410>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e7df      	b.n	8003da2 <_printf_float+0x3ee>
 8003de2:	2301      	movs	r3, #1
 8003de4:	464a      	mov	r2, r9
 8003de6:	4631      	mov	r1, r6
 8003de8:	4628      	mov	r0, r5
 8003dea:	47b8      	blx	r7
 8003dec:	3001      	adds	r0, #1
 8003dee:	f43f ae3e 	beq.w	8003a6e <_printf_float+0xba>
 8003df2:	f108 0801 	add.w	r8, r8, #1
 8003df6:	68e3      	ldr	r3, [r4, #12]
 8003df8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	4543      	cmp	r3, r8
 8003dfe:	dcf0      	bgt.n	8003de2 <_printf_float+0x42e>
 8003e00:	e6fc      	b.n	8003bfc <_printf_float+0x248>
 8003e02:	f04f 0800 	mov.w	r8, #0
 8003e06:	f104 0919 	add.w	r9, r4, #25
 8003e0a:	e7f4      	b.n	8003df6 <_printf_float+0x442>
 8003e0c:	2900      	cmp	r1, #0
 8003e0e:	f43f ae8b 	beq.w	8003b28 <_printf_float+0x174>
 8003e12:	2300      	movs	r3, #0
 8003e14:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003e18:	ab09      	add	r3, sp, #36	; 0x24
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	ec49 8b10 	vmov	d0, r8, r9
 8003e20:	6022      	str	r2, [r4, #0]
 8003e22:	f8cd a004 	str.w	sl, [sp, #4]
 8003e26:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	f7ff fd2e 	bl	800388c <__cvt>
 8003e30:	4680      	mov	r8, r0
 8003e32:	e648      	b.n	8003ac6 <_printf_float+0x112>

08003e34 <_printf_common>:
 8003e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e38:	4691      	mov	r9, r2
 8003e3a:	461f      	mov	r7, r3
 8003e3c:	688a      	ldr	r2, [r1, #8]
 8003e3e:	690b      	ldr	r3, [r1, #16]
 8003e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e44:	4293      	cmp	r3, r2
 8003e46:	bfb8      	it	lt
 8003e48:	4613      	movlt	r3, r2
 8003e4a:	f8c9 3000 	str.w	r3, [r9]
 8003e4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e52:	4606      	mov	r6, r0
 8003e54:	460c      	mov	r4, r1
 8003e56:	b112      	cbz	r2, 8003e5e <_printf_common+0x2a>
 8003e58:	3301      	adds	r3, #1
 8003e5a:	f8c9 3000 	str.w	r3, [r9]
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	0699      	lsls	r1, r3, #26
 8003e62:	bf42      	ittt	mi
 8003e64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e68:	3302      	addmi	r3, #2
 8003e6a:	f8c9 3000 	strmi.w	r3, [r9]
 8003e6e:	6825      	ldr	r5, [r4, #0]
 8003e70:	f015 0506 	ands.w	r5, r5, #6
 8003e74:	d107      	bne.n	8003e86 <_printf_common+0x52>
 8003e76:	f104 0a19 	add.w	sl, r4, #25
 8003e7a:	68e3      	ldr	r3, [r4, #12]
 8003e7c:	f8d9 2000 	ldr.w	r2, [r9]
 8003e80:	1a9b      	subs	r3, r3, r2
 8003e82:	42ab      	cmp	r3, r5
 8003e84:	dc28      	bgt.n	8003ed8 <_printf_common+0xa4>
 8003e86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e8a:	6822      	ldr	r2, [r4, #0]
 8003e8c:	3300      	adds	r3, #0
 8003e8e:	bf18      	it	ne
 8003e90:	2301      	movne	r3, #1
 8003e92:	0692      	lsls	r2, r2, #26
 8003e94:	d42d      	bmi.n	8003ef2 <_printf_common+0xbe>
 8003e96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e9a:	4639      	mov	r1, r7
 8003e9c:	4630      	mov	r0, r6
 8003e9e:	47c0      	blx	r8
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	d020      	beq.n	8003ee6 <_printf_common+0xb2>
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	68e5      	ldr	r5, [r4, #12]
 8003ea8:	f8d9 2000 	ldr.w	r2, [r9]
 8003eac:	f003 0306 	and.w	r3, r3, #6
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	bf08      	it	eq
 8003eb4:	1aad      	subeq	r5, r5, r2
 8003eb6:	68a3      	ldr	r3, [r4, #8]
 8003eb8:	6922      	ldr	r2, [r4, #16]
 8003eba:	bf0c      	ite	eq
 8003ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ec0:	2500      	movne	r5, #0
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	bfc4      	itt	gt
 8003ec6:	1a9b      	subgt	r3, r3, r2
 8003ec8:	18ed      	addgt	r5, r5, r3
 8003eca:	f04f 0900 	mov.w	r9, #0
 8003ece:	341a      	adds	r4, #26
 8003ed0:	454d      	cmp	r5, r9
 8003ed2:	d11a      	bne.n	8003f0a <_printf_common+0xd6>
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	e008      	b.n	8003eea <_printf_common+0xb6>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	4652      	mov	r2, sl
 8003edc:	4639      	mov	r1, r7
 8003ede:	4630      	mov	r0, r6
 8003ee0:	47c0      	blx	r8
 8003ee2:	3001      	adds	r0, #1
 8003ee4:	d103      	bne.n	8003eee <_printf_common+0xba>
 8003ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eee:	3501      	adds	r5, #1
 8003ef0:	e7c3      	b.n	8003e7a <_printf_common+0x46>
 8003ef2:	18e1      	adds	r1, r4, r3
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	2030      	movs	r0, #48	; 0x30
 8003ef8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003efc:	4422      	add	r2, r4
 8003efe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f06:	3302      	adds	r3, #2
 8003f08:	e7c5      	b.n	8003e96 <_printf_common+0x62>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	4622      	mov	r2, r4
 8003f0e:	4639      	mov	r1, r7
 8003f10:	4630      	mov	r0, r6
 8003f12:	47c0      	blx	r8
 8003f14:	3001      	adds	r0, #1
 8003f16:	d0e6      	beq.n	8003ee6 <_printf_common+0xb2>
 8003f18:	f109 0901 	add.w	r9, r9, #1
 8003f1c:	e7d8      	b.n	8003ed0 <_printf_common+0x9c>
	...

08003f20 <_printf_i>:
 8003f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f28:	460c      	mov	r4, r1
 8003f2a:	7e09      	ldrb	r1, [r1, #24]
 8003f2c:	b085      	sub	sp, #20
 8003f2e:	296e      	cmp	r1, #110	; 0x6e
 8003f30:	4617      	mov	r7, r2
 8003f32:	4606      	mov	r6, r0
 8003f34:	4698      	mov	r8, r3
 8003f36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f38:	f000 80b3 	beq.w	80040a2 <_printf_i+0x182>
 8003f3c:	d822      	bhi.n	8003f84 <_printf_i+0x64>
 8003f3e:	2963      	cmp	r1, #99	; 0x63
 8003f40:	d036      	beq.n	8003fb0 <_printf_i+0x90>
 8003f42:	d80a      	bhi.n	8003f5a <_printf_i+0x3a>
 8003f44:	2900      	cmp	r1, #0
 8003f46:	f000 80b9 	beq.w	80040bc <_printf_i+0x19c>
 8003f4a:	2958      	cmp	r1, #88	; 0x58
 8003f4c:	f000 8083 	beq.w	8004056 <_printf_i+0x136>
 8003f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f58:	e032      	b.n	8003fc0 <_printf_i+0xa0>
 8003f5a:	2964      	cmp	r1, #100	; 0x64
 8003f5c:	d001      	beq.n	8003f62 <_printf_i+0x42>
 8003f5e:	2969      	cmp	r1, #105	; 0x69
 8003f60:	d1f6      	bne.n	8003f50 <_printf_i+0x30>
 8003f62:	6820      	ldr	r0, [r4, #0]
 8003f64:	6813      	ldr	r3, [r2, #0]
 8003f66:	0605      	lsls	r5, r0, #24
 8003f68:	f103 0104 	add.w	r1, r3, #4
 8003f6c:	d52a      	bpl.n	8003fc4 <_printf_i+0xa4>
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6011      	str	r1, [r2, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	da03      	bge.n	8003f7e <_printf_i+0x5e>
 8003f76:	222d      	movs	r2, #45	; 0x2d
 8003f78:	425b      	negs	r3, r3
 8003f7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f7e:	486f      	ldr	r0, [pc, #444]	; (800413c <_printf_i+0x21c>)
 8003f80:	220a      	movs	r2, #10
 8003f82:	e039      	b.n	8003ff8 <_printf_i+0xd8>
 8003f84:	2973      	cmp	r1, #115	; 0x73
 8003f86:	f000 809d 	beq.w	80040c4 <_printf_i+0x1a4>
 8003f8a:	d808      	bhi.n	8003f9e <_printf_i+0x7e>
 8003f8c:	296f      	cmp	r1, #111	; 0x6f
 8003f8e:	d020      	beq.n	8003fd2 <_printf_i+0xb2>
 8003f90:	2970      	cmp	r1, #112	; 0x70
 8003f92:	d1dd      	bne.n	8003f50 <_printf_i+0x30>
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	f043 0320 	orr.w	r3, r3, #32
 8003f9a:	6023      	str	r3, [r4, #0]
 8003f9c:	e003      	b.n	8003fa6 <_printf_i+0x86>
 8003f9e:	2975      	cmp	r1, #117	; 0x75
 8003fa0:	d017      	beq.n	8003fd2 <_printf_i+0xb2>
 8003fa2:	2978      	cmp	r1, #120	; 0x78
 8003fa4:	d1d4      	bne.n	8003f50 <_printf_i+0x30>
 8003fa6:	2378      	movs	r3, #120	; 0x78
 8003fa8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fac:	4864      	ldr	r0, [pc, #400]	; (8004140 <_printf_i+0x220>)
 8003fae:	e055      	b.n	800405c <_printf_i+0x13c>
 8003fb0:	6813      	ldr	r3, [r2, #0]
 8003fb2:	1d19      	adds	r1, r3, #4
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6011      	str	r1, [r2, #0]
 8003fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e08c      	b.n	80040de <_printf_i+0x1be>
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6011      	str	r1, [r2, #0]
 8003fc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fcc:	bf18      	it	ne
 8003fce:	b21b      	sxthne	r3, r3
 8003fd0:	e7cf      	b.n	8003f72 <_printf_i+0x52>
 8003fd2:	6813      	ldr	r3, [r2, #0]
 8003fd4:	6825      	ldr	r5, [r4, #0]
 8003fd6:	1d18      	adds	r0, r3, #4
 8003fd8:	6010      	str	r0, [r2, #0]
 8003fda:	0628      	lsls	r0, r5, #24
 8003fdc:	d501      	bpl.n	8003fe2 <_printf_i+0xc2>
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	e002      	b.n	8003fe8 <_printf_i+0xc8>
 8003fe2:	0668      	lsls	r0, r5, #25
 8003fe4:	d5fb      	bpl.n	8003fde <_printf_i+0xbe>
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	4854      	ldr	r0, [pc, #336]	; (800413c <_printf_i+0x21c>)
 8003fea:	296f      	cmp	r1, #111	; 0x6f
 8003fec:	bf14      	ite	ne
 8003fee:	220a      	movne	r2, #10
 8003ff0:	2208      	moveq	r2, #8
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ff8:	6865      	ldr	r5, [r4, #4]
 8003ffa:	60a5      	str	r5, [r4, #8]
 8003ffc:	2d00      	cmp	r5, #0
 8003ffe:	f2c0 8095 	blt.w	800412c <_printf_i+0x20c>
 8004002:	6821      	ldr	r1, [r4, #0]
 8004004:	f021 0104 	bic.w	r1, r1, #4
 8004008:	6021      	str	r1, [r4, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d13d      	bne.n	800408a <_printf_i+0x16a>
 800400e:	2d00      	cmp	r5, #0
 8004010:	f040 808e 	bne.w	8004130 <_printf_i+0x210>
 8004014:	4665      	mov	r5, ip
 8004016:	2a08      	cmp	r2, #8
 8004018:	d10b      	bne.n	8004032 <_printf_i+0x112>
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	07db      	lsls	r3, r3, #31
 800401e:	d508      	bpl.n	8004032 <_printf_i+0x112>
 8004020:	6923      	ldr	r3, [r4, #16]
 8004022:	6862      	ldr	r2, [r4, #4]
 8004024:	429a      	cmp	r2, r3
 8004026:	bfde      	ittt	le
 8004028:	2330      	movle	r3, #48	; 0x30
 800402a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800402e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004032:	ebac 0305 	sub.w	r3, ip, r5
 8004036:	6123      	str	r3, [r4, #16]
 8004038:	f8cd 8000 	str.w	r8, [sp]
 800403c:	463b      	mov	r3, r7
 800403e:	aa03      	add	r2, sp, #12
 8004040:	4621      	mov	r1, r4
 8004042:	4630      	mov	r0, r6
 8004044:	f7ff fef6 	bl	8003e34 <_printf_common>
 8004048:	3001      	adds	r0, #1
 800404a:	d14d      	bne.n	80040e8 <_printf_i+0x1c8>
 800404c:	f04f 30ff 	mov.w	r0, #4294967295
 8004050:	b005      	add	sp, #20
 8004052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004056:	4839      	ldr	r0, [pc, #228]	; (800413c <_printf_i+0x21c>)
 8004058:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800405c:	6813      	ldr	r3, [r2, #0]
 800405e:	6821      	ldr	r1, [r4, #0]
 8004060:	1d1d      	adds	r5, r3, #4
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6015      	str	r5, [r2, #0]
 8004066:	060a      	lsls	r2, r1, #24
 8004068:	d50b      	bpl.n	8004082 <_printf_i+0x162>
 800406a:	07ca      	lsls	r2, r1, #31
 800406c:	bf44      	itt	mi
 800406e:	f041 0120 	orrmi.w	r1, r1, #32
 8004072:	6021      	strmi	r1, [r4, #0]
 8004074:	b91b      	cbnz	r3, 800407e <_printf_i+0x15e>
 8004076:	6822      	ldr	r2, [r4, #0]
 8004078:	f022 0220 	bic.w	r2, r2, #32
 800407c:	6022      	str	r2, [r4, #0]
 800407e:	2210      	movs	r2, #16
 8004080:	e7b7      	b.n	8003ff2 <_printf_i+0xd2>
 8004082:	064d      	lsls	r5, r1, #25
 8004084:	bf48      	it	mi
 8004086:	b29b      	uxthmi	r3, r3
 8004088:	e7ef      	b.n	800406a <_printf_i+0x14a>
 800408a:	4665      	mov	r5, ip
 800408c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004090:	fb02 3311 	mls	r3, r2, r1, r3
 8004094:	5cc3      	ldrb	r3, [r0, r3]
 8004096:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800409a:	460b      	mov	r3, r1
 800409c:	2900      	cmp	r1, #0
 800409e:	d1f5      	bne.n	800408c <_printf_i+0x16c>
 80040a0:	e7b9      	b.n	8004016 <_printf_i+0xf6>
 80040a2:	6813      	ldr	r3, [r2, #0]
 80040a4:	6825      	ldr	r5, [r4, #0]
 80040a6:	6961      	ldr	r1, [r4, #20]
 80040a8:	1d18      	adds	r0, r3, #4
 80040aa:	6010      	str	r0, [r2, #0]
 80040ac:	0628      	lsls	r0, r5, #24
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	d501      	bpl.n	80040b6 <_printf_i+0x196>
 80040b2:	6019      	str	r1, [r3, #0]
 80040b4:	e002      	b.n	80040bc <_printf_i+0x19c>
 80040b6:	066a      	lsls	r2, r5, #25
 80040b8:	d5fb      	bpl.n	80040b2 <_printf_i+0x192>
 80040ba:	8019      	strh	r1, [r3, #0]
 80040bc:	2300      	movs	r3, #0
 80040be:	6123      	str	r3, [r4, #16]
 80040c0:	4665      	mov	r5, ip
 80040c2:	e7b9      	b.n	8004038 <_printf_i+0x118>
 80040c4:	6813      	ldr	r3, [r2, #0]
 80040c6:	1d19      	adds	r1, r3, #4
 80040c8:	6011      	str	r1, [r2, #0]
 80040ca:	681d      	ldr	r5, [r3, #0]
 80040cc:	6862      	ldr	r2, [r4, #4]
 80040ce:	2100      	movs	r1, #0
 80040d0:	4628      	mov	r0, r5
 80040d2:	f7fc f885 	bl	80001e0 <memchr>
 80040d6:	b108      	cbz	r0, 80040dc <_printf_i+0x1bc>
 80040d8:	1b40      	subs	r0, r0, r5
 80040da:	6060      	str	r0, [r4, #4]
 80040dc:	6863      	ldr	r3, [r4, #4]
 80040de:	6123      	str	r3, [r4, #16]
 80040e0:	2300      	movs	r3, #0
 80040e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040e6:	e7a7      	b.n	8004038 <_printf_i+0x118>
 80040e8:	6923      	ldr	r3, [r4, #16]
 80040ea:	462a      	mov	r2, r5
 80040ec:	4639      	mov	r1, r7
 80040ee:	4630      	mov	r0, r6
 80040f0:	47c0      	blx	r8
 80040f2:	3001      	adds	r0, #1
 80040f4:	d0aa      	beq.n	800404c <_printf_i+0x12c>
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	079b      	lsls	r3, r3, #30
 80040fa:	d413      	bmi.n	8004124 <_printf_i+0x204>
 80040fc:	68e0      	ldr	r0, [r4, #12]
 80040fe:	9b03      	ldr	r3, [sp, #12]
 8004100:	4298      	cmp	r0, r3
 8004102:	bfb8      	it	lt
 8004104:	4618      	movlt	r0, r3
 8004106:	e7a3      	b.n	8004050 <_printf_i+0x130>
 8004108:	2301      	movs	r3, #1
 800410a:	464a      	mov	r2, r9
 800410c:	4639      	mov	r1, r7
 800410e:	4630      	mov	r0, r6
 8004110:	47c0      	blx	r8
 8004112:	3001      	adds	r0, #1
 8004114:	d09a      	beq.n	800404c <_printf_i+0x12c>
 8004116:	3501      	adds	r5, #1
 8004118:	68e3      	ldr	r3, [r4, #12]
 800411a:	9a03      	ldr	r2, [sp, #12]
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	42ab      	cmp	r3, r5
 8004120:	dcf2      	bgt.n	8004108 <_printf_i+0x1e8>
 8004122:	e7eb      	b.n	80040fc <_printf_i+0x1dc>
 8004124:	2500      	movs	r5, #0
 8004126:	f104 0919 	add.w	r9, r4, #25
 800412a:	e7f5      	b.n	8004118 <_printf_i+0x1f8>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1ac      	bne.n	800408a <_printf_i+0x16a>
 8004130:	7803      	ldrb	r3, [r0, #0]
 8004132:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004136:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800413a:	e76c      	b.n	8004016 <_printf_i+0xf6>
 800413c:	080140e2 	.word	0x080140e2
 8004140:	080140f3 	.word	0x080140f3

08004144 <_scanf_float>:
 8004144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004148:	469a      	mov	sl, r3
 800414a:	688b      	ldr	r3, [r1, #8]
 800414c:	4616      	mov	r6, r2
 800414e:	1e5a      	subs	r2, r3, #1
 8004150:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004154:	b087      	sub	sp, #28
 8004156:	bf83      	ittte	hi
 8004158:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800415c:	189b      	addhi	r3, r3, r2
 800415e:	9301      	strhi	r3, [sp, #4]
 8004160:	2300      	movls	r3, #0
 8004162:	bf86      	itte	hi
 8004164:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004168:	608b      	strhi	r3, [r1, #8]
 800416a:	9301      	strls	r3, [sp, #4]
 800416c:	680b      	ldr	r3, [r1, #0]
 800416e:	4688      	mov	r8, r1
 8004170:	f04f 0b00 	mov.w	fp, #0
 8004174:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004178:	f848 3b1c 	str.w	r3, [r8], #28
 800417c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004180:	4607      	mov	r7, r0
 8004182:	460c      	mov	r4, r1
 8004184:	4645      	mov	r5, r8
 8004186:	465a      	mov	r2, fp
 8004188:	46d9      	mov	r9, fp
 800418a:	f8cd b008 	str.w	fp, [sp, #8]
 800418e:	68a1      	ldr	r1, [r4, #8]
 8004190:	b181      	cbz	r1, 80041b4 <_scanf_float+0x70>
 8004192:	6833      	ldr	r3, [r6, #0]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b49      	cmp	r3, #73	; 0x49
 8004198:	d071      	beq.n	800427e <_scanf_float+0x13a>
 800419a:	d84d      	bhi.n	8004238 <_scanf_float+0xf4>
 800419c:	2b39      	cmp	r3, #57	; 0x39
 800419e:	d840      	bhi.n	8004222 <_scanf_float+0xde>
 80041a0:	2b31      	cmp	r3, #49	; 0x31
 80041a2:	f080 8088 	bcs.w	80042b6 <_scanf_float+0x172>
 80041a6:	2b2d      	cmp	r3, #45	; 0x2d
 80041a8:	f000 8090 	beq.w	80042cc <_scanf_float+0x188>
 80041ac:	d815      	bhi.n	80041da <_scanf_float+0x96>
 80041ae:	2b2b      	cmp	r3, #43	; 0x2b
 80041b0:	f000 808c 	beq.w	80042cc <_scanf_float+0x188>
 80041b4:	f1b9 0f00 	cmp.w	r9, #0
 80041b8:	d003      	beq.n	80041c2 <_scanf_float+0x7e>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	3a01      	subs	r2, #1
 80041c4:	2a01      	cmp	r2, #1
 80041c6:	f200 80ea 	bhi.w	800439e <_scanf_float+0x25a>
 80041ca:	4545      	cmp	r5, r8
 80041cc:	f200 80dc 	bhi.w	8004388 <_scanf_float+0x244>
 80041d0:	2601      	movs	r6, #1
 80041d2:	4630      	mov	r0, r6
 80041d4:	b007      	add	sp, #28
 80041d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041da:	2b2e      	cmp	r3, #46	; 0x2e
 80041dc:	f000 809f 	beq.w	800431e <_scanf_float+0x1da>
 80041e0:	2b30      	cmp	r3, #48	; 0x30
 80041e2:	d1e7      	bne.n	80041b4 <_scanf_float+0x70>
 80041e4:	6820      	ldr	r0, [r4, #0]
 80041e6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80041ea:	d064      	beq.n	80042b6 <_scanf_float+0x172>
 80041ec:	9b01      	ldr	r3, [sp, #4]
 80041ee:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80041f2:	6020      	str	r0, [r4, #0]
 80041f4:	f109 0901 	add.w	r9, r9, #1
 80041f8:	b11b      	cbz	r3, 8004202 <_scanf_float+0xbe>
 80041fa:	3b01      	subs	r3, #1
 80041fc:	3101      	adds	r1, #1
 80041fe:	9301      	str	r3, [sp, #4]
 8004200:	60a1      	str	r1, [r4, #8]
 8004202:	68a3      	ldr	r3, [r4, #8]
 8004204:	3b01      	subs	r3, #1
 8004206:	60a3      	str	r3, [r4, #8]
 8004208:	6923      	ldr	r3, [r4, #16]
 800420a:	3301      	adds	r3, #1
 800420c:	6123      	str	r3, [r4, #16]
 800420e:	6873      	ldr	r3, [r6, #4]
 8004210:	3b01      	subs	r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	6073      	str	r3, [r6, #4]
 8004216:	f340 80ac 	ble.w	8004372 <_scanf_float+0x22e>
 800421a:	6833      	ldr	r3, [r6, #0]
 800421c:	3301      	adds	r3, #1
 800421e:	6033      	str	r3, [r6, #0]
 8004220:	e7b5      	b.n	800418e <_scanf_float+0x4a>
 8004222:	2b45      	cmp	r3, #69	; 0x45
 8004224:	f000 8085 	beq.w	8004332 <_scanf_float+0x1ee>
 8004228:	2b46      	cmp	r3, #70	; 0x46
 800422a:	d06a      	beq.n	8004302 <_scanf_float+0x1be>
 800422c:	2b41      	cmp	r3, #65	; 0x41
 800422e:	d1c1      	bne.n	80041b4 <_scanf_float+0x70>
 8004230:	2a01      	cmp	r2, #1
 8004232:	d1bf      	bne.n	80041b4 <_scanf_float+0x70>
 8004234:	2202      	movs	r2, #2
 8004236:	e046      	b.n	80042c6 <_scanf_float+0x182>
 8004238:	2b65      	cmp	r3, #101	; 0x65
 800423a:	d07a      	beq.n	8004332 <_scanf_float+0x1ee>
 800423c:	d818      	bhi.n	8004270 <_scanf_float+0x12c>
 800423e:	2b54      	cmp	r3, #84	; 0x54
 8004240:	d066      	beq.n	8004310 <_scanf_float+0x1cc>
 8004242:	d811      	bhi.n	8004268 <_scanf_float+0x124>
 8004244:	2b4e      	cmp	r3, #78	; 0x4e
 8004246:	d1b5      	bne.n	80041b4 <_scanf_float+0x70>
 8004248:	2a00      	cmp	r2, #0
 800424a:	d146      	bne.n	80042da <_scanf_float+0x196>
 800424c:	f1b9 0f00 	cmp.w	r9, #0
 8004250:	d145      	bne.n	80042de <_scanf_float+0x19a>
 8004252:	6821      	ldr	r1, [r4, #0]
 8004254:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004258:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800425c:	d13f      	bne.n	80042de <_scanf_float+0x19a>
 800425e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004262:	6021      	str	r1, [r4, #0]
 8004264:	2201      	movs	r2, #1
 8004266:	e02e      	b.n	80042c6 <_scanf_float+0x182>
 8004268:	2b59      	cmp	r3, #89	; 0x59
 800426a:	d01e      	beq.n	80042aa <_scanf_float+0x166>
 800426c:	2b61      	cmp	r3, #97	; 0x61
 800426e:	e7de      	b.n	800422e <_scanf_float+0xea>
 8004270:	2b6e      	cmp	r3, #110	; 0x6e
 8004272:	d0e9      	beq.n	8004248 <_scanf_float+0x104>
 8004274:	d815      	bhi.n	80042a2 <_scanf_float+0x15e>
 8004276:	2b66      	cmp	r3, #102	; 0x66
 8004278:	d043      	beq.n	8004302 <_scanf_float+0x1be>
 800427a:	2b69      	cmp	r3, #105	; 0x69
 800427c:	d19a      	bne.n	80041b4 <_scanf_float+0x70>
 800427e:	f1bb 0f00 	cmp.w	fp, #0
 8004282:	d138      	bne.n	80042f6 <_scanf_float+0x1b2>
 8004284:	f1b9 0f00 	cmp.w	r9, #0
 8004288:	d197      	bne.n	80041ba <_scanf_float+0x76>
 800428a:	6821      	ldr	r1, [r4, #0]
 800428c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004290:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004294:	d195      	bne.n	80041c2 <_scanf_float+0x7e>
 8004296:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800429a:	6021      	str	r1, [r4, #0]
 800429c:	f04f 0b01 	mov.w	fp, #1
 80042a0:	e011      	b.n	80042c6 <_scanf_float+0x182>
 80042a2:	2b74      	cmp	r3, #116	; 0x74
 80042a4:	d034      	beq.n	8004310 <_scanf_float+0x1cc>
 80042a6:	2b79      	cmp	r3, #121	; 0x79
 80042a8:	d184      	bne.n	80041b4 <_scanf_float+0x70>
 80042aa:	f1bb 0f07 	cmp.w	fp, #7
 80042ae:	d181      	bne.n	80041b4 <_scanf_float+0x70>
 80042b0:	f04f 0b08 	mov.w	fp, #8
 80042b4:	e007      	b.n	80042c6 <_scanf_float+0x182>
 80042b6:	eb12 0f0b 	cmn.w	r2, fp
 80042ba:	f47f af7b 	bne.w	80041b4 <_scanf_float+0x70>
 80042be:	6821      	ldr	r1, [r4, #0]
 80042c0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80042c4:	6021      	str	r1, [r4, #0]
 80042c6:	702b      	strb	r3, [r5, #0]
 80042c8:	3501      	adds	r5, #1
 80042ca:	e79a      	b.n	8004202 <_scanf_float+0xbe>
 80042cc:	6821      	ldr	r1, [r4, #0]
 80042ce:	0608      	lsls	r0, r1, #24
 80042d0:	f57f af70 	bpl.w	80041b4 <_scanf_float+0x70>
 80042d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80042d8:	e7f4      	b.n	80042c4 <_scanf_float+0x180>
 80042da:	2a02      	cmp	r2, #2
 80042dc:	d047      	beq.n	800436e <_scanf_float+0x22a>
 80042de:	f1bb 0f01 	cmp.w	fp, #1
 80042e2:	d003      	beq.n	80042ec <_scanf_float+0x1a8>
 80042e4:	f1bb 0f04 	cmp.w	fp, #4
 80042e8:	f47f af64 	bne.w	80041b4 <_scanf_float+0x70>
 80042ec:	f10b 0b01 	add.w	fp, fp, #1
 80042f0:	fa5f fb8b 	uxtb.w	fp, fp
 80042f4:	e7e7      	b.n	80042c6 <_scanf_float+0x182>
 80042f6:	f1bb 0f03 	cmp.w	fp, #3
 80042fa:	d0f7      	beq.n	80042ec <_scanf_float+0x1a8>
 80042fc:	f1bb 0f05 	cmp.w	fp, #5
 8004300:	e7f2      	b.n	80042e8 <_scanf_float+0x1a4>
 8004302:	f1bb 0f02 	cmp.w	fp, #2
 8004306:	f47f af55 	bne.w	80041b4 <_scanf_float+0x70>
 800430a:	f04f 0b03 	mov.w	fp, #3
 800430e:	e7da      	b.n	80042c6 <_scanf_float+0x182>
 8004310:	f1bb 0f06 	cmp.w	fp, #6
 8004314:	f47f af4e 	bne.w	80041b4 <_scanf_float+0x70>
 8004318:	f04f 0b07 	mov.w	fp, #7
 800431c:	e7d3      	b.n	80042c6 <_scanf_float+0x182>
 800431e:	6821      	ldr	r1, [r4, #0]
 8004320:	0588      	lsls	r0, r1, #22
 8004322:	f57f af47 	bpl.w	80041b4 <_scanf_float+0x70>
 8004326:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800432a:	6021      	str	r1, [r4, #0]
 800432c:	f8cd 9008 	str.w	r9, [sp, #8]
 8004330:	e7c9      	b.n	80042c6 <_scanf_float+0x182>
 8004332:	6821      	ldr	r1, [r4, #0]
 8004334:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004338:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800433c:	d006      	beq.n	800434c <_scanf_float+0x208>
 800433e:	0548      	lsls	r0, r1, #21
 8004340:	f57f af38 	bpl.w	80041b4 <_scanf_float+0x70>
 8004344:	f1b9 0f00 	cmp.w	r9, #0
 8004348:	f43f af3b 	beq.w	80041c2 <_scanf_float+0x7e>
 800434c:	0588      	lsls	r0, r1, #22
 800434e:	bf58      	it	pl
 8004350:	9802      	ldrpl	r0, [sp, #8]
 8004352:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004356:	bf58      	it	pl
 8004358:	eba9 0000 	subpl.w	r0, r9, r0
 800435c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004360:	bf58      	it	pl
 8004362:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004366:	6021      	str	r1, [r4, #0]
 8004368:	f04f 0900 	mov.w	r9, #0
 800436c:	e7ab      	b.n	80042c6 <_scanf_float+0x182>
 800436e:	2203      	movs	r2, #3
 8004370:	e7a9      	b.n	80042c6 <_scanf_float+0x182>
 8004372:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004376:	9205      	str	r2, [sp, #20]
 8004378:	4631      	mov	r1, r6
 800437a:	4638      	mov	r0, r7
 800437c:	4798      	blx	r3
 800437e:	9a05      	ldr	r2, [sp, #20]
 8004380:	2800      	cmp	r0, #0
 8004382:	f43f af04 	beq.w	800418e <_scanf_float+0x4a>
 8004386:	e715      	b.n	80041b4 <_scanf_float+0x70>
 8004388:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800438c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004390:	4632      	mov	r2, r6
 8004392:	4638      	mov	r0, r7
 8004394:	4798      	blx	r3
 8004396:	6923      	ldr	r3, [r4, #16]
 8004398:	3b01      	subs	r3, #1
 800439a:	6123      	str	r3, [r4, #16]
 800439c:	e715      	b.n	80041ca <_scanf_float+0x86>
 800439e:	f10b 33ff 	add.w	r3, fp, #4294967295
 80043a2:	2b06      	cmp	r3, #6
 80043a4:	d80a      	bhi.n	80043bc <_scanf_float+0x278>
 80043a6:	f1bb 0f02 	cmp.w	fp, #2
 80043aa:	d968      	bls.n	800447e <_scanf_float+0x33a>
 80043ac:	f1ab 0b03 	sub.w	fp, fp, #3
 80043b0:	fa5f fb8b 	uxtb.w	fp, fp
 80043b4:	eba5 0b0b 	sub.w	fp, r5, fp
 80043b8:	455d      	cmp	r5, fp
 80043ba:	d14b      	bne.n	8004454 <_scanf_float+0x310>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	05da      	lsls	r2, r3, #23
 80043c0:	d51f      	bpl.n	8004402 <_scanf_float+0x2be>
 80043c2:	055b      	lsls	r3, r3, #21
 80043c4:	d468      	bmi.n	8004498 <_scanf_float+0x354>
 80043c6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80043ca:	6923      	ldr	r3, [r4, #16]
 80043cc:	2965      	cmp	r1, #101	; 0x65
 80043ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80043d2:	f105 3bff 	add.w	fp, r5, #4294967295
 80043d6:	6123      	str	r3, [r4, #16]
 80043d8:	d00d      	beq.n	80043f6 <_scanf_float+0x2b2>
 80043da:	2945      	cmp	r1, #69	; 0x45
 80043dc:	d00b      	beq.n	80043f6 <_scanf_float+0x2b2>
 80043de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043e2:	4632      	mov	r2, r6
 80043e4:	4638      	mov	r0, r7
 80043e6:	4798      	blx	r3
 80043e8:	6923      	ldr	r3, [r4, #16]
 80043ea:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	f1a5 0b02 	sub.w	fp, r5, #2
 80043f4:	6123      	str	r3, [r4, #16]
 80043f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043fa:	4632      	mov	r2, r6
 80043fc:	4638      	mov	r0, r7
 80043fe:	4798      	blx	r3
 8004400:	465d      	mov	r5, fp
 8004402:	6826      	ldr	r6, [r4, #0]
 8004404:	f016 0610 	ands.w	r6, r6, #16
 8004408:	d17a      	bne.n	8004500 <_scanf_float+0x3bc>
 800440a:	702e      	strb	r6, [r5, #0]
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004416:	d142      	bne.n	800449e <_scanf_float+0x35a>
 8004418:	9b02      	ldr	r3, [sp, #8]
 800441a:	eba9 0303 	sub.w	r3, r9, r3
 800441e:	425a      	negs	r2, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d149      	bne.n	80044b8 <_scanf_float+0x374>
 8004424:	2200      	movs	r2, #0
 8004426:	4641      	mov	r1, r8
 8004428:	4638      	mov	r0, r7
 800442a:	f000 fea5 	bl	8005178 <_strtod_r>
 800442e:	6825      	ldr	r5, [r4, #0]
 8004430:	f8da 3000 	ldr.w	r3, [sl]
 8004434:	f015 0f02 	tst.w	r5, #2
 8004438:	f103 0204 	add.w	r2, r3, #4
 800443c:	ec59 8b10 	vmov	r8, r9, d0
 8004440:	f8ca 2000 	str.w	r2, [sl]
 8004444:	d043      	beq.n	80044ce <_scanf_float+0x38a>
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	e9c3 8900 	strd	r8, r9, [r3]
 800444c:	68e3      	ldr	r3, [r4, #12]
 800444e:	3301      	adds	r3, #1
 8004450:	60e3      	str	r3, [r4, #12]
 8004452:	e6be      	b.n	80041d2 <_scanf_float+0x8e>
 8004454:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004458:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800445c:	4632      	mov	r2, r6
 800445e:	4638      	mov	r0, r7
 8004460:	4798      	blx	r3
 8004462:	6923      	ldr	r3, [r4, #16]
 8004464:	3b01      	subs	r3, #1
 8004466:	6123      	str	r3, [r4, #16]
 8004468:	e7a6      	b.n	80043b8 <_scanf_float+0x274>
 800446a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800446e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004472:	4632      	mov	r2, r6
 8004474:	4638      	mov	r0, r7
 8004476:	4798      	blx	r3
 8004478:	6923      	ldr	r3, [r4, #16]
 800447a:	3b01      	subs	r3, #1
 800447c:	6123      	str	r3, [r4, #16]
 800447e:	4545      	cmp	r5, r8
 8004480:	d8f3      	bhi.n	800446a <_scanf_float+0x326>
 8004482:	e6a5      	b.n	80041d0 <_scanf_float+0x8c>
 8004484:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004488:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800448c:	4632      	mov	r2, r6
 800448e:	4638      	mov	r0, r7
 8004490:	4798      	blx	r3
 8004492:	6923      	ldr	r3, [r4, #16]
 8004494:	3b01      	subs	r3, #1
 8004496:	6123      	str	r3, [r4, #16]
 8004498:	4545      	cmp	r5, r8
 800449a:	d8f3      	bhi.n	8004484 <_scanf_float+0x340>
 800449c:	e698      	b.n	80041d0 <_scanf_float+0x8c>
 800449e:	9b03      	ldr	r3, [sp, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0bf      	beq.n	8004424 <_scanf_float+0x2e0>
 80044a4:	9904      	ldr	r1, [sp, #16]
 80044a6:	230a      	movs	r3, #10
 80044a8:	4632      	mov	r2, r6
 80044aa:	3101      	adds	r1, #1
 80044ac:	4638      	mov	r0, r7
 80044ae:	f000 feef 	bl	8005290 <_strtol_r>
 80044b2:	9b03      	ldr	r3, [sp, #12]
 80044b4:	9d04      	ldr	r5, [sp, #16]
 80044b6:	1ac2      	subs	r2, r0, r3
 80044b8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80044bc:	429d      	cmp	r5, r3
 80044be:	bf28      	it	cs
 80044c0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80044c4:	490f      	ldr	r1, [pc, #60]	; (8004504 <_scanf_float+0x3c0>)
 80044c6:	4628      	mov	r0, r5
 80044c8:	f000 f824 	bl	8004514 <siprintf>
 80044cc:	e7aa      	b.n	8004424 <_scanf_float+0x2e0>
 80044ce:	f015 0504 	ands.w	r5, r5, #4
 80044d2:	d1b8      	bne.n	8004446 <_scanf_float+0x302>
 80044d4:	681f      	ldr	r7, [r3, #0]
 80044d6:	ee10 2a10 	vmov	r2, s0
 80044da:	464b      	mov	r3, r9
 80044dc:	ee10 0a10 	vmov	r0, s0
 80044e0:	4649      	mov	r1, r9
 80044e2:	f7fc fb23 	bl	8000b2c <__aeabi_dcmpun>
 80044e6:	b128      	cbz	r0, 80044f4 <_scanf_float+0x3b0>
 80044e8:	4628      	mov	r0, r5
 80044ea:	f000 f80d 	bl	8004508 <nanf>
 80044ee:	ed87 0a00 	vstr	s0, [r7]
 80044f2:	e7ab      	b.n	800444c <_scanf_float+0x308>
 80044f4:	4640      	mov	r0, r8
 80044f6:	4649      	mov	r1, r9
 80044f8:	f7fc fb76 	bl	8000be8 <__aeabi_d2f>
 80044fc:	6038      	str	r0, [r7, #0]
 80044fe:	e7a5      	b.n	800444c <_scanf_float+0x308>
 8004500:	2600      	movs	r6, #0
 8004502:	e666      	b.n	80041d2 <_scanf_float+0x8e>
 8004504:	08014104 	.word	0x08014104

08004508 <nanf>:
 8004508:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004510 <nanf+0x8>
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	7fc00000 	.word	0x7fc00000

08004514 <siprintf>:
 8004514:	b40e      	push	{r1, r2, r3}
 8004516:	b500      	push	{lr}
 8004518:	b09c      	sub	sp, #112	; 0x70
 800451a:	ab1d      	add	r3, sp, #116	; 0x74
 800451c:	9002      	str	r0, [sp, #8]
 800451e:	9006      	str	r0, [sp, #24]
 8004520:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004524:	4809      	ldr	r0, [pc, #36]	; (800454c <siprintf+0x38>)
 8004526:	9107      	str	r1, [sp, #28]
 8004528:	9104      	str	r1, [sp, #16]
 800452a:	4909      	ldr	r1, [pc, #36]	; (8004550 <siprintf+0x3c>)
 800452c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004530:	9105      	str	r1, [sp, #20]
 8004532:	6800      	ldr	r0, [r0, #0]
 8004534:	9301      	str	r3, [sp, #4]
 8004536:	a902      	add	r1, sp, #8
 8004538:	f002 fd70 	bl	800701c <_svfiprintf_r>
 800453c:	9b02      	ldr	r3, [sp, #8]
 800453e:	2200      	movs	r2, #0
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	b01c      	add	sp, #112	; 0x70
 8004544:	f85d eb04 	ldr.w	lr, [sp], #4
 8004548:	b003      	add	sp, #12
 800454a:	4770      	bx	lr
 800454c:	200000f4 	.word	0x200000f4
 8004550:	ffff0208 	.word	0xffff0208

08004554 <sulp>:
 8004554:	b570      	push	{r4, r5, r6, lr}
 8004556:	4604      	mov	r4, r0
 8004558:	460d      	mov	r5, r1
 800455a:	ec45 4b10 	vmov	d0, r4, r5
 800455e:	4616      	mov	r6, r2
 8004560:	f002 fb18 	bl	8006b94 <__ulp>
 8004564:	ec51 0b10 	vmov	r0, r1, d0
 8004568:	b17e      	cbz	r6, 800458a <sulp+0x36>
 800456a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800456e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004572:	2b00      	cmp	r3, #0
 8004574:	dd09      	ble.n	800458a <sulp+0x36>
 8004576:	051b      	lsls	r3, r3, #20
 8004578:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800457c:	2400      	movs	r4, #0
 800457e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004582:	4622      	mov	r2, r4
 8004584:	462b      	mov	r3, r5
 8004586:	f7fc f837 	bl	80005f8 <__aeabi_dmul>
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	0000      	movs	r0, r0
	...

08004590 <_strtod_l>:
 8004590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004594:	461f      	mov	r7, r3
 8004596:	b0a1      	sub	sp, #132	; 0x84
 8004598:	2300      	movs	r3, #0
 800459a:	4681      	mov	r9, r0
 800459c:	4638      	mov	r0, r7
 800459e:	460e      	mov	r6, r1
 80045a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80045a2:	931c      	str	r3, [sp, #112]	; 0x70
 80045a4:	f001 fff5 	bl	8006592 <__localeconv_l>
 80045a8:	4680      	mov	r8, r0
 80045aa:	6800      	ldr	r0, [r0, #0]
 80045ac:	f7fb fe10 	bl	80001d0 <strlen>
 80045b0:	f04f 0a00 	mov.w	sl, #0
 80045b4:	4604      	mov	r4, r0
 80045b6:	f04f 0b00 	mov.w	fp, #0
 80045ba:	961b      	str	r6, [sp, #108]	; 0x6c
 80045bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045be:	781a      	ldrb	r2, [r3, #0]
 80045c0:	2a0d      	cmp	r2, #13
 80045c2:	d832      	bhi.n	800462a <_strtod_l+0x9a>
 80045c4:	2a09      	cmp	r2, #9
 80045c6:	d236      	bcs.n	8004636 <_strtod_l+0xa6>
 80045c8:	2a00      	cmp	r2, #0
 80045ca:	d03e      	beq.n	800464a <_strtod_l+0xba>
 80045cc:	2300      	movs	r3, #0
 80045ce:	930d      	str	r3, [sp, #52]	; 0x34
 80045d0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80045d2:	782b      	ldrb	r3, [r5, #0]
 80045d4:	2b30      	cmp	r3, #48	; 0x30
 80045d6:	f040 80ac 	bne.w	8004732 <_strtod_l+0x1a2>
 80045da:	786b      	ldrb	r3, [r5, #1]
 80045dc:	2b58      	cmp	r3, #88	; 0x58
 80045de:	d001      	beq.n	80045e4 <_strtod_l+0x54>
 80045e0:	2b78      	cmp	r3, #120	; 0x78
 80045e2:	d167      	bne.n	80046b4 <_strtod_l+0x124>
 80045e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045e6:	9301      	str	r3, [sp, #4]
 80045e8:	ab1c      	add	r3, sp, #112	; 0x70
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	9702      	str	r7, [sp, #8]
 80045ee:	ab1d      	add	r3, sp, #116	; 0x74
 80045f0:	4a88      	ldr	r2, [pc, #544]	; (8004814 <_strtod_l+0x284>)
 80045f2:	a91b      	add	r1, sp, #108	; 0x6c
 80045f4:	4648      	mov	r0, r9
 80045f6:	f001 fcf2 	bl	8005fde <__gethex>
 80045fa:	f010 0407 	ands.w	r4, r0, #7
 80045fe:	4606      	mov	r6, r0
 8004600:	d005      	beq.n	800460e <_strtod_l+0x7e>
 8004602:	2c06      	cmp	r4, #6
 8004604:	d12b      	bne.n	800465e <_strtod_l+0xce>
 8004606:	3501      	adds	r5, #1
 8004608:	2300      	movs	r3, #0
 800460a:	951b      	str	r5, [sp, #108]	; 0x6c
 800460c:	930d      	str	r3, [sp, #52]	; 0x34
 800460e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004610:	2b00      	cmp	r3, #0
 8004612:	f040 859a 	bne.w	800514a <_strtod_l+0xbba>
 8004616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004618:	b1e3      	cbz	r3, 8004654 <_strtod_l+0xc4>
 800461a:	4652      	mov	r2, sl
 800461c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004620:	ec43 2b10 	vmov	d0, r2, r3
 8004624:	b021      	add	sp, #132	; 0x84
 8004626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800462a:	2a2b      	cmp	r2, #43	; 0x2b
 800462c:	d015      	beq.n	800465a <_strtod_l+0xca>
 800462e:	2a2d      	cmp	r2, #45	; 0x2d
 8004630:	d004      	beq.n	800463c <_strtod_l+0xac>
 8004632:	2a20      	cmp	r2, #32
 8004634:	d1ca      	bne.n	80045cc <_strtod_l+0x3c>
 8004636:	3301      	adds	r3, #1
 8004638:	931b      	str	r3, [sp, #108]	; 0x6c
 800463a:	e7bf      	b.n	80045bc <_strtod_l+0x2c>
 800463c:	2201      	movs	r2, #1
 800463e:	920d      	str	r2, [sp, #52]	; 0x34
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	921b      	str	r2, [sp, #108]	; 0x6c
 8004644:	785b      	ldrb	r3, [r3, #1]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1c2      	bne.n	80045d0 <_strtod_l+0x40>
 800464a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800464c:	961b      	str	r6, [sp, #108]	; 0x6c
 800464e:	2b00      	cmp	r3, #0
 8004650:	f040 8579 	bne.w	8005146 <_strtod_l+0xbb6>
 8004654:	4652      	mov	r2, sl
 8004656:	465b      	mov	r3, fp
 8004658:	e7e2      	b.n	8004620 <_strtod_l+0x90>
 800465a:	2200      	movs	r2, #0
 800465c:	e7ef      	b.n	800463e <_strtod_l+0xae>
 800465e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004660:	b13a      	cbz	r2, 8004672 <_strtod_l+0xe2>
 8004662:	2135      	movs	r1, #53	; 0x35
 8004664:	a81e      	add	r0, sp, #120	; 0x78
 8004666:	f002 fb8d 	bl	8006d84 <__copybits>
 800466a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800466c:	4648      	mov	r0, r9
 800466e:	f001 fffa 	bl	8006666 <_Bfree>
 8004672:	3c01      	subs	r4, #1
 8004674:	2c04      	cmp	r4, #4
 8004676:	d806      	bhi.n	8004686 <_strtod_l+0xf6>
 8004678:	e8df f004 	tbb	[pc, r4]
 800467c:	1714030a 	.word	0x1714030a
 8004680:	0a          	.byte	0x0a
 8004681:	00          	.byte	0x00
 8004682:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8004686:	0730      	lsls	r0, r6, #28
 8004688:	d5c1      	bpl.n	800460e <_strtod_l+0x7e>
 800468a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800468e:	e7be      	b.n	800460e <_strtod_l+0x7e>
 8004690:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8004694:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004696:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800469a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800469e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80046a2:	e7f0      	b.n	8004686 <_strtod_l+0xf6>
 80046a4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8004818 <_strtod_l+0x288>
 80046a8:	e7ed      	b.n	8004686 <_strtod_l+0xf6>
 80046aa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80046ae:	f04f 3aff 	mov.w	sl, #4294967295
 80046b2:	e7e8      	b.n	8004686 <_strtod_l+0xf6>
 80046b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80046ba:	785b      	ldrb	r3, [r3, #1]
 80046bc:	2b30      	cmp	r3, #48	; 0x30
 80046be:	d0f9      	beq.n	80046b4 <_strtod_l+0x124>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0a4      	beq.n	800460e <_strtod_l+0x7e>
 80046c4:	2301      	movs	r3, #1
 80046c6:	2500      	movs	r5, #0
 80046c8:	9306      	str	r3, [sp, #24]
 80046ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046cc:	9308      	str	r3, [sp, #32]
 80046ce:	9507      	str	r5, [sp, #28]
 80046d0:	9505      	str	r5, [sp, #20]
 80046d2:	220a      	movs	r2, #10
 80046d4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80046d6:	7807      	ldrb	r7, [r0, #0]
 80046d8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80046dc:	b2d9      	uxtb	r1, r3
 80046de:	2909      	cmp	r1, #9
 80046e0:	d929      	bls.n	8004736 <_strtod_l+0x1a6>
 80046e2:	4622      	mov	r2, r4
 80046e4:	f8d8 1000 	ldr.w	r1, [r8]
 80046e8:	f002 fda0 	bl	800722c <strncmp>
 80046ec:	2800      	cmp	r0, #0
 80046ee:	d031      	beq.n	8004754 <_strtod_l+0x1c4>
 80046f0:	2000      	movs	r0, #0
 80046f2:	9c05      	ldr	r4, [sp, #20]
 80046f4:	9004      	str	r0, [sp, #16]
 80046f6:	463b      	mov	r3, r7
 80046f8:	4602      	mov	r2, r0
 80046fa:	2b65      	cmp	r3, #101	; 0x65
 80046fc:	d001      	beq.n	8004702 <_strtod_l+0x172>
 80046fe:	2b45      	cmp	r3, #69	; 0x45
 8004700:	d114      	bne.n	800472c <_strtod_l+0x19c>
 8004702:	b924      	cbnz	r4, 800470e <_strtod_l+0x17e>
 8004704:	b910      	cbnz	r0, 800470c <_strtod_l+0x17c>
 8004706:	9b06      	ldr	r3, [sp, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d09e      	beq.n	800464a <_strtod_l+0xba>
 800470c:	2400      	movs	r4, #0
 800470e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004710:	1c73      	adds	r3, r6, #1
 8004712:	931b      	str	r3, [sp, #108]	; 0x6c
 8004714:	7873      	ldrb	r3, [r6, #1]
 8004716:	2b2b      	cmp	r3, #43	; 0x2b
 8004718:	d078      	beq.n	800480c <_strtod_l+0x27c>
 800471a:	2b2d      	cmp	r3, #45	; 0x2d
 800471c:	d070      	beq.n	8004800 <_strtod_l+0x270>
 800471e:	f04f 0c00 	mov.w	ip, #0
 8004722:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004726:	2f09      	cmp	r7, #9
 8004728:	d97c      	bls.n	8004824 <_strtod_l+0x294>
 800472a:	961b      	str	r6, [sp, #108]	; 0x6c
 800472c:	f04f 0e00 	mov.w	lr, #0
 8004730:	e09a      	b.n	8004868 <_strtod_l+0x2d8>
 8004732:	2300      	movs	r3, #0
 8004734:	e7c7      	b.n	80046c6 <_strtod_l+0x136>
 8004736:	9905      	ldr	r1, [sp, #20]
 8004738:	2908      	cmp	r1, #8
 800473a:	bfdd      	ittte	le
 800473c:	9907      	ldrle	r1, [sp, #28]
 800473e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004742:	9307      	strle	r3, [sp, #28]
 8004744:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004748:	9b05      	ldr	r3, [sp, #20]
 800474a:	3001      	adds	r0, #1
 800474c:	3301      	adds	r3, #1
 800474e:	9305      	str	r3, [sp, #20]
 8004750:	901b      	str	r0, [sp, #108]	; 0x6c
 8004752:	e7bf      	b.n	80046d4 <_strtod_l+0x144>
 8004754:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004756:	191a      	adds	r2, r3, r4
 8004758:	921b      	str	r2, [sp, #108]	; 0x6c
 800475a:	9a05      	ldr	r2, [sp, #20]
 800475c:	5d1b      	ldrb	r3, [r3, r4]
 800475e:	2a00      	cmp	r2, #0
 8004760:	d037      	beq.n	80047d2 <_strtod_l+0x242>
 8004762:	9c05      	ldr	r4, [sp, #20]
 8004764:	4602      	mov	r2, r0
 8004766:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800476a:	2909      	cmp	r1, #9
 800476c:	d913      	bls.n	8004796 <_strtod_l+0x206>
 800476e:	2101      	movs	r1, #1
 8004770:	9104      	str	r1, [sp, #16]
 8004772:	e7c2      	b.n	80046fa <_strtod_l+0x16a>
 8004774:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	921b      	str	r2, [sp, #108]	; 0x6c
 800477a:	785b      	ldrb	r3, [r3, #1]
 800477c:	3001      	adds	r0, #1
 800477e:	2b30      	cmp	r3, #48	; 0x30
 8004780:	d0f8      	beq.n	8004774 <_strtod_l+0x1e4>
 8004782:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004786:	2a08      	cmp	r2, #8
 8004788:	f200 84e4 	bhi.w	8005154 <_strtod_l+0xbc4>
 800478c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800478e:	9208      	str	r2, [sp, #32]
 8004790:	4602      	mov	r2, r0
 8004792:	2000      	movs	r0, #0
 8004794:	4604      	mov	r4, r0
 8004796:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800479a:	f100 0101 	add.w	r1, r0, #1
 800479e:	d012      	beq.n	80047c6 <_strtod_l+0x236>
 80047a0:	440a      	add	r2, r1
 80047a2:	eb00 0c04 	add.w	ip, r0, r4
 80047a6:	4621      	mov	r1, r4
 80047a8:	270a      	movs	r7, #10
 80047aa:	458c      	cmp	ip, r1
 80047ac:	d113      	bne.n	80047d6 <_strtod_l+0x246>
 80047ae:	1821      	adds	r1, r4, r0
 80047b0:	2908      	cmp	r1, #8
 80047b2:	f104 0401 	add.w	r4, r4, #1
 80047b6:	4404      	add	r4, r0
 80047b8:	dc19      	bgt.n	80047ee <_strtod_l+0x25e>
 80047ba:	9b07      	ldr	r3, [sp, #28]
 80047bc:	210a      	movs	r1, #10
 80047be:	fb01 e303 	mla	r3, r1, r3, lr
 80047c2:	9307      	str	r3, [sp, #28]
 80047c4:	2100      	movs	r1, #0
 80047c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80047c8:	1c58      	adds	r0, r3, #1
 80047ca:	901b      	str	r0, [sp, #108]	; 0x6c
 80047cc:	785b      	ldrb	r3, [r3, #1]
 80047ce:	4608      	mov	r0, r1
 80047d0:	e7c9      	b.n	8004766 <_strtod_l+0x1d6>
 80047d2:	9805      	ldr	r0, [sp, #20]
 80047d4:	e7d3      	b.n	800477e <_strtod_l+0x1ee>
 80047d6:	2908      	cmp	r1, #8
 80047d8:	f101 0101 	add.w	r1, r1, #1
 80047dc:	dc03      	bgt.n	80047e6 <_strtod_l+0x256>
 80047de:	9b07      	ldr	r3, [sp, #28]
 80047e0:	437b      	muls	r3, r7
 80047e2:	9307      	str	r3, [sp, #28]
 80047e4:	e7e1      	b.n	80047aa <_strtod_l+0x21a>
 80047e6:	2910      	cmp	r1, #16
 80047e8:	bfd8      	it	le
 80047ea:	437d      	mulle	r5, r7
 80047ec:	e7dd      	b.n	80047aa <_strtod_l+0x21a>
 80047ee:	2c10      	cmp	r4, #16
 80047f0:	bfdc      	itt	le
 80047f2:	210a      	movle	r1, #10
 80047f4:	fb01 e505 	mlale	r5, r1, r5, lr
 80047f8:	e7e4      	b.n	80047c4 <_strtod_l+0x234>
 80047fa:	2301      	movs	r3, #1
 80047fc:	9304      	str	r3, [sp, #16]
 80047fe:	e781      	b.n	8004704 <_strtod_l+0x174>
 8004800:	f04f 0c01 	mov.w	ip, #1
 8004804:	1cb3      	adds	r3, r6, #2
 8004806:	931b      	str	r3, [sp, #108]	; 0x6c
 8004808:	78b3      	ldrb	r3, [r6, #2]
 800480a:	e78a      	b.n	8004722 <_strtod_l+0x192>
 800480c:	f04f 0c00 	mov.w	ip, #0
 8004810:	e7f8      	b.n	8004804 <_strtod_l+0x274>
 8004812:	bf00      	nop
 8004814:	0801410c 	.word	0x0801410c
 8004818:	7ff00000 	.word	0x7ff00000
 800481c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800481e:	1c5f      	adds	r7, r3, #1
 8004820:	971b      	str	r7, [sp, #108]	; 0x6c
 8004822:	785b      	ldrb	r3, [r3, #1]
 8004824:	2b30      	cmp	r3, #48	; 0x30
 8004826:	d0f9      	beq.n	800481c <_strtod_l+0x28c>
 8004828:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800482c:	2f08      	cmp	r7, #8
 800482e:	f63f af7d 	bhi.w	800472c <_strtod_l+0x19c>
 8004832:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004836:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004838:	930a      	str	r3, [sp, #40]	; 0x28
 800483a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800483c:	1c5f      	adds	r7, r3, #1
 800483e:	971b      	str	r7, [sp, #108]	; 0x6c
 8004840:	785b      	ldrb	r3, [r3, #1]
 8004842:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004846:	f1b8 0f09 	cmp.w	r8, #9
 800484a:	d937      	bls.n	80048bc <_strtod_l+0x32c>
 800484c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800484e:	1a7f      	subs	r7, r7, r1
 8004850:	2f08      	cmp	r7, #8
 8004852:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004856:	dc37      	bgt.n	80048c8 <_strtod_l+0x338>
 8004858:	45be      	cmp	lr, r7
 800485a:	bfa8      	it	ge
 800485c:	46be      	movge	lr, r7
 800485e:	f1bc 0f00 	cmp.w	ip, #0
 8004862:	d001      	beq.n	8004868 <_strtod_l+0x2d8>
 8004864:	f1ce 0e00 	rsb	lr, lr, #0
 8004868:	2c00      	cmp	r4, #0
 800486a:	d151      	bne.n	8004910 <_strtod_l+0x380>
 800486c:	2800      	cmp	r0, #0
 800486e:	f47f aece 	bne.w	800460e <_strtod_l+0x7e>
 8004872:	9a06      	ldr	r2, [sp, #24]
 8004874:	2a00      	cmp	r2, #0
 8004876:	f47f aeca 	bne.w	800460e <_strtod_l+0x7e>
 800487a:	9a04      	ldr	r2, [sp, #16]
 800487c:	2a00      	cmp	r2, #0
 800487e:	f47f aee4 	bne.w	800464a <_strtod_l+0xba>
 8004882:	2b4e      	cmp	r3, #78	; 0x4e
 8004884:	d027      	beq.n	80048d6 <_strtod_l+0x346>
 8004886:	dc21      	bgt.n	80048cc <_strtod_l+0x33c>
 8004888:	2b49      	cmp	r3, #73	; 0x49
 800488a:	f47f aede 	bne.w	800464a <_strtod_l+0xba>
 800488e:	49a0      	ldr	r1, [pc, #640]	; (8004b10 <_strtod_l+0x580>)
 8004890:	a81b      	add	r0, sp, #108	; 0x6c
 8004892:	f001 fdd7 	bl	8006444 <__match>
 8004896:	2800      	cmp	r0, #0
 8004898:	f43f aed7 	beq.w	800464a <_strtod_l+0xba>
 800489c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800489e:	499d      	ldr	r1, [pc, #628]	; (8004b14 <_strtod_l+0x584>)
 80048a0:	3b01      	subs	r3, #1
 80048a2:	a81b      	add	r0, sp, #108	; 0x6c
 80048a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80048a6:	f001 fdcd 	bl	8006444 <__match>
 80048aa:	b910      	cbnz	r0, 80048b2 <_strtod_l+0x322>
 80048ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80048ae:	3301      	adds	r3, #1
 80048b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80048b2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8004b28 <_strtod_l+0x598>
 80048b6:	f04f 0a00 	mov.w	sl, #0
 80048ba:	e6a8      	b.n	800460e <_strtod_l+0x7e>
 80048bc:	210a      	movs	r1, #10
 80048be:	fb01 3e0e 	mla	lr, r1, lr, r3
 80048c2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80048c6:	e7b8      	b.n	800483a <_strtod_l+0x2aa>
 80048c8:	46be      	mov	lr, r7
 80048ca:	e7c8      	b.n	800485e <_strtod_l+0x2ce>
 80048cc:	2b69      	cmp	r3, #105	; 0x69
 80048ce:	d0de      	beq.n	800488e <_strtod_l+0x2fe>
 80048d0:	2b6e      	cmp	r3, #110	; 0x6e
 80048d2:	f47f aeba 	bne.w	800464a <_strtod_l+0xba>
 80048d6:	4990      	ldr	r1, [pc, #576]	; (8004b18 <_strtod_l+0x588>)
 80048d8:	a81b      	add	r0, sp, #108	; 0x6c
 80048da:	f001 fdb3 	bl	8006444 <__match>
 80048de:	2800      	cmp	r0, #0
 80048e0:	f43f aeb3 	beq.w	800464a <_strtod_l+0xba>
 80048e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b28      	cmp	r3, #40	; 0x28
 80048ea:	d10e      	bne.n	800490a <_strtod_l+0x37a>
 80048ec:	aa1e      	add	r2, sp, #120	; 0x78
 80048ee:	498b      	ldr	r1, [pc, #556]	; (8004b1c <_strtod_l+0x58c>)
 80048f0:	a81b      	add	r0, sp, #108	; 0x6c
 80048f2:	f001 fdbb 	bl	800646c <__hexnan>
 80048f6:	2805      	cmp	r0, #5
 80048f8:	d107      	bne.n	800490a <_strtod_l+0x37a>
 80048fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80048fc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8004900:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004904:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004908:	e681      	b.n	800460e <_strtod_l+0x7e>
 800490a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8004b30 <_strtod_l+0x5a0>
 800490e:	e7d2      	b.n	80048b6 <_strtod_l+0x326>
 8004910:	ebae 0302 	sub.w	r3, lr, r2
 8004914:	9306      	str	r3, [sp, #24]
 8004916:	9b05      	ldr	r3, [sp, #20]
 8004918:	9807      	ldr	r0, [sp, #28]
 800491a:	2b00      	cmp	r3, #0
 800491c:	bf08      	it	eq
 800491e:	4623      	moveq	r3, r4
 8004920:	2c10      	cmp	r4, #16
 8004922:	9305      	str	r3, [sp, #20]
 8004924:	46a0      	mov	r8, r4
 8004926:	bfa8      	it	ge
 8004928:	f04f 0810 	movge.w	r8, #16
 800492c:	f7fb fdea 	bl	8000504 <__aeabi_ui2d>
 8004930:	2c09      	cmp	r4, #9
 8004932:	4682      	mov	sl, r0
 8004934:	468b      	mov	fp, r1
 8004936:	dc13      	bgt.n	8004960 <_strtod_l+0x3d0>
 8004938:	9b06      	ldr	r3, [sp, #24]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f43f ae67 	beq.w	800460e <_strtod_l+0x7e>
 8004940:	9b06      	ldr	r3, [sp, #24]
 8004942:	dd7a      	ble.n	8004a3a <_strtod_l+0x4aa>
 8004944:	2b16      	cmp	r3, #22
 8004946:	dc61      	bgt.n	8004a0c <_strtod_l+0x47c>
 8004948:	4a75      	ldr	r2, [pc, #468]	; (8004b20 <_strtod_l+0x590>)
 800494a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800494e:	e9de 0100 	ldrd	r0, r1, [lr]
 8004952:	4652      	mov	r2, sl
 8004954:	465b      	mov	r3, fp
 8004956:	f7fb fe4f 	bl	80005f8 <__aeabi_dmul>
 800495a:	4682      	mov	sl, r0
 800495c:	468b      	mov	fp, r1
 800495e:	e656      	b.n	800460e <_strtod_l+0x7e>
 8004960:	4b6f      	ldr	r3, [pc, #444]	; (8004b20 <_strtod_l+0x590>)
 8004962:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004966:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800496a:	f7fb fe45 	bl	80005f8 <__aeabi_dmul>
 800496e:	4606      	mov	r6, r0
 8004970:	4628      	mov	r0, r5
 8004972:	460f      	mov	r7, r1
 8004974:	f7fb fdc6 	bl	8000504 <__aeabi_ui2d>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4630      	mov	r0, r6
 800497e:	4639      	mov	r1, r7
 8004980:	f7fb fc84 	bl	800028c <__adddf3>
 8004984:	2c0f      	cmp	r4, #15
 8004986:	4682      	mov	sl, r0
 8004988:	468b      	mov	fp, r1
 800498a:	ddd5      	ble.n	8004938 <_strtod_l+0x3a8>
 800498c:	9b06      	ldr	r3, [sp, #24]
 800498e:	eba4 0808 	sub.w	r8, r4, r8
 8004992:	4498      	add	r8, r3
 8004994:	f1b8 0f00 	cmp.w	r8, #0
 8004998:	f340 8096 	ble.w	8004ac8 <_strtod_l+0x538>
 800499c:	f018 030f 	ands.w	r3, r8, #15
 80049a0:	d00a      	beq.n	80049b8 <_strtod_l+0x428>
 80049a2:	495f      	ldr	r1, [pc, #380]	; (8004b20 <_strtod_l+0x590>)
 80049a4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80049a8:	4652      	mov	r2, sl
 80049aa:	465b      	mov	r3, fp
 80049ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049b0:	f7fb fe22 	bl	80005f8 <__aeabi_dmul>
 80049b4:	4682      	mov	sl, r0
 80049b6:	468b      	mov	fp, r1
 80049b8:	f038 080f 	bics.w	r8, r8, #15
 80049bc:	d073      	beq.n	8004aa6 <_strtod_l+0x516>
 80049be:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80049c2:	dd47      	ble.n	8004a54 <_strtod_l+0x4c4>
 80049c4:	2400      	movs	r4, #0
 80049c6:	46a0      	mov	r8, r4
 80049c8:	9407      	str	r4, [sp, #28]
 80049ca:	9405      	str	r4, [sp, #20]
 80049cc:	2322      	movs	r3, #34	; 0x22
 80049ce:	f8df b158 	ldr.w	fp, [pc, #344]	; 8004b28 <_strtod_l+0x598>
 80049d2:	f8c9 3000 	str.w	r3, [r9]
 80049d6:	f04f 0a00 	mov.w	sl, #0
 80049da:	9b07      	ldr	r3, [sp, #28]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f43f ae16 	beq.w	800460e <_strtod_l+0x7e>
 80049e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80049e4:	4648      	mov	r0, r9
 80049e6:	f001 fe3e 	bl	8006666 <_Bfree>
 80049ea:	9905      	ldr	r1, [sp, #20]
 80049ec:	4648      	mov	r0, r9
 80049ee:	f001 fe3a 	bl	8006666 <_Bfree>
 80049f2:	4641      	mov	r1, r8
 80049f4:	4648      	mov	r0, r9
 80049f6:	f001 fe36 	bl	8006666 <_Bfree>
 80049fa:	9907      	ldr	r1, [sp, #28]
 80049fc:	4648      	mov	r0, r9
 80049fe:	f001 fe32 	bl	8006666 <_Bfree>
 8004a02:	4621      	mov	r1, r4
 8004a04:	4648      	mov	r0, r9
 8004a06:	f001 fe2e 	bl	8006666 <_Bfree>
 8004a0a:	e600      	b.n	800460e <_strtod_l+0x7e>
 8004a0c:	9a06      	ldr	r2, [sp, #24]
 8004a0e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004a12:	4293      	cmp	r3, r2
 8004a14:	dbba      	blt.n	800498c <_strtod_l+0x3fc>
 8004a16:	4d42      	ldr	r5, [pc, #264]	; (8004b20 <_strtod_l+0x590>)
 8004a18:	f1c4 040f 	rsb	r4, r4, #15
 8004a1c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004a20:	4652      	mov	r2, sl
 8004a22:	465b      	mov	r3, fp
 8004a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a28:	f7fb fde6 	bl	80005f8 <__aeabi_dmul>
 8004a2c:	9b06      	ldr	r3, [sp, #24]
 8004a2e:	1b1c      	subs	r4, r3, r4
 8004a30:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004a34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a38:	e78d      	b.n	8004956 <_strtod_l+0x3c6>
 8004a3a:	f113 0f16 	cmn.w	r3, #22
 8004a3e:	dba5      	blt.n	800498c <_strtod_l+0x3fc>
 8004a40:	4a37      	ldr	r2, [pc, #220]	; (8004b20 <_strtod_l+0x590>)
 8004a42:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004a46:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004a4a:	4650      	mov	r0, sl
 8004a4c:	4659      	mov	r1, fp
 8004a4e:	f7fb fefd 	bl	800084c <__aeabi_ddiv>
 8004a52:	e782      	b.n	800495a <_strtod_l+0x3ca>
 8004a54:	2300      	movs	r3, #0
 8004a56:	4e33      	ldr	r6, [pc, #204]	; (8004b24 <_strtod_l+0x594>)
 8004a58:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004a5c:	4650      	mov	r0, sl
 8004a5e:	4659      	mov	r1, fp
 8004a60:	461d      	mov	r5, r3
 8004a62:	f1b8 0f01 	cmp.w	r8, #1
 8004a66:	dc21      	bgt.n	8004aac <_strtod_l+0x51c>
 8004a68:	b10b      	cbz	r3, 8004a6e <_strtod_l+0x4de>
 8004a6a:	4682      	mov	sl, r0
 8004a6c:	468b      	mov	fp, r1
 8004a6e:	4b2d      	ldr	r3, [pc, #180]	; (8004b24 <_strtod_l+0x594>)
 8004a70:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004a74:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004a78:	4652      	mov	r2, sl
 8004a7a:	465b      	mov	r3, fp
 8004a7c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004a80:	f7fb fdba 	bl	80005f8 <__aeabi_dmul>
 8004a84:	4b28      	ldr	r3, [pc, #160]	; (8004b28 <_strtod_l+0x598>)
 8004a86:	460a      	mov	r2, r1
 8004a88:	400b      	ands	r3, r1
 8004a8a:	4928      	ldr	r1, [pc, #160]	; (8004b2c <_strtod_l+0x59c>)
 8004a8c:	428b      	cmp	r3, r1
 8004a8e:	4682      	mov	sl, r0
 8004a90:	d898      	bhi.n	80049c4 <_strtod_l+0x434>
 8004a92:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004a96:	428b      	cmp	r3, r1
 8004a98:	bf86      	itte	hi
 8004a9a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8004b34 <_strtod_l+0x5a4>
 8004a9e:	f04f 3aff 	movhi.w	sl, #4294967295
 8004aa2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	9304      	str	r3, [sp, #16]
 8004aaa:	e077      	b.n	8004b9c <_strtod_l+0x60c>
 8004aac:	f018 0f01 	tst.w	r8, #1
 8004ab0:	d006      	beq.n	8004ac0 <_strtod_l+0x530>
 8004ab2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8004ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aba:	f7fb fd9d 	bl	80005f8 <__aeabi_dmul>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	3501      	adds	r5, #1
 8004ac2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004ac6:	e7cc      	b.n	8004a62 <_strtod_l+0x4d2>
 8004ac8:	d0ed      	beq.n	8004aa6 <_strtod_l+0x516>
 8004aca:	f1c8 0800 	rsb	r8, r8, #0
 8004ace:	f018 020f 	ands.w	r2, r8, #15
 8004ad2:	d00a      	beq.n	8004aea <_strtod_l+0x55a>
 8004ad4:	4b12      	ldr	r3, [pc, #72]	; (8004b20 <_strtod_l+0x590>)
 8004ad6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ada:	4650      	mov	r0, sl
 8004adc:	4659      	mov	r1, fp
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	f7fb feb3 	bl	800084c <__aeabi_ddiv>
 8004ae6:	4682      	mov	sl, r0
 8004ae8:	468b      	mov	fp, r1
 8004aea:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004aee:	d0da      	beq.n	8004aa6 <_strtod_l+0x516>
 8004af0:	f1b8 0f1f 	cmp.w	r8, #31
 8004af4:	dd20      	ble.n	8004b38 <_strtod_l+0x5a8>
 8004af6:	2400      	movs	r4, #0
 8004af8:	46a0      	mov	r8, r4
 8004afa:	9407      	str	r4, [sp, #28]
 8004afc:	9405      	str	r4, [sp, #20]
 8004afe:	2322      	movs	r3, #34	; 0x22
 8004b00:	f04f 0a00 	mov.w	sl, #0
 8004b04:	f04f 0b00 	mov.w	fp, #0
 8004b08:	f8c9 3000 	str.w	r3, [r9]
 8004b0c:	e765      	b.n	80049da <_strtod_l+0x44a>
 8004b0e:	bf00      	nop
 8004b10:	080140d5 	.word	0x080140d5
 8004b14:	08014163 	.word	0x08014163
 8004b18:	080140dd 	.word	0x080140dd
 8004b1c:	08014120 	.word	0x08014120
 8004b20:	080141a0 	.word	0x080141a0
 8004b24:	08014178 	.word	0x08014178
 8004b28:	7ff00000 	.word	0x7ff00000
 8004b2c:	7ca00000 	.word	0x7ca00000
 8004b30:	fff80000 	.word	0xfff80000
 8004b34:	7fefffff 	.word	0x7fefffff
 8004b38:	f018 0310 	ands.w	r3, r8, #16
 8004b3c:	bf18      	it	ne
 8004b3e:	236a      	movne	r3, #106	; 0x6a
 8004b40:	4da0      	ldr	r5, [pc, #640]	; (8004dc4 <_strtod_l+0x834>)
 8004b42:	9304      	str	r3, [sp, #16]
 8004b44:	4650      	mov	r0, sl
 8004b46:	4659      	mov	r1, fp
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f1b8 0f00 	cmp.w	r8, #0
 8004b4e:	f300 810a 	bgt.w	8004d66 <_strtod_l+0x7d6>
 8004b52:	b10b      	cbz	r3, 8004b58 <_strtod_l+0x5c8>
 8004b54:	4682      	mov	sl, r0
 8004b56:	468b      	mov	fp, r1
 8004b58:	9b04      	ldr	r3, [sp, #16]
 8004b5a:	b1bb      	cbz	r3, 8004b8c <_strtod_l+0x5fc>
 8004b5c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004b60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	4659      	mov	r1, fp
 8004b68:	dd10      	ble.n	8004b8c <_strtod_l+0x5fc>
 8004b6a:	2b1f      	cmp	r3, #31
 8004b6c:	f340 8107 	ble.w	8004d7e <_strtod_l+0x7ee>
 8004b70:	2b34      	cmp	r3, #52	; 0x34
 8004b72:	bfde      	ittt	le
 8004b74:	3b20      	suble	r3, #32
 8004b76:	f04f 32ff 	movle.w	r2, #4294967295
 8004b7a:	fa02 f303 	lslle.w	r3, r2, r3
 8004b7e:	f04f 0a00 	mov.w	sl, #0
 8004b82:	bfcc      	ite	gt
 8004b84:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004b88:	ea03 0b01 	andle.w	fp, r3, r1
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2300      	movs	r3, #0
 8004b90:	4650      	mov	r0, sl
 8004b92:	4659      	mov	r1, fp
 8004b94:	f7fb ff98 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	d1ac      	bne.n	8004af6 <_strtod_l+0x566>
 8004b9c:	9b07      	ldr	r3, [sp, #28]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	9a05      	ldr	r2, [sp, #20]
 8004ba2:	9908      	ldr	r1, [sp, #32]
 8004ba4:	4623      	mov	r3, r4
 8004ba6:	4648      	mov	r0, r9
 8004ba8:	f001 fdaf 	bl	800670a <__s2b>
 8004bac:	9007      	str	r0, [sp, #28]
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	f43f af08 	beq.w	80049c4 <_strtod_l+0x434>
 8004bb4:	9a06      	ldr	r2, [sp, #24]
 8004bb6:	9b06      	ldr	r3, [sp, #24]
 8004bb8:	2a00      	cmp	r2, #0
 8004bba:	f1c3 0300 	rsb	r3, r3, #0
 8004bbe:	bfa8      	it	ge
 8004bc0:	2300      	movge	r3, #0
 8004bc2:	930e      	str	r3, [sp, #56]	; 0x38
 8004bc4:	2400      	movs	r4, #0
 8004bc6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004bca:	9316      	str	r3, [sp, #88]	; 0x58
 8004bcc:	46a0      	mov	r8, r4
 8004bce:	9b07      	ldr	r3, [sp, #28]
 8004bd0:	4648      	mov	r0, r9
 8004bd2:	6859      	ldr	r1, [r3, #4]
 8004bd4:	f001 fd13 	bl	80065fe <_Balloc>
 8004bd8:	9005      	str	r0, [sp, #20]
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	f43f aef6 	beq.w	80049cc <_strtod_l+0x43c>
 8004be0:	9b07      	ldr	r3, [sp, #28]
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	3202      	adds	r2, #2
 8004be6:	f103 010c 	add.w	r1, r3, #12
 8004bea:	0092      	lsls	r2, r2, #2
 8004bec:	300c      	adds	r0, #12
 8004bee:	f001 fcfb 	bl	80065e8 <memcpy>
 8004bf2:	aa1e      	add	r2, sp, #120	; 0x78
 8004bf4:	a91d      	add	r1, sp, #116	; 0x74
 8004bf6:	ec4b ab10 	vmov	d0, sl, fp
 8004bfa:	4648      	mov	r0, r9
 8004bfc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004c00:	f002 f83e 	bl	8006c80 <__d2b>
 8004c04:	901c      	str	r0, [sp, #112]	; 0x70
 8004c06:	2800      	cmp	r0, #0
 8004c08:	f43f aee0 	beq.w	80049cc <_strtod_l+0x43c>
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	4648      	mov	r0, r9
 8004c10:	f001 fe07 	bl	8006822 <__i2b>
 8004c14:	4680      	mov	r8, r0
 8004c16:	2800      	cmp	r0, #0
 8004c18:	f43f aed8 	beq.w	80049cc <_strtod_l+0x43c>
 8004c1c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004c1e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004c20:	2e00      	cmp	r6, #0
 8004c22:	bfab      	itete	ge
 8004c24:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004c26:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004c28:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8004c2a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8004c2c:	bfac      	ite	ge
 8004c2e:	18f7      	addge	r7, r6, r3
 8004c30:	1b9d      	sublt	r5, r3, r6
 8004c32:	9b04      	ldr	r3, [sp, #16]
 8004c34:	1af6      	subs	r6, r6, r3
 8004c36:	4416      	add	r6, r2
 8004c38:	4b63      	ldr	r3, [pc, #396]	; (8004dc8 <_strtod_l+0x838>)
 8004c3a:	3e01      	subs	r6, #1
 8004c3c:	429e      	cmp	r6, r3
 8004c3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004c42:	f280 80af 	bge.w	8004da4 <_strtod_l+0x814>
 8004c46:	1b9b      	subs	r3, r3, r6
 8004c48:	2b1f      	cmp	r3, #31
 8004c4a:	eba2 0203 	sub.w	r2, r2, r3
 8004c4e:	f04f 0101 	mov.w	r1, #1
 8004c52:	f300 809b 	bgt.w	8004d8c <_strtod_l+0x7fc>
 8004c56:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8004c60:	18be      	adds	r6, r7, r2
 8004c62:	9b04      	ldr	r3, [sp, #16]
 8004c64:	42b7      	cmp	r7, r6
 8004c66:	4415      	add	r5, r2
 8004c68:	441d      	add	r5, r3
 8004c6a:	463b      	mov	r3, r7
 8004c6c:	bfa8      	it	ge
 8004c6e:	4633      	movge	r3, r6
 8004c70:	42ab      	cmp	r3, r5
 8004c72:	bfa8      	it	ge
 8004c74:	462b      	movge	r3, r5
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bfc2      	ittt	gt
 8004c7a:	1af6      	subgt	r6, r6, r3
 8004c7c:	1aed      	subgt	r5, r5, r3
 8004c7e:	1aff      	subgt	r7, r7, r3
 8004c80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c82:	b1bb      	cbz	r3, 8004cb4 <_strtod_l+0x724>
 8004c84:	4641      	mov	r1, r8
 8004c86:	461a      	mov	r2, r3
 8004c88:	4648      	mov	r0, r9
 8004c8a:	f001 fe69 	bl	8006960 <__pow5mult>
 8004c8e:	4680      	mov	r8, r0
 8004c90:	2800      	cmp	r0, #0
 8004c92:	f43f ae9b 	beq.w	80049cc <_strtod_l+0x43c>
 8004c96:	4601      	mov	r1, r0
 8004c98:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004c9a:	4648      	mov	r0, r9
 8004c9c:	f001 fdca 	bl	8006834 <__multiply>
 8004ca0:	900c      	str	r0, [sp, #48]	; 0x30
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	f43f ae92 	beq.w	80049cc <_strtod_l+0x43c>
 8004ca8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004caa:	4648      	mov	r0, r9
 8004cac:	f001 fcdb 	bl	8006666 <_Bfree>
 8004cb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cb2:	931c      	str	r3, [sp, #112]	; 0x70
 8004cb4:	2e00      	cmp	r6, #0
 8004cb6:	dc7a      	bgt.n	8004dae <_strtod_l+0x81e>
 8004cb8:	9b06      	ldr	r3, [sp, #24]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	dd08      	ble.n	8004cd0 <_strtod_l+0x740>
 8004cbe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004cc0:	9905      	ldr	r1, [sp, #20]
 8004cc2:	4648      	mov	r0, r9
 8004cc4:	f001 fe4c 	bl	8006960 <__pow5mult>
 8004cc8:	9005      	str	r0, [sp, #20]
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	f43f ae7e 	beq.w	80049cc <_strtod_l+0x43c>
 8004cd0:	2d00      	cmp	r5, #0
 8004cd2:	dd08      	ble.n	8004ce6 <_strtod_l+0x756>
 8004cd4:	462a      	mov	r2, r5
 8004cd6:	9905      	ldr	r1, [sp, #20]
 8004cd8:	4648      	mov	r0, r9
 8004cda:	f001 fe8f 	bl	80069fc <__lshift>
 8004cde:	9005      	str	r0, [sp, #20]
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	f43f ae73 	beq.w	80049cc <_strtod_l+0x43c>
 8004ce6:	2f00      	cmp	r7, #0
 8004ce8:	dd08      	ble.n	8004cfc <_strtod_l+0x76c>
 8004cea:	4641      	mov	r1, r8
 8004cec:	463a      	mov	r2, r7
 8004cee:	4648      	mov	r0, r9
 8004cf0:	f001 fe84 	bl	80069fc <__lshift>
 8004cf4:	4680      	mov	r8, r0
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	f43f ae68 	beq.w	80049cc <_strtod_l+0x43c>
 8004cfc:	9a05      	ldr	r2, [sp, #20]
 8004cfe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d00:	4648      	mov	r0, r9
 8004d02:	f001 fee9 	bl	8006ad8 <__mdiff>
 8004d06:	4604      	mov	r4, r0
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	f43f ae5f 	beq.w	80049cc <_strtod_l+0x43c>
 8004d0e:	68c3      	ldr	r3, [r0, #12]
 8004d10:	930c      	str	r3, [sp, #48]	; 0x30
 8004d12:	2300      	movs	r3, #0
 8004d14:	60c3      	str	r3, [r0, #12]
 8004d16:	4641      	mov	r1, r8
 8004d18:	f001 fec4 	bl	8006aa4 <__mcmp>
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	da55      	bge.n	8004dcc <_strtod_l+0x83c>
 8004d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d22:	b9e3      	cbnz	r3, 8004d5e <_strtod_l+0x7ce>
 8004d24:	f1ba 0f00 	cmp.w	sl, #0
 8004d28:	d119      	bne.n	8004d5e <_strtod_l+0x7ce>
 8004d2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d2e:	b9b3      	cbnz	r3, 8004d5e <_strtod_l+0x7ce>
 8004d30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004d34:	0d1b      	lsrs	r3, r3, #20
 8004d36:	051b      	lsls	r3, r3, #20
 8004d38:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004d3c:	d90f      	bls.n	8004d5e <_strtod_l+0x7ce>
 8004d3e:	6963      	ldr	r3, [r4, #20]
 8004d40:	b913      	cbnz	r3, 8004d48 <_strtod_l+0x7b8>
 8004d42:	6923      	ldr	r3, [r4, #16]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	dd0a      	ble.n	8004d5e <_strtod_l+0x7ce>
 8004d48:	4621      	mov	r1, r4
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	4648      	mov	r0, r9
 8004d4e:	f001 fe55 	bl	80069fc <__lshift>
 8004d52:	4641      	mov	r1, r8
 8004d54:	4604      	mov	r4, r0
 8004d56:	f001 fea5 	bl	8006aa4 <__mcmp>
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	dc67      	bgt.n	8004e2e <_strtod_l+0x89e>
 8004d5e:	9b04      	ldr	r3, [sp, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d171      	bne.n	8004e48 <_strtod_l+0x8b8>
 8004d64:	e63d      	b.n	80049e2 <_strtod_l+0x452>
 8004d66:	f018 0f01 	tst.w	r8, #1
 8004d6a:	d004      	beq.n	8004d76 <_strtod_l+0x7e6>
 8004d6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004d70:	f7fb fc42 	bl	80005f8 <__aeabi_dmul>
 8004d74:	2301      	movs	r3, #1
 8004d76:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004d7a:	3508      	adds	r5, #8
 8004d7c:	e6e5      	b.n	8004b4a <_strtod_l+0x5ba>
 8004d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	ea03 0a0a 	and.w	sl, r3, sl
 8004d8a:	e6ff      	b.n	8004b8c <_strtod_l+0x5fc>
 8004d8c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8004d90:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8004d94:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8004d98:	36e2      	adds	r6, #226	; 0xe2
 8004d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8004d9e:	930a      	str	r3, [sp, #40]	; 0x28
 8004da0:	910f      	str	r1, [sp, #60]	; 0x3c
 8004da2:	e75d      	b.n	8004c60 <_strtod_l+0x6d0>
 8004da4:	2300      	movs	r3, #0
 8004da6:	930a      	str	r3, [sp, #40]	; 0x28
 8004da8:	2301      	movs	r3, #1
 8004daa:	930f      	str	r3, [sp, #60]	; 0x3c
 8004dac:	e758      	b.n	8004c60 <_strtod_l+0x6d0>
 8004dae:	4632      	mov	r2, r6
 8004db0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004db2:	4648      	mov	r0, r9
 8004db4:	f001 fe22 	bl	80069fc <__lshift>
 8004db8:	901c      	str	r0, [sp, #112]	; 0x70
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	f47f af7c 	bne.w	8004cb8 <_strtod_l+0x728>
 8004dc0:	e604      	b.n	80049cc <_strtod_l+0x43c>
 8004dc2:	bf00      	nop
 8004dc4:	08014138 	.word	0x08014138
 8004dc8:	fffffc02 	.word	0xfffffc02
 8004dcc:	465d      	mov	r5, fp
 8004dce:	f040 8086 	bne.w	8004ede <_strtod_l+0x94e>
 8004dd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004dd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004dd8:	b32a      	cbz	r2, 8004e26 <_strtod_l+0x896>
 8004dda:	4aaf      	ldr	r2, [pc, #700]	; (8005098 <_strtod_l+0xb08>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d153      	bne.n	8004e88 <_strtod_l+0x8f8>
 8004de0:	9b04      	ldr	r3, [sp, #16]
 8004de2:	4650      	mov	r0, sl
 8004de4:	b1d3      	cbz	r3, 8004e1c <_strtod_l+0x88c>
 8004de6:	4aad      	ldr	r2, [pc, #692]	; (800509c <_strtod_l+0xb0c>)
 8004de8:	402a      	ands	r2, r5
 8004dea:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004dee:	f04f 31ff 	mov.w	r1, #4294967295
 8004df2:	d816      	bhi.n	8004e22 <_strtod_l+0x892>
 8004df4:	0d12      	lsrs	r2, r2, #20
 8004df6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfe:	4298      	cmp	r0, r3
 8004e00:	d142      	bne.n	8004e88 <_strtod_l+0x8f8>
 8004e02:	4ba7      	ldr	r3, [pc, #668]	; (80050a0 <_strtod_l+0xb10>)
 8004e04:	429d      	cmp	r5, r3
 8004e06:	d102      	bne.n	8004e0e <_strtod_l+0x87e>
 8004e08:	3001      	adds	r0, #1
 8004e0a:	f43f addf 	beq.w	80049cc <_strtod_l+0x43c>
 8004e0e:	4ba3      	ldr	r3, [pc, #652]	; (800509c <_strtod_l+0xb0c>)
 8004e10:	402b      	ands	r3, r5
 8004e12:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004e16:	f04f 0a00 	mov.w	sl, #0
 8004e1a:	e7a0      	b.n	8004d5e <_strtod_l+0x7ce>
 8004e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e20:	e7ed      	b.n	8004dfe <_strtod_l+0x86e>
 8004e22:	460b      	mov	r3, r1
 8004e24:	e7eb      	b.n	8004dfe <_strtod_l+0x86e>
 8004e26:	bb7b      	cbnz	r3, 8004e88 <_strtod_l+0x8f8>
 8004e28:	f1ba 0f00 	cmp.w	sl, #0
 8004e2c:	d12c      	bne.n	8004e88 <_strtod_l+0x8f8>
 8004e2e:	9904      	ldr	r1, [sp, #16]
 8004e30:	4a9a      	ldr	r2, [pc, #616]	; (800509c <_strtod_l+0xb0c>)
 8004e32:	465b      	mov	r3, fp
 8004e34:	b1f1      	cbz	r1, 8004e74 <_strtod_l+0x8e4>
 8004e36:	ea02 010b 	and.w	r1, r2, fp
 8004e3a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004e3e:	dc19      	bgt.n	8004e74 <_strtod_l+0x8e4>
 8004e40:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004e44:	f77f ae5b 	ble.w	8004afe <_strtod_l+0x56e>
 8004e48:	4a96      	ldr	r2, [pc, #600]	; (80050a4 <_strtod_l+0xb14>)
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004e50:	4650      	mov	r0, sl
 8004e52:	4659      	mov	r1, fp
 8004e54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004e58:	f7fb fbce 	bl	80005f8 <__aeabi_dmul>
 8004e5c:	4682      	mov	sl, r0
 8004e5e:	468b      	mov	fp, r1
 8004e60:	2900      	cmp	r1, #0
 8004e62:	f47f adbe 	bne.w	80049e2 <_strtod_l+0x452>
 8004e66:	2800      	cmp	r0, #0
 8004e68:	f47f adbb 	bne.w	80049e2 <_strtod_l+0x452>
 8004e6c:	2322      	movs	r3, #34	; 0x22
 8004e6e:	f8c9 3000 	str.w	r3, [r9]
 8004e72:	e5b6      	b.n	80049e2 <_strtod_l+0x452>
 8004e74:	4013      	ands	r3, r2
 8004e76:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004e7a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004e7e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004e82:	f04f 3aff 	mov.w	sl, #4294967295
 8004e86:	e76a      	b.n	8004d5e <_strtod_l+0x7ce>
 8004e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e8a:	b193      	cbz	r3, 8004eb2 <_strtod_l+0x922>
 8004e8c:	422b      	tst	r3, r5
 8004e8e:	f43f af66 	beq.w	8004d5e <_strtod_l+0x7ce>
 8004e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e94:	9a04      	ldr	r2, [sp, #16]
 8004e96:	4650      	mov	r0, sl
 8004e98:	4659      	mov	r1, fp
 8004e9a:	b173      	cbz	r3, 8004eba <_strtod_l+0x92a>
 8004e9c:	f7ff fb5a 	bl	8004554 <sulp>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004ea8:	f7fb f9f0 	bl	800028c <__adddf3>
 8004eac:	4682      	mov	sl, r0
 8004eae:	468b      	mov	fp, r1
 8004eb0:	e755      	b.n	8004d5e <_strtod_l+0x7ce>
 8004eb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004eb4:	ea13 0f0a 	tst.w	r3, sl
 8004eb8:	e7e9      	b.n	8004e8e <_strtod_l+0x8fe>
 8004eba:	f7ff fb4b 	bl	8004554 <sulp>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004ec6:	f7fb f9df 	bl	8000288 <__aeabi_dsub>
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2300      	movs	r3, #0
 8004ece:	4682      	mov	sl, r0
 8004ed0:	468b      	mov	fp, r1
 8004ed2:	f7fb fdf9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	f47f ae11 	bne.w	8004afe <_strtod_l+0x56e>
 8004edc:	e73f      	b.n	8004d5e <_strtod_l+0x7ce>
 8004ede:	4641      	mov	r1, r8
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f001 ff1c 	bl	8006d1e <__ratio>
 8004ee6:	ec57 6b10 	vmov	r6, r7, d0
 8004eea:	2200      	movs	r2, #0
 8004eec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ef0:	ee10 0a10 	vmov	r0, s0
 8004ef4:	4639      	mov	r1, r7
 8004ef6:	f7fb fdfb 	bl	8000af0 <__aeabi_dcmple>
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d077      	beq.n	8004fee <_strtod_l+0xa5e>
 8004efe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d04a      	beq.n	8004f9a <_strtod_l+0xa0a>
 8004f04:	4b68      	ldr	r3, [pc, #416]	; (80050a8 <_strtod_l+0xb18>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f0c:	4f66      	ldr	r7, [pc, #408]	; (80050a8 <_strtod_l+0xb18>)
 8004f0e:	2600      	movs	r6, #0
 8004f10:	4b62      	ldr	r3, [pc, #392]	; (800509c <_strtod_l+0xb0c>)
 8004f12:	402b      	ands	r3, r5
 8004f14:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f18:	4b64      	ldr	r3, [pc, #400]	; (80050ac <_strtod_l+0xb1c>)
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	f040 80ce 	bne.w	80050bc <_strtod_l+0xb2c>
 8004f20:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f28:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8004f2c:	ec4b ab10 	vmov	d0, sl, fp
 8004f30:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004f34:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004f38:	f001 fe2c 	bl	8006b94 <__ulp>
 8004f3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f40:	ec53 2b10 	vmov	r2, r3, d0
 8004f44:	f7fb fb58 	bl	80005f8 <__aeabi_dmul>
 8004f48:	4652      	mov	r2, sl
 8004f4a:	465b      	mov	r3, fp
 8004f4c:	f7fb f99e 	bl	800028c <__adddf3>
 8004f50:	460b      	mov	r3, r1
 8004f52:	4952      	ldr	r1, [pc, #328]	; (800509c <_strtod_l+0xb0c>)
 8004f54:	4a56      	ldr	r2, [pc, #344]	; (80050b0 <_strtod_l+0xb20>)
 8004f56:	4019      	ands	r1, r3
 8004f58:	4291      	cmp	r1, r2
 8004f5a:	4682      	mov	sl, r0
 8004f5c:	d95b      	bls.n	8005016 <_strtod_l+0xa86>
 8004f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f60:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d103      	bne.n	8004f70 <_strtod_l+0x9e0>
 8004f68:	9b08      	ldr	r3, [sp, #32]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	f43f ad2e 	beq.w	80049cc <_strtod_l+0x43c>
 8004f70:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80050a0 <_strtod_l+0xb10>
 8004f74:	f04f 3aff 	mov.w	sl, #4294967295
 8004f78:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f7a:	4648      	mov	r0, r9
 8004f7c:	f001 fb73 	bl	8006666 <_Bfree>
 8004f80:	9905      	ldr	r1, [sp, #20]
 8004f82:	4648      	mov	r0, r9
 8004f84:	f001 fb6f 	bl	8006666 <_Bfree>
 8004f88:	4641      	mov	r1, r8
 8004f8a:	4648      	mov	r0, r9
 8004f8c:	f001 fb6b 	bl	8006666 <_Bfree>
 8004f90:	4621      	mov	r1, r4
 8004f92:	4648      	mov	r0, r9
 8004f94:	f001 fb67 	bl	8006666 <_Bfree>
 8004f98:	e619      	b.n	8004bce <_strtod_l+0x63e>
 8004f9a:	f1ba 0f00 	cmp.w	sl, #0
 8004f9e:	d11a      	bne.n	8004fd6 <_strtod_l+0xa46>
 8004fa0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004fa4:	b9eb      	cbnz	r3, 8004fe2 <_strtod_l+0xa52>
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	4b3f      	ldr	r3, [pc, #252]	; (80050a8 <_strtod_l+0xb18>)
 8004faa:	4630      	mov	r0, r6
 8004fac:	4639      	mov	r1, r7
 8004fae:	f7fb fd95 	bl	8000adc <__aeabi_dcmplt>
 8004fb2:	b9c8      	cbnz	r0, 8004fe8 <_strtod_l+0xa58>
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	4639      	mov	r1, r7
 8004fb8:	2200      	movs	r2, #0
 8004fba:	4b3e      	ldr	r3, [pc, #248]	; (80050b4 <_strtod_l+0xb24>)
 8004fbc:	f7fb fb1c 	bl	80005f8 <__aeabi_dmul>
 8004fc0:	4606      	mov	r6, r0
 8004fc2:	460f      	mov	r7, r1
 8004fc4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8004fc8:	9618      	str	r6, [sp, #96]	; 0x60
 8004fca:	9319      	str	r3, [sp, #100]	; 0x64
 8004fcc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8004fd0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004fd4:	e79c      	b.n	8004f10 <_strtod_l+0x980>
 8004fd6:	f1ba 0f01 	cmp.w	sl, #1
 8004fda:	d102      	bne.n	8004fe2 <_strtod_l+0xa52>
 8004fdc:	2d00      	cmp	r5, #0
 8004fde:	f43f ad8e 	beq.w	8004afe <_strtod_l+0x56e>
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	4b34      	ldr	r3, [pc, #208]	; (80050b8 <_strtod_l+0xb28>)
 8004fe6:	e78f      	b.n	8004f08 <_strtod_l+0x978>
 8004fe8:	2600      	movs	r6, #0
 8004fea:	4f32      	ldr	r7, [pc, #200]	; (80050b4 <_strtod_l+0xb24>)
 8004fec:	e7ea      	b.n	8004fc4 <_strtod_l+0xa34>
 8004fee:	4b31      	ldr	r3, [pc, #196]	; (80050b4 <_strtod_l+0xb24>)
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	4639      	mov	r1, r7
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f7fb faff 	bl	80005f8 <__aeabi_dmul>
 8004ffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ffc:	4606      	mov	r6, r0
 8004ffe:	460f      	mov	r7, r1
 8005000:	b933      	cbnz	r3, 8005010 <_strtod_l+0xa80>
 8005002:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005006:	9010      	str	r0, [sp, #64]	; 0x40
 8005008:	9311      	str	r3, [sp, #68]	; 0x44
 800500a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800500e:	e7df      	b.n	8004fd0 <_strtod_l+0xa40>
 8005010:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005014:	e7f9      	b.n	800500a <_strtod_l+0xa7a>
 8005016:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800501a:	9b04      	ldr	r3, [sp, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1ab      	bne.n	8004f78 <_strtod_l+0x9e8>
 8005020:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005024:	0d1b      	lsrs	r3, r3, #20
 8005026:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005028:	051b      	lsls	r3, r3, #20
 800502a:	429a      	cmp	r2, r3
 800502c:	465d      	mov	r5, fp
 800502e:	d1a3      	bne.n	8004f78 <_strtod_l+0x9e8>
 8005030:	4639      	mov	r1, r7
 8005032:	4630      	mov	r0, r6
 8005034:	f7fb fd90 	bl	8000b58 <__aeabi_d2iz>
 8005038:	f7fb fa74 	bl	8000524 <__aeabi_i2d>
 800503c:	460b      	mov	r3, r1
 800503e:	4602      	mov	r2, r0
 8005040:	4639      	mov	r1, r7
 8005042:	4630      	mov	r0, r6
 8005044:	f7fb f920 	bl	8000288 <__aeabi_dsub>
 8005048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800504a:	4606      	mov	r6, r0
 800504c:	460f      	mov	r7, r1
 800504e:	b933      	cbnz	r3, 800505e <_strtod_l+0xace>
 8005050:	f1ba 0f00 	cmp.w	sl, #0
 8005054:	d103      	bne.n	800505e <_strtod_l+0xace>
 8005056:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800505a:	2d00      	cmp	r5, #0
 800505c:	d06d      	beq.n	800513a <_strtod_l+0xbaa>
 800505e:	a30a      	add	r3, pc, #40	; (adr r3, 8005088 <_strtod_l+0xaf8>)
 8005060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005064:	4630      	mov	r0, r6
 8005066:	4639      	mov	r1, r7
 8005068:	f7fb fd38 	bl	8000adc <__aeabi_dcmplt>
 800506c:	2800      	cmp	r0, #0
 800506e:	f47f acb8 	bne.w	80049e2 <_strtod_l+0x452>
 8005072:	a307      	add	r3, pc, #28	; (adr r3, 8005090 <_strtod_l+0xb00>)
 8005074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005078:	4630      	mov	r0, r6
 800507a:	4639      	mov	r1, r7
 800507c:	f7fb fd4c 	bl	8000b18 <__aeabi_dcmpgt>
 8005080:	2800      	cmp	r0, #0
 8005082:	f43f af79 	beq.w	8004f78 <_strtod_l+0x9e8>
 8005086:	e4ac      	b.n	80049e2 <_strtod_l+0x452>
 8005088:	94a03595 	.word	0x94a03595
 800508c:	3fdfffff 	.word	0x3fdfffff
 8005090:	35afe535 	.word	0x35afe535
 8005094:	3fe00000 	.word	0x3fe00000
 8005098:	000fffff 	.word	0x000fffff
 800509c:	7ff00000 	.word	0x7ff00000
 80050a0:	7fefffff 	.word	0x7fefffff
 80050a4:	39500000 	.word	0x39500000
 80050a8:	3ff00000 	.word	0x3ff00000
 80050ac:	7fe00000 	.word	0x7fe00000
 80050b0:	7c9fffff 	.word	0x7c9fffff
 80050b4:	3fe00000 	.word	0x3fe00000
 80050b8:	bff00000 	.word	0xbff00000
 80050bc:	9b04      	ldr	r3, [sp, #16]
 80050be:	b333      	cbz	r3, 800510e <_strtod_l+0xb7e>
 80050c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80050c6:	d822      	bhi.n	800510e <_strtod_l+0xb7e>
 80050c8:	a327      	add	r3, pc, #156	; (adr r3, 8005168 <_strtod_l+0xbd8>)
 80050ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ce:	4630      	mov	r0, r6
 80050d0:	4639      	mov	r1, r7
 80050d2:	f7fb fd0d 	bl	8000af0 <__aeabi_dcmple>
 80050d6:	b1a0      	cbz	r0, 8005102 <_strtod_l+0xb72>
 80050d8:	4639      	mov	r1, r7
 80050da:	4630      	mov	r0, r6
 80050dc:	f7fb fd64 	bl	8000ba8 <__aeabi_d2uiz>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	bf08      	it	eq
 80050e4:	2001      	moveq	r0, #1
 80050e6:	f7fb fa0d 	bl	8000504 <__aeabi_ui2d>
 80050ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050ec:	4606      	mov	r6, r0
 80050ee:	460f      	mov	r7, r1
 80050f0:	bb03      	cbnz	r3, 8005134 <_strtod_l+0xba4>
 80050f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050f6:	9012      	str	r0, [sp, #72]	; 0x48
 80050f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80050fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80050fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005104:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005106:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800510a:	1a9b      	subs	r3, r3, r2
 800510c:	930b      	str	r3, [sp, #44]	; 0x2c
 800510e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8005112:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8005116:	f001 fd3d 	bl	8006b94 <__ulp>
 800511a:	4650      	mov	r0, sl
 800511c:	ec53 2b10 	vmov	r2, r3, d0
 8005120:	4659      	mov	r1, fp
 8005122:	f7fb fa69 	bl	80005f8 <__aeabi_dmul>
 8005126:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800512a:	f7fb f8af 	bl	800028c <__adddf3>
 800512e:	4682      	mov	sl, r0
 8005130:	468b      	mov	fp, r1
 8005132:	e772      	b.n	800501a <_strtod_l+0xa8a>
 8005134:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005138:	e7df      	b.n	80050fa <_strtod_l+0xb6a>
 800513a:	a30d      	add	r3, pc, #52	; (adr r3, 8005170 <_strtod_l+0xbe0>)
 800513c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005140:	f7fb fccc 	bl	8000adc <__aeabi_dcmplt>
 8005144:	e79c      	b.n	8005080 <_strtod_l+0xaf0>
 8005146:	2300      	movs	r3, #0
 8005148:	930d      	str	r3, [sp, #52]	; 0x34
 800514a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800514c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	f7ff ba61 	b.w	8004616 <_strtod_l+0x86>
 8005154:	2b65      	cmp	r3, #101	; 0x65
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f43f ab4e 	beq.w	80047fa <_strtod_l+0x26a>
 800515e:	2101      	movs	r1, #1
 8005160:	4614      	mov	r4, r2
 8005162:	9104      	str	r1, [sp, #16]
 8005164:	f7ff bacb 	b.w	80046fe <_strtod_l+0x16e>
 8005168:	ffc00000 	.word	0xffc00000
 800516c:	41dfffff 	.word	0x41dfffff
 8005170:	94a03595 	.word	0x94a03595
 8005174:	3fcfffff 	.word	0x3fcfffff

08005178 <_strtod_r>:
 8005178:	4b05      	ldr	r3, [pc, #20]	; (8005190 <_strtod_r+0x18>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	b410      	push	{r4}
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	4c04      	ldr	r4, [pc, #16]	; (8005194 <_strtod_r+0x1c>)
 8005182:	2b00      	cmp	r3, #0
 8005184:	bf08      	it	eq
 8005186:	4623      	moveq	r3, r4
 8005188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800518c:	f7ff ba00 	b.w	8004590 <_strtod_l>
 8005190:	200000f4 	.word	0x200000f4
 8005194:	20000158 	.word	0x20000158

08005198 <_strtol_l.isra.0>:
 8005198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800519c:	4680      	mov	r8, r0
 800519e:	4689      	mov	r9, r1
 80051a0:	4692      	mov	sl, r2
 80051a2:	461e      	mov	r6, r3
 80051a4:	460f      	mov	r7, r1
 80051a6:	463d      	mov	r5, r7
 80051a8:	9808      	ldr	r0, [sp, #32]
 80051aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051ae:	f001 f9ed 	bl	800658c <__locale_ctype_ptr_l>
 80051b2:	4420      	add	r0, r4
 80051b4:	7843      	ldrb	r3, [r0, #1]
 80051b6:	f013 0308 	ands.w	r3, r3, #8
 80051ba:	d132      	bne.n	8005222 <_strtol_l.isra.0+0x8a>
 80051bc:	2c2d      	cmp	r4, #45	; 0x2d
 80051be:	d132      	bne.n	8005226 <_strtol_l.isra.0+0x8e>
 80051c0:	787c      	ldrb	r4, [r7, #1]
 80051c2:	1cbd      	adds	r5, r7, #2
 80051c4:	2201      	movs	r2, #1
 80051c6:	2e00      	cmp	r6, #0
 80051c8:	d05d      	beq.n	8005286 <_strtol_l.isra.0+0xee>
 80051ca:	2e10      	cmp	r6, #16
 80051cc:	d109      	bne.n	80051e2 <_strtol_l.isra.0+0x4a>
 80051ce:	2c30      	cmp	r4, #48	; 0x30
 80051d0:	d107      	bne.n	80051e2 <_strtol_l.isra.0+0x4a>
 80051d2:	782b      	ldrb	r3, [r5, #0]
 80051d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80051d8:	2b58      	cmp	r3, #88	; 0x58
 80051da:	d14f      	bne.n	800527c <_strtol_l.isra.0+0xe4>
 80051dc:	786c      	ldrb	r4, [r5, #1]
 80051de:	2610      	movs	r6, #16
 80051e0:	3502      	adds	r5, #2
 80051e2:	2a00      	cmp	r2, #0
 80051e4:	bf14      	ite	ne
 80051e6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80051ea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80051ee:	2700      	movs	r7, #0
 80051f0:	fbb1 fcf6 	udiv	ip, r1, r6
 80051f4:	4638      	mov	r0, r7
 80051f6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80051fa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80051fe:	2b09      	cmp	r3, #9
 8005200:	d817      	bhi.n	8005232 <_strtol_l.isra.0+0x9a>
 8005202:	461c      	mov	r4, r3
 8005204:	42a6      	cmp	r6, r4
 8005206:	dd23      	ble.n	8005250 <_strtol_l.isra.0+0xb8>
 8005208:	1c7b      	adds	r3, r7, #1
 800520a:	d007      	beq.n	800521c <_strtol_l.isra.0+0x84>
 800520c:	4584      	cmp	ip, r0
 800520e:	d31c      	bcc.n	800524a <_strtol_l.isra.0+0xb2>
 8005210:	d101      	bne.n	8005216 <_strtol_l.isra.0+0x7e>
 8005212:	45a6      	cmp	lr, r4
 8005214:	db19      	blt.n	800524a <_strtol_l.isra.0+0xb2>
 8005216:	fb00 4006 	mla	r0, r0, r6, r4
 800521a:	2701      	movs	r7, #1
 800521c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005220:	e7eb      	b.n	80051fa <_strtol_l.isra.0+0x62>
 8005222:	462f      	mov	r7, r5
 8005224:	e7bf      	b.n	80051a6 <_strtol_l.isra.0+0xe>
 8005226:	2c2b      	cmp	r4, #43	; 0x2b
 8005228:	bf04      	itt	eq
 800522a:	1cbd      	addeq	r5, r7, #2
 800522c:	787c      	ldrbeq	r4, [r7, #1]
 800522e:	461a      	mov	r2, r3
 8005230:	e7c9      	b.n	80051c6 <_strtol_l.isra.0+0x2e>
 8005232:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005236:	2b19      	cmp	r3, #25
 8005238:	d801      	bhi.n	800523e <_strtol_l.isra.0+0xa6>
 800523a:	3c37      	subs	r4, #55	; 0x37
 800523c:	e7e2      	b.n	8005204 <_strtol_l.isra.0+0x6c>
 800523e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005242:	2b19      	cmp	r3, #25
 8005244:	d804      	bhi.n	8005250 <_strtol_l.isra.0+0xb8>
 8005246:	3c57      	subs	r4, #87	; 0x57
 8005248:	e7dc      	b.n	8005204 <_strtol_l.isra.0+0x6c>
 800524a:	f04f 37ff 	mov.w	r7, #4294967295
 800524e:	e7e5      	b.n	800521c <_strtol_l.isra.0+0x84>
 8005250:	1c7b      	adds	r3, r7, #1
 8005252:	d108      	bne.n	8005266 <_strtol_l.isra.0+0xce>
 8005254:	2322      	movs	r3, #34	; 0x22
 8005256:	f8c8 3000 	str.w	r3, [r8]
 800525a:	4608      	mov	r0, r1
 800525c:	f1ba 0f00 	cmp.w	sl, #0
 8005260:	d107      	bne.n	8005272 <_strtol_l.isra.0+0xda>
 8005262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005266:	b102      	cbz	r2, 800526a <_strtol_l.isra.0+0xd2>
 8005268:	4240      	negs	r0, r0
 800526a:	f1ba 0f00 	cmp.w	sl, #0
 800526e:	d0f8      	beq.n	8005262 <_strtol_l.isra.0+0xca>
 8005270:	b10f      	cbz	r7, 8005276 <_strtol_l.isra.0+0xde>
 8005272:	f105 39ff 	add.w	r9, r5, #4294967295
 8005276:	f8ca 9000 	str.w	r9, [sl]
 800527a:	e7f2      	b.n	8005262 <_strtol_l.isra.0+0xca>
 800527c:	2430      	movs	r4, #48	; 0x30
 800527e:	2e00      	cmp	r6, #0
 8005280:	d1af      	bne.n	80051e2 <_strtol_l.isra.0+0x4a>
 8005282:	2608      	movs	r6, #8
 8005284:	e7ad      	b.n	80051e2 <_strtol_l.isra.0+0x4a>
 8005286:	2c30      	cmp	r4, #48	; 0x30
 8005288:	d0a3      	beq.n	80051d2 <_strtol_l.isra.0+0x3a>
 800528a:	260a      	movs	r6, #10
 800528c:	e7a9      	b.n	80051e2 <_strtol_l.isra.0+0x4a>
	...

08005290 <_strtol_r>:
 8005290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005292:	4c06      	ldr	r4, [pc, #24]	; (80052ac <_strtol_r+0x1c>)
 8005294:	4d06      	ldr	r5, [pc, #24]	; (80052b0 <_strtol_r+0x20>)
 8005296:	6824      	ldr	r4, [r4, #0]
 8005298:	6a24      	ldr	r4, [r4, #32]
 800529a:	2c00      	cmp	r4, #0
 800529c:	bf08      	it	eq
 800529e:	462c      	moveq	r4, r5
 80052a0:	9400      	str	r4, [sp, #0]
 80052a2:	f7ff ff79 	bl	8005198 <_strtol_l.isra.0>
 80052a6:	b003      	add	sp, #12
 80052a8:	bd30      	pop	{r4, r5, pc}
 80052aa:	bf00      	nop
 80052ac:	200000f4 	.word	0x200000f4
 80052b0:	20000158 	.word	0x20000158

080052b4 <quorem>:
 80052b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b8:	6903      	ldr	r3, [r0, #16]
 80052ba:	690c      	ldr	r4, [r1, #16]
 80052bc:	42a3      	cmp	r3, r4
 80052be:	4680      	mov	r8, r0
 80052c0:	f2c0 8082 	blt.w	80053c8 <quorem+0x114>
 80052c4:	3c01      	subs	r4, #1
 80052c6:	f101 0714 	add.w	r7, r1, #20
 80052ca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80052ce:	f100 0614 	add.w	r6, r0, #20
 80052d2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80052d6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80052da:	eb06 030c 	add.w	r3, r6, ip
 80052de:	3501      	adds	r5, #1
 80052e0:	eb07 090c 	add.w	r9, r7, ip
 80052e4:	9301      	str	r3, [sp, #4]
 80052e6:	fbb0 f5f5 	udiv	r5, r0, r5
 80052ea:	b395      	cbz	r5, 8005352 <quorem+0x9e>
 80052ec:	f04f 0a00 	mov.w	sl, #0
 80052f0:	4638      	mov	r0, r7
 80052f2:	46b6      	mov	lr, r6
 80052f4:	46d3      	mov	fp, sl
 80052f6:	f850 2b04 	ldr.w	r2, [r0], #4
 80052fa:	b293      	uxth	r3, r2
 80052fc:	fb05 a303 	mla	r3, r5, r3, sl
 8005300:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005304:	b29b      	uxth	r3, r3
 8005306:	ebab 0303 	sub.w	r3, fp, r3
 800530a:	0c12      	lsrs	r2, r2, #16
 800530c:	f8de b000 	ldr.w	fp, [lr]
 8005310:	fb05 a202 	mla	r2, r5, r2, sl
 8005314:	fa13 f38b 	uxtah	r3, r3, fp
 8005318:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800531c:	fa1f fb82 	uxth.w	fp, r2
 8005320:	f8de 2000 	ldr.w	r2, [lr]
 8005324:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005328:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800532c:	b29b      	uxth	r3, r3
 800532e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005332:	4581      	cmp	r9, r0
 8005334:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005338:	f84e 3b04 	str.w	r3, [lr], #4
 800533c:	d2db      	bcs.n	80052f6 <quorem+0x42>
 800533e:	f856 300c 	ldr.w	r3, [r6, ip]
 8005342:	b933      	cbnz	r3, 8005352 <quorem+0x9e>
 8005344:	9b01      	ldr	r3, [sp, #4]
 8005346:	3b04      	subs	r3, #4
 8005348:	429e      	cmp	r6, r3
 800534a:	461a      	mov	r2, r3
 800534c:	d330      	bcc.n	80053b0 <quorem+0xfc>
 800534e:	f8c8 4010 	str.w	r4, [r8, #16]
 8005352:	4640      	mov	r0, r8
 8005354:	f001 fba6 	bl	8006aa4 <__mcmp>
 8005358:	2800      	cmp	r0, #0
 800535a:	db25      	blt.n	80053a8 <quorem+0xf4>
 800535c:	3501      	adds	r5, #1
 800535e:	4630      	mov	r0, r6
 8005360:	f04f 0c00 	mov.w	ip, #0
 8005364:	f857 2b04 	ldr.w	r2, [r7], #4
 8005368:	f8d0 e000 	ldr.w	lr, [r0]
 800536c:	b293      	uxth	r3, r2
 800536e:	ebac 0303 	sub.w	r3, ip, r3
 8005372:	0c12      	lsrs	r2, r2, #16
 8005374:	fa13 f38e 	uxtah	r3, r3, lr
 8005378:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800537c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005380:	b29b      	uxth	r3, r3
 8005382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005386:	45b9      	cmp	r9, r7
 8005388:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800538c:	f840 3b04 	str.w	r3, [r0], #4
 8005390:	d2e8      	bcs.n	8005364 <quorem+0xb0>
 8005392:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005396:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800539a:	b92a      	cbnz	r2, 80053a8 <quorem+0xf4>
 800539c:	3b04      	subs	r3, #4
 800539e:	429e      	cmp	r6, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	d30b      	bcc.n	80053bc <quorem+0x108>
 80053a4:	f8c8 4010 	str.w	r4, [r8, #16]
 80053a8:	4628      	mov	r0, r5
 80053aa:	b003      	add	sp, #12
 80053ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	3b04      	subs	r3, #4
 80053b4:	2a00      	cmp	r2, #0
 80053b6:	d1ca      	bne.n	800534e <quorem+0x9a>
 80053b8:	3c01      	subs	r4, #1
 80053ba:	e7c5      	b.n	8005348 <quorem+0x94>
 80053bc:	6812      	ldr	r2, [r2, #0]
 80053be:	3b04      	subs	r3, #4
 80053c0:	2a00      	cmp	r2, #0
 80053c2:	d1ef      	bne.n	80053a4 <quorem+0xf0>
 80053c4:	3c01      	subs	r4, #1
 80053c6:	e7ea      	b.n	800539e <quorem+0xea>
 80053c8:	2000      	movs	r0, #0
 80053ca:	e7ee      	b.n	80053aa <quorem+0xf6>
 80053cc:	0000      	movs	r0, r0
	...

080053d0 <_dtoa_r>:
 80053d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d4:	ec57 6b10 	vmov	r6, r7, d0
 80053d8:	b097      	sub	sp, #92	; 0x5c
 80053da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053dc:	9106      	str	r1, [sp, #24]
 80053de:	4604      	mov	r4, r0
 80053e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80053e2:	9312      	str	r3, [sp, #72]	; 0x48
 80053e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80053e8:	e9cd 6700 	strd	r6, r7, [sp]
 80053ec:	b93d      	cbnz	r5, 80053fe <_dtoa_r+0x2e>
 80053ee:	2010      	movs	r0, #16
 80053f0:	f001 f8e0 	bl	80065b4 <malloc>
 80053f4:	6260      	str	r0, [r4, #36]	; 0x24
 80053f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053fa:	6005      	str	r5, [r0, #0]
 80053fc:	60c5      	str	r5, [r0, #12]
 80053fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005400:	6819      	ldr	r1, [r3, #0]
 8005402:	b151      	cbz	r1, 800541a <_dtoa_r+0x4a>
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	604a      	str	r2, [r1, #4]
 8005408:	2301      	movs	r3, #1
 800540a:	4093      	lsls	r3, r2
 800540c:	608b      	str	r3, [r1, #8]
 800540e:	4620      	mov	r0, r4
 8005410:	f001 f929 	bl	8006666 <_Bfree>
 8005414:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005416:	2200      	movs	r2, #0
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	1e3b      	subs	r3, r7, #0
 800541c:	bfbb      	ittet	lt
 800541e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005422:	9301      	strlt	r3, [sp, #4]
 8005424:	2300      	movge	r3, #0
 8005426:	2201      	movlt	r2, #1
 8005428:	bfac      	ite	ge
 800542a:	f8c8 3000 	strge.w	r3, [r8]
 800542e:	f8c8 2000 	strlt.w	r2, [r8]
 8005432:	4baf      	ldr	r3, [pc, #700]	; (80056f0 <_dtoa_r+0x320>)
 8005434:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005438:	ea33 0308 	bics.w	r3, r3, r8
 800543c:	d114      	bne.n	8005468 <_dtoa_r+0x98>
 800543e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005440:	f242 730f 	movw	r3, #9999	; 0x270f
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	9b00      	ldr	r3, [sp, #0]
 8005448:	b923      	cbnz	r3, 8005454 <_dtoa_r+0x84>
 800544a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800544e:	2800      	cmp	r0, #0
 8005450:	f000 8542 	beq.w	8005ed8 <_dtoa_r+0xb08>
 8005454:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005456:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005704 <_dtoa_r+0x334>
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 8544 	beq.w	8005ee8 <_dtoa_r+0xb18>
 8005460:	f10b 0303 	add.w	r3, fp, #3
 8005464:	f000 bd3e 	b.w	8005ee4 <_dtoa_r+0xb14>
 8005468:	e9dd 6700 	ldrd	r6, r7, [sp]
 800546c:	2200      	movs	r2, #0
 800546e:	2300      	movs	r3, #0
 8005470:	4630      	mov	r0, r6
 8005472:	4639      	mov	r1, r7
 8005474:	f7fb fb28 	bl	8000ac8 <__aeabi_dcmpeq>
 8005478:	4681      	mov	r9, r0
 800547a:	b168      	cbz	r0, 8005498 <_dtoa_r+0xc8>
 800547c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800547e:	2301      	movs	r3, #1
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 8524 	beq.w	8005ed2 <_dtoa_r+0xb02>
 800548a:	4b9a      	ldr	r3, [pc, #616]	; (80056f4 <_dtoa_r+0x324>)
 800548c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800548e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	f000 bd28 	b.w	8005ee8 <_dtoa_r+0xb18>
 8005498:	aa14      	add	r2, sp, #80	; 0x50
 800549a:	a915      	add	r1, sp, #84	; 0x54
 800549c:	ec47 6b10 	vmov	d0, r6, r7
 80054a0:	4620      	mov	r0, r4
 80054a2:	f001 fbed 	bl	8006c80 <__d2b>
 80054a6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80054aa:	9004      	str	r0, [sp, #16]
 80054ac:	2d00      	cmp	r5, #0
 80054ae:	d07c      	beq.n	80055aa <_dtoa_r+0x1da>
 80054b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80054b4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80054b8:	46b2      	mov	sl, r6
 80054ba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80054be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80054c6:	2200      	movs	r2, #0
 80054c8:	4b8b      	ldr	r3, [pc, #556]	; (80056f8 <_dtoa_r+0x328>)
 80054ca:	4650      	mov	r0, sl
 80054cc:	4659      	mov	r1, fp
 80054ce:	f7fa fedb 	bl	8000288 <__aeabi_dsub>
 80054d2:	a381      	add	r3, pc, #516	; (adr r3, 80056d8 <_dtoa_r+0x308>)
 80054d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d8:	f7fb f88e 	bl	80005f8 <__aeabi_dmul>
 80054dc:	a380      	add	r3, pc, #512	; (adr r3, 80056e0 <_dtoa_r+0x310>)
 80054de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e2:	f7fa fed3 	bl	800028c <__adddf3>
 80054e6:	4606      	mov	r6, r0
 80054e8:	4628      	mov	r0, r5
 80054ea:	460f      	mov	r7, r1
 80054ec:	f7fb f81a 	bl	8000524 <__aeabi_i2d>
 80054f0:	a37d      	add	r3, pc, #500	; (adr r3, 80056e8 <_dtoa_r+0x318>)
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	f7fb f87f 	bl	80005f8 <__aeabi_dmul>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	4630      	mov	r0, r6
 8005500:	4639      	mov	r1, r7
 8005502:	f7fa fec3 	bl	800028c <__adddf3>
 8005506:	4606      	mov	r6, r0
 8005508:	460f      	mov	r7, r1
 800550a:	f7fb fb25 	bl	8000b58 <__aeabi_d2iz>
 800550e:	2200      	movs	r2, #0
 8005510:	4682      	mov	sl, r0
 8005512:	2300      	movs	r3, #0
 8005514:	4630      	mov	r0, r6
 8005516:	4639      	mov	r1, r7
 8005518:	f7fb fae0 	bl	8000adc <__aeabi_dcmplt>
 800551c:	b148      	cbz	r0, 8005532 <_dtoa_r+0x162>
 800551e:	4650      	mov	r0, sl
 8005520:	f7fb f800 	bl	8000524 <__aeabi_i2d>
 8005524:	4632      	mov	r2, r6
 8005526:	463b      	mov	r3, r7
 8005528:	f7fb face 	bl	8000ac8 <__aeabi_dcmpeq>
 800552c:	b908      	cbnz	r0, 8005532 <_dtoa_r+0x162>
 800552e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005532:	f1ba 0f16 	cmp.w	sl, #22
 8005536:	d859      	bhi.n	80055ec <_dtoa_r+0x21c>
 8005538:	4970      	ldr	r1, [pc, #448]	; (80056fc <_dtoa_r+0x32c>)
 800553a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800553e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005542:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005546:	f7fb fae7 	bl	8000b18 <__aeabi_dcmpgt>
 800554a:	2800      	cmp	r0, #0
 800554c:	d050      	beq.n	80055f0 <_dtoa_r+0x220>
 800554e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005552:	2300      	movs	r3, #0
 8005554:	930f      	str	r3, [sp, #60]	; 0x3c
 8005556:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005558:	1b5d      	subs	r5, r3, r5
 800555a:	f1b5 0801 	subs.w	r8, r5, #1
 800555e:	bf49      	itett	mi
 8005560:	f1c5 0301 	rsbmi	r3, r5, #1
 8005564:	2300      	movpl	r3, #0
 8005566:	9305      	strmi	r3, [sp, #20]
 8005568:	f04f 0800 	movmi.w	r8, #0
 800556c:	bf58      	it	pl
 800556e:	9305      	strpl	r3, [sp, #20]
 8005570:	f1ba 0f00 	cmp.w	sl, #0
 8005574:	db3e      	blt.n	80055f4 <_dtoa_r+0x224>
 8005576:	2300      	movs	r3, #0
 8005578:	44d0      	add	r8, sl
 800557a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800557e:	9307      	str	r3, [sp, #28]
 8005580:	9b06      	ldr	r3, [sp, #24]
 8005582:	2b09      	cmp	r3, #9
 8005584:	f200 8090 	bhi.w	80056a8 <_dtoa_r+0x2d8>
 8005588:	2b05      	cmp	r3, #5
 800558a:	bfc4      	itt	gt
 800558c:	3b04      	subgt	r3, #4
 800558e:	9306      	strgt	r3, [sp, #24]
 8005590:	9b06      	ldr	r3, [sp, #24]
 8005592:	f1a3 0302 	sub.w	r3, r3, #2
 8005596:	bfcc      	ite	gt
 8005598:	2500      	movgt	r5, #0
 800559a:	2501      	movle	r5, #1
 800559c:	2b03      	cmp	r3, #3
 800559e:	f200 808f 	bhi.w	80056c0 <_dtoa_r+0x2f0>
 80055a2:	e8df f003 	tbb	[pc, r3]
 80055a6:	7f7d      	.short	0x7f7d
 80055a8:	7131      	.short	0x7131
 80055aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80055ae:	441d      	add	r5, r3
 80055b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80055b4:	2820      	cmp	r0, #32
 80055b6:	dd13      	ble.n	80055e0 <_dtoa_r+0x210>
 80055b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80055bc:	9b00      	ldr	r3, [sp, #0]
 80055be:	fa08 f800 	lsl.w	r8, r8, r0
 80055c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80055c6:	fa23 f000 	lsr.w	r0, r3, r0
 80055ca:	ea48 0000 	orr.w	r0, r8, r0
 80055ce:	f7fa ff99 	bl	8000504 <__aeabi_ui2d>
 80055d2:	2301      	movs	r3, #1
 80055d4:	4682      	mov	sl, r0
 80055d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80055da:	3d01      	subs	r5, #1
 80055dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80055de:	e772      	b.n	80054c6 <_dtoa_r+0xf6>
 80055e0:	9b00      	ldr	r3, [sp, #0]
 80055e2:	f1c0 0020 	rsb	r0, r0, #32
 80055e6:	fa03 f000 	lsl.w	r0, r3, r0
 80055ea:	e7f0      	b.n	80055ce <_dtoa_r+0x1fe>
 80055ec:	2301      	movs	r3, #1
 80055ee:	e7b1      	b.n	8005554 <_dtoa_r+0x184>
 80055f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80055f2:	e7b0      	b.n	8005556 <_dtoa_r+0x186>
 80055f4:	9b05      	ldr	r3, [sp, #20]
 80055f6:	eba3 030a 	sub.w	r3, r3, sl
 80055fa:	9305      	str	r3, [sp, #20]
 80055fc:	f1ca 0300 	rsb	r3, sl, #0
 8005600:	9307      	str	r3, [sp, #28]
 8005602:	2300      	movs	r3, #0
 8005604:	930e      	str	r3, [sp, #56]	; 0x38
 8005606:	e7bb      	b.n	8005580 <_dtoa_r+0x1b0>
 8005608:	2301      	movs	r3, #1
 800560a:	930a      	str	r3, [sp, #40]	; 0x28
 800560c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800560e:	2b00      	cmp	r3, #0
 8005610:	dd59      	ble.n	80056c6 <_dtoa_r+0x2f6>
 8005612:	9302      	str	r3, [sp, #8]
 8005614:	4699      	mov	r9, r3
 8005616:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005618:	2200      	movs	r2, #0
 800561a:	6072      	str	r2, [r6, #4]
 800561c:	2204      	movs	r2, #4
 800561e:	f102 0014 	add.w	r0, r2, #20
 8005622:	4298      	cmp	r0, r3
 8005624:	6871      	ldr	r1, [r6, #4]
 8005626:	d953      	bls.n	80056d0 <_dtoa_r+0x300>
 8005628:	4620      	mov	r0, r4
 800562a:	f000 ffe8 	bl	80065fe <_Balloc>
 800562e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005630:	6030      	str	r0, [r6, #0]
 8005632:	f1b9 0f0e 	cmp.w	r9, #14
 8005636:	f8d3 b000 	ldr.w	fp, [r3]
 800563a:	f200 80e6 	bhi.w	800580a <_dtoa_r+0x43a>
 800563e:	2d00      	cmp	r5, #0
 8005640:	f000 80e3 	beq.w	800580a <_dtoa_r+0x43a>
 8005644:	ed9d 7b00 	vldr	d7, [sp]
 8005648:	f1ba 0f00 	cmp.w	sl, #0
 800564c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005650:	dd74      	ble.n	800573c <_dtoa_r+0x36c>
 8005652:	4a2a      	ldr	r2, [pc, #168]	; (80056fc <_dtoa_r+0x32c>)
 8005654:	f00a 030f 	and.w	r3, sl, #15
 8005658:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800565c:	ed93 7b00 	vldr	d7, [r3]
 8005660:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005664:	06f0      	lsls	r0, r6, #27
 8005666:	ed8d 7b08 	vstr	d7, [sp, #32]
 800566a:	d565      	bpl.n	8005738 <_dtoa_r+0x368>
 800566c:	4b24      	ldr	r3, [pc, #144]	; (8005700 <_dtoa_r+0x330>)
 800566e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005672:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005676:	f7fb f8e9 	bl	800084c <__aeabi_ddiv>
 800567a:	e9cd 0100 	strd	r0, r1, [sp]
 800567e:	f006 060f 	and.w	r6, r6, #15
 8005682:	2503      	movs	r5, #3
 8005684:	4f1e      	ldr	r7, [pc, #120]	; (8005700 <_dtoa_r+0x330>)
 8005686:	e04c      	b.n	8005722 <_dtoa_r+0x352>
 8005688:	2301      	movs	r3, #1
 800568a:	930a      	str	r3, [sp, #40]	; 0x28
 800568c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800568e:	4453      	add	r3, sl
 8005690:	f103 0901 	add.w	r9, r3, #1
 8005694:	9302      	str	r3, [sp, #8]
 8005696:	464b      	mov	r3, r9
 8005698:	2b01      	cmp	r3, #1
 800569a:	bfb8      	it	lt
 800569c:	2301      	movlt	r3, #1
 800569e:	e7ba      	b.n	8005616 <_dtoa_r+0x246>
 80056a0:	2300      	movs	r3, #0
 80056a2:	e7b2      	b.n	800560a <_dtoa_r+0x23a>
 80056a4:	2300      	movs	r3, #0
 80056a6:	e7f0      	b.n	800568a <_dtoa_r+0x2ba>
 80056a8:	2501      	movs	r5, #1
 80056aa:	2300      	movs	r3, #0
 80056ac:	9306      	str	r3, [sp, #24]
 80056ae:	950a      	str	r5, [sp, #40]	; 0x28
 80056b0:	f04f 33ff 	mov.w	r3, #4294967295
 80056b4:	9302      	str	r3, [sp, #8]
 80056b6:	4699      	mov	r9, r3
 80056b8:	2200      	movs	r2, #0
 80056ba:	2312      	movs	r3, #18
 80056bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80056be:	e7aa      	b.n	8005616 <_dtoa_r+0x246>
 80056c0:	2301      	movs	r3, #1
 80056c2:	930a      	str	r3, [sp, #40]	; 0x28
 80056c4:	e7f4      	b.n	80056b0 <_dtoa_r+0x2e0>
 80056c6:	2301      	movs	r3, #1
 80056c8:	9302      	str	r3, [sp, #8]
 80056ca:	4699      	mov	r9, r3
 80056cc:	461a      	mov	r2, r3
 80056ce:	e7f5      	b.n	80056bc <_dtoa_r+0x2ec>
 80056d0:	3101      	adds	r1, #1
 80056d2:	6071      	str	r1, [r6, #4]
 80056d4:	0052      	lsls	r2, r2, #1
 80056d6:	e7a2      	b.n	800561e <_dtoa_r+0x24e>
 80056d8:	636f4361 	.word	0x636f4361
 80056dc:	3fd287a7 	.word	0x3fd287a7
 80056e0:	8b60c8b3 	.word	0x8b60c8b3
 80056e4:	3fc68a28 	.word	0x3fc68a28
 80056e8:	509f79fb 	.word	0x509f79fb
 80056ec:	3fd34413 	.word	0x3fd34413
 80056f0:	7ff00000 	.word	0x7ff00000
 80056f4:	080140e1 	.word	0x080140e1
 80056f8:	3ff80000 	.word	0x3ff80000
 80056fc:	080141a0 	.word	0x080141a0
 8005700:	08014178 	.word	0x08014178
 8005704:	08014169 	.word	0x08014169
 8005708:	07f1      	lsls	r1, r6, #31
 800570a:	d508      	bpl.n	800571e <_dtoa_r+0x34e>
 800570c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005714:	f7fa ff70 	bl	80005f8 <__aeabi_dmul>
 8005718:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800571c:	3501      	adds	r5, #1
 800571e:	1076      	asrs	r6, r6, #1
 8005720:	3708      	adds	r7, #8
 8005722:	2e00      	cmp	r6, #0
 8005724:	d1f0      	bne.n	8005708 <_dtoa_r+0x338>
 8005726:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800572a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800572e:	f7fb f88d 	bl	800084c <__aeabi_ddiv>
 8005732:	e9cd 0100 	strd	r0, r1, [sp]
 8005736:	e01a      	b.n	800576e <_dtoa_r+0x39e>
 8005738:	2502      	movs	r5, #2
 800573a:	e7a3      	b.n	8005684 <_dtoa_r+0x2b4>
 800573c:	f000 80a0 	beq.w	8005880 <_dtoa_r+0x4b0>
 8005740:	f1ca 0600 	rsb	r6, sl, #0
 8005744:	4b9f      	ldr	r3, [pc, #636]	; (80059c4 <_dtoa_r+0x5f4>)
 8005746:	4fa0      	ldr	r7, [pc, #640]	; (80059c8 <_dtoa_r+0x5f8>)
 8005748:	f006 020f 	and.w	r2, r6, #15
 800574c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005758:	f7fa ff4e 	bl	80005f8 <__aeabi_dmul>
 800575c:	e9cd 0100 	strd	r0, r1, [sp]
 8005760:	1136      	asrs	r6, r6, #4
 8005762:	2300      	movs	r3, #0
 8005764:	2502      	movs	r5, #2
 8005766:	2e00      	cmp	r6, #0
 8005768:	d17f      	bne.n	800586a <_dtoa_r+0x49a>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e1      	bne.n	8005732 <_dtoa_r+0x362>
 800576e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8087 	beq.w	8005884 <_dtoa_r+0x4b4>
 8005776:	e9dd 6700 	ldrd	r6, r7, [sp]
 800577a:	2200      	movs	r2, #0
 800577c:	4b93      	ldr	r3, [pc, #588]	; (80059cc <_dtoa_r+0x5fc>)
 800577e:	4630      	mov	r0, r6
 8005780:	4639      	mov	r1, r7
 8005782:	f7fb f9ab 	bl	8000adc <__aeabi_dcmplt>
 8005786:	2800      	cmp	r0, #0
 8005788:	d07c      	beq.n	8005884 <_dtoa_r+0x4b4>
 800578a:	f1b9 0f00 	cmp.w	r9, #0
 800578e:	d079      	beq.n	8005884 <_dtoa_r+0x4b4>
 8005790:	9b02      	ldr	r3, [sp, #8]
 8005792:	2b00      	cmp	r3, #0
 8005794:	dd35      	ble.n	8005802 <_dtoa_r+0x432>
 8005796:	f10a 33ff 	add.w	r3, sl, #4294967295
 800579a:	9308      	str	r3, [sp, #32]
 800579c:	4639      	mov	r1, r7
 800579e:	2200      	movs	r2, #0
 80057a0:	4b8b      	ldr	r3, [pc, #556]	; (80059d0 <_dtoa_r+0x600>)
 80057a2:	4630      	mov	r0, r6
 80057a4:	f7fa ff28 	bl	80005f8 <__aeabi_dmul>
 80057a8:	e9cd 0100 	strd	r0, r1, [sp]
 80057ac:	9f02      	ldr	r7, [sp, #8]
 80057ae:	3501      	adds	r5, #1
 80057b0:	4628      	mov	r0, r5
 80057b2:	f7fa feb7 	bl	8000524 <__aeabi_i2d>
 80057b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057ba:	f7fa ff1d 	bl	80005f8 <__aeabi_dmul>
 80057be:	2200      	movs	r2, #0
 80057c0:	4b84      	ldr	r3, [pc, #528]	; (80059d4 <_dtoa_r+0x604>)
 80057c2:	f7fa fd63 	bl	800028c <__adddf3>
 80057c6:	4605      	mov	r5, r0
 80057c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80057cc:	2f00      	cmp	r7, #0
 80057ce:	d15d      	bne.n	800588c <_dtoa_r+0x4bc>
 80057d0:	2200      	movs	r2, #0
 80057d2:	4b81      	ldr	r3, [pc, #516]	; (80059d8 <_dtoa_r+0x608>)
 80057d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057d8:	f7fa fd56 	bl	8000288 <__aeabi_dsub>
 80057dc:	462a      	mov	r2, r5
 80057de:	4633      	mov	r3, r6
 80057e0:	e9cd 0100 	strd	r0, r1, [sp]
 80057e4:	f7fb f998 	bl	8000b18 <__aeabi_dcmpgt>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	f040 8288 	bne.w	8005cfe <_dtoa_r+0x92e>
 80057ee:	462a      	mov	r2, r5
 80057f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80057f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057f8:	f7fb f970 	bl	8000adc <__aeabi_dcmplt>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	f040 827c 	bne.w	8005cfa <_dtoa_r+0x92a>
 8005802:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005806:	e9cd 2300 	strd	r2, r3, [sp]
 800580a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800580c:	2b00      	cmp	r3, #0
 800580e:	f2c0 8150 	blt.w	8005ab2 <_dtoa_r+0x6e2>
 8005812:	f1ba 0f0e 	cmp.w	sl, #14
 8005816:	f300 814c 	bgt.w	8005ab2 <_dtoa_r+0x6e2>
 800581a:	4b6a      	ldr	r3, [pc, #424]	; (80059c4 <_dtoa_r+0x5f4>)
 800581c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005820:	ed93 7b00 	vldr	d7, [r3]
 8005824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005826:	2b00      	cmp	r3, #0
 8005828:	ed8d 7b02 	vstr	d7, [sp, #8]
 800582c:	f280 80d8 	bge.w	80059e0 <_dtoa_r+0x610>
 8005830:	f1b9 0f00 	cmp.w	r9, #0
 8005834:	f300 80d4 	bgt.w	80059e0 <_dtoa_r+0x610>
 8005838:	f040 825e 	bne.w	8005cf8 <_dtoa_r+0x928>
 800583c:	2200      	movs	r2, #0
 800583e:	4b66      	ldr	r3, [pc, #408]	; (80059d8 <_dtoa_r+0x608>)
 8005840:	ec51 0b17 	vmov	r0, r1, d7
 8005844:	f7fa fed8 	bl	80005f8 <__aeabi_dmul>
 8005848:	e9dd 2300 	ldrd	r2, r3, [sp]
 800584c:	f7fb f95a 	bl	8000b04 <__aeabi_dcmpge>
 8005850:	464f      	mov	r7, r9
 8005852:	464e      	mov	r6, r9
 8005854:	2800      	cmp	r0, #0
 8005856:	f040 8234 	bne.w	8005cc2 <_dtoa_r+0x8f2>
 800585a:	2331      	movs	r3, #49	; 0x31
 800585c:	f10b 0501 	add.w	r5, fp, #1
 8005860:	f88b 3000 	strb.w	r3, [fp]
 8005864:	f10a 0a01 	add.w	sl, sl, #1
 8005868:	e22f      	b.n	8005cca <_dtoa_r+0x8fa>
 800586a:	07f2      	lsls	r2, r6, #31
 800586c:	d505      	bpl.n	800587a <_dtoa_r+0x4aa>
 800586e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005872:	f7fa fec1 	bl	80005f8 <__aeabi_dmul>
 8005876:	3501      	adds	r5, #1
 8005878:	2301      	movs	r3, #1
 800587a:	1076      	asrs	r6, r6, #1
 800587c:	3708      	adds	r7, #8
 800587e:	e772      	b.n	8005766 <_dtoa_r+0x396>
 8005880:	2502      	movs	r5, #2
 8005882:	e774      	b.n	800576e <_dtoa_r+0x39e>
 8005884:	f8cd a020 	str.w	sl, [sp, #32]
 8005888:	464f      	mov	r7, r9
 800588a:	e791      	b.n	80057b0 <_dtoa_r+0x3e0>
 800588c:	4b4d      	ldr	r3, [pc, #308]	; (80059c4 <_dtoa_r+0x5f4>)
 800588e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005892:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005898:	2b00      	cmp	r3, #0
 800589a:	d047      	beq.n	800592c <_dtoa_r+0x55c>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	2000      	movs	r0, #0
 80058a2:	494e      	ldr	r1, [pc, #312]	; (80059dc <_dtoa_r+0x60c>)
 80058a4:	f7fa ffd2 	bl	800084c <__aeabi_ddiv>
 80058a8:	462a      	mov	r2, r5
 80058aa:	4633      	mov	r3, r6
 80058ac:	f7fa fcec 	bl	8000288 <__aeabi_dsub>
 80058b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80058b4:	465d      	mov	r5, fp
 80058b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058ba:	f7fb f94d 	bl	8000b58 <__aeabi_d2iz>
 80058be:	4606      	mov	r6, r0
 80058c0:	f7fa fe30 	bl	8000524 <__aeabi_i2d>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058cc:	f7fa fcdc 	bl	8000288 <__aeabi_dsub>
 80058d0:	3630      	adds	r6, #48	; 0x30
 80058d2:	f805 6b01 	strb.w	r6, [r5], #1
 80058d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80058da:	e9cd 0100 	strd	r0, r1, [sp]
 80058de:	f7fb f8fd 	bl	8000adc <__aeabi_dcmplt>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d163      	bne.n	80059ae <_dtoa_r+0x5de>
 80058e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058ea:	2000      	movs	r0, #0
 80058ec:	4937      	ldr	r1, [pc, #220]	; (80059cc <_dtoa_r+0x5fc>)
 80058ee:	f7fa fccb 	bl	8000288 <__aeabi_dsub>
 80058f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80058f6:	f7fb f8f1 	bl	8000adc <__aeabi_dcmplt>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	f040 80b7 	bne.w	8005a6e <_dtoa_r+0x69e>
 8005900:	eba5 030b 	sub.w	r3, r5, fp
 8005904:	429f      	cmp	r7, r3
 8005906:	f77f af7c 	ble.w	8005802 <_dtoa_r+0x432>
 800590a:	2200      	movs	r2, #0
 800590c:	4b30      	ldr	r3, [pc, #192]	; (80059d0 <_dtoa_r+0x600>)
 800590e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005912:	f7fa fe71 	bl	80005f8 <__aeabi_dmul>
 8005916:	2200      	movs	r2, #0
 8005918:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800591c:	4b2c      	ldr	r3, [pc, #176]	; (80059d0 <_dtoa_r+0x600>)
 800591e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005922:	f7fa fe69 	bl	80005f8 <__aeabi_dmul>
 8005926:	e9cd 0100 	strd	r0, r1, [sp]
 800592a:	e7c4      	b.n	80058b6 <_dtoa_r+0x4e6>
 800592c:	462a      	mov	r2, r5
 800592e:	4633      	mov	r3, r6
 8005930:	f7fa fe62 	bl	80005f8 <__aeabi_dmul>
 8005934:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005938:	eb0b 0507 	add.w	r5, fp, r7
 800593c:	465e      	mov	r6, fp
 800593e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005942:	f7fb f909 	bl	8000b58 <__aeabi_d2iz>
 8005946:	4607      	mov	r7, r0
 8005948:	f7fa fdec 	bl	8000524 <__aeabi_i2d>
 800594c:	3730      	adds	r7, #48	; 0x30
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005956:	f7fa fc97 	bl	8000288 <__aeabi_dsub>
 800595a:	f806 7b01 	strb.w	r7, [r6], #1
 800595e:	42ae      	cmp	r6, r5
 8005960:	e9cd 0100 	strd	r0, r1, [sp]
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	d126      	bne.n	80059b8 <_dtoa_r+0x5e8>
 800596a:	4b1c      	ldr	r3, [pc, #112]	; (80059dc <_dtoa_r+0x60c>)
 800596c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005970:	f7fa fc8c 	bl	800028c <__adddf3>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	e9dd 0100 	ldrd	r0, r1, [sp]
 800597c:	f7fb f8cc 	bl	8000b18 <__aeabi_dcmpgt>
 8005980:	2800      	cmp	r0, #0
 8005982:	d174      	bne.n	8005a6e <_dtoa_r+0x69e>
 8005984:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005988:	2000      	movs	r0, #0
 800598a:	4914      	ldr	r1, [pc, #80]	; (80059dc <_dtoa_r+0x60c>)
 800598c:	f7fa fc7c 	bl	8000288 <__aeabi_dsub>
 8005990:	4602      	mov	r2, r0
 8005992:	460b      	mov	r3, r1
 8005994:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005998:	f7fb f8a0 	bl	8000adc <__aeabi_dcmplt>
 800599c:	2800      	cmp	r0, #0
 800599e:	f43f af30 	beq.w	8005802 <_dtoa_r+0x432>
 80059a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059a6:	2b30      	cmp	r3, #48	; 0x30
 80059a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80059ac:	d002      	beq.n	80059b4 <_dtoa_r+0x5e4>
 80059ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80059b2:	e04a      	b.n	8005a4a <_dtoa_r+0x67a>
 80059b4:	4615      	mov	r5, r2
 80059b6:	e7f4      	b.n	80059a2 <_dtoa_r+0x5d2>
 80059b8:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <_dtoa_r+0x600>)
 80059ba:	f7fa fe1d 	bl	80005f8 <__aeabi_dmul>
 80059be:	e9cd 0100 	strd	r0, r1, [sp]
 80059c2:	e7bc      	b.n	800593e <_dtoa_r+0x56e>
 80059c4:	080141a0 	.word	0x080141a0
 80059c8:	08014178 	.word	0x08014178
 80059cc:	3ff00000 	.word	0x3ff00000
 80059d0:	40240000 	.word	0x40240000
 80059d4:	401c0000 	.word	0x401c0000
 80059d8:	40140000 	.word	0x40140000
 80059dc:	3fe00000 	.word	0x3fe00000
 80059e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80059e4:	465d      	mov	r5, fp
 80059e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059ea:	4630      	mov	r0, r6
 80059ec:	4639      	mov	r1, r7
 80059ee:	f7fa ff2d 	bl	800084c <__aeabi_ddiv>
 80059f2:	f7fb f8b1 	bl	8000b58 <__aeabi_d2iz>
 80059f6:	4680      	mov	r8, r0
 80059f8:	f7fa fd94 	bl	8000524 <__aeabi_i2d>
 80059fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a00:	f7fa fdfa 	bl	80005f8 <__aeabi_dmul>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	4630      	mov	r0, r6
 8005a0a:	4639      	mov	r1, r7
 8005a0c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005a10:	f7fa fc3a 	bl	8000288 <__aeabi_dsub>
 8005a14:	f805 6b01 	strb.w	r6, [r5], #1
 8005a18:	eba5 060b 	sub.w	r6, r5, fp
 8005a1c:	45b1      	cmp	r9, r6
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	d139      	bne.n	8005a98 <_dtoa_r+0x6c8>
 8005a24:	f7fa fc32 	bl	800028c <__adddf3>
 8005a28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a2c:	4606      	mov	r6, r0
 8005a2e:	460f      	mov	r7, r1
 8005a30:	f7fb f872 	bl	8000b18 <__aeabi_dcmpgt>
 8005a34:	b9c8      	cbnz	r0, 8005a6a <_dtoa_r+0x69a>
 8005a36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	4639      	mov	r1, r7
 8005a3e:	f7fb f843 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a42:	b110      	cbz	r0, 8005a4a <_dtoa_r+0x67a>
 8005a44:	f018 0f01 	tst.w	r8, #1
 8005a48:	d10f      	bne.n	8005a6a <_dtoa_r+0x69a>
 8005a4a:	9904      	ldr	r1, [sp, #16]
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	f000 fe0a 	bl	8006666 <_Bfree>
 8005a52:	2300      	movs	r3, #0
 8005a54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a56:	702b      	strb	r3, [r5, #0]
 8005a58:	f10a 0301 	add.w	r3, sl, #1
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 8241 	beq.w	8005ee8 <_dtoa_r+0xb18>
 8005a66:	601d      	str	r5, [r3, #0]
 8005a68:	e23e      	b.n	8005ee8 <_dtoa_r+0xb18>
 8005a6a:	f8cd a020 	str.w	sl, [sp, #32]
 8005a6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a72:	2a39      	cmp	r2, #57	; 0x39
 8005a74:	f105 33ff 	add.w	r3, r5, #4294967295
 8005a78:	d108      	bne.n	8005a8c <_dtoa_r+0x6bc>
 8005a7a:	459b      	cmp	fp, r3
 8005a7c:	d10a      	bne.n	8005a94 <_dtoa_r+0x6c4>
 8005a7e:	9b08      	ldr	r3, [sp, #32]
 8005a80:	3301      	adds	r3, #1
 8005a82:	9308      	str	r3, [sp, #32]
 8005a84:	2330      	movs	r3, #48	; 0x30
 8005a86:	f88b 3000 	strb.w	r3, [fp]
 8005a8a:	465b      	mov	r3, fp
 8005a8c:	781a      	ldrb	r2, [r3, #0]
 8005a8e:	3201      	adds	r2, #1
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	e78c      	b.n	80059ae <_dtoa_r+0x5de>
 8005a94:	461d      	mov	r5, r3
 8005a96:	e7ea      	b.n	8005a6e <_dtoa_r+0x69e>
 8005a98:	2200      	movs	r2, #0
 8005a9a:	4b9b      	ldr	r3, [pc, #620]	; (8005d08 <_dtoa_r+0x938>)
 8005a9c:	f7fa fdac 	bl	80005f8 <__aeabi_dmul>
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	460f      	mov	r7, r1
 8005aa8:	f7fb f80e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005aac:	2800      	cmp	r0, #0
 8005aae:	d09a      	beq.n	80059e6 <_dtoa_r+0x616>
 8005ab0:	e7cb      	b.n	8005a4a <_dtoa_r+0x67a>
 8005ab2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ab4:	2a00      	cmp	r2, #0
 8005ab6:	f000 808b 	beq.w	8005bd0 <_dtoa_r+0x800>
 8005aba:	9a06      	ldr	r2, [sp, #24]
 8005abc:	2a01      	cmp	r2, #1
 8005abe:	dc6e      	bgt.n	8005b9e <_dtoa_r+0x7ce>
 8005ac0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005ac2:	2a00      	cmp	r2, #0
 8005ac4:	d067      	beq.n	8005b96 <_dtoa_r+0x7c6>
 8005ac6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005aca:	9f07      	ldr	r7, [sp, #28]
 8005acc:	9d05      	ldr	r5, [sp, #20]
 8005ace:	9a05      	ldr	r2, [sp, #20]
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	441a      	add	r2, r3
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	9205      	str	r2, [sp, #20]
 8005ad8:	4498      	add	r8, r3
 8005ada:	f000 fea2 	bl	8006822 <__i2b>
 8005ade:	4606      	mov	r6, r0
 8005ae0:	2d00      	cmp	r5, #0
 8005ae2:	dd0c      	ble.n	8005afe <_dtoa_r+0x72e>
 8005ae4:	f1b8 0f00 	cmp.w	r8, #0
 8005ae8:	dd09      	ble.n	8005afe <_dtoa_r+0x72e>
 8005aea:	4545      	cmp	r5, r8
 8005aec:	9a05      	ldr	r2, [sp, #20]
 8005aee:	462b      	mov	r3, r5
 8005af0:	bfa8      	it	ge
 8005af2:	4643      	movge	r3, r8
 8005af4:	1ad2      	subs	r2, r2, r3
 8005af6:	9205      	str	r2, [sp, #20]
 8005af8:	1aed      	subs	r5, r5, r3
 8005afa:	eba8 0803 	sub.w	r8, r8, r3
 8005afe:	9b07      	ldr	r3, [sp, #28]
 8005b00:	b1eb      	cbz	r3, 8005b3e <_dtoa_r+0x76e>
 8005b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d067      	beq.n	8005bd8 <_dtoa_r+0x808>
 8005b08:	b18f      	cbz	r7, 8005b2e <_dtoa_r+0x75e>
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	463a      	mov	r2, r7
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f000 ff26 	bl	8006960 <__pow5mult>
 8005b14:	9a04      	ldr	r2, [sp, #16]
 8005b16:	4601      	mov	r1, r0
 8005b18:	4606      	mov	r6, r0
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f000 fe8a 	bl	8006834 <__multiply>
 8005b20:	9904      	ldr	r1, [sp, #16]
 8005b22:	9008      	str	r0, [sp, #32]
 8005b24:	4620      	mov	r0, r4
 8005b26:	f000 fd9e 	bl	8006666 <_Bfree>
 8005b2a:	9b08      	ldr	r3, [sp, #32]
 8005b2c:	9304      	str	r3, [sp, #16]
 8005b2e:	9b07      	ldr	r3, [sp, #28]
 8005b30:	1bda      	subs	r2, r3, r7
 8005b32:	d004      	beq.n	8005b3e <_dtoa_r+0x76e>
 8005b34:	9904      	ldr	r1, [sp, #16]
 8005b36:	4620      	mov	r0, r4
 8005b38:	f000 ff12 	bl	8006960 <__pow5mult>
 8005b3c:	9004      	str	r0, [sp, #16]
 8005b3e:	2101      	movs	r1, #1
 8005b40:	4620      	mov	r0, r4
 8005b42:	f000 fe6e 	bl	8006822 <__i2b>
 8005b46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b48:	4607      	mov	r7, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 81d0 	beq.w	8005ef0 <_dtoa_r+0xb20>
 8005b50:	461a      	mov	r2, r3
 8005b52:	4601      	mov	r1, r0
 8005b54:	4620      	mov	r0, r4
 8005b56:	f000 ff03 	bl	8006960 <__pow5mult>
 8005b5a:	9b06      	ldr	r3, [sp, #24]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	4607      	mov	r7, r0
 8005b60:	dc40      	bgt.n	8005be4 <_dtoa_r+0x814>
 8005b62:	9b00      	ldr	r3, [sp, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d139      	bne.n	8005bdc <_dtoa_r+0x80c>
 8005b68:	9b01      	ldr	r3, [sp, #4]
 8005b6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d136      	bne.n	8005be0 <_dtoa_r+0x810>
 8005b72:	9b01      	ldr	r3, [sp, #4]
 8005b74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b78:	0d1b      	lsrs	r3, r3, #20
 8005b7a:	051b      	lsls	r3, r3, #20
 8005b7c:	b12b      	cbz	r3, 8005b8a <_dtoa_r+0x7ba>
 8005b7e:	9b05      	ldr	r3, [sp, #20]
 8005b80:	3301      	adds	r3, #1
 8005b82:	9305      	str	r3, [sp, #20]
 8005b84:	f108 0801 	add.w	r8, r8, #1
 8005b88:	2301      	movs	r3, #1
 8005b8a:	9307      	str	r3, [sp, #28]
 8005b8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d12a      	bne.n	8005be8 <_dtoa_r+0x818>
 8005b92:	2001      	movs	r0, #1
 8005b94:	e030      	b.n	8005bf8 <_dtoa_r+0x828>
 8005b96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b98:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b9c:	e795      	b.n	8005aca <_dtoa_r+0x6fa>
 8005b9e:	9b07      	ldr	r3, [sp, #28]
 8005ba0:	f109 37ff 	add.w	r7, r9, #4294967295
 8005ba4:	42bb      	cmp	r3, r7
 8005ba6:	bfbf      	itttt	lt
 8005ba8:	9b07      	ldrlt	r3, [sp, #28]
 8005baa:	9707      	strlt	r7, [sp, #28]
 8005bac:	1afa      	sublt	r2, r7, r3
 8005bae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005bb0:	bfbb      	ittet	lt
 8005bb2:	189b      	addlt	r3, r3, r2
 8005bb4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005bb6:	1bdf      	subge	r7, r3, r7
 8005bb8:	2700      	movlt	r7, #0
 8005bba:	f1b9 0f00 	cmp.w	r9, #0
 8005bbe:	bfb5      	itete	lt
 8005bc0:	9b05      	ldrlt	r3, [sp, #20]
 8005bc2:	9d05      	ldrge	r5, [sp, #20]
 8005bc4:	eba3 0509 	sublt.w	r5, r3, r9
 8005bc8:	464b      	movge	r3, r9
 8005bca:	bfb8      	it	lt
 8005bcc:	2300      	movlt	r3, #0
 8005bce:	e77e      	b.n	8005ace <_dtoa_r+0x6fe>
 8005bd0:	9f07      	ldr	r7, [sp, #28]
 8005bd2:	9d05      	ldr	r5, [sp, #20]
 8005bd4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005bd6:	e783      	b.n	8005ae0 <_dtoa_r+0x710>
 8005bd8:	9a07      	ldr	r2, [sp, #28]
 8005bda:	e7ab      	b.n	8005b34 <_dtoa_r+0x764>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e7d4      	b.n	8005b8a <_dtoa_r+0x7ba>
 8005be0:	9b00      	ldr	r3, [sp, #0]
 8005be2:	e7d2      	b.n	8005b8a <_dtoa_r+0x7ba>
 8005be4:	2300      	movs	r3, #0
 8005be6:	9307      	str	r3, [sp, #28]
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005bee:	6918      	ldr	r0, [r3, #16]
 8005bf0:	f000 fdc9 	bl	8006786 <__hi0bits>
 8005bf4:	f1c0 0020 	rsb	r0, r0, #32
 8005bf8:	4440      	add	r0, r8
 8005bfa:	f010 001f 	ands.w	r0, r0, #31
 8005bfe:	d047      	beq.n	8005c90 <_dtoa_r+0x8c0>
 8005c00:	f1c0 0320 	rsb	r3, r0, #32
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	dd3b      	ble.n	8005c80 <_dtoa_r+0x8b0>
 8005c08:	9b05      	ldr	r3, [sp, #20]
 8005c0a:	f1c0 001c 	rsb	r0, r0, #28
 8005c0e:	4403      	add	r3, r0
 8005c10:	9305      	str	r3, [sp, #20]
 8005c12:	4405      	add	r5, r0
 8005c14:	4480      	add	r8, r0
 8005c16:	9b05      	ldr	r3, [sp, #20]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	dd05      	ble.n	8005c28 <_dtoa_r+0x858>
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	9904      	ldr	r1, [sp, #16]
 8005c20:	4620      	mov	r0, r4
 8005c22:	f000 feeb 	bl	80069fc <__lshift>
 8005c26:	9004      	str	r0, [sp, #16]
 8005c28:	f1b8 0f00 	cmp.w	r8, #0
 8005c2c:	dd05      	ble.n	8005c3a <_dtoa_r+0x86a>
 8005c2e:	4639      	mov	r1, r7
 8005c30:	4642      	mov	r2, r8
 8005c32:	4620      	mov	r0, r4
 8005c34:	f000 fee2 	bl	80069fc <__lshift>
 8005c38:	4607      	mov	r7, r0
 8005c3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c3c:	b353      	cbz	r3, 8005c94 <_dtoa_r+0x8c4>
 8005c3e:	4639      	mov	r1, r7
 8005c40:	9804      	ldr	r0, [sp, #16]
 8005c42:	f000 ff2f 	bl	8006aa4 <__mcmp>
 8005c46:	2800      	cmp	r0, #0
 8005c48:	da24      	bge.n	8005c94 <_dtoa_r+0x8c4>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	220a      	movs	r2, #10
 8005c4e:	9904      	ldr	r1, [sp, #16]
 8005c50:	4620      	mov	r0, r4
 8005c52:	f000 fd1f 	bl	8006694 <__multadd>
 8005c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c58:	9004      	str	r0, [sp, #16]
 8005c5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 814d 	beq.w	8005efe <_dtoa_r+0xb2e>
 8005c64:	2300      	movs	r3, #0
 8005c66:	4631      	mov	r1, r6
 8005c68:	220a      	movs	r2, #10
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f000 fd12 	bl	8006694 <__multadd>
 8005c70:	9b02      	ldr	r3, [sp, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	4606      	mov	r6, r0
 8005c76:	dc4f      	bgt.n	8005d18 <_dtoa_r+0x948>
 8005c78:	9b06      	ldr	r3, [sp, #24]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	dd4c      	ble.n	8005d18 <_dtoa_r+0x948>
 8005c7e:	e011      	b.n	8005ca4 <_dtoa_r+0x8d4>
 8005c80:	d0c9      	beq.n	8005c16 <_dtoa_r+0x846>
 8005c82:	9a05      	ldr	r2, [sp, #20]
 8005c84:	331c      	adds	r3, #28
 8005c86:	441a      	add	r2, r3
 8005c88:	9205      	str	r2, [sp, #20]
 8005c8a:	441d      	add	r5, r3
 8005c8c:	4498      	add	r8, r3
 8005c8e:	e7c2      	b.n	8005c16 <_dtoa_r+0x846>
 8005c90:	4603      	mov	r3, r0
 8005c92:	e7f6      	b.n	8005c82 <_dtoa_r+0x8b2>
 8005c94:	f1b9 0f00 	cmp.w	r9, #0
 8005c98:	dc38      	bgt.n	8005d0c <_dtoa_r+0x93c>
 8005c9a:	9b06      	ldr	r3, [sp, #24]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	dd35      	ble.n	8005d0c <_dtoa_r+0x93c>
 8005ca0:	f8cd 9008 	str.w	r9, [sp, #8]
 8005ca4:	9b02      	ldr	r3, [sp, #8]
 8005ca6:	b963      	cbnz	r3, 8005cc2 <_dtoa_r+0x8f2>
 8005ca8:	4639      	mov	r1, r7
 8005caa:	2205      	movs	r2, #5
 8005cac:	4620      	mov	r0, r4
 8005cae:	f000 fcf1 	bl	8006694 <__multadd>
 8005cb2:	4601      	mov	r1, r0
 8005cb4:	4607      	mov	r7, r0
 8005cb6:	9804      	ldr	r0, [sp, #16]
 8005cb8:	f000 fef4 	bl	8006aa4 <__mcmp>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	f73f adcc 	bgt.w	800585a <_dtoa_r+0x48a>
 8005cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cc4:	465d      	mov	r5, fp
 8005cc6:	ea6f 0a03 	mvn.w	sl, r3
 8005cca:	f04f 0900 	mov.w	r9, #0
 8005cce:	4639      	mov	r1, r7
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f000 fcc8 	bl	8006666 <_Bfree>
 8005cd6:	2e00      	cmp	r6, #0
 8005cd8:	f43f aeb7 	beq.w	8005a4a <_dtoa_r+0x67a>
 8005cdc:	f1b9 0f00 	cmp.w	r9, #0
 8005ce0:	d005      	beq.n	8005cee <_dtoa_r+0x91e>
 8005ce2:	45b1      	cmp	r9, r6
 8005ce4:	d003      	beq.n	8005cee <_dtoa_r+0x91e>
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f000 fcbc 	bl	8006666 <_Bfree>
 8005cee:	4631      	mov	r1, r6
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f000 fcb8 	bl	8006666 <_Bfree>
 8005cf6:	e6a8      	b.n	8005a4a <_dtoa_r+0x67a>
 8005cf8:	2700      	movs	r7, #0
 8005cfa:	463e      	mov	r6, r7
 8005cfc:	e7e1      	b.n	8005cc2 <_dtoa_r+0x8f2>
 8005cfe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005d02:	463e      	mov	r6, r7
 8005d04:	e5a9      	b.n	800585a <_dtoa_r+0x48a>
 8005d06:	bf00      	nop
 8005d08:	40240000 	.word	0x40240000
 8005d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d0e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 80fa 	beq.w	8005f0c <_dtoa_r+0xb3c>
 8005d18:	2d00      	cmp	r5, #0
 8005d1a:	dd05      	ble.n	8005d28 <_dtoa_r+0x958>
 8005d1c:	4631      	mov	r1, r6
 8005d1e:	462a      	mov	r2, r5
 8005d20:	4620      	mov	r0, r4
 8005d22:	f000 fe6b 	bl	80069fc <__lshift>
 8005d26:	4606      	mov	r6, r0
 8005d28:	9b07      	ldr	r3, [sp, #28]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d04c      	beq.n	8005dc8 <_dtoa_r+0x9f8>
 8005d2e:	6871      	ldr	r1, [r6, #4]
 8005d30:	4620      	mov	r0, r4
 8005d32:	f000 fc64 	bl	80065fe <_Balloc>
 8005d36:	6932      	ldr	r2, [r6, #16]
 8005d38:	3202      	adds	r2, #2
 8005d3a:	4605      	mov	r5, r0
 8005d3c:	0092      	lsls	r2, r2, #2
 8005d3e:	f106 010c 	add.w	r1, r6, #12
 8005d42:	300c      	adds	r0, #12
 8005d44:	f000 fc50 	bl	80065e8 <memcpy>
 8005d48:	2201      	movs	r2, #1
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	f000 fe55 	bl	80069fc <__lshift>
 8005d52:	9b00      	ldr	r3, [sp, #0]
 8005d54:	f8cd b014 	str.w	fp, [sp, #20]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	46b1      	mov	r9, r6
 8005d5e:	9307      	str	r3, [sp, #28]
 8005d60:	4606      	mov	r6, r0
 8005d62:	4639      	mov	r1, r7
 8005d64:	9804      	ldr	r0, [sp, #16]
 8005d66:	f7ff faa5 	bl	80052b4 <quorem>
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	4605      	mov	r5, r0
 8005d6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d72:	9804      	ldr	r0, [sp, #16]
 8005d74:	f000 fe96 	bl	8006aa4 <__mcmp>
 8005d78:	4632      	mov	r2, r6
 8005d7a:	9000      	str	r0, [sp, #0]
 8005d7c:	4639      	mov	r1, r7
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f000 feaa 	bl	8006ad8 <__mdiff>
 8005d84:	68c3      	ldr	r3, [r0, #12]
 8005d86:	4602      	mov	r2, r0
 8005d88:	bb03      	cbnz	r3, 8005dcc <_dtoa_r+0x9fc>
 8005d8a:	4601      	mov	r1, r0
 8005d8c:	9008      	str	r0, [sp, #32]
 8005d8e:	9804      	ldr	r0, [sp, #16]
 8005d90:	f000 fe88 	bl	8006aa4 <__mcmp>
 8005d94:	9a08      	ldr	r2, [sp, #32]
 8005d96:	4603      	mov	r3, r0
 8005d98:	4611      	mov	r1, r2
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	9308      	str	r3, [sp, #32]
 8005d9e:	f000 fc62 	bl	8006666 <_Bfree>
 8005da2:	9b08      	ldr	r3, [sp, #32]
 8005da4:	b9a3      	cbnz	r3, 8005dd0 <_dtoa_r+0xa00>
 8005da6:	9a06      	ldr	r2, [sp, #24]
 8005da8:	b992      	cbnz	r2, 8005dd0 <_dtoa_r+0xa00>
 8005daa:	9a07      	ldr	r2, [sp, #28]
 8005dac:	b982      	cbnz	r2, 8005dd0 <_dtoa_r+0xa00>
 8005dae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005db2:	d029      	beq.n	8005e08 <_dtoa_r+0xa38>
 8005db4:	9b00      	ldr	r3, [sp, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	dd01      	ble.n	8005dbe <_dtoa_r+0x9ee>
 8005dba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005dbe:	9b05      	ldr	r3, [sp, #20]
 8005dc0:	1c5d      	adds	r5, r3, #1
 8005dc2:	f883 8000 	strb.w	r8, [r3]
 8005dc6:	e782      	b.n	8005cce <_dtoa_r+0x8fe>
 8005dc8:	4630      	mov	r0, r6
 8005dca:	e7c2      	b.n	8005d52 <_dtoa_r+0x982>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e7e3      	b.n	8005d98 <_dtoa_r+0x9c8>
 8005dd0:	9a00      	ldr	r2, [sp, #0]
 8005dd2:	2a00      	cmp	r2, #0
 8005dd4:	db04      	blt.n	8005de0 <_dtoa_r+0xa10>
 8005dd6:	d125      	bne.n	8005e24 <_dtoa_r+0xa54>
 8005dd8:	9a06      	ldr	r2, [sp, #24]
 8005dda:	bb1a      	cbnz	r2, 8005e24 <_dtoa_r+0xa54>
 8005ddc:	9a07      	ldr	r2, [sp, #28]
 8005dde:	bb0a      	cbnz	r2, 8005e24 <_dtoa_r+0xa54>
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	ddec      	ble.n	8005dbe <_dtoa_r+0x9ee>
 8005de4:	2201      	movs	r2, #1
 8005de6:	9904      	ldr	r1, [sp, #16]
 8005de8:	4620      	mov	r0, r4
 8005dea:	f000 fe07 	bl	80069fc <__lshift>
 8005dee:	4639      	mov	r1, r7
 8005df0:	9004      	str	r0, [sp, #16]
 8005df2:	f000 fe57 	bl	8006aa4 <__mcmp>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	dc03      	bgt.n	8005e02 <_dtoa_r+0xa32>
 8005dfa:	d1e0      	bne.n	8005dbe <_dtoa_r+0x9ee>
 8005dfc:	f018 0f01 	tst.w	r8, #1
 8005e00:	d0dd      	beq.n	8005dbe <_dtoa_r+0x9ee>
 8005e02:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e06:	d1d8      	bne.n	8005dba <_dtoa_r+0x9ea>
 8005e08:	9b05      	ldr	r3, [sp, #20]
 8005e0a:	9a05      	ldr	r2, [sp, #20]
 8005e0c:	1c5d      	adds	r5, r3, #1
 8005e0e:	2339      	movs	r3, #57	; 0x39
 8005e10:	7013      	strb	r3, [r2, #0]
 8005e12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e16:	2b39      	cmp	r3, #57	; 0x39
 8005e18:	f105 32ff 	add.w	r2, r5, #4294967295
 8005e1c:	d04f      	beq.n	8005ebe <_dtoa_r+0xaee>
 8005e1e:	3301      	adds	r3, #1
 8005e20:	7013      	strb	r3, [r2, #0]
 8005e22:	e754      	b.n	8005cce <_dtoa_r+0x8fe>
 8005e24:	9a05      	ldr	r2, [sp, #20]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f102 0501 	add.w	r5, r2, #1
 8005e2c:	dd06      	ble.n	8005e3c <_dtoa_r+0xa6c>
 8005e2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e32:	d0e9      	beq.n	8005e08 <_dtoa_r+0xa38>
 8005e34:	f108 0801 	add.w	r8, r8, #1
 8005e38:	9b05      	ldr	r3, [sp, #20]
 8005e3a:	e7c2      	b.n	8005dc2 <_dtoa_r+0x9f2>
 8005e3c:	9a02      	ldr	r2, [sp, #8]
 8005e3e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005e42:	eba5 030b 	sub.w	r3, r5, fp
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d021      	beq.n	8005e8e <_dtoa_r+0xabe>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	220a      	movs	r2, #10
 8005e4e:	9904      	ldr	r1, [sp, #16]
 8005e50:	4620      	mov	r0, r4
 8005e52:	f000 fc1f 	bl	8006694 <__multadd>
 8005e56:	45b1      	cmp	r9, r6
 8005e58:	9004      	str	r0, [sp, #16]
 8005e5a:	f04f 0300 	mov.w	r3, #0
 8005e5e:	f04f 020a 	mov.w	r2, #10
 8005e62:	4649      	mov	r1, r9
 8005e64:	4620      	mov	r0, r4
 8005e66:	d105      	bne.n	8005e74 <_dtoa_r+0xaa4>
 8005e68:	f000 fc14 	bl	8006694 <__multadd>
 8005e6c:	4681      	mov	r9, r0
 8005e6e:	4606      	mov	r6, r0
 8005e70:	9505      	str	r5, [sp, #20]
 8005e72:	e776      	b.n	8005d62 <_dtoa_r+0x992>
 8005e74:	f000 fc0e 	bl	8006694 <__multadd>
 8005e78:	4631      	mov	r1, r6
 8005e7a:	4681      	mov	r9, r0
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	220a      	movs	r2, #10
 8005e80:	4620      	mov	r0, r4
 8005e82:	f000 fc07 	bl	8006694 <__multadd>
 8005e86:	4606      	mov	r6, r0
 8005e88:	e7f2      	b.n	8005e70 <_dtoa_r+0xaa0>
 8005e8a:	f04f 0900 	mov.w	r9, #0
 8005e8e:	2201      	movs	r2, #1
 8005e90:	9904      	ldr	r1, [sp, #16]
 8005e92:	4620      	mov	r0, r4
 8005e94:	f000 fdb2 	bl	80069fc <__lshift>
 8005e98:	4639      	mov	r1, r7
 8005e9a:	9004      	str	r0, [sp, #16]
 8005e9c:	f000 fe02 	bl	8006aa4 <__mcmp>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	dcb6      	bgt.n	8005e12 <_dtoa_r+0xa42>
 8005ea4:	d102      	bne.n	8005eac <_dtoa_r+0xadc>
 8005ea6:	f018 0f01 	tst.w	r8, #1
 8005eaa:	d1b2      	bne.n	8005e12 <_dtoa_r+0xa42>
 8005eac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005eb0:	2b30      	cmp	r3, #48	; 0x30
 8005eb2:	f105 32ff 	add.w	r2, r5, #4294967295
 8005eb6:	f47f af0a 	bne.w	8005cce <_dtoa_r+0x8fe>
 8005eba:	4615      	mov	r5, r2
 8005ebc:	e7f6      	b.n	8005eac <_dtoa_r+0xadc>
 8005ebe:	4593      	cmp	fp, r2
 8005ec0:	d105      	bne.n	8005ece <_dtoa_r+0xafe>
 8005ec2:	2331      	movs	r3, #49	; 0x31
 8005ec4:	f10a 0a01 	add.w	sl, sl, #1
 8005ec8:	f88b 3000 	strb.w	r3, [fp]
 8005ecc:	e6ff      	b.n	8005cce <_dtoa_r+0x8fe>
 8005ece:	4615      	mov	r5, r2
 8005ed0:	e79f      	b.n	8005e12 <_dtoa_r+0xa42>
 8005ed2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005f38 <_dtoa_r+0xb68>
 8005ed6:	e007      	b.n	8005ee8 <_dtoa_r+0xb18>
 8005ed8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005eda:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005f3c <_dtoa_r+0xb6c>
 8005ede:	b11b      	cbz	r3, 8005ee8 <_dtoa_r+0xb18>
 8005ee0:	f10b 0308 	add.w	r3, fp, #8
 8005ee4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	4658      	mov	r0, fp
 8005eea:	b017      	add	sp, #92	; 0x5c
 8005eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef0:	9b06      	ldr	r3, [sp, #24]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	f77f ae35 	ble.w	8005b62 <_dtoa_r+0x792>
 8005ef8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005efa:	9307      	str	r3, [sp, #28]
 8005efc:	e649      	b.n	8005b92 <_dtoa_r+0x7c2>
 8005efe:	9b02      	ldr	r3, [sp, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	dc03      	bgt.n	8005f0c <_dtoa_r+0xb3c>
 8005f04:	9b06      	ldr	r3, [sp, #24]
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	f73f aecc 	bgt.w	8005ca4 <_dtoa_r+0x8d4>
 8005f0c:	465d      	mov	r5, fp
 8005f0e:	4639      	mov	r1, r7
 8005f10:	9804      	ldr	r0, [sp, #16]
 8005f12:	f7ff f9cf 	bl	80052b4 <quorem>
 8005f16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005f1a:	f805 8b01 	strb.w	r8, [r5], #1
 8005f1e:	9a02      	ldr	r2, [sp, #8]
 8005f20:	eba5 030b 	sub.w	r3, r5, fp
 8005f24:	429a      	cmp	r2, r3
 8005f26:	ddb0      	ble.n	8005e8a <_dtoa_r+0xaba>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	220a      	movs	r2, #10
 8005f2c:	9904      	ldr	r1, [sp, #16]
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f000 fbb0 	bl	8006694 <__multadd>
 8005f34:	9004      	str	r0, [sp, #16]
 8005f36:	e7ea      	b.n	8005f0e <_dtoa_r+0xb3e>
 8005f38:	080140e0 	.word	0x080140e0
 8005f3c:	08014160 	.word	0x08014160

08005f40 <rshift>:
 8005f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f42:	6906      	ldr	r6, [r0, #16]
 8005f44:	114b      	asrs	r3, r1, #5
 8005f46:	429e      	cmp	r6, r3
 8005f48:	f100 0414 	add.w	r4, r0, #20
 8005f4c:	dd30      	ble.n	8005fb0 <rshift+0x70>
 8005f4e:	f011 011f 	ands.w	r1, r1, #31
 8005f52:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005f56:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005f5a:	d108      	bne.n	8005f6e <rshift+0x2e>
 8005f5c:	4621      	mov	r1, r4
 8005f5e:	42b2      	cmp	r2, r6
 8005f60:	460b      	mov	r3, r1
 8005f62:	d211      	bcs.n	8005f88 <rshift+0x48>
 8005f64:	f852 3b04 	ldr.w	r3, [r2], #4
 8005f68:	f841 3b04 	str.w	r3, [r1], #4
 8005f6c:	e7f7      	b.n	8005f5e <rshift+0x1e>
 8005f6e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8005f72:	f1c1 0c20 	rsb	ip, r1, #32
 8005f76:	40cd      	lsrs	r5, r1
 8005f78:	3204      	adds	r2, #4
 8005f7a:	4623      	mov	r3, r4
 8005f7c:	42b2      	cmp	r2, r6
 8005f7e:	4617      	mov	r7, r2
 8005f80:	d30c      	bcc.n	8005f9c <rshift+0x5c>
 8005f82:	601d      	str	r5, [r3, #0]
 8005f84:	b105      	cbz	r5, 8005f88 <rshift+0x48>
 8005f86:	3304      	adds	r3, #4
 8005f88:	1b1a      	subs	r2, r3, r4
 8005f8a:	42a3      	cmp	r3, r4
 8005f8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005f90:	bf08      	it	eq
 8005f92:	2300      	moveq	r3, #0
 8005f94:	6102      	str	r2, [r0, #16]
 8005f96:	bf08      	it	eq
 8005f98:	6143      	streq	r3, [r0, #20]
 8005f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f9c:	683f      	ldr	r7, [r7, #0]
 8005f9e:	fa07 f70c 	lsl.w	r7, r7, ip
 8005fa2:	433d      	orrs	r5, r7
 8005fa4:	f843 5b04 	str.w	r5, [r3], #4
 8005fa8:	f852 5b04 	ldr.w	r5, [r2], #4
 8005fac:	40cd      	lsrs	r5, r1
 8005fae:	e7e5      	b.n	8005f7c <rshift+0x3c>
 8005fb0:	4623      	mov	r3, r4
 8005fb2:	e7e9      	b.n	8005f88 <rshift+0x48>

08005fb4 <__hexdig_fun>:
 8005fb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005fb8:	2b09      	cmp	r3, #9
 8005fba:	d802      	bhi.n	8005fc2 <__hexdig_fun+0xe>
 8005fbc:	3820      	subs	r0, #32
 8005fbe:	b2c0      	uxtb	r0, r0
 8005fc0:	4770      	bx	lr
 8005fc2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005fc6:	2b05      	cmp	r3, #5
 8005fc8:	d801      	bhi.n	8005fce <__hexdig_fun+0x1a>
 8005fca:	3847      	subs	r0, #71	; 0x47
 8005fcc:	e7f7      	b.n	8005fbe <__hexdig_fun+0xa>
 8005fce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005fd2:	2b05      	cmp	r3, #5
 8005fd4:	d801      	bhi.n	8005fda <__hexdig_fun+0x26>
 8005fd6:	3827      	subs	r0, #39	; 0x27
 8005fd8:	e7f1      	b.n	8005fbe <__hexdig_fun+0xa>
 8005fda:	2000      	movs	r0, #0
 8005fdc:	4770      	bx	lr

08005fde <__gethex>:
 8005fde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe2:	b08b      	sub	sp, #44	; 0x2c
 8005fe4:	468a      	mov	sl, r1
 8005fe6:	9002      	str	r0, [sp, #8]
 8005fe8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005fea:	9306      	str	r3, [sp, #24]
 8005fec:	4690      	mov	r8, r2
 8005fee:	f000 fad0 	bl	8006592 <__localeconv_l>
 8005ff2:	6803      	ldr	r3, [r0, #0]
 8005ff4:	9303      	str	r3, [sp, #12]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fa f8ea 	bl	80001d0 <strlen>
 8005ffc:	9b03      	ldr	r3, [sp, #12]
 8005ffe:	9001      	str	r0, [sp, #4]
 8006000:	4403      	add	r3, r0
 8006002:	f04f 0b00 	mov.w	fp, #0
 8006006:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800600a:	9307      	str	r3, [sp, #28]
 800600c:	f8da 3000 	ldr.w	r3, [sl]
 8006010:	3302      	adds	r3, #2
 8006012:	461f      	mov	r7, r3
 8006014:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006018:	2830      	cmp	r0, #48	; 0x30
 800601a:	d06c      	beq.n	80060f6 <__gethex+0x118>
 800601c:	f7ff ffca 	bl	8005fb4 <__hexdig_fun>
 8006020:	4604      	mov	r4, r0
 8006022:	2800      	cmp	r0, #0
 8006024:	d16a      	bne.n	80060fc <__gethex+0x11e>
 8006026:	9a01      	ldr	r2, [sp, #4]
 8006028:	9903      	ldr	r1, [sp, #12]
 800602a:	4638      	mov	r0, r7
 800602c:	f001 f8fe 	bl	800722c <strncmp>
 8006030:	2800      	cmp	r0, #0
 8006032:	d166      	bne.n	8006102 <__gethex+0x124>
 8006034:	9b01      	ldr	r3, [sp, #4]
 8006036:	5cf8      	ldrb	r0, [r7, r3]
 8006038:	18fe      	adds	r6, r7, r3
 800603a:	f7ff ffbb 	bl	8005fb4 <__hexdig_fun>
 800603e:	2800      	cmp	r0, #0
 8006040:	d062      	beq.n	8006108 <__gethex+0x12a>
 8006042:	4633      	mov	r3, r6
 8006044:	7818      	ldrb	r0, [r3, #0]
 8006046:	2830      	cmp	r0, #48	; 0x30
 8006048:	461f      	mov	r7, r3
 800604a:	f103 0301 	add.w	r3, r3, #1
 800604e:	d0f9      	beq.n	8006044 <__gethex+0x66>
 8006050:	f7ff ffb0 	bl	8005fb4 <__hexdig_fun>
 8006054:	fab0 f580 	clz	r5, r0
 8006058:	096d      	lsrs	r5, r5, #5
 800605a:	4634      	mov	r4, r6
 800605c:	f04f 0b01 	mov.w	fp, #1
 8006060:	463a      	mov	r2, r7
 8006062:	4616      	mov	r6, r2
 8006064:	3201      	adds	r2, #1
 8006066:	7830      	ldrb	r0, [r6, #0]
 8006068:	f7ff ffa4 	bl	8005fb4 <__hexdig_fun>
 800606c:	2800      	cmp	r0, #0
 800606e:	d1f8      	bne.n	8006062 <__gethex+0x84>
 8006070:	9a01      	ldr	r2, [sp, #4]
 8006072:	9903      	ldr	r1, [sp, #12]
 8006074:	4630      	mov	r0, r6
 8006076:	f001 f8d9 	bl	800722c <strncmp>
 800607a:	b950      	cbnz	r0, 8006092 <__gethex+0xb4>
 800607c:	b954      	cbnz	r4, 8006094 <__gethex+0xb6>
 800607e:	9b01      	ldr	r3, [sp, #4]
 8006080:	18f4      	adds	r4, r6, r3
 8006082:	4622      	mov	r2, r4
 8006084:	4616      	mov	r6, r2
 8006086:	3201      	adds	r2, #1
 8006088:	7830      	ldrb	r0, [r6, #0]
 800608a:	f7ff ff93 	bl	8005fb4 <__hexdig_fun>
 800608e:	2800      	cmp	r0, #0
 8006090:	d1f8      	bne.n	8006084 <__gethex+0xa6>
 8006092:	b10c      	cbz	r4, 8006098 <__gethex+0xba>
 8006094:	1ba4      	subs	r4, r4, r6
 8006096:	00a4      	lsls	r4, r4, #2
 8006098:	7833      	ldrb	r3, [r6, #0]
 800609a:	2b50      	cmp	r3, #80	; 0x50
 800609c:	d001      	beq.n	80060a2 <__gethex+0xc4>
 800609e:	2b70      	cmp	r3, #112	; 0x70
 80060a0:	d140      	bne.n	8006124 <__gethex+0x146>
 80060a2:	7873      	ldrb	r3, [r6, #1]
 80060a4:	2b2b      	cmp	r3, #43	; 0x2b
 80060a6:	d031      	beq.n	800610c <__gethex+0x12e>
 80060a8:	2b2d      	cmp	r3, #45	; 0x2d
 80060aa:	d033      	beq.n	8006114 <__gethex+0x136>
 80060ac:	1c71      	adds	r1, r6, #1
 80060ae:	f04f 0900 	mov.w	r9, #0
 80060b2:	7808      	ldrb	r0, [r1, #0]
 80060b4:	f7ff ff7e 	bl	8005fb4 <__hexdig_fun>
 80060b8:	1e43      	subs	r3, r0, #1
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b18      	cmp	r3, #24
 80060be:	d831      	bhi.n	8006124 <__gethex+0x146>
 80060c0:	f1a0 0210 	sub.w	r2, r0, #16
 80060c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80060c8:	f7ff ff74 	bl	8005fb4 <__hexdig_fun>
 80060cc:	1e43      	subs	r3, r0, #1
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b18      	cmp	r3, #24
 80060d2:	d922      	bls.n	800611a <__gethex+0x13c>
 80060d4:	f1b9 0f00 	cmp.w	r9, #0
 80060d8:	d000      	beq.n	80060dc <__gethex+0xfe>
 80060da:	4252      	negs	r2, r2
 80060dc:	4414      	add	r4, r2
 80060de:	f8ca 1000 	str.w	r1, [sl]
 80060e2:	b30d      	cbz	r5, 8006128 <__gethex+0x14a>
 80060e4:	f1bb 0f00 	cmp.w	fp, #0
 80060e8:	bf0c      	ite	eq
 80060ea:	2706      	moveq	r7, #6
 80060ec:	2700      	movne	r7, #0
 80060ee:	4638      	mov	r0, r7
 80060f0:	b00b      	add	sp, #44	; 0x2c
 80060f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f6:	f10b 0b01 	add.w	fp, fp, #1
 80060fa:	e78a      	b.n	8006012 <__gethex+0x34>
 80060fc:	2500      	movs	r5, #0
 80060fe:	462c      	mov	r4, r5
 8006100:	e7ae      	b.n	8006060 <__gethex+0x82>
 8006102:	463e      	mov	r6, r7
 8006104:	2501      	movs	r5, #1
 8006106:	e7c7      	b.n	8006098 <__gethex+0xba>
 8006108:	4604      	mov	r4, r0
 800610a:	e7fb      	b.n	8006104 <__gethex+0x126>
 800610c:	f04f 0900 	mov.w	r9, #0
 8006110:	1cb1      	adds	r1, r6, #2
 8006112:	e7ce      	b.n	80060b2 <__gethex+0xd4>
 8006114:	f04f 0901 	mov.w	r9, #1
 8006118:	e7fa      	b.n	8006110 <__gethex+0x132>
 800611a:	230a      	movs	r3, #10
 800611c:	fb03 0202 	mla	r2, r3, r2, r0
 8006120:	3a10      	subs	r2, #16
 8006122:	e7cf      	b.n	80060c4 <__gethex+0xe6>
 8006124:	4631      	mov	r1, r6
 8006126:	e7da      	b.n	80060de <__gethex+0x100>
 8006128:	1bf3      	subs	r3, r6, r7
 800612a:	3b01      	subs	r3, #1
 800612c:	4629      	mov	r1, r5
 800612e:	2b07      	cmp	r3, #7
 8006130:	dc49      	bgt.n	80061c6 <__gethex+0x1e8>
 8006132:	9802      	ldr	r0, [sp, #8]
 8006134:	f000 fa63 	bl	80065fe <_Balloc>
 8006138:	9b01      	ldr	r3, [sp, #4]
 800613a:	f100 0914 	add.w	r9, r0, #20
 800613e:	f04f 0b00 	mov.w	fp, #0
 8006142:	f1c3 0301 	rsb	r3, r3, #1
 8006146:	4605      	mov	r5, r0
 8006148:	f8cd 9010 	str.w	r9, [sp, #16]
 800614c:	46da      	mov	sl, fp
 800614e:	9308      	str	r3, [sp, #32]
 8006150:	42b7      	cmp	r7, r6
 8006152:	d33b      	bcc.n	80061cc <__gethex+0x1ee>
 8006154:	9804      	ldr	r0, [sp, #16]
 8006156:	f840 ab04 	str.w	sl, [r0], #4
 800615a:	eba0 0009 	sub.w	r0, r0, r9
 800615e:	1080      	asrs	r0, r0, #2
 8006160:	6128      	str	r0, [r5, #16]
 8006162:	0147      	lsls	r7, r0, #5
 8006164:	4650      	mov	r0, sl
 8006166:	f000 fb0e 	bl	8006786 <__hi0bits>
 800616a:	f8d8 6000 	ldr.w	r6, [r8]
 800616e:	1a3f      	subs	r7, r7, r0
 8006170:	42b7      	cmp	r7, r6
 8006172:	dd64      	ble.n	800623e <__gethex+0x260>
 8006174:	1bbf      	subs	r7, r7, r6
 8006176:	4639      	mov	r1, r7
 8006178:	4628      	mov	r0, r5
 800617a:	f000 fe1d 	bl	8006db8 <__any_on>
 800617e:	4682      	mov	sl, r0
 8006180:	b178      	cbz	r0, 80061a2 <__gethex+0x1c4>
 8006182:	1e7b      	subs	r3, r7, #1
 8006184:	1159      	asrs	r1, r3, #5
 8006186:	f003 021f 	and.w	r2, r3, #31
 800618a:	f04f 0a01 	mov.w	sl, #1
 800618e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006192:	fa0a f202 	lsl.w	r2, sl, r2
 8006196:	420a      	tst	r2, r1
 8006198:	d003      	beq.n	80061a2 <__gethex+0x1c4>
 800619a:	4553      	cmp	r3, sl
 800619c:	dc46      	bgt.n	800622c <__gethex+0x24e>
 800619e:	f04f 0a02 	mov.w	sl, #2
 80061a2:	4639      	mov	r1, r7
 80061a4:	4628      	mov	r0, r5
 80061a6:	f7ff fecb 	bl	8005f40 <rshift>
 80061aa:	443c      	add	r4, r7
 80061ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80061b0:	42a3      	cmp	r3, r4
 80061b2:	da52      	bge.n	800625a <__gethex+0x27c>
 80061b4:	4629      	mov	r1, r5
 80061b6:	9802      	ldr	r0, [sp, #8]
 80061b8:	f000 fa55 	bl	8006666 <_Bfree>
 80061bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80061be:	2300      	movs	r3, #0
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	27a3      	movs	r7, #163	; 0xa3
 80061c4:	e793      	b.n	80060ee <__gethex+0x110>
 80061c6:	3101      	adds	r1, #1
 80061c8:	105b      	asrs	r3, r3, #1
 80061ca:	e7b0      	b.n	800612e <__gethex+0x150>
 80061cc:	1e73      	subs	r3, r6, #1
 80061ce:	9305      	str	r3, [sp, #20]
 80061d0:	9a07      	ldr	r2, [sp, #28]
 80061d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d018      	beq.n	800620c <__gethex+0x22e>
 80061da:	f1bb 0f20 	cmp.w	fp, #32
 80061de:	d107      	bne.n	80061f0 <__gethex+0x212>
 80061e0:	9b04      	ldr	r3, [sp, #16]
 80061e2:	f8c3 a000 	str.w	sl, [r3]
 80061e6:	3304      	adds	r3, #4
 80061e8:	f04f 0a00 	mov.w	sl, #0
 80061ec:	9304      	str	r3, [sp, #16]
 80061ee:	46d3      	mov	fp, sl
 80061f0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80061f4:	f7ff fede 	bl	8005fb4 <__hexdig_fun>
 80061f8:	f000 000f 	and.w	r0, r0, #15
 80061fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8006200:	ea4a 0a00 	orr.w	sl, sl, r0
 8006204:	f10b 0b04 	add.w	fp, fp, #4
 8006208:	9b05      	ldr	r3, [sp, #20]
 800620a:	e00d      	b.n	8006228 <__gethex+0x24a>
 800620c:	9b05      	ldr	r3, [sp, #20]
 800620e:	9a08      	ldr	r2, [sp, #32]
 8006210:	4413      	add	r3, r2
 8006212:	42bb      	cmp	r3, r7
 8006214:	d3e1      	bcc.n	80061da <__gethex+0x1fc>
 8006216:	4618      	mov	r0, r3
 8006218:	9a01      	ldr	r2, [sp, #4]
 800621a:	9903      	ldr	r1, [sp, #12]
 800621c:	9309      	str	r3, [sp, #36]	; 0x24
 800621e:	f001 f805 	bl	800722c <strncmp>
 8006222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006224:	2800      	cmp	r0, #0
 8006226:	d1d8      	bne.n	80061da <__gethex+0x1fc>
 8006228:	461e      	mov	r6, r3
 800622a:	e791      	b.n	8006150 <__gethex+0x172>
 800622c:	1eb9      	subs	r1, r7, #2
 800622e:	4628      	mov	r0, r5
 8006230:	f000 fdc2 	bl	8006db8 <__any_on>
 8006234:	2800      	cmp	r0, #0
 8006236:	d0b2      	beq.n	800619e <__gethex+0x1c0>
 8006238:	f04f 0a03 	mov.w	sl, #3
 800623c:	e7b1      	b.n	80061a2 <__gethex+0x1c4>
 800623e:	da09      	bge.n	8006254 <__gethex+0x276>
 8006240:	1bf7      	subs	r7, r6, r7
 8006242:	4629      	mov	r1, r5
 8006244:	463a      	mov	r2, r7
 8006246:	9802      	ldr	r0, [sp, #8]
 8006248:	f000 fbd8 	bl	80069fc <__lshift>
 800624c:	1be4      	subs	r4, r4, r7
 800624e:	4605      	mov	r5, r0
 8006250:	f100 0914 	add.w	r9, r0, #20
 8006254:	f04f 0a00 	mov.w	sl, #0
 8006258:	e7a8      	b.n	80061ac <__gethex+0x1ce>
 800625a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800625e:	42a0      	cmp	r0, r4
 8006260:	dd6a      	ble.n	8006338 <__gethex+0x35a>
 8006262:	1b04      	subs	r4, r0, r4
 8006264:	42a6      	cmp	r6, r4
 8006266:	dc2e      	bgt.n	80062c6 <__gethex+0x2e8>
 8006268:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800626c:	2b02      	cmp	r3, #2
 800626e:	d022      	beq.n	80062b6 <__gethex+0x2d8>
 8006270:	2b03      	cmp	r3, #3
 8006272:	d024      	beq.n	80062be <__gethex+0x2e0>
 8006274:	2b01      	cmp	r3, #1
 8006276:	d115      	bne.n	80062a4 <__gethex+0x2c6>
 8006278:	42a6      	cmp	r6, r4
 800627a:	d113      	bne.n	80062a4 <__gethex+0x2c6>
 800627c:	2e01      	cmp	r6, #1
 800627e:	dc0b      	bgt.n	8006298 <__gethex+0x2ba>
 8006280:	9a06      	ldr	r2, [sp, #24]
 8006282:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	2301      	movs	r3, #1
 800628a:	612b      	str	r3, [r5, #16]
 800628c:	f8c9 3000 	str.w	r3, [r9]
 8006290:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006292:	2762      	movs	r7, #98	; 0x62
 8006294:	601d      	str	r5, [r3, #0]
 8006296:	e72a      	b.n	80060ee <__gethex+0x110>
 8006298:	1e71      	subs	r1, r6, #1
 800629a:	4628      	mov	r0, r5
 800629c:	f000 fd8c 	bl	8006db8 <__any_on>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d1ed      	bne.n	8006280 <__gethex+0x2a2>
 80062a4:	4629      	mov	r1, r5
 80062a6:	9802      	ldr	r0, [sp, #8]
 80062a8:	f000 f9dd 	bl	8006666 <_Bfree>
 80062ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80062ae:	2300      	movs	r3, #0
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	2750      	movs	r7, #80	; 0x50
 80062b4:	e71b      	b.n	80060ee <__gethex+0x110>
 80062b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0e1      	beq.n	8006280 <__gethex+0x2a2>
 80062bc:	e7f2      	b.n	80062a4 <__gethex+0x2c6>
 80062be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1dd      	bne.n	8006280 <__gethex+0x2a2>
 80062c4:	e7ee      	b.n	80062a4 <__gethex+0x2c6>
 80062c6:	1e67      	subs	r7, r4, #1
 80062c8:	f1ba 0f00 	cmp.w	sl, #0
 80062cc:	d131      	bne.n	8006332 <__gethex+0x354>
 80062ce:	b127      	cbz	r7, 80062da <__gethex+0x2fc>
 80062d0:	4639      	mov	r1, r7
 80062d2:	4628      	mov	r0, r5
 80062d4:	f000 fd70 	bl	8006db8 <__any_on>
 80062d8:	4682      	mov	sl, r0
 80062da:	117a      	asrs	r2, r7, #5
 80062dc:	2301      	movs	r3, #1
 80062de:	f007 071f 	and.w	r7, r7, #31
 80062e2:	fa03 f707 	lsl.w	r7, r3, r7
 80062e6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80062ea:	4621      	mov	r1, r4
 80062ec:	421f      	tst	r7, r3
 80062ee:	4628      	mov	r0, r5
 80062f0:	bf18      	it	ne
 80062f2:	f04a 0a02 	orrne.w	sl, sl, #2
 80062f6:	1b36      	subs	r6, r6, r4
 80062f8:	f7ff fe22 	bl	8005f40 <rshift>
 80062fc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006300:	2702      	movs	r7, #2
 8006302:	f1ba 0f00 	cmp.w	sl, #0
 8006306:	d048      	beq.n	800639a <__gethex+0x3bc>
 8006308:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800630c:	2b02      	cmp	r3, #2
 800630e:	d015      	beq.n	800633c <__gethex+0x35e>
 8006310:	2b03      	cmp	r3, #3
 8006312:	d017      	beq.n	8006344 <__gethex+0x366>
 8006314:	2b01      	cmp	r3, #1
 8006316:	d109      	bne.n	800632c <__gethex+0x34e>
 8006318:	f01a 0f02 	tst.w	sl, #2
 800631c:	d006      	beq.n	800632c <__gethex+0x34e>
 800631e:	f8d9 3000 	ldr.w	r3, [r9]
 8006322:	ea4a 0a03 	orr.w	sl, sl, r3
 8006326:	f01a 0f01 	tst.w	sl, #1
 800632a:	d10e      	bne.n	800634a <__gethex+0x36c>
 800632c:	f047 0710 	orr.w	r7, r7, #16
 8006330:	e033      	b.n	800639a <__gethex+0x3bc>
 8006332:	f04f 0a01 	mov.w	sl, #1
 8006336:	e7d0      	b.n	80062da <__gethex+0x2fc>
 8006338:	2701      	movs	r7, #1
 800633a:	e7e2      	b.n	8006302 <__gethex+0x324>
 800633c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800633e:	f1c3 0301 	rsb	r3, r3, #1
 8006342:	9315      	str	r3, [sp, #84]	; 0x54
 8006344:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0f0      	beq.n	800632c <__gethex+0x34e>
 800634a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800634e:	f105 0314 	add.w	r3, r5, #20
 8006352:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006356:	eb03 010a 	add.w	r1, r3, sl
 800635a:	f04f 0c00 	mov.w	ip, #0
 800635e:	4618      	mov	r0, r3
 8006360:	f853 2b04 	ldr.w	r2, [r3], #4
 8006364:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006368:	d01c      	beq.n	80063a4 <__gethex+0x3c6>
 800636a:	3201      	adds	r2, #1
 800636c:	6002      	str	r2, [r0, #0]
 800636e:	2f02      	cmp	r7, #2
 8006370:	f105 0314 	add.w	r3, r5, #20
 8006374:	d138      	bne.n	80063e8 <__gethex+0x40a>
 8006376:	f8d8 2000 	ldr.w	r2, [r8]
 800637a:	3a01      	subs	r2, #1
 800637c:	42b2      	cmp	r2, r6
 800637e:	d10a      	bne.n	8006396 <__gethex+0x3b8>
 8006380:	1171      	asrs	r1, r6, #5
 8006382:	2201      	movs	r2, #1
 8006384:	f006 061f 	and.w	r6, r6, #31
 8006388:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800638c:	fa02 f606 	lsl.w	r6, r2, r6
 8006390:	421e      	tst	r6, r3
 8006392:	bf18      	it	ne
 8006394:	4617      	movne	r7, r2
 8006396:	f047 0720 	orr.w	r7, r7, #32
 800639a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800639c:	601d      	str	r5, [r3, #0]
 800639e:	9b06      	ldr	r3, [sp, #24]
 80063a0:	601c      	str	r4, [r3, #0]
 80063a2:	e6a4      	b.n	80060ee <__gethex+0x110>
 80063a4:	4299      	cmp	r1, r3
 80063a6:	f843 cc04 	str.w	ip, [r3, #-4]
 80063aa:	d8d8      	bhi.n	800635e <__gethex+0x380>
 80063ac:	68ab      	ldr	r3, [r5, #8]
 80063ae:	4599      	cmp	r9, r3
 80063b0:	db12      	blt.n	80063d8 <__gethex+0x3fa>
 80063b2:	6869      	ldr	r1, [r5, #4]
 80063b4:	9802      	ldr	r0, [sp, #8]
 80063b6:	3101      	adds	r1, #1
 80063b8:	f000 f921 	bl	80065fe <_Balloc>
 80063bc:	692a      	ldr	r2, [r5, #16]
 80063be:	3202      	adds	r2, #2
 80063c0:	f105 010c 	add.w	r1, r5, #12
 80063c4:	4683      	mov	fp, r0
 80063c6:	0092      	lsls	r2, r2, #2
 80063c8:	300c      	adds	r0, #12
 80063ca:	f000 f90d 	bl	80065e8 <memcpy>
 80063ce:	4629      	mov	r1, r5
 80063d0:	9802      	ldr	r0, [sp, #8]
 80063d2:	f000 f948 	bl	8006666 <_Bfree>
 80063d6:	465d      	mov	r5, fp
 80063d8:	692b      	ldr	r3, [r5, #16]
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80063e0:	612a      	str	r2, [r5, #16]
 80063e2:	2201      	movs	r2, #1
 80063e4:	615a      	str	r2, [r3, #20]
 80063e6:	e7c2      	b.n	800636e <__gethex+0x390>
 80063e8:	692a      	ldr	r2, [r5, #16]
 80063ea:	454a      	cmp	r2, r9
 80063ec:	dd0b      	ble.n	8006406 <__gethex+0x428>
 80063ee:	2101      	movs	r1, #1
 80063f0:	4628      	mov	r0, r5
 80063f2:	f7ff fda5 	bl	8005f40 <rshift>
 80063f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80063fa:	3401      	adds	r4, #1
 80063fc:	42a3      	cmp	r3, r4
 80063fe:	f6ff aed9 	blt.w	80061b4 <__gethex+0x1d6>
 8006402:	2701      	movs	r7, #1
 8006404:	e7c7      	b.n	8006396 <__gethex+0x3b8>
 8006406:	f016 061f 	ands.w	r6, r6, #31
 800640a:	d0fa      	beq.n	8006402 <__gethex+0x424>
 800640c:	449a      	add	sl, r3
 800640e:	f1c6 0620 	rsb	r6, r6, #32
 8006412:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006416:	f000 f9b6 	bl	8006786 <__hi0bits>
 800641a:	42b0      	cmp	r0, r6
 800641c:	dbe7      	blt.n	80063ee <__gethex+0x410>
 800641e:	e7f0      	b.n	8006402 <__gethex+0x424>

08006420 <L_shift>:
 8006420:	f1c2 0208 	rsb	r2, r2, #8
 8006424:	0092      	lsls	r2, r2, #2
 8006426:	b570      	push	{r4, r5, r6, lr}
 8006428:	f1c2 0620 	rsb	r6, r2, #32
 800642c:	6843      	ldr	r3, [r0, #4]
 800642e:	6804      	ldr	r4, [r0, #0]
 8006430:	fa03 f506 	lsl.w	r5, r3, r6
 8006434:	432c      	orrs	r4, r5
 8006436:	40d3      	lsrs	r3, r2
 8006438:	6004      	str	r4, [r0, #0]
 800643a:	f840 3f04 	str.w	r3, [r0, #4]!
 800643e:	4288      	cmp	r0, r1
 8006440:	d3f4      	bcc.n	800642c <L_shift+0xc>
 8006442:	bd70      	pop	{r4, r5, r6, pc}

08006444 <__match>:
 8006444:	b530      	push	{r4, r5, lr}
 8006446:	6803      	ldr	r3, [r0, #0]
 8006448:	3301      	adds	r3, #1
 800644a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800644e:	b914      	cbnz	r4, 8006456 <__match+0x12>
 8006450:	6003      	str	r3, [r0, #0]
 8006452:	2001      	movs	r0, #1
 8006454:	bd30      	pop	{r4, r5, pc}
 8006456:	f813 2b01 	ldrb.w	r2, [r3], #1
 800645a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800645e:	2d19      	cmp	r5, #25
 8006460:	bf98      	it	ls
 8006462:	3220      	addls	r2, #32
 8006464:	42a2      	cmp	r2, r4
 8006466:	d0f0      	beq.n	800644a <__match+0x6>
 8006468:	2000      	movs	r0, #0
 800646a:	e7f3      	b.n	8006454 <__match+0x10>

0800646c <__hexnan>:
 800646c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006470:	680b      	ldr	r3, [r1, #0]
 8006472:	6801      	ldr	r1, [r0, #0]
 8006474:	115f      	asrs	r7, r3, #5
 8006476:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800647a:	f013 031f 	ands.w	r3, r3, #31
 800647e:	b087      	sub	sp, #28
 8006480:	bf18      	it	ne
 8006482:	3704      	addne	r7, #4
 8006484:	2500      	movs	r5, #0
 8006486:	1f3e      	subs	r6, r7, #4
 8006488:	4682      	mov	sl, r0
 800648a:	4690      	mov	r8, r2
 800648c:	9301      	str	r3, [sp, #4]
 800648e:	f847 5c04 	str.w	r5, [r7, #-4]
 8006492:	46b1      	mov	r9, r6
 8006494:	4634      	mov	r4, r6
 8006496:	9502      	str	r5, [sp, #8]
 8006498:	46ab      	mov	fp, r5
 800649a:	784a      	ldrb	r2, [r1, #1]
 800649c:	1c4b      	adds	r3, r1, #1
 800649e:	9303      	str	r3, [sp, #12]
 80064a0:	b342      	cbz	r2, 80064f4 <__hexnan+0x88>
 80064a2:	4610      	mov	r0, r2
 80064a4:	9105      	str	r1, [sp, #20]
 80064a6:	9204      	str	r2, [sp, #16]
 80064a8:	f7ff fd84 	bl	8005fb4 <__hexdig_fun>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d143      	bne.n	8006538 <__hexnan+0xcc>
 80064b0:	9a04      	ldr	r2, [sp, #16]
 80064b2:	9905      	ldr	r1, [sp, #20]
 80064b4:	2a20      	cmp	r2, #32
 80064b6:	d818      	bhi.n	80064ea <__hexnan+0x7e>
 80064b8:	9b02      	ldr	r3, [sp, #8]
 80064ba:	459b      	cmp	fp, r3
 80064bc:	dd13      	ble.n	80064e6 <__hexnan+0x7a>
 80064be:	454c      	cmp	r4, r9
 80064c0:	d206      	bcs.n	80064d0 <__hexnan+0x64>
 80064c2:	2d07      	cmp	r5, #7
 80064c4:	dc04      	bgt.n	80064d0 <__hexnan+0x64>
 80064c6:	462a      	mov	r2, r5
 80064c8:	4649      	mov	r1, r9
 80064ca:	4620      	mov	r0, r4
 80064cc:	f7ff ffa8 	bl	8006420 <L_shift>
 80064d0:	4544      	cmp	r4, r8
 80064d2:	d944      	bls.n	800655e <__hexnan+0xf2>
 80064d4:	2300      	movs	r3, #0
 80064d6:	f1a4 0904 	sub.w	r9, r4, #4
 80064da:	f844 3c04 	str.w	r3, [r4, #-4]
 80064de:	f8cd b008 	str.w	fp, [sp, #8]
 80064e2:	464c      	mov	r4, r9
 80064e4:	461d      	mov	r5, r3
 80064e6:	9903      	ldr	r1, [sp, #12]
 80064e8:	e7d7      	b.n	800649a <__hexnan+0x2e>
 80064ea:	2a29      	cmp	r2, #41	; 0x29
 80064ec:	d14a      	bne.n	8006584 <__hexnan+0x118>
 80064ee:	3102      	adds	r1, #2
 80064f0:	f8ca 1000 	str.w	r1, [sl]
 80064f4:	f1bb 0f00 	cmp.w	fp, #0
 80064f8:	d044      	beq.n	8006584 <__hexnan+0x118>
 80064fa:	454c      	cmp	r4, r9
 80064fc:	d206      	bcs.n	800650c <__hexnan+0xa0>
 80064fe:	2d07      	cmp	r5, #7
 8006500:	dc04      	bgt.n	800650c <__hexnan+0xa0>
 8006502:	462a      	mov	r2, r5
 8006504:	4649      	mov	r1, r9
 8006506:	4620      	mov	r0, r4
 8006508:	f7ff ff8a 	bl	8006420 <L_shift>
 800650c:	4544      	cmp	r4, r8
 800650e:	d928      	bls.n	8006562 <__hexnan+0xf6>
 8006510:	4643      	mov	r3, r8
 8006512:	f854 2b04 	ldr.w	r2, [r4], #4
 8006516:	f843 2b04 	str.w	r2, [r3], #4
 800651a:	42a6      	cmp	r6, r4
 800651c:	d2f9      	bcs.n	8006512 <__hexnan+0xa6>
 800651e:	2200      	movs	r2, #0
 8006520:	f843 2b04 	str.w	r2, [r3], #4
 8006524:	429e      	cmp	r6, r3
 8006526:	d2fb      	bcs.n	8006520 <__hexnan+0xb4>
 8006528:	6833      	ldr	r3, [r6, #0]
 800652a:	b91b      	cbnz	r3, 8006534 <__hexnan+0xc8>
 800652c:	4546      	cmp	r6, r8
 800652e:	d127      	bne.n	8006580 <__hexnan+0x114>
 8006530:	2301      	movs	r3, #1
 8006532:	6033      	str	r3, [r6, #0]
 8006534:	2005      	movs	r0, #5
 8006536:	e026      	b.n	8006586 <__hexnan+0x11a>
 8006538:	3501      	adds	r5, #1
 800653a:	2d08      	cmp	r5, #8
 800653c:	f10b 0b01 	add.w	fp, fp, #1
 8006540:	dd06      	ble.n	8006550 <__hexnan+0xe4>
 8006542:	4544      	cmp	r4, r8
 8006544:	d9cf      	bls.n	80064e6 <__hexnan+0x7a>
 8006546:	2300      	movs	r3, #0
 8006548:	f844 3c04 	str.w	r3, [r4, #-4]
 800654c:	2501      	movs	r5, #1
 800654e:	3c04      	subs	r4, #4
 8006550:	6822      	ldr	r2, [r4, #0]
 8006552:	f000 000f 	and.w	r0, r0, #15
 8006556:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800655a:	6020      	str	r0, [r4, #0]
 800655c:	e7c3      	b.n	80064e6 <__hexnan+0x7a>
 800655e:	2508      	movs	r5, #8
 8006560:	e7c1      	b.n	80064e6 <__hexnan+0x7a>
 8006562:	9b01      	ldr	r3, [sp, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0df      	beq.n	8006528 <__hexnan+0xbc>
 8006568:	f04f 32ff 	mov.w	r2, #4294967295
 800656c:	f1c3 0320 	rsb	r3, r3, #32
 8006570:	fa22 f303 	lsr.w	r3, r2, r3
 8006574:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006578:	401a      	ands	r2, r3
 800657a:	f847 2c04 	str.w	r2, [r7, #-4]
 800657e:	e7d3      	b.n	8006528 <__hexnan+0xbc>
 8006580:	3e04      	subs	r6, #4
 8006582:	e7d1      	b.n	8006528 <__hexnan+0xbc>
 8006584:	2004      	movs	r0, #4
 8006586:	b007      	add	sp, #28
 8006588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800658c <__locale_ctype_ptr_l>:
 800658c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006590:	4770      	bx	lr

08006592 <__localeconv_l>:
 8006592:	30f0      	adds	r0, #240	; 0xf0
 8006594:	4770      	bx	lr
	...

08006598 <_localeconv_r>:
 8006598:	4b04      	ldr	r3, [pc, #16]	; (80065ac <_localeconv_r+0x14>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6a18      	ldr	r0, [r3, #32]
 800659e:	4b04      	ldr	r3, [pc, #16]	; (80065b0 <_localeconv_r+0x18>)
 80065a0:	2800      	cmp	r0, #0
 80065a2:	bf08      	it	eq
 80065a4:	4618      	moveq	r0, r3
 80065a6:	30f0      	adds	r0, #240	; 0xf0
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	200000f4 	.word	0x200000f4
 80065b0:	20000158 	.word	0x20000158

080065b4 <malloc>:
 80065b4:	4b02      	ldr	r3, [pc, #8]	; (80065c0 <malloc+0xc>)
 80065b6:	4601      	mov	r1, r0
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	f000 bc7b 	b.w	8006eb4 <_malloc_r>
 80065be:	bf00      	nop
 80065c0:	200000f4 	.word	0x200000f4

080065c4 <__ascii_mbtowc>:
 80065c4:	b082      	sub	sp, #8
 80065c6:	b901      	cbnz	r1, 80065ca <__ascii_mbtowc+0x6>
 80065c8:	a901      	add	r1, sp, #4
 80065ca:	b142      	cbz	r2, 80065de <__ascii_mbtowc+0x1a>
 80065cc:	b14b      	cbz	r3, 80065e2 <__ascii_mbtowc+0x1e>
 80065ce:	7813      	ldrb	r3, [r2, #0]
 80065d0:	600b      	str	r3, [r1, #0]
 80065d2:	7812      	ldrb	r2, [r2, #0]
 80065d4:	1c10      	adds	r0, r2, #0
 80065d6:	bf18      	it	ne
 80065d8:	2001      	movne	r0, #1
 80065da:	b002      	add	sp, #8
 80065dc:	4770      	bx	lr
 80065de:	4610      	mov	r0, r2
 80065e0:	e7fb      	b.n	80065da <__ascii_mbtowc+0x16>
 80065e2:	f06f 0001 	mvn.w	r0, #1
 80065e6:	e7f8      	b.n	80065da <__ascii_mbtowc+0x16>

080065e8 <memcpy>:
 80065e8:	b510      	push	{r4, lr}
 80065ea:	1e43      	subs	r3, r0, #1
 80065ec:	440a      	add	r2, r1
 80065ee:	4291      	cmp	r1, r2
 80065f0:	d100      	bne.n	80065f4 <memcpy+0xc>
 80065f2:	bd10      	pop	{r4, pc}
 80065f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065fc:	e7f7      	b.n	80065ee <memcpy+0x6>

080065fe <_Balloc>:
 80065fe:	b570      	push	{r4, r5, r6, lr}
 8006600:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006602:	4604      	mov	r4, r0
 8006604:	460e      	mov	r6, r1
 8006606:	b93d      	cbnz	r5, 8006618 <_Balloc+0x1a>
 8006608:	2010      	movs	r0, #16
 800660a:	f7ff ffd3 	bl	80065b4 <malloc>
 800660e:	6260      	str	r0, [r4, #36]	; 0x24
 8006610:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006614:	6005      	str	r5, [r0, #0]
 8006616:	60c5      	str	r5, [r0, #12]
 8006618:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800661a:	68eb      	ldr	r3, [r5, #12]
 800661c:	b183      	cbz	r3, 8006640 <_Balloc+0x42>
 800661e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006626:	b9b8      	cbnz	r0, 8006658 <_Balloc+0x5a>
 8006628:	2101      	movs	r1, #1
 800662a:	fa01 f506 	lsl.w	r5, r1, r6
 800662e:	1d6a      	adds	r2, r5, #5
 8006630:	0092      	lsls	r2, r2, #2
 8006632:	4620      	mov	r0, r4
 8006634:	f000 fbe1 	bl	8006dfa <_calloc_r>
 8006638:	b160      	cbz	r0, 8006654 <_Balloc+0x56>
 800663a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800663e:	e00e      	b.n	800665e <_Balloc+0x60>
 8006640:	2221      	movs	r2, #33	; 0x21
 8006642:	2104      	movs	r1, #4
 8006644:	4620      	mov	r0, r4
 8006646:	f000 fbd8 	bl	8006dfa <_calloc_r>
 800664a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800664c:	60e8      	str	r0, [r5, #12]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e4      	bne.n	800661e <_Balloc+0x20>
 8006654:	2000      	movs	r0, #0
 8006656:	bd70      	pop	{r4, r5, r6, pc}
 8006658:	6802      	ldr	r2, [r0, #0]
 800665a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800665e:	2300      	movs	r3, #0
 8006660:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006664:	e7f7      	b.n	8006656 <_Balloc+0x58>

08006666 <_Bfree>:
 8006666:	b570      	push	{r4, r5, r6, lr}
 8006668:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800666a:	4606      	mov	r6, r0
 800666c:	460d      	mov	r5, r1
 800666e:	b93c      	cbnz	r4, 8006680 <_Bfree+0x1a>
 8006670:	2010      	movs	r0, #16
 8006672:	f7ff ff9f 	bl	80065b4 <malloc>
 8006676:	6270      	str	r0, [r6, #36]	; 0x24
 8006678:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800667c:	6004      	str	r4, [r0, #0]
 800667e:	60c4      	str	r4, [r0, #12]
 8006680:	b13d      	cbz	r5, 8006692 <_Bfree+0x2c>
 8006682:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006684:	686a      	ldr	r2, [r5, #4]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800668c:	6029      	str	r1, [r5, #0]
 800668e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006692:	bd70      	pop	{r4, r5, r6, pc}

08006694 <__multadd>:
 8006694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006698:	690d      	ldr	r5, [r1, #16]
 800669a:	461f      	mov	r7, r3
 800669c:	4606      	mov	r6, r0
 800669e:	460c      	mov	r4, r1
 80066a0:	f101 0c14 	add.w	ip, r1, #20
 80066a4:	2300      	movs	r3, #0
 80066a6:	f8dc 0000 	ldr.w	r0, [ip]
 80066aa:	b281      	uxth	r1, r0
 80066ac:	fb02 7101 	mla	r1, r2, r1, r7
 80066b0:	0c0f      	lsrs	r7, r1, #16
 80066b2:	0c00      	lsrs	r0, r0, #16
 80066b4:	fb02 7000 	mla	r0, r2, r0, r7
 80066b8:	b289      	uxth	r1, r1
 80066ba:	3301      	adds	r3, #1
 80066bc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80066c0:	429d      	cmp	r5, r3
 80066c2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80066c6:	f84c 1b04 	str.w	r1, [ip], #4
 80066ca:	dcec      	bgt.n	80066a6 <__multadd+0x12>
 80066cc:	b1d7      	cbz	r7, 8006704 <__multadd+0x70>
 80066ce:	68a3      	ldr	r3, [r4, #8]
 80066d0:	42ab      	cmp	r3, r5
 80066d2:	dc12      	bgt.n	80066fa <__multadd+0x66>
 80066d4:	6861      	ldr	r1, [r4, #4]
 80066d6:	4630      	mov	r0, r6
 80066d8:	3101      	adds	r1, #1
 80066da:	f7ff ff90 	bl	80065fe <_Balloc>
 80066de:	6922      	ldr	r2, [r4, #16]
 80066e0:	3202      	adds	r2, #2
 80066e2:	f104 010c 	add.w	r1, r4, #12
 80066e6:	4680      	mov	r8, r0
 80066e8:	0092      	lsls	r2, r2, #2
 80066ea:	300c      	adds	r0, #12
 80066ec:	f7ff ff7c 	bl	80065e8 <memcpy>
 80066f0:	4621      	mov	r1, r4
 80066f2:	4630      	mov	r0, r6
 80066f4:	f7ff ffb7 	bl	8006666 <_Bfree>
 80066f8:	4644      	mov	r4, r8
 80066fa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066fe:	3501      	adds	r5, #1
 8006700:	615f      	str	r7, [r3, #20]
 8006702:	6125      	str	r5, [r4, #16]
 8006704:	4620      	mov	r0, r4
 8006706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800670a <__s2b>:
 800670a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800670e:	460c      	mov	r4, r1
 8006710:	4615      	mov	r5, r2
 8006712:	461f      	mov	r7, r3
 8006714:	2209      	movs	r2, #9
 8006716:	3308      	adds	r3, #8
 8006718:	4606      	mov	r6, r0
 800671a:	fb93 f3f2 	sdiv	r3, r3, r2
 800671e:	2100      	movs	r1, #0
 8006720:	2201      	movs	r2, #1
 8006722:	429a      	cmp	r2, r3
 8006724:	db20      	blt.n	8006768 <__s2b+0x5e>
 8006726:	4630      	mov	r0, r6
 8006728:	f7ff ff69 	bl	80065fe <_Balloc>
 800672c:	9b08      	ldr	r3, [sp, #32]
 800672e:	6143      	str	r3, [r0, #20]
 8006730:	2d09      	cmp	r5, #9
 8006732:	f04f 0301 	mov.w	r3, #1
 8006736:	6103      	str	r3, [r0, #16]
 8006738:	dd19      	ble.n	800676e <__s2b+0x64>
 800673a:	f104 0809 	add.w	r8, r4, #9
 800673e:	46c1      	mov	r9, r8
 8006740:	442c      	add	r4, r5
 8006742:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006746:	4601      	mov	r1, r0
 8006748:	3b30      	subs	r3, #48	; 0x30
 800674a:	220a      	movs	r2, #10
 800674c:	4630      	mov	r0, r6
 800674e:	f7ff ffa1 	bl	8006694 <__multadd>
 8006752:	45a1      	cmp	r9, r4
 8006754:	d1f5      	bne.n	8006742 <__s2b+0x38>
 8006756:	eb08 0405 	add.w	r4, r8, r5
 800675a:	3c08      	subs	r4, #8
 800675c:	1b2d      	subs	r5, r5, r4
 800675e:	1963      	adds	r3, r4, r5
 8006760:	42bb      	cmp	r3, r7
 8006762:	db07      	blt.n	8006774 <__s2b+0x6a>
 8006764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006768:	0052      	lsls	r2, r2, #1
 800676a:	3101      	adds	r1, #1
 800676c:	e7d9      	b.n	8006722 <__s2b+0x18>
 800676e:	340a      	adds	r4, #10
 8006770:	2509      	movs	r5, #9
 8006772:	e7f3      	b.n	800675c <__s2b+0x52>
 8006774:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006778:	4601      	mov	r1, r0
 800677a:	3b30      	subs	r3, #48	; 0x30
 800677c:	220a      	movs	r2, #10
 800677e:	4630      	mov	r0, r6
 8006780:	f7ff ff88 	bl	8006694 <__multadd>
 8006784:	e7eb      	b.n	800675e <__s2b+0x54>

08006786 <__hi0bits>:
 8006786:	0c02      	lsrs	r2, r0, #16
 8006788:	0412      	lsls	r2, r2, #16
 800678a:	4603      	mov	r3, r0
 800678c:	b9b2      	cbnz	r2, 80067bc <__hi0bits+0x36>
 800678e:	0403      	lsls	r3, r0, #16
 8006790:	2010      	movs	r0, #16
 8006792:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006796:	bf04      	itt	eq
 8006798:	021b      	lsleq	r3, r3, #8
 800679a:	3008      	addeq	r0, #8
 800679c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80067a0:	bf04      	itt	eq
 80067a2:	011b      	lsleq	r3, r3, #4
 80067a4:	3004      	addeq	r0, #4
 80067a6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80067aa:	bf04      	itt	eq
 80067ac:	009b      	lsleq	r3, r3, #2
 80067ae:	3002      	addeq	r0, #2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	db06      	blt.n	80067c2 <__hi0bits+0x3c>
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	d503      	bpl.n	80067c0 <__hi0bits+0x3a>
 80067b8:	3001      	adds	r0, #1
 80067ba:	4770      	bx	lr
 80067bc:	2000      	movs	r0, #0
 80067be:	e7e8      	b.n	8006792 <__hi0bits+0xc>
 80067c0:	2020      	movs	r0, #32
 80067c2:	4770      	bx	lr

080067c4 <__lo0bits>:
 80067c4:	6803      	ldr	r3, [r0, #0]
 80067c6:	f013 0207 	ands.w	r2, r3, #7
 80067ca:	4601      	mov	r1, r0
 80067cc:	d00b      	beq.n	80067e6 <__lo0bits+0x22>
 80067ce:	07da      	lsls	r2, r3, #31
 80067d0:	d423      	bmi.n	800681a <__lo0bits+0x56>
 80067d2:	0798      	lsls	r0, r3, #30
 80067d4:	bf49      	itett	mi
 80067d6:	085b      	lsrmi	r3, r3, #1
 80067d8:	089b      	lsrpl	r3, r3, #2
 80067da:	2001      	movmi	r0, #1
 80067dc:	600b      	strmi	r3, [r1, #0]
 80067de:	bf5c      	itt	pl
 80067e0:	600b      	strpl	r3, [r1, #0]
 80067e2:	2002      	movpl	r0, #2
 80067e4:	4770      	bx	lr
 80067e6:	b298      	uxth	r0, r3
 80067e8:	b9a8      	cbnz	r0, 8006816 <__lo0bits+0x52>
 80067ea:	0c1b      	lsrs	r3, r3, #16
 80067ec:	2010      	movs	r0, #16
 80067ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80067f2:	bf04      	itt	eq
 80067f4:	0a1b      	lsreq	r3, r3, #8
 80067f6:	3008      	addeq	r0, #8
 80067f8:	071a      	lsls	r2, r3, #28
 80067fa:	bf04      	itt	eq
 80067fc:	091b      	lsreq	r3, r3, #4
 80067fe:	3004      	addeq	r0, #4
 8006800:	079a      	lsls	r2, r3, #30
 8006802:	bf04      	itt	eq
 8006804:	089b      	lsreq	r3, r3, #2
 8006806:	3002      	addeq	r0, #2
 8006808:	07da      	lsls	r2, r3, #31
 800680a:	d402      	bmi.n	8006812 <__lo0bits+0x4e>
 800680c:	085b      	lsrs	r3, r3, #1
 800680e:	d006      	beq.n	800681e <__lo0bits+0x5a>
 8006810:	3001      	adds	r0, #1
 8006812:	600b      	str	r3, [r1, #0]
 8006814:	4770      	bx	lr
 8006816:	4610      	mov	r0, r2
 8006818:	e7e9      	b.n	80067ee <__lo0bits+0x2a>
 800681a:	2000      	movs	r0, #0
 800681c:	4770      	bx	lr
 800681e:	2020      	movs	r0, #32
 8006820:	4770      	bx	lr

08006822 <__i2b>:
 8006822:	b510      	push	{r4, lr}
 8006824:	460c      	mov	r4, r1
 8006826:	2101      	movs	r1, #1
 8006828:	f7ff fee9 	bl	80065fe <_Balloc>
 800682c:	2201      	movs	r2, #1
 800682e:	6144      	str	r4, [r0, #20]
 8006830:	6102      	str	r2, [r0, #16]
 8006832:	bd10      	pop	{r4, pc}

08006834 <__multiply>:
 8006834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006838:	4614      	mov	r4, r2
 800683a:	690a      	ldr	r2, [r1, #16]
 800683c:	6923      	ldr	r3, [r4, #16]
 800683e:	429a      	cmp	r2, r3
 8006840:	bfb8      	it	lt
 8006842:	460b      	movlt	r3, r1
 8006844:	4688      	mov	r8, r1
 8006846:	bfbc      	itt	lt
 8006848:	46a0      	movlt	r8, r4
 800684a:	461c      	movlt	r4, r3
 800684c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006850:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006854:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006858:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800685c:	eb07 0609 	add.w	r6, r7, r9
 8006860:	42b3      	cmp	r3, r6
 8006862:	bfb8      	it	lt
 8006864:	3101      	addlt	r1, #1
 8006866:	f7ff feca 	bl	80065fe <_Balloc>
 800686a:	f100 0514 	add.w	r5, r0, #20
 800686e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006872:	462b      	mov	r3, r5
 8006874:	2200      	movs	r2, #0
 8006876:	4573      	cmp	r3, lr
 8006878:	d316      	bcc.n	80068a8 <__multiply+0x74>
 800687a:	f104 0214 	add.w	r2, r4, #20
 800687e:	f108 0114 	add.w	r1, r8, #20
 8006882:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006886:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	9b00      	ldr	r3, [sp, #0]
 800688e:	9201      	str	r2, [sp, #4]
 8006890:	4293      	cmp	r3, r2
 8006892:	d80c      	bhi.n	80068ae <__multiply+0x7a>
 8006894:	2e00      	cmp	r6, #0
 8006896:	dd03      	ble.n	80068a0 <__multiply+0x6c>
 8006898:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800689c:	2b00      	cmp	r3, #0
 800689e:	d05d      	beq.n	800695c <__multiply+0x128>
 80068a0:	6106      	str	r6, [r0, #16]
 80068a2:	b003      	add	sp, #12
 80068a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a8:	f843 2b04 	str.w	r2, [r3], #4
 80068ac:	e7e3      	b.n	8006876 <__multiply+0x42>
 80068ae:	f8b2 b000 	ldrh.w	fp, [r2]
 80068b2:	f1bb 0f00 	cmp.w	fp, #0
 80068b6:	d023      	beq.n	8006900 <__multiply+0xcc>
 80068b8:	4689      	mov	r9, r1
 80068ba:	46ac      	mov	ip, r5
 80068bc:	f04f 0800 	mov.w	r8, #0
 80068c0:	f859 4b04 	ldr.w	r4, [r9], #4
 80068c4:	f8dc a000 	ldr.w	sl, [ip]
 80068c8:	b2a3      	uxth	r3, r4
 80068ca:	fa1f fa8a 	uxth.w	sl, sl
 80068ce:	fb0b a303 	mla	r3, fp, r3, sl
 80068d2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80068d6:	f8dc 4000 	ldr.w	r4, [ip]
 80068da:	4443      	add	r3, r8
 80068dc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80068e0:	fb0b 840a 	mla	r4, fp, sl, r8
 80068e4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80068e8:	46e2      	mov	sl, ip
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80068f0:	454f      	cmp	r7, r9
 80068f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80068f6:	f84a 3b04 	str.w	r3, [sl], #4
 80068fa:	d82b      	bhi.n	8006954 <__multiply+0x120>
 80068fc:	f8cc 8004 	str.w	r8, [ip, #4]
 8006900:	9b01      	ldr	r3, [sp, #4]
 8006902:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006906:	3204      	adds	r2, #4
 8006908:	f1ba 0f00 	cmp.w	sl, #0
 800690c:	d020      	beq.n	8006950 <__multiply+0x11c>
 800690e:	682b      	ldr	r3, [r5, #0]
 8006910:	4689      	mov	r9, r1
 8006912:	46a8      	mov	r8, r5
 8006914:	f04f 0b00 	mov.w	fp, #0
 8006918:	f8b9 c000 	ldrh.w	ip, [r9]
 800691c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006920:	fb0a 440c 	mla	r4, sl, ip, r4
 8006924:	445c      	add	r4, fp
 8006926:	46c4      	mov	ip, r8
 8006928:	b29b      	uxth	r3, r3
 800692a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800692e:	f84c 3b04 	str.w	r3, [ip], #4
 8006932:	f859 3b04 	ldr.w	r3, [r9], #4
 8006936:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800693a:	0c1b      	lsrs	r3, r3, #16
 800693c:	fb0a b303 	mla	r3, sl, r3, fp
 8006940:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006944:	454f      	cmp	r7, r9
 8006946:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800694a:	d805      	bhi.n	8006958 <__multiply+0x124>
 800694c:	f8c8 3004 	str.w	r3, [r8, #4]
 8006950:	3504      	adds	r5, #4
 8006952:	e79b      	b.n	800688c <__multiply+0x58>
 8006954:	46d4      	mov	ip, sl
 8006956:	e7b3      	b.n	80068c0 <__multiply+0x8c>
 8006958:	46e0      	mov	r8, ip
 800695a:	e7dd      	b.n	8006918 <__multiply+0xe4>
 800695c:	3e01      	subs	r6, #1
 800695e:	e799      	b.n	8006894 <__multiply+0x60>

08006960 <__pow5mult>:
 8006960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006964:	4615      	mov	r5, r2
 8006966:	f012 0203 	ands.w	r2, r2, #3
 800696a:	4606      	mov	r6, r0
 800696c:	460f      	mov	r7, r1
 800696e:	d007      	beq.n	8006980 <__pow5mult+0x20>
 8006970:	3a01      	subs	r2, #1
 8006972:	4c21      	ldr	r4, [pc, #132]	; (80069f8 <__pow5mult+0x98>)
 8006974:	2300      	movs	r3, #0
 8006976:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800697a:	f7ff fe8b 	bl	8006694 <__multadd>
 800697e:	4607      	mov	r7, r0
 8006980:	10ad      	asrs	r5, r5, #2
 8006982:	d035      	beq.n	80069f0 <__pow5mult+0x90>
 8006984:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006986:	b93c      	cbnz	r4, 8006998 <__pow5mult+0x38>
 8006988:	2010      	movs	r0, #16
 800698a:	f7ff fe13 	bl	80065b4 <malloc>
 800698e:	6270      	str	r0, [r6, #36]	; 0x24
 8006990:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006994:	6004      	str	r4, [r0, #0]
 8006996:	60c4      	str	r4, [r0, #12]
 8006998:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800699c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069a0:	b94c      	cbnz	r4, 80069b6 <__pow5mult+0x56>
 80069a2:	f240 2171 	movw	r1, #625	; 0x271
 80069a6:	4630      	mov	r0, r6
 80069a8:	f7ff ff3b 	bl	8006822 <__i2b>
 80069ac:	2300      	movs	r3, #0
 80069ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80069b2:	4604      	mov	r4, r0
 80069b4:	6003      	str	r3, [r0, #0]
 80069b6:	f04f 0800 	mov.w	r8, #0
 80069ba:	07eb      	lsls	r3, r5, #31
 80069bc:	d50a      	bpl.n	80069d4 <__pow5mult+0x74>
 80069be:	4639      	mov	r1, r7
 80069c0:	4622      	mov	r2, r4
 80069c2:	4630      	mov	r0, r6
 80069c4:	f7ff ff36 	bl	8006834 <__multiply>
 80069c8:	4639      	mov	r1, r7
 80069ca:	4681      	mov	r9, r0
 80069cc:	4630      	mov	r0, r6
 80069ce:	f7ff fe4a 	bl	8006666 <_Bfree>
 80069d2:	464f      	mov	r7, r9
 80069d4:	106d      	asrs	r5, r5, #1
 80069d6:	d00b      	beq.n	80069f0 <__pow5mult+0x90>
 80069d8:	6820      	ldr	r0, [r4, #0]
 80069da:	b938      	cbnz	r0, 80069ec <__pow5mult+0x8c>
 80069dc:	4622      	mov	r2, r4
 80069de:	4621      	mov	r1, r4
 80069e0:	4630      	mov	r0, r6
 80069e2:	f7ff ff27 	bl	8006834 <__multiply>
 80069e6:	6020      	str	r0, [r4, #0]
 80069e8:	f8c0 8000 	str.w	r8, [r0]
 80069ec:	4604      	mov	r4, r0
 80069ee:	e7e4      	b.n	80069ba <__pow5mult+0x5a>
 80069f0:	4638      	mov	r0, r7
 80069f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069f6:	bf00      	nop
 80069f8:	08014268 	.word	0x08014268

080069fc <__lshift>:
 80069fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a00:	460c      	mov	r4, r1
 8006a02:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a06:	6923      	ldr	r3, [r4, #16]
 8006a08:	6849      	ldr	r1, [r1, #4]
 8006a0a:	eb0a 0903 	add.w	r9, sl, r3
 8006a0e:	68a3      	ldr	r3, [r4, #8]
 8006a10:	4607      	mov	r7, r0
 8006a12:	4616      	mov	r6, r2
 8006a14:	f109 0501 	add.w	r5, r9, #1
 8006a18:	42ab      	cmp	r3, r5
 8006a1a:	db32      	blt.n	8006a82 <__lshift+0x86>
 8006a1c:	4638      	mov	r0, r7
 8006a1e:	f7ff fdee 	bl	80065fe <_Balloc>
 8006a22:	2300      	movs	r3, #0
 8006a24:	4680      	mov	r8, r0
 8006a26:	f100 0114 	add.w	r1, r0, #20
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	4553      	cmp	r3, sl
 8006a2e:	db2b      	blt.n	8006a88 <__lshift+0x8c>
 8006a30:	6920      	ldr	r0, [r4, #16]
 8006a32:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a36:	f104 0314 	add.w	r3, r4, #20
 8006a3a:	f016 021f 	ands.w	r2, r6, #31
 8006a3e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a42:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a46:	d025      	beq.n	8006a94 <__lshift+0x98>
 8006a48:	f1c2 0e20 	rsb	lr, r2, #32
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	681e      	ldr	r6, [r3, #0]
 8006a50:	468a      	mov	sl, r1
 8006a52:	4096      	lsls	r6, r2
 8006a54:	4330      	orrs	r0, r6
 8006a56:	f84a 0b04 	str.w	r0, [sl], #4
 8006a5a:	f853 0b04 	ldr.w	r0, [r3], #4
 8006a5e:	459c      	cmp	ip, r3
 8006a60:	fa20 f00e 	lsr.w	r0, r0, lr
 8006a64:	d814      	bhi.n	8006a90 <__lshift+0x94>
 8006a66:	6048      	str	r0, [r1, #4]
 8006a68:	b108      	cbz	r0, 8006a6e <__lshift+0x72>
 8006a6a:	f109 0502 	add.w	r5, r9, #2
 8006a6e:	3d01      	subs	r5, #1
 8006a70:	4638      	mov	r0, r7
 8006a72:	f8c8 5010 	str.w	r5, [r8, #16]
 8006a76:	4621      	mov	r1, r4
 8006a78:	f7ff fdf5 	bl	8006666 <_Bfree>
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a82:	3101      	adds	r1, #1
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	e7c7      	b.n	8006a18 <__lshift+0x1c>
 8006a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	e7cd      	b.n	8006a2c <__lshift+0x30>
 8006a90:	4651      	mov	r1, sl
 8006a92:	e7dc      	b.n	8006a4e <__lshift+0x52>
 8006a94:	3904      	subs	r1, #4
 8006a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a9e:	459c      	cmp	ip, r3
 8006aa0:	d8f9      	bhi.n	8006a96 <__lshift+0x9a>
 8006aa2:	e7e4      	b.n	8006a6e <__lshift+0x72>

08006aa4 <__mcmp>:
 8006aa4:	6903      	ldr	r3, [r0, #16]
 8006aa6:	690a      	ldr	r2, [r1, #16]
 8006aa8:	1a9b      	subs	r3, r3, r2
 8006aaa:	b530      	push	{r4, r5, lr}
 8006aac:	d10c      	bne.n	8006ac8 <__mcmp+0x24>
 8006aae:	0092      	lsls	r2, r2, #2
 8006ab0:	3014      	adds	r0, #20
 8006ab2:	3114      	adds	r1, #20
 8006ab4:	1884      	adds	r4, r0, r2
 8006ab6:	4411      	add	r1, r2
 8006ab8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006abc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ac0:	4295      	cmp	r5, r2
 8006ac2:	d003      	beq.n	8006acc <__mcmp+0x28>
 8006ac4:	d305      	bcc.n	8006ad2 <__mcmp+0x2e>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	4618      	mov	r0, r3
 8006aca:	bd30      	pop	{r4, r5, pc}
 8006acc:	42a0      	cmp	r0, r4
 8006ace:	d3f3      	bcc.n	8006ab8 <__mcmp+0x14>
 8006ad0:	e7fa      	b.n	8006ac8 <__mcmp+0x24>
 8006ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad6:	e7f7      	b.n	8006ac8 <__mcmp+0x24>

08006ad8 <__mdiff>:
 8006ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006adc:	460d      	mov	r5, r1
 8006ade:	4607      	mov	r7, r0
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	4614      	mov	r4, r2
 8006ae6:	f7ff ffdd 	bl	8006aa4 <__mcmp>
 8006aea:	1e06      	subs	r6, r0, #0
 8006aec:	d108      	bne.n	8006b00 <__mdiff+0x28>
 8006aee:	4631      	mov	r1, r6
 8006af0:	4638      	mov	r0, r7
 8006af2:	f7ff fd84 	bl	80065fe <_Balloc>
 8006af6:	2301      	movs	r3, #1
 8006af8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b00:	bfa4      	itt	ge
 8006b02:	4623      	movge	r3, r4
 8006b04:	462c      	movge	r4, r5
 8006b06:	4638      	mov	r0, r7
 8006b08:	6861      	ldr	r1, [r4, #4]
 8006b0a:	bfa6      	itte	ge
 8006b0c:	461d      	movge	r5, r3
 8006b0e:	2600      	movge	r6, #0
 8006b10:	2601      	movlt	r6, #1
 8006b12:	f7ff fd74 	bl	80065fe <_Balloc>
 8006b16:	692b      	ldr	r3, [r5, #16]
 8006b18:	60c6      	str	r6, [r0, #12]
 8006b1a:	6926      	ldr	r6, [r4, #16]
 8006b1c:	f105 0914 	add.w	r9, r5, #20
 8006b20:	f104 0214 	add.w	r2, r4, #20
 8006b24:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006b28:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006b2c:	f100 0514 	add.w	r5, r0, #20
 8006b30:	f04f 0e00 	mov.w	lr, #0
 8006b34:	f852 ab04 	ldr.w	sl, [r2], #4
 8006b38:	f859 4b04 	ldr.w	r4, [r9], #4
 8006b3c:	fa1e f18a 	uxtah	r1, lr, sl
 8006b40:	b2a3      	uxth	r3, r4
 8006b42:	1ac9      	subs	r1, r1, r3
 8006b44:	0c23      	lsrs	r3, r4, #16
 8006b46:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006b4a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006b4e:	b289      	uxth	r1, r1
 8006b50:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006b54:	45c8      	cmp	r8, r9
 8006b56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006b5a:	4694      	mov	ip, r2
 8006b5c:	f845 3b04 	str.w	r3, [r5], #4
 8006b60:	d8e8      	bhi.n	8006b34 <__mdiff+0x5c>
 8006b62:	45bc      	cmp	ip, r7
 8006b64:	d304      	bcc.n	8006b70 <__mdiff+0x98>
 8006b66:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006b6a:	b183      	cbz	r3, 8006b8e <__mdiff+0xb6>
 8006b6c:	6106      	str	r6, [r0, #16]
 8006b6e:	e7c5      	b.n	8006afc <__mdiff+0x24>
 8006b70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006b74:	fa1e f381 	uxtah	r3, lr, r1
 8006b78:	141a      	asrs	r2, r3, #16
 8006b7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b84:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006b88:	f845 3b04 	str.w	r3, [r5], #4
 8006b8c:	e7e9      	b.n	8006b62 <__mdiff+0x8a>
 8006b8e:	3e01      	subs	r6, #1
 8006b90:	e7e9      	b.n	8006b66 <__mdiff+0x8e>
	...

08006b94 <__ulp>:
 8006b94:	4b12      	ldr	r3, [pc, #72]	; (8006be0 <__ulp+0x4c>)
 8006b96:	ee10 2a90 	vmov	r2, s1
 8006b9a:	401a      	ands	r2, r3
 8006b9c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	dd04      	ble.n	8006bae <__ulp+0x1a>
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	ec41 0b10 	vmov	d0, r0, r1
 8006bac:	4770      	bx	lr
 8006bae:	425b      	negs	r3, r3
 8006bb0:	151b      	asrs	r3, r3, #20
 8006bb2:	2b13      	cmp	r3, #19
 8006bb4:	f04f 0000 	mov.w	r0, #0
 8006bb8:	f04f 0100 	mov.w	r1, #0
 8006bbc:	dc04      	bgt.n	8006bc8 <__ulp+0x34>
 8006bbe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006bc2:	fa42 f103 	asr.w	r1, r2, r3
 8006bc6:	e7ef      	b.n	8006ba8 <__ulp+0x14>
 8006bc8:	3b14      	subs	r3, #20
 8006bca:	2b1e      	cmp	r3, #30
 8006bcc:	f04f 0201 	mov.w	r2, #1
 8006bd0:	bfda      	itte	le
 8006bd2:	f1c3 031f 	rsble	r3, r3, #31
 8006bd6:	fa02 f303 	lslle.w	r3, r2, r3
 8006bda:	4613      	movgt	r3, r2
 8006bdc:	4618      	mov	r0, r3
 8006bde:	e7e3      	b.n	8006ba8 <__ulp+0x14>
 8006be0:	7ff00000 	.word	0x7ff00000

08006be4 <__b2d>:
 8006be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be6:	6905      	ldr	r5, [r0, #16]
 8006be8:	f100 0714 	add.w	r7, r0, #20
 8006bec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006bf0:	1f2e      	subs	r6, r5, #4
 8006bf2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f7ff fdc5 	bl	8006786 <__hi0bits>
 8006bfc:	f1c0 0320 	rsb	r3, r0, #32
 8006c00:	280a      	cmp	r0, #10
 8006c02:	600b      	str	r3, [r1, #0]
 8006c04:	f8df c074 	ldr.w	ip, [pc, #116]	; 8006c7c <__b2d+0x98>
 8006c08:	dc14      	bgt.n	8006c34 <__b2d+0x50>
 8006c0a:	f1c0 0e0b 	rsb	lr, r0, #11
 8006c0e:	fa24 f10e 	lsr.w	r1, r4, lr
 8006c12:	42b7      	cmp	r7, r6
 8006c14:	ea41 030c 	orr.w	r3, r1, ip
 8006c18:	bf34      	ite	cc
 8006c1a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006c1e:	2100      	movcs	r1, #0
 8006c20:	3015      	adds	r0, #21
 8006c22:	fa04 f000 	lsl.w	r0, r4, r0
 8006c26:	fa21 f10e 	lsr.w	r1, r1, lr
 8006c2a:	ea40 0201 	orr.w	r2, r0, r1
 8006c2e:	ec43 2b10 	vmov	d0, r2, r3
 8006c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c34:	42b7      	cmp	r7, r6
 8006c36:	bf3a      	itte	cc
 8006c38:	f1a5 0608 	subcc.w	r6, r5, #8
 8006c3c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006c40:	2100      	movcs	r1, #0
 8006c42:	380b      	subs	r0, #11
 8006c44:	d015      	beq.n	8006c72 <__b2d+0x8e>
 8006c46:	4084      	lsls	r4, r0
 8006c48:	f1c0 0520 	rsb	r5, r0, #32
 8006c4c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8006c50:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8006c54:	42be      	cmp	r6, r7
 8006c56:	fa21 fc05 	lsr.w	ip, r1, r5
 8006c5a:	ea44 030c 	orr.w	r3, r4, ip
 8006c5e:	bf8c      	ite	hi
 8006c60:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006c64:	2400      	movls	r4, #0
 8006c66:	fa01 f000 	lsl.w	r0, r1, r0
 8006c6a:	40ec      	lsrs	r4, r5
 8006c6c:	ea40 0204 	orr.w	r2, r0, r4
 8006c70:	e7dd      	b.n	8006c2e <__b2d+0x4a>
 8006c72:	ea44 030c 	orr.w	r3, r4, ip
 8006c76:	460a      	mov	r2, r1
 8006c78:	e7d9      	b.n	8006c2e <__b2d+0x4a>
 8006c7a:	bf00      	nop
 8006c7c:	3ff00000 	.word	0x3ff00000

08006c80 <__d2b>:
 8006c80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c84:	460e      	mov	r6, r1
 8006c86:	2101      	movs	r1, #1
 8006c88:	ec59 8b10 	vmov	r8, r9, d0
 8006c8c:	4615      	mov	r5, r2
 8006c8e:	f7ff fcb6 	bl	80065fe <_Balloc>
 8006c92:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006c96:	4607      	mov	r7, r0
 8006c98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c9c:	bb34      	cbnz	r4, 8006cec <__d2b+0x6c>
 8006c9e:	9301      	str	r3, [sp, #4]
 8006ca0:	f1b8 0300 	subs.w	r3, r8, #0
 8006ca4:	d027      	beq.n	8006cf6 <__d2b+0x76>
 8006ca6:	a802      	add	r0, sp, #8
 8006ca8:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006cac:	f7ff fd8a 	bl	80067c4 <__lo0bits>
 8006cb0:	9900      	ldr	r1, [sp, #0]
 8006cb2:	b1f0      	cbz	r0, 8006cf2 <__d2b+0x72>
 8006cb4:	9a01      	ldr	r2, [sp, #4]
 8006cb6:	f1c0 0320 	rsb	r3, r0, #32
 8006cba:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbe:	430b      	orrs	r3, r1
 8006cc0:	40c2      	lsrs	r2, r0
 8006cc2:	617b      	str	r3, [r7, #20]
 8006cc4:	9201      	str	r2, [sp, #4]
 8006cc6:	9b01      	ldr	r3, [sp, #4]
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	bf14      	ite	ne
 8006cce:	2102      	movne	r1, #2
 8006cd0:	2101      	moveq	r1, #1
 8006cd2:	6139      	str	r1, [r7, #16]
 8006cd4:	b1c4      	cbz	r4, 8006d08 <__d2b+0x88>
 8006cd6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006cda:	4404      	add	r4, r0
 8006cdc:	6034      	str	r4, [r6, #0]
 8006cde:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ce2:	6028      	str	r0, [r5, #0]
 8006ce4:	4638      	mov	r0, r7
 8006ce6:	b003      	add	sp, #12
 8006ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cf0:	e7d5      	b.n	8006c9e <__d2b+0x1e>
 8006cf2:	6179      	str	r1, [r7, #20]
 8006cf4:	e7e7      	b.n	8006cc6 <__d2b+0x46>
 8006cf6:	a801      	add	r0, sp, #4
 8006cf8:	f7ff fd64 	bl	80067c4 <__lo0bits>
 8006cfc:	9b01      	ldr	r3, [sp, #4]
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	2101      	movs	r1, #1
 8006d02:	6139      	str	r1, [r7, #16]
 8006d04:	3020      	adds	r0, #32
 8006d06:	e7e5      	b.n	8006cd4 <__d2b+0x54>
 8006d08:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006d0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d10:	6030      	str	r0, [r6, #0]
 8006d12:	6918      	ldr	r0, [r3, #16]
 8006d14:	f7ff fd37 	bl	8006786 <__hi0bits>
 8006d18:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006d1c:	e7e1      	b.n	8006ce2 <__d2b+0x62>

08006d1e <__ratio>:
 8006d1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d22:	4688      	mov	r8, r1
 8006d24:	4669      	mov	r1, sp
 8006d26:	4681      	mov	r9, r0
 8006d28:	f7ff ff5c 	bl	8006be4 <__b2d>
 8006d2c:	a901      	add	r1, sp, #4
 8006d2e:	4640      	mov	r0, r8
 8006d30:	ec57 6b10 	vmov	r6, r7, d0
 8006d34:	f7ff ff56 	bl	8006be4 <__b2d>
 8006d38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d3c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006d40:	eba3 0c02 	sub.w	ip, r3, r2
 8006d44:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006d48:	1a9b      	subs	r3, r3, r2
 8006d4a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006d4e:	ec5b ab10 	vmov	sl, fp, d0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	bfce      	itee	gt
 8006d56:	463a      	movgt	r2, r7
 8006d58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006d5c:	465a      	movle	r2, fp
 8006d5e:	4659      	mov	r1, fp
 8006d60:	463d      	mov	r5, r7
 8006d62:	bfd4      	ite	le
 8006d64:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8006d68:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	ee10 2a10 	vmov	r2, s0
 8006d72:	460b      	mov	r3, r1
 8006d74:	4629      	mov	r1, r5
 8006d76:	f7f9 fd69 	bl	800084c <__aeabi_ddiv>
 8006d7a:	ec41 0b10 	vmov	d0, r0, r1
 8006d7e:	b003      	add	sp, #12
 8006d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d84 <__copybits>:
 8006d84:	3901      	subs	r1, #1
 8006d86:	b510      	push	{r4, lr}
 8006d88:	1149      	asrs	r1, r1, #5
 8006d8a:	6914      	ldr	r4, [r2, #16]
 8006d8c:	3101      	adds	r1, #1
 8006d8e:	f102 0314 	add.w	r3, r2, #20
 8006d92:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006d96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006d9a:	42a3      	cmp	r3, r4
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	d303      	bcc.n	8006da8 <__copybits+0x24>
 8006da0:	2300      	movs	r3, #0
 8006da2:	428a      	cmp	r2, r1
 8006da4:	d305      	bcc.n	8006db2 <__copybits+0x2e>
 8006da6:	bd10      	pop	{r4, pc}
 8006da8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dac:	f840 2b04 	str.w	r2, [r0], #4
 8006db0:	e7f3      	b.n	8006d9a <__copybits+0x16>
 8006db2:	f842 3b04 	str.w	r3, [r2], #4
 8006db6:	e7f4      	b.n	8006da2 <__copybits+0x1e>

08006db8 <__any_on>:
 8006db8:	f100 0214 	add.w	r2, r0, #20
 8006dbc:	6900      	ldr	r0, [r0, #16]
 8006dbe:	114b      	asrs	r3, r1, #5
 8006dc0:	4298      	cmp	r0, r3
 8006dc2:	b510      	push	{r4, lr}
 8006dc4:	db11      	blt.n	8006dea <__any_on+0x32>
 8006dc6:	dd0a      	ble.n	8006dde <__any_on+0x26>
 8006dc8:	f011 011f 	ands.w	r1, r1, #31
 8006dcc:	d007      	beq.n	8006dde <__any_on+0x26>
 8006dce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006dd2:	fa24 f001 	lsr.w	r0, r4, r1
 8006dd6:	fa00 f101 	lsl.w	r1, r0, r1
 8006dda:	428c      	cmp	r4, r1
 8006ddc:	d10b      	bne.n	8006df6 <__any_on+0x3e>
 8006dde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d803      	bhi.n	8006dee <__any_on+0x36>
 8006de6:	2000      	movs	r0, #0
 8006de8:	bd10      	pop	{r4, pc}
 8006dea:	4603      	mov	r3, r0
 8006dec:	e7f7      	b.n	8006dde <__any_on+0x26>
 8006dee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006df2:	2900      	cmp	r1, #0
 8006df4:	d0f5      	beq.n	8006de2 <__any_on+0x2a>
 8006df6:	2001      	movs	r0, #1
 8006df8:	e7f6      	b.n	8006de8 <__any_on+0x30>

08006dfa <_calloc_r>:
 8006dfa:	b538      	push	{r3, r4, r5, lr}
 8006dfc:	fb02 f401 	mul.w	r4, r2, r1
 8006e00:	4621      	mov	r1, r4
 8006e02:	f000 f857 	bl	8006eb4 <_malloc_r>
 8006e06:	4605      	mov	r5, r0
 8006e08:	b118      	cbz	r0, 8006e12 <_calloc_r+0x18>
 8006e0a:	4622      	mov	r2, r4
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	f7fc fd35 	bl	800387c <memset>
 8006e12:	4628      	mov	r0, r5
 8006e14:	bd38      	pop	{r3, r4, r5, pc}
	...

08006e18 <_free_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	4605      	mov	r5, r0
 8006e1c:	2900      	cmp	r1, #0
 8006e1e:	d045      	beq.n	8006eac <_free_r+0x94>
 8006e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e24:	1f0c      	subs	r4, r1, #4
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	bfb8      	it	lt
 8006e2a:	18e4      	addlt	r4, r4, r3
 8006e2c:	f000 fa36 	bl	800729c <__malloc_lock>
 8006e30:	4a1f      	ldr	r2, [pc, #124]	; (8006eb0 <_free_r+0x98>)
 8006e32:	6813      	ldr	r3, [r2, #0]
 8006e34:	4610      	mov	r0, r2
 8006e36:	b933      	cbnz	r3, 8006e46 <_free_r+0x2e>
 8006e38:	6063      	str	r3, [r4, #4]
 8006e3a:	6014      	str	r4, [r2, #0]
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e42:	f000 ba2c 	b.w	800729e <__malloc_unlock>
 8006e46:	42a3      	cmp	r3, r4
 8006e48:	d90c      	bls.n	8006e64 <_free_r+0x4c>
 8006e4a:	6821      	ldr	r1, [r4, #0]
 8006e4c:	1862      	adds	r2, r4, r1
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	bf04      	itt	eq
 8006e52:	681a      	ldreq	r2, [r3, #0]
 8006e54:	685b      	ldreq	r3, [r3, #4]
 8006e56:	6063      	str	r3, [r4, #4]
 8006e58:	bf04      	itt	eq
 8006e5a:	1852      	addeq	r2, r2, r1
 8006e5c:	6022      	streq	r2, [r4, #0]
 8006e5e:	6004      	str	r4, [r0, #0]
 8006e60:	e7ec      	b.n	8006e3c <_free_r+0x24>
 8006e62:	4613      	mov	r3, r2
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	b10a      	cbz	r2, 8006e6c <_free_r+0x54>
 8006e68:	42a2      	cmp	r2, r4
 8006e6a:	d9fa      	bls.n	8006e62 <_free_r+0x4a>
 8006e6c:	6819      	ldr	r1, [r3, #0]
 8006e6e:	1858      	adds	r0, r3, r1
 8006e70:	42a0      	cmp	r0, r4
 8006e72:	d10b      	bne.n	8006e8c <_free_r+0x74>
 8006e74:	6820      	ldr	r0, [r4, #0]
 8006e76:	4401      	add	r1, r0
 8006e78:	1858      	adds	r0, r3, r1
 8006e7a:	4282      	cmp	r2, r0
 8006e7c:	6019      	str	r1, [r3, #0]
 8006e7e:	d1dd      	bne.n	8006e3c <_free_r+0x24>
 8006e80:	6810      	ldr	r0, [r2, #0]
 8006e82:	6852      	ldr	r2, [r2, #4]
 8006e84:	605a      	str	r2, [r3, #4]
 8006e86:	4401      	add	r1, r0
 8006e88:	6019      	str	r1, [r3, #0]
 8006e8a:	e7d7      	b.n	8006e3c <_free_r+0x24>
 8006e8c:	d902      	bls.n	8006e94 <_free_r+0x7c>
 8006e8e:	230c      	movs	r3, #12
 8006e90:	602b      	str	r3, [r5, #0]
 8006e92:	e7d3      	b.n	8006e3c <_free_r+0x24>
 8006e94:	6820      	ldr	r0, [r4, #0]
 8006e96:	1821      	adds	r1, r4, r0
 8006e98:	428a      	cmp	r2, r1
 8006e9a:	bf04      	itt	eq
 8006e9c:	6811      	ldreq	r1, [r2, #0]
 8006e9e:	6852      	ldreq	r2, [r2, #4]
 8006ea0:	6062      	str	r2, [r4, #4]
 8006ea2:	bf04      	itt	eq
 8006ea4:	1809      	addeq	r1, r1, r0
 8006ea6:	6021      	streq	r1, [r4, #0]
 8006ea8:	605c      	str	r4, [r3, #4]
 8006eaa:	e7c7      	b.n	8006e3c <_free_r+0x24>
 8006eac:	bd38      	pop	{r3, r4, r5, pc}
 8006eae:	bf00      	nop
 8006eb0:	20000660 	.word	0x20000660

08006eb4 <_malloc_r>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	1ccd      	adds	r5, r1, #3
 8006eb8:	f025 0503 	bic.w	r5, r5, #3
 8006ebc:	3508      	adds	r5, #8
 8006ebe:	2d0c      	cmp	r5, #12
 8006ec0:	bf38      	it	cc
 8006ec2:	250c      	movcc	r5, #12
 8006ec4:	2d00      	cmp	r5, #0
 8006ec6:	4606      	mov	r6, r0
 8006ec8:	db01      	blt.n	8006ece <_malloc_r+0x1a>
 8006eca:	42a9      	cmp	r1, r5
 8006ecc:	d903      	bls.n	8006ed6 <_malloc_r+0x22>
 8006ece:	230c      	movs	r3, #12
 8006ed0:	6033      	str	r3, [r6, #0]
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	bd70      	pop	{r4, r5, r6, pc}
 8006ed6:	f000 f9e1 	bl	800729c <__malloc_lock>
 8006eda:	4a21      	ldr	r2, [pc, #132]	; (8006f60 <_malloc_r+0xac>)
 8006edc:	6814      	ldr	r4, [r2, #0]
 8006ede:	4621      	mov	r1, r4
 8006ee0:	b991      	cbnz	r1, 8006f08 <_malloc_r+0x54>
 8006ee2:	4c20      	ldr	r4, [pc, #128]	; (8006f64 <_malloc_r+0xb0>)
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	b91b      	cbnz	r3, 8006ef0 <_malloc_r+0x3c>
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f000 f98f 	bl	800720c <_sbrk_r>
 8006eee:	6020      	str	r0, [r4, #0]
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f000 f98a 	bl	800720c <_sbrk_r>
 8006ef8:	1c43      	adds	r3, r0, #1
 8006efa:	d124      	bne.n	8006f46 <_malloc_r+0x92>
 8006efc:	230c      	movs	r3, #12
 8006efe:	6033      	str	r3, [r6, #0]
 8006f00:	4630      	mov	r0, r6
 8006f02:	f000 f9cc 	bl	800729e <__malloc_unlock>
 8006f06:	e7e4      	b.n	8006ed2 <_malloc_r+0x1e>
 8006f08:	680b      	ldr	r3, [r1, #0]
 8006f0a:	1b5b      	subs	r3, r3, r5
 8006f0c:	d418      	bmi.n	8006f40 <_malloc_r+0x8c>
 8006f0e:	2b0b      	cmp	r3, #11
 8006f10:	d90f      	bls.n	8006f32 <_malloc_r+0x7e>
 8006f12:	600b      	str	r3, [r1, #0]
 8006f14:	50cd      	str	r5, [r1, r3]
 8006f16:	18cc      	adds	r4, r1, r3
 8006f18:	4630      	mov	r0, r6
 8006f1a:	f000 f9c0 	bl	800729e <__malloc_unlock>
 8006f1e:	f104 000b 	add.w	r0, r4, #11
 8006f22:	1d23      	adds	r3, r4, #4
 8006f24:	f020 0007 	bic.w	r0, r0, #7
 8006f28:	1ac3      	subs	r3, r0, r3
 8006f2a:	d0d3      	beq.n	8006ed4 <_malloc_r+0x20>
 8006f2c:	425a      	negs	r2, r3
 8006f2e:	50e2      	str	r2, [r4, r3]
 8006f30:	e7d0      	b.n	8006ed4 <_malloc_r+0x20>
 8006f32:	428c      	cmp	r4, r1
 8006f34:	684b      	ldr	r3, [r1, #4]
 8006f36:	bf16      	itet	ne
 8006f38:	6063      	strne	r3, [r4, #4]
 8006f3a:	6013      	streq	r3, [r2, #0]
 8006f3c:	460c      	movne	r4, r1
 8006f3e:	e7eb      	b.n	8006f18 <_malloc_r+0x64>
 8006f40:	460c      	mov	r4, r1
 8006f42:	6849      	ldr	r1, [r1, #4]
 8006f44:	e7cc      	b.n	8006ee0 <_malloc_r+0x2c>
 8006f46:	1cc4      	adds	r4, r0, #3
 8006f48:	f024 0403 	bic.w	r4, r4, #3
 8006f4c:	42a0      	cmp	r0, r4
 8006f4e:	d005      	beq.n	8006f5c <_malloc_r+0xa8>
 8006f50:	1a21      	subs	r1, r4, r0
 8006f52:	4630      	mov	r0, r6
 8006f54:	f000 f95a 	bl	800720c <_sbrk_r>
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d0cf      	beq.n	8006efc <_malloc_r+0x48>
 8006f5c:	6025      	str	r5, [r4, #0]
 8006f5e:	e7db      	b.n	8006f18 <_malloc_r+0x64>
 8006f60:	20000660 	.word	0x20000660
 8006f64:	20000664 	.word	0x20000664

08006f68 <__ssputs_r>:
 8006f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f6c:	688e      	ldr	r6, [r1, #8]
 8006f6e:	429e      	cmp	r6, r3
 8006f70:	4682      	mov	sl, r0
 8006f72:	460c      	mov	r4, r1
 8006f74:	4690      	mov	r8, r2
 8006f76:	4699      	mov	r9, r3
 8006f78:	d837      	bhi.n	8006fea <__ssputs_r+0x82>
 8006f7a:	898a      	ldrh	r2, [r1, #12]
 8006f7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f80:	d031      	beq.n	8006fe6 <__ssputs_r+0x7e>
 8006f82:	6825      	ldr	r5, [r4, #0]
 8006f84:	6909      	ldr	r1, [r1, #16]
 8006f86:	1a6f      	subs	r7, r5, r1
 8006f88:	6965      	ldr	r5, [r4, #20]
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f90:	fb95 f5f3 	sdiv	r5, r5, r3
 8006f94:	f109 0301 	add.w	r3, r9, #1
 8006f98:	443b      	add	r3, r7
 8006f9a:	429d      	cmp	r5, r3
 8006f9c:	bf38      	it	cc
 8006f9e:	461d      	movcc	r5, r3
 8006fa0:	0553      	lsls	r3, r2, #21
 8006fa2:	d530      	bpl.n	8007006 <__ssputs_r+0x9e>
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	f7ff ff85 	bl	8006eb4 <_malloc_r>
 8006faa:	4606      	mov	r6, r0
 8006fac:	b950      	cbnz	r0, 8006fc4 <__ssputs_r+0x5c>
 8006fae:	230c      	movs	r3, #12
 8006fb0:	f8ca 3000 	str.w	r3, [sl]
 8006fb4:	89a3      	ldrh	r3, [r4, #12]
 8006fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fba:	81a3      	strh	r3, [r4, #12]
 8006fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc4:	463a      	mov	r2, r7
 8006fc6:	6921      	ldr	r1, [r4, #16]
 8006fc8:	f7ff fb0e 	bl	80065e8 <memcpy>
 8006fcc:	89a3      	ldrh	r3, [r4, #12]
 8006fce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd6:	81a3      	strh	r3, [r4, #12]
 8006fd8:	6126      	str	r6, [r4, #16]
 8006fda:	6165      	str	r5, [r4, #20]
 8006fdc:	443e      	add	r6, r7
 8006fde:	1bed      	subs	r5, r5, r7
 8006fe0:	6026      	str	r6, [r4, #0]
 8006fe2:	60a5      	str	r5, [r4, #8]
 8006fe4:	464e      	mov	r6, r9
 8006fe6:	454e      	cmp	r6, r9
 8006fe8:	d900      	bls.n	8006fec <__ssputs_r+0x84>
 8006fea:	464e      	mov	r6, r9
 8006fec:	4632      	mov	r2, r6
 8006fee:	4641      	mov	r1, r8
 8006ff0:	6820      	ldr	r0, [r4, #0]
 8006ff2:	f000 f93a 	bl	800726a <memmove>
 8006ff6:	68a3      	ldr	r3, [r4, #8]
 8006ff8:	1b9b      	subs	r3, r3, r6
 8006ffa:	60a3      	str	r3, [r4, #8]
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	441e      	add	r6, r3
 8007000:	6026      	str	r6, [r4, #0]
 8007002:	2000      	movs	r0, #0
 8007004:	e7dc      	b.n	8006fc0 <__ssputs_r+0x58>
 8007006:	462a      	mov	r2, r5
 8007008:	f000 f94a 	bl	80072a0 <_realloc_r>
 800700c:	4606      	mov	r6, r0
 800700e:	2800      	cmp	r0, #0
 8007010:	d1e2      	bne.n	8006fd8 <__ssputs_r+0x70>
 8007012:	6921      	ldr	r1, [r4, #16]
 8007014:	4650      	mov	r0, sl
 8007016:	f7ff feff 	bl	8006e18 <_free_r>
 800701a:	e7c8      	b.n	8006fae <__ssputs_r+0x46>

0800701c <_svfiprintf_r>:
 800701c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007020:	461d      	mov	r5, r3
 8007022:	898b      	ldrh	r3, [r1, #12]
 8007024:	061f      	lsls	r7, r3, #24
 8007026:	b09d      	sub	sp, #116	; 0x74
 8007028:	4680      	mov	r8, r0
 800702a:	460c      	mov	r4, r1
 800702c:	4616      	mov	r6, r2
 800702e:	d50f      	bpl.n	8007050 <_svfiprintf_r+0x34>
 8007030:	690b      	ldr	r3, [r1, #16]
 8007032:	b96b      	cbnz	r3, 8007050 <_svfiprintf_r+0x34>
 8007034:	2140      	movs	r1, #64	; 0x40
 8007036:	f7ff ff3d 	bl	8006eb4 <_malloc_r>
 800703a:	6020      	str	r0, [r4, #0]
 800703c:	6120      	str	r0, [r4, #16]
 800703e:	b928      	cbnz	r0, 800704c <_svfiprintf_r+0x30>
 8007040:	230c      	movs	r3, #12
 8007042:	f8c8 3000 	str.w	r3, [r8]
 8007046:	f04f 30ff 	mov.w	r0, #4294967295
 800704a:	e0c8      	b.n	80071de <_svfiprintf_r+0x1c2>
 800704c:	2340      	movs	r3, #64	; 0x40
 800704e:	6163      	str	r3, [r4, #20]
 8007050:	2300      	movs	r3, #0
 8007052:	9309      	str	r3, [sp, #36]	; 0x24
 8007054:	2320      	movs	r3, #32
 8007056:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800705a:	2330      	movs	r3, #48	; 0x30
 800705c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007060:	9503      	str	r5, [sp, #12]
 8007062:	f04f 0b01 	mov.w	fp, #1
 8007066:	4637      	mov	r7, r6
 8007068:	463d      	mov	r5, r7
 800706a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800706e:	b10b      	cbz	r3, 8007074 <_svfiprintf_r+0x58>
 8007070:	2b25      	cmp	r3, #37	; 0x25
 8007072:	d13e      	bne.n	80070f2 <_svfiprintf_r+0xd6>
 8007074:	ebb7 0a06 	subs.w	sl, r7, r6
 8007078:	d00b      	beq.n	8007092 <_svfiprintf_r+0x76>
 800707a:	4653      	mov	r3, sl
 800707c:	4632      	mov	r2, r6
 800707e:	4621      	mov	r1, r4
 8007080:	4640      	mov	r0, r8
 8007082:	f7ff ff71 	bl	8006f68 <__ssputs_r>
 8007086:	3001      	adds	r0, #1
 8007088:	f000 80a4 	beq.w	80071d4 <_svfiprintf_r+0x1b8>
 800708c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800708e:	4453      	add	r3, sl
 8007090:	9309      	str	r3, [sp, #36]	; 0x24
 8007092:	783b      	ldrb	r3, [r7, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 809d 	beq.w	80071d4 <_svfiprintf_r+0x1b8>
 800709a:	2300      	movs	r3, #0
 800709c:	f04f 32ff 	mov.w	r2, #4294967295
 80070a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070a4:	9304      	str	r3, [sp, #16]
 80070a6:	9307      	str	r3, [sp, #28]
 80070a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070ac:	931a      	str	r3, [sp, #104]	; 0x68
 80070ae:	462f      	mov	r7, r5
 80070b0:	2205      	movs	r2, #5
 80070b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80070b6:	4850      	ldr	r0, [pc, #320]	; (80071f8 <_svfiprintf_r+0x1dc>)
 80070b8:	f7f9 f892 	bl	80001e0 <memchr>
 80070bc:	9b04      	ldr	r3, [sp, #16]
 80070be:	b9d0      	cbnz	r0, 80070f6 <_svfiprintf_r+0xda>
 80070c0:	06d9      	lsls	r1, r3, #27
 80070c2:	bf44      	itt	mi
 80070c4:	2220      	movmi	r2, #32
 80070c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070ca:	071a      	lsls	r2, r3, #28
 80070cc:	bf44      	itt	mi
 80070ce:	222b      	movmi	r2, #43	; 0x2b
 80070d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070d4:	782a      	ldrb	r2, [r5, #0]
 80070d6:	2a2a      	cmp	r2, #42	; 0x2a
 80070d8:	d015      	beq.n	8007106 <_svfiprintf_r+0xea>
 80070da:	9a07      	ldr	r2, [sp, #28]
 80070dc:	462f      	mov	r7, r5
 80070de:	2000      	movs	r0, #0
 80070e0:	250a      	movs	r5, #10
 80070e2:	4639      	mov	r1, r7
 80070e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070e8:	3b30      	subs	r3, #48	; 0x30
 80070ea:	2b09      	cmp	r3, #9
 80070ec:	d94d      	bls.n	800718a <_svfiprintf_r+0x16e>
 80070ee:	b1b8      	cbz	r0, 8007120 <_svfiprintf_r+0x104>
 80070f0:	e00f      	b.n	8007112 <_svfiprintf_r+0xf6>
 80070f2:	462f      	mov	r7, r5
 80070f4:	e7b8      	b.n	8007068 <_svfiprintf_r+0x4c>
 80070f6:	4a40      	ldr	r2, [pc, #256]	; (80071f8 <_svfiprintf_r+0x1dc>)
 80070f8:	1a80      	subs	r0, r0, r2
 80070fa:	fa0b f000 	lsl.w	r0, fp, r0
 80070fe:	4318      	orrs	r0, r3
 8007100:	9004      	str	r0, [sp, #16]
 8007102:	463d      	mov	r5, r7
 8007104:	e7d3      	b.n	80070ae <_svfiprintf_r+0x92>
 8007106:	9a03      	ldr	r2, [sp, #12]
 8007108:	1d11      	adds	r1, r2, #4
 800710a:	6812      	ldr	r2, [r2, #0]
 800710c:	9103      	str	r1, [sp, #12]
 800710e:	2a00      	cmp	r2, #0
 8007110:	db01      	blt.n	8007116 <_svfiprintf_r+0xfa>
 8007112:	9207      	str	r2, [sp, #28]
 8007114:	e004      	b.n	8007120 <_svfiprintf_r+0x104>
 8007116:	4252      	negs	r2, r2
 8007118:	f043 0302 	orr.w	r3, r3, #2
 800711c:	9207      	str	r2, [sp, #28]
 800711e:	9304      	str	r3, [sp, #16]
 8007120:	783b      	ldrb	r3, [r7, #0]
 8007122:	2b2e      	cmp	r3, #46	; 0x2e
 8007124:	d10c      	bne.n	8007140 <_svfiprintf_r+0x124>
 8007126:	787b      	ldrb	r3, [r7, #1]
 8007128:	2b2a      	cmp	r3, #42	; 0x2a
 800712a:	d133      	bne.n	8007194 <_svfiprintf_r+0x178>
 800712c:	9b03      	ldr	r3, [sp, #12]
 800712e:	1d1a      	adds	r2, r3, #4
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	9203      	str	r2, [sp, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	bfb8      	it	lt
 8007138:	f04f 33ff 	movlt.w	r3, #4294967295
 800713c:	3702      	adds	r7, #2
 800713e:	9305      	str	r3, [sp, #20]
 8007140:	4d2e      	ldr	r5, [pc, #184]	; (80071fc <_svfiprintf_r+0x1e0>)
 8007142:	7839      	ldrb	r1, [r7, #0]
 8007144:	2203      	movs	r2, #3
 8007146:	4628      	mov	r0, r5
 8007148:	f7f9 f84a 	bl	80001e0 <memchr>
 800714c:	b138      	cbz	r0, 800715e <_svfiprintf_r+0x142>
 800714e:	2340      	movs	r3, #64	; 0x40
 8007150:	1b40      	subs	r0, r0, r5
 8007152:	fa03 f000 	lsl.w	r0, r3, r0
 8007156:	9b04      	ldr	r3, [sp, #16]
 8007158:	4303      	orrs	r3, r0
 800715a:	3701      	adds	r7, #1
 800715c:	9304      	str	r3, [sp, #16]
 800715e:	7839      	ldrb	r1, [r7, #0]
 8007160:	4827      	ldr	r0, [pc, #156]	; (8007200 <_svfiprintf_r+0x1e4>)
 8007162:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007166:	2206      	movs	r2, #6
 8007168:	1c7e      	adds	r6, r7, #1
 800716a:	f7f9 f839 	bl	80001e0 <memchr>
 800716e:	2800      	cmp	r0, #0
 8007170:	d038      	beq.n	80071e4 <_svfiprintf_r+0x1c8>
 8007172:	4b24      	ldr	r3, [pc, #144]	; (8007204 <_svfiprintf_r+0x1e8>)
 8007174:	bb13      	cbnz	r3, 80071bc <_svfiprintf_r+0x1a0>
 8007176:	9b03      	ldr	r3, [sp, #12]
 8007178:	3307      	adds	r3, #7
 800717a:	f023 0307 	bic.w	r3, r3, #7
 800717e:	3308      	adds	r3, #8
 8007180:	9303      	str	r3, [sp, #12]
 8007182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007184:	444b      	add	r3, r9
 8007186:	9309      	str	r3, [sp, #36]	; 0x24
 8007188:	e76d      	b.n	8007066 <_svfiprintf_r+0x4a>
 800718a:	fb05 3202 	mla	r2, r5, r2, r3
 800718e:	2001      	movs	r0, #1
 8007190:	460f      	mov	r7, r1
 8007192:	e7a6      	b.n	80070e2 <_svfiprintf_r+0xc6>
 8007194:	2300      	movs	r3, #0
 8007196:	3701      	adds	r7, #1
 8007198:	9305      	str	r3, [sp, #20]
 800719a:	4619      	mov	r1, r3
 800719c:	250a      	movs	r5, #10
 800719e:	4638      	mov	r0, r7
 80071a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071a4:	3a30      	subs	r2, #48	; 0x30
 80071a6:	2a09      	cmp	r2, #9
 80071a8:	d903      	bls.n	80071b2 <_svfiprintf_r+0x196>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0c8      	beq.n	8007140 <_svfiprintf_r+0x124>
 80071ae:	9105      	str	r1, [sp, #20]
 80071b0:	e7c6      	b.n	8007140 <_svfiprintf_r+0x124>
 80071b2:	fb05 2101 	mla	r1, r5, r1, r2
 80071b6:	2301      	movs	r3, #1
 80071b8:	4607      	mov	r7, r0
 80071ba:	e7f0      	b.n	800719e <_svfiprintf_r+0x182>
 80071bc:	ab03      	add	r3, sp, #12
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	4622      	mov	r2, r4
 80071c2:	4b11      	ldr	r3, [pc, #68]	; (8007208 <_svfiprintf_r+0x1ec>)
 80071c4:	a904      	add	r1, sp, #16
 80071c6:	4640      	mov	r0, r8
 80071c8:	f7fc fbf4 	bl	80039b4 <_printf_float>
 80071cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80071d0:	4681      	mov	r9, r0
 80071d2:	d1d6      	bne.n	8007182 <_svfiprintf_r+0x166>
 80071d4:	89a3      	ldrh	r3, [r4, #12]
 80071d6:	065b      	lsls	r3, r3, #25
 80071d8:	f53f af35 	bmi.w	8007046 <_svfiprintf_r+0x2a>
 80071dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071de:	b01d      	add	sp, #116	; 0x74
 80071e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e4:	ab03      	add	r3, sp, #12
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	4622      	mov	r2, r4
 80071ea:	4b07      	ldr	r3, [pc, #28]	; (8007208 <_svfiprintf_r+0x1ec>)
 80071ec:	a904      	add	r1, sp, #16
 80071ee:	4640      	mov	r0, r8
 80071f0:	f7fc fe96 	bl	8003f20 <_printf_i>
 80071f4:	e7ea      	b.n	80071cc <_svfiprintf_r+0x1b0>
 80071f6:	bf00      	nop
 80071f8:	08014274 	.word	0x08014274
 80071fc:	0801427a 	.word	0x0801427a
 8007200:	0801427e 	.word	0x0801427e
 8007204:	080039b5 	.word	0x080039b5
 8007208:	08006f69 	.word	0x08006f69

0800720c <_sbrk_r>:
 800720c:	b538      	push	{r3, r4, r5, lr}
 800720e:	4c06      	ldr	r4, [pc, #24]	; (8007228 <_sbrk_r+0x1c>)
 8007210:	2300      	movs	r3, #0
 8007212:	4605      	mov	r5, r0
 8007214:	4608      	mov	r0, r1
 8007216:	6023      	str	r3, [r4, #0]
 8007218:	f7fc fa4e 	bl	80036b8 <_sbrk>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d102      	bne.n	8007226 <_sbrk_r+0x1a>
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	b103      	cbz	r3, 8007226 <_sbrk_r+0x1a>
 8007224:	602b      	str	r3, [r5, #0]
 8007226:	bd38      	pop	{r3, r4, r5, pc}
 8007228:	20000688 	.word	0x20000688

0800722c <strncmp>:
 800722c:	b510      	push	{r4, lr}
 800722e:	b16a      	cbz	r2, 800724c <strncmp+0x20>
 8007230:	3901      	subs	r1, #1
 8007232:	1884      	adds	r4, r0, r2
 8007234:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007238:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800723c:	4293      	cmp	r3, r2
 800723e:	d103      	bne.n	8007248 <strncmp+0x1c>
 8007240:	42a0      	cmp	r0, r4
 8007242:	d001      	beq.n	8007248 <strncmp+0x1c>
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1f5      	bne.n	8007234 <strncmp+0x8>
 8007248:	1a98      	subs	r0, r3, r2
 800724a:	bd10      	pop	{r4, pc}
 800724c:	4610      	mov	r0, r2
 800724e:	e7fc      	b.n	800724a <strncmp+0x1e>

08007250 <__ascii_wctomb>:
 8007250:	b149      	cbz	r1, 8007266 <__ascii_wctomb+0x16>
 8007252:	2aff      	cmp	r2, #255	; 0xff
 8007254:	bf85      	ittet	hi
 8007256:	238a      	movhi	r3, #138	; 0x8a
 8007258:	6003      	strhi	r3, [r0, #0]
 800725a:	700a      	strbls	r2, [r1, #0]
 800725c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007260:	bf98      	it	ls
 8007262:	2001      	movls	r0, #1
 8007264:	4770      	bx	lr
 8007266:	4608      	mov	r0, r1
 8007268:	4770      	bx	lr

0800726a <memmove>:
 800726a:	4288      	cmp	r0, r1
 800726c:	b510      	push	{r4, lr}
 800726e:	eb01 0302 	add.w	r3, r1, r2
 8007272:	d807      	bhi.n	8007284 <memmove+0x1a>
 8007274:	1e42      	subs	r2, r0, #1
 8007276:	4299      	cmp	r1, r3
 8007278:	d00a      	beq.n	8007290 <memmove+0x26>
 800727a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800727e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007282:	e7f8      	b.n	8007276 <memmove+0xc>
 8007284:	4283      	cmp	r3, r0
 8007286:	d9f5      	bls.n	8007274 <memmove+0xa>
 8007288:	1881      	adds	r1, r0, r2
 800728a:	1ad2      	subs	r2, r2, r3
 800728c:	42d3      	cmn	r3, r2
 800728e:	d100      	bne.n	8007292 <memmove+0x28>
 8007290:	bd10      	pop	{r4, pc}
 8007292:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007296:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800729a:	e7f7      	b.n	800728c <memmove+0x22>

0800729c <__malloc_lock>:
 800729c:	4770      	bx	lr

0800729e <__malloc_unlock>:
 800729e:	4770      	bx	lr

080072a0 <_realloc_r>:
 80072a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a2:	4607      	mov	r7, r0
 80072a4:	4614      	mov	r4, r2
 80072a6:	460e      	mov	r6, r1
 80072a8:	b921      	cbnz	r1, 80072b4 <_realloc_r+0x14>
 80072aa:	4611      	mov	r1, r2
 80072ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80072b0:	f7ff be00 	b.w	8006eb4 <_malloc_r>
 80072b4:	b922      	cbnz	r2, 80072c0 <_realloc_r+0x20>
 80072b6:	f7ff fdaf 	bl	8006e18 <_free_r>
 80072ba:	4625      	mov	r5, r4
 80072bc:	4628      	mov	r0, r5
 80072be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072c0:	f000 f814 	bl	80072ec <_malloc_usable_size_r>
 80072c4:	42a0      	cmp	r0, r4
 80072c6:	d20f      	bcs.n	80072e8 <_realloc_r+0x48>
 80072c8:	4621      	mov	r1, r4
 80072ca:	4638      	mov	r0, r7
 80072cc:	f7ff fdf2 	bl	8006eb4 <_malloc_r>
 80072d0:	4605      	mov	r5, r0
 80072d2:	2800      	cmp	r0, #0
 80072d4:	d0f2      	beq.n	80072bc <_realloc_r+0x1c>
 80072d6:	4631      	mov	r1, r6
 80072d8:	4622      	mov	r2, r4
 80072da:	f7ff f985 	bl	80065e8 <memcpy>
 80072de:	4631      	mov	r1, r6
 80072e0:	4638      	mov	r0, r7
 80072e2:	f7ff fd99 	bl	8006e18 <_free_r>
 80072e6:	e7e9      	b.n	80072bc <_realloc_r+0x1c>
 80072e8:	4635      	mov	r5, r6
 80072ea:	e7e7      	b.n	80072bc <_realloc_r+0x1c>

080072ec <_malloc_usable_size_r>:
 80072ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072f0:	1f18      	subs	r0, r3, #4
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	bfbc      	itt	lt
 80072f6:	580b      	ldrlt	r3, [r1, r0]
 80072f8:	18c0      	addlt	r0, r0, r3
 80072fa:	4770      	bx	lr

080072fc <_init>:
 80072fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fe:	bf00      	nop
 8007300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007302:	bc08      	pop	{r3}
 8007304:	469e      	mov	lr, r3
 8007306:	4770      	bx	lr

08007308 <_fini>:
 8007308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730a:	bf00      	nop
 800730c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730e:	bc08      	pop	{r3}
 8007310:	469e      	mov	lr, r3
 8007312:	4770      	bx	lr
