
QUTMS_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e50  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ef8  08005020  08005020  00015020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f18  08006f18  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  08006f18  08006f18  00016f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f20  08006f20  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f20  08006f20  00016f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f24  08006f24  00016f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08006f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  200000c8  08006ff0  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  2000058c  08006ff0  0002058c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012170  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000286d  00000000  00000000  00032268  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e8  00000000  00000000  00034ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f80  00000000  00000000  00035bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024b08  00000000  00000000  00036b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d53a  00000000  00000000  0005b648  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9904  00000000  00000000  00068b82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00142486  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d38  00000000  00000000  00142504  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005008 	.word	0x08005008

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000cc 	.word	0x200000cc
 800020c:	08005008 	.word	0x08005008

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <CharTest>:
  return(GetTime() - ctStartT);
}

//-----------------------------------------------------------------------------
uint32_t CharTest(uint32_t n)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b089      	sub	sp, #36	; 0x24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  uint16_t x, y;
  uint8_t  c;
  sFONT * fp;

  uint32_t ctStartT = GetTime();
 80005b8:	f001 fed8 	bl	800236c <HAL_GetTick>
 80005bc:	61b8      	str	r0, [r7, #24]
  for(uint32_t i = 0; i < n; i++)
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
 80005c2:	e063      	b.n	800068c <CharTest+0xdc>
  {
    c = random() % 5;
 80005c4:	f003 fe18 	bl	80041f8 <random>
 80005c8:	4601      	mov	r1, r0
 80005ca:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <CharTest+0xf8>)
 80005cc:	fb83 2301 	smull	r2, r3, r3, r1
 80005d0:	105a      	asrs	r2, r3, #1
 80005d2:	17cb      	asrs	r3, r1, #31
 80005d4:	1ad2      	subs	r2, r2, r3
 80005d6:	4613      	mov	r3, r2
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	4413      	add	r3, r2
 80005dc:	1aca      	subs	r2, r1, r3
 80005de:	4613      	mov	r3, r2
 80005e0:	75fb      	strb	r3, [r7, #23]
    BSP_LCD_SetFont(&Font24);
 80005e2:	4832      	ldr	r0, [pc, #200]	; (80006ac <CharTest+0xfc>)
 80005e4:	f001 f83e 	bl	8001664 <BSP_LCD_SetFont>
    fp = BSP_LCD_GetFont();
 80005e8:	f001 f84c 	bl	8001684 <BSP_LCD_GetFont>
 80005ec:	6138      	str	r0, [r7, #16]

    x = random() % (BSP_LCD_GetXSize() - fp->Width);
 80005ee:	f003 fe03 	bl	80041f8 <random>
 80005f2:	4604      	mov	r4, r0
 80005f4:	f000 fffe 	bl	80015f4 <BSP_LCD_GetXSize>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	889b      	ldrh	r3, [r3, #4]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	fb94 f2f3 	sdiv	r2, r4, r3
 8000606:	fb03 f302 	mul.w	r3, r3, r2
 800060a:	1ae3      	subs	r3, r4, r3
 800060c:	81fb      	strh	r3, [r7, #14]
    y = random() % (BSP_LCD_GetYSize() - fp->Height);
 800060e:	f003 fdf3 	bl	80041f8 <random>
 8000612:	4604      	mov	r4, r0
 8000614:	f000 fffa 	bl	800160c <BSP_LCD_GetYSize>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	88db      	ldrh	r3, [r3, #6]
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	fb94 f2f3 	sdiv	r2, r4, r3
 8000626:	fb03 f302 	mul.w	r3, r3, r2
 800062a:	1ae3      	subs	r3, r4, r3
 800062c:	81bb      	strh	r3, [r7, #12]
    BSP_LCD_SetTextColor(RD(random() % 0xFFFF));
 800062e:	f003 fde3 	bl	80041f8 <random>
 8000632:	4602      	mov	r2, r0
 8000634:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <CharTest+0x100>)
 8000636:	fb83 1302 	smull	r1, r3, r3, r2
 800063a:	4413      	add	r3, r2
 800063c:	13d9      	asrs	r1, r3, #15
 800063e:	17d3      	asrs	r3, r2, #31
 8000640:	1ac9      	subs	r1, r1, r3
 8000642:	460b      	mov	r3, r1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	1a5b      	subs	r3, r3, r1
 8000648:	1ad1      	subs	r1, r2, r3
 800064a:	b28b      	uxth	r3, r1
 800064c:	4618      	mov	r0, r3
 800064e:	f000 ffe9 	bl	8001624 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(RD(random() % 0xFFFF));
 8000652:	f003 fdd1 	bl	80041f8 <random>
 8000656:	4602      	mov	r2, r0
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <CharTest+0x100>)
 800065a:	fb83 1302 	smull	r1, r3, r3, r2
 800065e:	4413      	add	r3, r2
 8000660:	13d9      	asrs	r1, r3, #15
 8000662:	17d3      	asrs	r3, r2, #31
 8000664:	1ac9      	subs	r1, r1, r3
 8000666:	460b      	mov	r3, r1
 8000668:	041b      	lsls	r3, r3, #16
 800066a:	1a5b      	subs	r3, r3, r1
 800066c:	1ad1      	subs	r1, r2, r3
 800066e:	b28b      	uxth	r3, r1
 8000670:	4618      	mov	r0, r3
 8000672:	f000 ffe7 	bl	8001644 <BSP_LCD_SetBackColor>

    c = 'J';
 8000676:	234a      	movs	r3, #74	; 0x4a
 8000678:	75fb      	strb	r3, [r7, #23]
    BSP_LCD_DisplayChar(x, y, c);
 800067a:	7dfa      	ldrb	r2, [r7, #23]
 800067c:	89b9      	ldrh	r1, [r7, #12]
 800067e:	89fb      	ldrh	r3, [r7, #14]
 8000680:	4618      	mov	r0, r3
 8000682:	f001 f829 	bl	80016d8 <BSP_LCD_DisplayChar>
  for(uint32_t i = 0; i < n; i++)
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	3301      	adds	r3, #1
 800068a:	61fb      	str	r3, [r7, #28]
 800068c:	69fa      	ldr	r2, [r7, #28]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	429a      	cmp	r2, r3
 8000692:	d397      	bcc.n	80005c4 <CharTest+0x14>
  }
  return(GetTime() - ctStartT);
 8000694:	f001 fe6a 	bl	800236c <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	69bb      	ldr	r3, [r7, #24]
 800069c:	1ad3      	subs	r3, r2, r3
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3724      	adds	r7, #36	; 0x24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd90      	pop	{r4, r7, pc}
 80006a6:	bf00      	nop
 80006a8:	66666667 	.word	0x66666667
 80006ac:	20000000 	.word	0x20000000
 80006b0:	80008001 	.word	0x80008001

080006b4 <mainApp>:
#ifdef osCMSIS
void StartDefaultTask(void const * argument)
#else
void mainApp(void)
#endif
{
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
  uint32_t t;

  Delay(300);
 80006ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006be:	f001 fe61 	bl	8002384 <HAL_Delay>

  BSP_LCD_Init();
 80006c2:	f000 ff77 	bl	80015b4 <BSP_LCD_Init>

  t = random();
 80006c6:	f003 fd97 	bl	80041f8 <random>
 80006ca:	4603      	mov	r3, r0
 80006cc:	607b      	str	r3, [r7, #4]

  Delay(100);
 80006ce:	2064      	movs	r0, #100	; 0x64
 80006d0:	f001 fe58 	bl	8002384 <HAL_Delay>
  printf("Display ID = %X\r\n", (unsigned int)BSP_LCD_ReadID());
 80006d4:	f001 f9ac 	bl	8001a30 <BSP_LCD_ReadID>
 80006d8:	4603      	mov	r3, r0
 80006da:	4619      	mov	r1, r3
 80006dc:	4819      	ldr	r0, [pc, #100]	; (8000744 <mainApp+0x90>)
 80006de:	f003 fd0f 	bl	8004100 <iprintf>
  #endif 

  while(1)
  {
    #ifdef  __GNUC__
    _impure_ptr->_r48->_rand_next = 0;
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <mainApp+0x94>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006e8:	f04f 0300 	mov.w	r3, #0
 80006ec:	f04f 0400 	mov.w	r4, #0
 80006f0:	e9c2 3404 	strd	r3, r4, [r2, #16]
    #endif

    #if BITMAP_TEST == 1
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 ffd1 	bl	800169c <BSP_LCD_Clear>
    POWERMETER_START;
    t = CharTest(5000);
 80006fa:	f241 3088 	movw	r0, #5000	; 0x1388
 80006fe:	f7ff ff57 	bl	80005b0 <CharTest>
 8000702:	6078      	str	r0, [r7, #4]
    POWERMETER_STOP;
    printf("Char Test: %d ms", (int)t);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4619      	mov	r1, r3
 8000708:	4810      	ldr	r0, [pc, #64]	; (800074c <mainApp+0x98>)
 800070a:	f003 fcf9 	bl	8004100 <iprintf>
    POWERMETER_PRINT;
 800070e:	200a      	movs	r0, #10
 8000710:	f001 fe38 	bl	8002384 <HAL_Delay>
 8000714:	480e      	ldr	r0, [pc, #56]	; (8000750 <mainApp+0x9c>)
 8000716:	f003 fd67 	bl	80041e8 <puts>
    Delay(DELAY_CHAPTER);
 800071a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800071e:	f001 fe31 	bl	8002384 <HAL_Delay>

    #endif /* #if BITMAP_TEST == 1 */

    BSP_LCD_DisplayOff();
 8000722:	f001 f867 	bl	80017f4 <BSP_LCD_DisplayOff>
    Delay(DELAY_CHAPTER);
 8000726:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800072a:	f001 fe2b 	bl	8002384 <HAL_Delay>
    BSP_LCD_DisplayOn();
 800072e:	f001 f857 	bl	80017e0 <BSP_LCD_DisplayOn>
    Delay(DELAY_CHAPTER);
 8000732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000736:	f001 fe25 	bl	8002384 <HAL_Delay>

    printf("\r\n");
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <mainApp+0x9c>)
 800073c:	f003 fd54 	bl	80041e8 <puts>
    _impure_ptr->_r48->_rand_next = 0;
 8000740:	e7cf      	b.n	80006e2 <mainApp+0x2e>
 8000742:	bf00      	nop
 8000744:	08005058 	.word	0x08005058
 8000748:	20000064 	.word	0x20000064
 800074c:	0800506c 	.word	0x0800506c
 8000750:	08005080 	.word	0x08005080

08000754 <ili9488_Init>:

#define  LCD_IO_WriteData16_to_2x8(dt)    {LCD_IO_WriteData8((dt) >> 8); LCD_IO_WriteData8(dt); }

//-----------------------------------------------------------------------------
void ili9488_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  if((Is_ili9488_Initialized & ILI9488_LCD_INITIALIZED) == 0)
 8000758:	4b43      	ldr	r3, [pc, #268]	; (8000868 <ili9488_Init+0x114>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	2b00      	cmp	r3, #0
 8000762:	d115      	bne.n	8000790 <ili9488_Init+0x3c>
  {
    Is_ili9488_Initialized |= ILI9488_LCD_INITIALIZED;
 8000764:	4b40      	ldr	r3, [pc, #256]	; (8000868 <ili9488_Init+0x114>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4b3e      	ldr	r3, [pc, #248]	; (8000868 <ili9488_Init+0x114>)
 8000770:	701a      	strb	r2, [r3, #0]
    if((Is_ili9488_Initialized & ILI9488_IO_INITIALIZED) == 0)
 8000772:	4b3d      	ldr	r3, [pc, #244]	; (8000868 <ili9488_Init+0x114>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	2b00      	cmp	r3, #0
 800077c:	d101      	bne.n	8000782 <ili9488_Init+0x2e>
      LCD_IO_Init();
 800077e:	f000 fd81 	bl	8001284 <LCD_IO_Init>
    Is_ili9488_Initialized |= ILI9488_IO_INITIALIZED;
 8000782:	4b39      	ldr	r3, [pc, #228]	; (8000868 <ili9488_Init+0x114>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	f043 0302 	orr.w	r3, r3, #2
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b36      	ldr	r3, [pc, #216]	; (8000868 <ili9488_Init+0x114>)
 800078e:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(105);
 8000790:	2069      	movs	r0, #105	; 0x69
 8000792:	f000 fd53 	bl	800123c <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SWRESET);
 8000796:	2001      	movs	r0, #1
 8000798:	f000 fe2c 	bl	80013f4 <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 800079c:	2005      	movs	r0, #5
 800079e:	f000 fd4d 	bl	800123c <LCD_Delay>
  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRP1, (uint8_t *)"\x00\x03\x09\x08\x16\x0A\x3F\x78\x4C\x09\x0A\x08\x16\x1A\x0F", 15);
 80007a2:	220f      	movs	r2, #15
 80007a4:	4931      	ldr	r1, [pc, #196]	; (800086c <ili9488_Init+0x118>)
 80007a6:	20e0      	movs	r0, #224	; 0xe0
 80007a8:	f000 fe7c 	bl	80014a4 <LCD_IO_WriteCmd8MultipleData8>
  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRN1, (uint8_t *)"\x00\x16\x19\x03\x0F\x05\x32\x45\x46\x04\x0E\x0D\x35\x37\x0F", 15);
 80007ac:	220f      	movs	r2, #15
 80007ae:	4930      	ldr	r1, [pc, #192]	; (8000870 <ili9488_Init+0x11c>)
 80007b0:	20e1      	movs	r0, #225	; 0xe1
 80007b2:	f000 fe77 	bl	80014a4 <LCD_IO_WriteCmd8MultipleData8>
  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_PWCTR1, (uint8_t *)"\x17\x15", 2);
 80007b6:	2202      	movs	r2, #2
 80007b8:	492e      	ldr	r1, [pc, #184]	; (8000874 <ili9488_Init+0x120>)
 80007ba:	20c0      	movs	r0, #192	; 0xc0
 80007bc:	f000 fe72 	bl	80014a4 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 80007c0:	2005      	movs	r0, #5
 80007c2:	f000 fd3b 	bl	800123c <LCD_Delay>
  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8(ILI9488_PWCTR2); LCD_IO_WriteData8(0x41);
 80007c6:	20c1      	movs	r0, #193	; 0xc1
 80007c8:	f000 fe14 	bl	80013f4 <LCD_IO_WriteCmd8>
 80007cc:	2041      	movs	r0, #65	; 0x41
 80007ce:	f000 fe2b 	bl	8001428 <LCD_IO_WriteData8>
  LCD_Delay(5);
 80007d2:	2005      	movs	r0, #5
 80007d4:	f000 fd32 	bl	800123c <LCD_Delay>
  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_VMCTR1, (uint8_t *)"\x00\x12\x80", 3);
 80007d8:	2203      	movs	r2, #3
 80007da:	4927      	ldr	r1, [pc, #156]	; (8000878 <ili9488_Init+0x124>)
 80007dc:	20c5      	movs	r0, #197	; 0xc5
 80007de:	f000 fe61 	bl	80014a4 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 80007e2:	2005      	movs	r0, #5
 80007e4:	f000 fd2a 	bl	800123c <LCD_Delay>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x66); // Interface Pixel Format (24 bit)
 80007e8:	203a      	movs	r0, #58	; 0x3a
 80007ea:	f000 fe03 	bl	80013f4 <LCD_IO_WriteCmd8>
 80007ee:	2066      	movs	r0, #102	; 0x66
 80007f0:	f000 fe1a 	bl	8001428 <LCD_IO_WriteData8>
  #if LCD_SPI_MODE != 2
  // LCD_IO_WriteCmd8(0xFB); LCD_IO_WriteData8(0x80);
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x80); // Interface Mode Control (SDO NOT USE)
  #else
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x00); // Interface Mode Control (SDO USE)
 80007f4:	20b0      	movs	r0, #176	; 0xb0
 80007f6:	f000 fdfd 	bl	80013f4 <LCD_IO_WriteCmd8>
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 fe14 	bl	8001428 <LCD_IO_WriteData8>
  #endif
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x55); // Interface Pixel Format (16 bit)
  #endif
  LCD_IO_WriteCmd8(ILI9488_FRMCTR1); LCD_IO_WriteData8(0xA0); // Frame rate (60Hz)
 8000800:	20b1      	movs	r0, #177	; 0xb1
 8000802:	f000 fdf7 	bl	80013f4 <LCD_IO_WriteCmd8>
 8000806:	20a0      	movs	r0, #160	; 0xa0
 8000808:	f000 fe0e 	bl	8001428 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_INVCTR); LCD_IO_WriteData8(0x02); // Display Inversion Control (2-dot)
 800080c:	20b4      	movs	r0, #180	; 0xb4
 800080e:	f000 fdf1 	bl	80013f4 <LCD_IO_WriteCmd8>
 8000812:	2002      	movs	r0, #2
 8000814:	f000 fe08 	bl	8001428 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_DFUNCTR, (uint8_t *)"\x02\x02", 2); // Display Function Control RGB/MCU Interface Control
 8000818:	2202      	movs	r2, #2
 800081a:	4918      	ldr	r1, [pc, #96]	; (800087c <ili9488_Init+0x128>)
 800081c:	20b6      	movs	r0, #182	; 0xb6
 800081e:	f000 fe41 	bl	80014a4 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9488_IMGFUNCT); LCD_IO_WriteData8(0x00); // Set Image Functio (Disable 24 bit data)
 8000822:	20e9      	movs	r0, #233	; 0xe9
 8000824:	f000 fde6 	bl	80013f4 <LCD_IO_WriteCmd8>
 8000828:	2000      	movs	r0, #0
 800082a:	f000 fdfd 	bl	8001428 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_ADJCTR3, (uint8_t *)"\xA9\x51\x2C\x82", 4); // Adjust Control (D7 stream, loose)
 800082e:	2204      	movs	r2, #4
 8000830:	4913      	ldr	r1, [pc, #76]	; (8000880 <ili9488_Init+0x12c>)
 8000832:	20f7      	movs	r0, #247	; 0xf7
 8000834:	f000 fe36 	bl	80014a4 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8000838:	2005      	movs	r0, #5
 800083a:	f000 fcff 	bl	800123c <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Exit Sleep
 800083e:	2011      	movs	r0, #17
 8000840:	f000 fdd8 	bl	80013f4 <LCD_IO_WriteCmd8>
  LCD_Delay(120);
 8000844:	2078      	movs	r0, #120	; 0x78
 8000846:	f000 fcf9 	bl	800123c <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_DISPON);      // Display on
 800084a:	2029      	movs	r0, #41	; 0x29
 800084c:	f000 fdd2 	bl	80013f4 <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8000850:	2005      	movs	r0, #5
 8000852:	f000 fcf3 	bl	800123c <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 8000856:	2036      	movs	r0, #54	; 0x36
 8000858:	f000 fdcc 	bl	80013f4 <LCD_IO_WriteCmd8>
 800085c:	2028      	movs	r0, #40	; 0x28
 800085e:	f000 fde3 	bl	8001428 <LCD_IO_WriteData8>
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000e4 	.word	0x200000e4
 800086c:	08005084 	.word	0x08005084
 8000870:	08005094 	.word	0x08005094
 8000874:	080050a4 	.word	0x080050a4
 8000878:	080050a8 	.word	0x080050a8
 800087c:	080050ac 	.word	0x080050ac
 8000880:	080050b0 	.word	0x080050b0

08000884 <ili9488_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOn(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Display on
 8000888:	2011      	movs	r0, #17
 800088a:	f000 fdb3 	bl	80013f4 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(1);
 800088e:	2001      	movs	r0, #1
 8000890:	f000 fce0 	bl	8001254 <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <ili9488_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOff(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPIN);       // Display off
 800089c:	2010      	movs	r0, #16
 800089e:	f000 fda9 	bl	80013f4 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(0);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f000 fcd6 	bl	8001254 <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <ili9488_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9488_GetLcdPixelWidth(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return ILI9488_MAX_X + 1;
 80008b0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <ili9488_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9488_GetLcdPixelHeight(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  return ILI9488_MAX_Y + 1;
 80008c2:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <ili9488_ReadID>:
  * @brief  Get the ILI9488 ID.
  * @param  None
  * @retval The ILI9488 ID
  */
uint16_t ili9488_ReadID(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();

  if(Is_ili9488_Initialized == 0)
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <ili9488_ReadID+0x40>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d101      	bne.n	80008e6 <ili9488_ReadID+0x16>
  {
    ili9488_Init();
 80008e2:	f7ff ff37 	bl	8000754 <ili9488_Init>
  }

  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData8(0x04, (uint8_t *)&id, 3, 0);
 80008e6:	1d39      	adds	r1, r7, #4
 80008e8:	2300      	movs	r3, #0
 80008ea:	2203      	movs	r2, #3
 80008ec:	2004      	movs	r0, #4
 80008ee:	f000 fe19 	bl	8001524 <LCD_IO_ReadCmd8MultipleData8>
  id <<= 1;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
  #endif
  // printf("ID:%08X\r\n", (unsigned int)id);

  ILI9488_LCDMUTEX_POP();

  if(id == 0x00668054)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a06      	ldr	r2, [pc, #24]	; (8000914 <ili9488_ReadID+0x44>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d102      	bne.n	8000906 <ili9488_ReadID+0x36>
    return 0x9488;
 8000900:	f249 4388 	movw	r3, #38024	; 0x9488
 8000904:	e000      	b.n	8000908 <ili9488_ReadID+0x38>
  return 0;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200000e4 	.word	0x200000e4
 8000914:	00668054 	.word	0x00668054

08000918 <ili9488_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9488_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	460a      	mov	r2, r1
 8000922:	80fb      	strh	r3, [r7, #6]
 8000924:	4613      	mov	r3, r2
 8000926:	80bb      	strh	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8000928:	202a      	movs	r0, #42	; 0x2a
 800092a:	f000 fd63 	bl	80013f4 <LCD_IO_WriteCmd8>
 800092e:	88fb      	ldrh	r3, [r7, #6]
 8000930:	0a1b      	lsrs	r3, r3, #8
 8000932:	b29b      	uxth	r3, r3
 8000934:	b2db      	uxtb	r3, r3
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fd76 	bl	8001428 <LCD_IO_WriteData8>
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fd71 	bl	8001428 <LCD_IO_WriteData8>
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	b29b      	uxth	r3, r3
 800094c:	b2db      	uxtb	r3, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fd6a 	bl	8001428 <LCD_IO_WriteData8>
 8000954:	88fb      	ldrh	r3, [r7, #6]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	4618      	mov	r0, r3
 800095a:	f000 fd65 	bl	8001428 <LCD_IO_WriteData8>
 800095e:	202b      	movs	r0, #43	; 0x2b
 8000960:	f000 fd48 	bl	80013f4 <LCD_IO_WriteCmd8>
 8000964:	88bb      	ldrh	r3, [r7, #4]
 8000966:	0a1b      	lsrs	r3, r3, #8
 8000968:	b29b      	uxth	r3, r3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fd5b 	bl	8001428 <LCD_IO_WriteData8>
 8000972:	88bb      	ldrh	r3, [r7, #4]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fd56 	bl	8001428 <LCD_IO_WriteData8>
 800097c:	88bb      	ldrh	r3, [r7, #4]
 800097e:	0a1b      	lsrs	r3, r3, #8
 8000980:	b29b      	uxth	r3, r3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fd4f 	bl	8001428 <LCD_IO_WriteData8>
 800098a:	88bb      	ldrh	r3, [r7, #4]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 fd4a 	bl	8001428 <LCD_IO_WriteData8>
  ILI9488_LCDMUTEX_POP();
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <ili9488_write16to24>:

/* The SPI mode not capable the 16bpp mode -> convert to 24bpp */
#if ILI9488_INTERFACE == 0
extern inline void ili9488_write16to24(uint16_t RGBCode);
inline void ili9488_write16to24(uint16_t RGBCode)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData8((RGBCode & 0xF800) >> 8);
 80009a6:	88fb      	ldrh	r3, [r7, #6]
 80009a8:	121b      	asrs	r3, r3, #8
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	f023 0307 	bic.w	r3, r3, #7
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 fd38 	bl	8001428 <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x07E0) >> 3);
 80009b8:	88fb      	ldrh	r3, [r7, #6]
 80009ba:	10db      	asrs	r3, r3, #3
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	f023 0303 	bic.w	r3, r3, #3
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 fd2f 	bl	8001428 <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x001F) << 3);
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 fd29 	bl	8001428 <LCD_IO_WriteData8>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <ili9488_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9488_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	80fb      	strh	r3, [r7, #6]
 80009e8:	460b      	mov	r3, r1
 80009ea:	80bb      	strh	r3, [r7, #4]
 80009ec:	4613      	mov	r3, r2
 80009ee:	807b      	strh	r3, [r7, #2]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 80009f0:	202a      	movs	r0, #42	; 0x2a
 80009f2:	f000 fcff 	bl	80013f4 <LCD_IO_WriteCmd8>
 80009f6:	88fb      	ldrh	r3, [r7, #6]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 fd12 	bl	8001428 <LCD_IO_WriteData8>
 8000a04:	88fb      	ldrh	r3, [r7, #6]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 fd0d 	bl	8001428 <LCD_IO_WriteData8>
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 fd06 	bl	8001428 <LCD_IO_WriteData8>
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 fd01 	bl	8001428 <LCD_IO_WriteData8>
 8000a26:	202b      	movs	r0, #43	; 0x2b
 8000a28:	f000 fce4 	bl	80013f4 <LCD_IO_WriteCmd8>
 8000a2c:	88bb      	ldrh	r3, [r7, #4]
 8000a2e:	0a1b      	lsrs	r3, r3, #8
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fcf7 	bl	8001428 <LCD_IO_WriteData8>
 8000a3a:	88bb      	ldrh	r3, [r7, #4]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 fcf2 	bl	8001428 <LCD_IO_WriteData8>
 8000a44:	88bb      	ldrh	r3, [r7, #4]
 8000a46:	0a1b      	lsrs	r3, r3, #8
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 fceb 	bl	8001428 <LCD_IO_WriteData8>
 8000a52:	88bb      	ldrh	r3, [r7, #4]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fce6 	bl	8001428 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8000a5c:	202c      	movs	r0, #44	; 0x2c
 8000a5e:	f000 fcc9 	bl	80013f4 <LCD_IO_WriteCmd8>
  ili9488_write16to24(RGBCode);
 8000a62:	887b      	ldrh	r3, [r7, #2]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff99 	bl	800099c <ili9488_write16to24>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_RAMWR); LCD_IO_WriteData16(RGBCode);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <ili9488_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9488_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b084      	sub	sp, #16
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	460a      	mov	r2, r1
 8000a7c:	80fb      	strh	r3, [r7, #6]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8000a82:	202a      	movs	r0, #42	; 0x2a
 8000a84:	f000 fcb6 	bl	80013f4 <LCD_IO_WriteCmd8>
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	0a1b      	lsrs	r3, r3, #8
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 fcc9 	bl	8001428 <LCD_IO_WriteData8>
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 fcc4 	bl	8001428 <LCD_IO_WriteData8>
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	0a1b      	lsrs	r3, r3, #8
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fcbd 	bl	8001428 <LCD_IO_WriteData8>
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 fcb8 	bl	8001428 <LCD_IO_WriteData8>
 8000ab8:	202b      	movs	r0, #43	; 0x2b
 8000aba:	f000 fc9b 	bl	80013f4 <LCD_IO_WriteCmd8>
 8000abe:	88bb      	ldrh	r3, [r7, #4]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 fcae 	bl	8001428 <LCD_IO_WriteData8>
 8000acc:	88bb      	ldrh	r3, [r7, #4]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 fca9 	bl	8001428 <LCD_IO_WriteData8>
 8000ad6:	88bb      	ldrh	r3, [r7, #4]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fca2 	bl	8001428 <LCD_IO_WriteData8>
 8000ae4:	88bb      	ldrh	r3, [r7, #4]
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 fc9d 	bl	8001428 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, &ret, 1, 1);
 8000aee:	f107 010e 	add.w	r1, r7, #14
 8000af2:	2301      	movs	r3, #1
 8000af4:	2201      	movs	r2, #1
 8000af6:	202e      	movs	r0, #46	; 0x2e
 8000af8:	f000 fd38 	bl	800156c <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, &ret, 1, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
  return ret;
 8000afc:	89fb      	ldrh	r3, [r7, #14]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <ili9488_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9488_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4604      	mov	r4, r0
 8000b10:	4608      	mov	r0, r1
 8000b12:	4611      	mov	r1, r2
 8000b14:	461a      	mov	r2, r3
 8000b16:	4623      	mov	r3, r4
 8000b18:	80fb      	strh	r3, [r7, #6]
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	80bb      	strh	r3, [r7, #4]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	807b      	strh	r3, [r7, #2]
 8000b22:	4613      	mov	r3, r2
 8000b24:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8000b26:	4a2a      	ldr	r2, [pc, #168]	; (8000bd0 <ili9488_SetDisplayWindow+0xc8>)
 8000b28:	88bb      	ldrh	r3, [r7, #4]
 8000b2a:	8013      	strh	r3, [r2, #0]
 8000b2c:	88ba      	ldrh	r2, [r7, #4]
 8000b2e:	883b      	ldrh	r3, [r7, #0]
 8000b30:	4413      	add	r3, r2
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	3b01      	subs	r3, #1
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <ili9488_SetDisplayWindow+0xcc>)
 8000b3a:	801a      	strh	r2, [r3, #0]
  LCD_IO_WriteCmd8(ILI9488_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8000b3c:	202a      	movs	r0, #42	; 0x2a
 8000b3e:	f000 fc59 	bl	80013f4 <LCD_IO_WriteCmd8>
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	0a1b      	lsrs	r3, r3, #8
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 fc6c 	bl	8001428 <LCD_IO_WriteData8>
 8000b50:	88fb      	ldrh	r3, [r7, #6]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 fc67 	bl	8001428 <LCD_IO_WriteData8>
 8000b5a:	88fa      	ldrh	r2, [r7, #6]
 8000b5c:	887b      	ldrh	r3, [r7, #2]
 8000b5e:	4413      	add	r3, r2
 8000b60:	3b01      	subs	r3, #1
 8000b62:	121b      	asrs	r3, r3, #8
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 fc5e 	bl	8001428 <LCD_IO_WriteData8>
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	887b      	ldrh	r3, [r7, #2]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	4413      	add	r3, r2
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fc53 	bl	8001428 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8000b82:	202b      	movs	r0, #43	; 0x2b
 8000b84:	f000 fc36 	bl	80013f4 <LCD_IO_WriteCmd8>
 8000b88:	88bb      	ldrh	r3, [r7, #4]
 8000b8a:	0a1b      	lsrs	r3, r3, #8
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 fc49 	bl	8001428 <LCD_IO_WriteData8>
 8000b96:	88bb      	ldrh	r3, [r7, #4]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fc44 	bl	8001428 <LCD_IO_WriteData8>
 8000ba0:	88ba      	ldrh	r2, [r7, #4]
 8000ba2:	883b      	ldrh	r3, [r7, #0]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	121b      	asrs	r3, r3, #8
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 fc3b 	bl	8001428 <LCD_IO_WriteData8>
 8000bb2:	88bb      	ldrh	r3, [r7, #4]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	883b      	ldrh	r3, [r7, #0]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	4413      	add	r3, r2
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 fc30 	bl	8001428 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - Height - Ypos); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - 1 - Ypos);
  #endif
  #endif

  ILI9488_LCDMUTEX_POP();
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd90      	pop	{r4, r7, pc}
 8000bd0:	200000e6 	.word	0x200000e6
 8000bd4:	200000e8 	.word	0x200000e8

08000bd8 <ili9488_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	4604      	mov	r4, r0
 8000be0:	4608      	mov	r0, r1
 8000be2:	4611      	mov	r1, r2
 8000be4:	461a      	mov	r2, r3
 8000be6:	4623      	mov	r3, r4
 8000be8:	80fb      	strh	r3, [r7, #6]
 8000bea:	4603      	mov	r3, r0
 8000bec:	80bb      	strh	r3, [r7, #4]
 8000bee:	460b      	mov	r3, r1
 8000bf0:	807b      	strh	r3, [r7, #2]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, Length, 1, RGBCode);
 8000bf6:	883a      	ldrh	r2, [r7, #0]
 8000bf8:	8879      	ldrh	r1, [r7, #2]
 8000bfa:	88b8      	ldrh	r0, [r7, #4]
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2301      	movs	r3, #1
 8000c02:	f000 f820 	bl	8000c46 <ili9488_FillRect>
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd90      	pop	{r4, r7, pc}

08000c0e <ili9488_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8000c0e:	b590      	push	{r4, r7, lr}
 8000c10:	b085      	sub	sp, #20
 8000c12:	af02      	add	r7, sp, #8
 8000c14:	4604      	mov	r4, r0
 8000c16:	4608      	mov	r0, r1
 8000c18:	4611      	mov	r1, r2
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4623      	mov	r3, r4
 8000c1e:	80fb      	strh	r3, [r7, #6]
 8000c20:	4603      	mov	r3, r0
 8000c22:	80bb      	strh	r3, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, 1, Length, RGBCode);
 8000c2c:	883a      	ldrh	r2, [r7, #0]
 8000c2e:	8879      	ldrh	r1, [r7, #2]
 8000c30:	88b8      	ldrh	r0, [r7, #4]
 8000c32:	88fb      	ldrh	r3, [r7, #6]
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	4613      	mov	r3, r2
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f000 f804 	bl	8000c46 <ili9488_FillRect>
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd90      	pop	{r4, r7, pc}

08000c46 <ili9488_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9488_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8000c46:	b590      	push	{r4, r7, lr}
 8000c48:	b085      	sub	sp, #20
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	4608      	mov	r0, r1
 8000c50:	4611      	mov	r1, r2
 8000c52:	461a      	mov	r2, r3
 8000c54:	4623      	mov	r3, r4
 8000c56:	80fb      	strh	r3, [r7, #6]
 8000c58:	4603      	mov	r3, r0
 8000c5a:	80bb      	strh	r3, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	807b      	strh	r3, [r7, #2]
 8000c60:	4613      	mov	r3, r2
 8000c62:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000c64:	883b      	ldrh	r3, [r7, #0]
 8000c66:	887a      	ldrh	r2, [r7, #2]
 8000c68:	88b9      	ldrh	r1, [r7, #4]
 8000c6a:	88f8      	ldrh	r0, [r7, #6]
 8000c6c:	f7ff ff4c 	bl	8000b08 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8000c70:	202c      	movs	r0, #44	; 0x2c
 8000c72:	f000 fbbf 	bl	80013f4 <LCD_IO_WriteCmd8>
  uint32_t XYsize = Xsize * Ysize;
 8000c76:	887b      	ldrh	r3, [r7, #2]
 8000c78:	883a      	ldrh	r2, [r7, #0]
 8000c7a:	fb02 f303 	mul.w	r3, r2, r3
 8000c7e:	60fb      	str	r3, [r7, #12]
  while(XYsize--)
 8000c80:	e003      	b.n	8000c8a <ili9488_FillRect+0x44>
    ili9488_write16to24(RGBCode);
 8000c82:	8c3b      	ldrh	r3, [r7, #32]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fe89 	bl	800099c <ili9488_write16to24>
  while(XYsize--)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	1e5a      	subs	r2, r3, #1
 8000c8e:	60fa      	str	r2, [r7, #12]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f6      	bne.n	8000c82 <ili9488_FillRect+0x3c>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8DataFill16(ILI9488_RAMWR, RGBCode, Xsize * Ysize);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd90      	pop	{r4, r7, pc}

08000c9c <ili9488_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9488_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	603a      	str	r2, [r7, #0]
 8000ca6:	80fb      	strh	r3, [r7, #6]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
  /* Read bitmap size */
  Ypos += pbmp[22] + (pbmp[23] << 8) - 1;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	3316      	adds	r3, #22
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	3317      	adds	r3, #23
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	021b      	lsls	r3, r3, #8
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	4413      	add	r3, r2
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	88bb      	ldrh	r3, [r7, #4]
 8000cce:	4413      	add	r3, r2
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	80bb      	strh	r3, [r7, #4]
  size = *(volatile uint16_t *) (pbmp + 2);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	3302      	adds	r3, #2
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	60fb      	str	r3, [r7, #12]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	3304      	adds	r3, #4
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	041b      	lsls	r3, r3, #16
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	330a      	adds	r3, #10
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	60bb      	str	r3, [r7, #8]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	330c      	adds	r3, #12
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	041b      	lsls	r3, r3, #16
 8000d06:	461a      	mov	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	60bb      	str	r3, [r7, #8]
  size = (size - index)/2;
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	085b      	lsrs	r3, r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 8000d18:	683a      	ldr	r2, [r7, #0]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	603b      	str	r3, [r7, #0]

  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_UP);
 8000d20:	2036      	movs	r0, #54	; 0x36
 8000d22:	f000 fb67 	bl	80013f4 <LCD_IO_WriteCmd8>
 8000d26:	2068      	movs	r0, #104	; 0x68
 8000d28:	f000 fb7e 	bl	8001428 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yEnd); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yStart);
 8000d2c:	202b      	movs	r0, #43	; 0x2b
 8000d2e:	f000 fb61 	bl	80013f4 <LCD_IO_WriteCmd8>
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <ili9488_DrawBitmap+0x118>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	121b      	asrs	r3, r3, #8
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 fb71 	bl	8001428 <LCD_IO_WriteData8>
 8000d46:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <ili9488_DrawBitmap+0x118>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 fb68 	bl	8001428 <LCD_IO_WriteData8>
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <ili9488_DrawBitmap+0x11c>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8000d60:	3301      	adds	r3, #1
 8000d62:	121b      	asrs	r3, r3, #8
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fb5e 	bl	8001428 <LCD_IO_WriteData8>
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <ili9488_DrawBitmap+0x11c>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 fb55 	bl	8001428 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8000d7e:	202c      	movs	r0, #44	; 0x2c
 8000d80:	f000 fb38 	bl	80013f4 <LCD_IO_WriteCmd8>
  while(size--)
 8000d84:	e007      	b.n	8000d96 <ili9488_DrawBitmap+0xfa>
  {
    ili9488_write16to24(*(uint16_t *)pbmp);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fe06 	bl	800099c <ili9488_write16to24>
    pbmp+= 2;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	3302      	adds	r3, #2
 8000d94:	603b      	str	r3, [r7, #0]
  while(size--)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	1e5a      	subs	r2, r3, #1
 8000d9a:	60fa      	str	r2, [r7, #12]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1f2      	bne.n	8000d86 <ili9488_DrawBitmap+0xea>
  }
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 8000da0:	2036      	movs	r0, #54	; 0x36
 8000da2:	f000 fb27 	bl	80013f4 <LCD_IO_WriteCmd8>
 8000da6:	2028      	movs	r0, #40	; 0x28
 8000da8:	f000 fb3e 	bl	8001428 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, (uint16_t *)pbmp, size);
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
  #endif

  ILI9488_LCDMUTEX_POP();
}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200000e8 	.word	0x200000e8
 8000db8:	200000e6 	.word	0x200000e6

08000dbc <ili9488_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4623      	mov	r3, r4
 8000dcc:	80fb      	strh	r3, [r7, #6]
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80bb      	strh	r3, [r7, #4]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	807b      	strh	r3, [r7, #2]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	803b      	strh	r3, [r7, #0]
  uint32_t size;

  size = (Xsize * Ysize);
 8000dda:	887b      	ldrh	r3, [r7, #2]
 8000ddc:	883a      	ldrh	r2, [r7, #0]
 8000dde:	fb02 f303 	mul.w	r3, r2, r3
 8000de2:	60fb      	str	r3, [r7, #12]

  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000de4:	883b      	ldrh	r3, [r7, #0]
 8000de6:	887a      	ldrh	r2, [r7, #2]
 8000de8:	88b9      	ldrh	r1, [r7, #4]
 8000dea:	88f8      	ldrh	r0, [r7, #6]
 8000dec:	f7ff fe8c 	bl	8000b08 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8000df0:	202c      	movs	r0, #44	; 0x2c
 8000df2:	f000 faff 	bl	80013f4 <LCD_IO_WriteCmd8>
  while(size--)
 8000df6:	e007      	b.n	8000e08 <ili9488_DrawRGBImage+0x4c>
  {
    ili9488_write16to24(*pdata);
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fdcd 	bl	800099c <ili9488_write16to24>
    pdata++;
 8000e02:	6a3b      	ldr	r3, [r7, #32]
 8000e04:	3302      	adds	r3, #2
 8000e06:	623b      	str	r3, [r7, #32]
  while(size--)
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	1e5a      	subs	r2, r3, #1
 8000e0c:	60fa      	str	r2, [r7, #12]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1f2      	bne.n	8000df8 <ili9488_DrawRGBImage+0x3c>
  }
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, pdata, size);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd90      	pop	{r4, r7, pc}

08000e1a <ili9488_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 8000e1a:	b590      	push	{r4, r7, lr}
 8000e1c:	b085      	sub	sp, #20
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4604      	mov	r4, r0
 8000e22:	4608      	mov	r0, r1
 8000e24:	4611      	mov	r1, r2
 8000e26:	461a      	mov	r2, r3
 8000e28:	4623      	mov	r3, r4
 8000e2a:	80fb      	strh	r3, [r7, #6]
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	80bb      	strh	r3, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	807b      	strh	r3, [r7, #2]
 8000e34:	4613      	mov	r3, r2
 8000e36:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  size = (Xsize * Ysize);
 8000e3c:	887b      	ldrh	r3, [r7, #2]
 8000e3e:	883a      	ldrh	r2, [r7, #0]
 8000e40:	fb02 f303 	mul.w	r3, r2, r3
 8000e44:	60fb      	str	r3, [r7, #12]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000e46:	883b      	ldrh	r3, [r7, #0]
 8000e48:	887a      	ldrh	r2, [r7, #2]
 8000e4a:	88b9      	ldrh	r1, [r7, #4]
 8000e4c:	88f8      	ldrh	r0, [r7, #6]
 8000e4e:	f7ff fe5b 	bl	8000b08 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, pdata, size, 1);
 8000e52:	2301      	movs	r3, #1
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	6a39      	ldr	r1, [r7, #32]
 8000e58:	202e      	movs	r0, #46	; 0x2e
 8000e5a:	f000 fb87 	bl	800156c <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, pdata, size, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd90      	pop	{r4, r7, pc}
	...

08000e68 <ili9488_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9488_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	80fb      	strh	r3, [r7, #6]
 8000e72:	460b      	mov	r3, r1
 8000e74:	80bb      	strh	r3, [r7, #4]
 8000e76:	4613      	mov	r3, r2
 8000e78:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9488_ORIENTATION == 1)
  if((TopFix != scrparam[1]) || (BottonFix != scrparam[3]))
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <ili9488_Scroll+0xbc>)
 8000e7c:	885b      	ldrh	r3, [r3, #2]
 8000e7e:	88ba      	ldrh	r2, [r7, #4]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d104      	bne.n	8000e8e <ili9488_Scroll+0x26>
 8000e84:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <ili9488_Scroll+0xbc>)
 8000e86:	88db      	ldrh	r3, [r3, #6]
 8000e88:	887a      	ldrh	r2, [r7, #2]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d015      	beq.n	8000eba <ili9488_Scroll+0x52>
  {
    scrparam[1] = TopFix;
 8000e8e:	4a25      	ldr	r2, [pc, #148]	; (8000f24 <ili9488_Scroll+0xbc>)
 8000e90:	88bb      	ldrh	r3, [r7, #4]
 8000e92:	8053      	strh	r3, [r2, #2]
    scrparam[3] = BottonFix;
 8000e94:	4a23      	ldr	r2, [pc, #140]	; (8000f24 <ili9488_Scroll+0xbc>)
 8000e96:	887b      	ldrh	r3, [r7, #2]
 8000e98:	80d3      	strh	r3, [r2, #6]
    scrparam[2] = ILI9488_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 8000e9a:	88bb      	ldrh	r3, [r7, #4]
 8000e9c:	425b      	negs	r3, r3
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	887b      	ldrh	r3, [r7, #2]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <ili9488_Scroll+0xbc>)
 8000eae:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9488_VSCRDEF, &scrparam[1], 3);
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	491d      	ldr	r1, [pc, #116]	; (8000f28 <ili9488_Scroll+0xc0>)
 8000eb4:	2033      	movs	r0, #51	; 0x33
 8000eb6:	f000 fb13 	bl	80014e0 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll = (0 - Scroll) % scrparam[2];
 8000eba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ebe:	425b      	negs	r3, r3
 8000ec0:	4a18      	ldr	r2, [pc, #96]	; (8000f24 <ili9488_Scroll+0xbc>)
 8000ec2:	8892      	ldrh	r2, [r2, #4]
 8000ec4:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ec8:	fb02 f201 	mul.w	r2, r2, r1
 8000ecc:	1a9b      	subs	r3, r3, r2
 8000ece:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8000ed0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	da0a      	bge.n	8000eee <ili9488_Scroll+0x86>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <ili9488_Scroll+0xbc>)
 8000eda:	889a      	ldrh	r2, [r3, #4]
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	4413      	add	r3, r2
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <ili9488_Scroll+0xbc>)
 8000ee4:	885b      	ldrh	r3, [r3, #2]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	80fb      	strh	r3, [r7, #6]
 8000eec:	e005      	b.n	8000efa <ili9488_Scroll+0x92>
  else
    Scroll = Scroll + scrparam[1];
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <ili9488_Scroll+0xbc>)
 8000ef0:	885a      	ldrh	r2, [r3, #2]
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #endif
  if(Scroll != scrparam[0])
 8000efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000efe:	4a09      	ldr	r2, [pc, #36]	; (8000f24 <ili9488_Scroll+0xbc>)
 8000f00:	8812      	ldrh	r2, [r2, #0]
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d009      	beq.n	8000f1a <ili9488_Scroll+0xb2>
  {
    scrparam[0] = Scroll;
 8000f06:	88fa      	ldrh	r2, [r7, #6]
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <ili9488_Scroll+0xbc>)
 8000f0a:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9488_VSCRSADD, scrparam[0], 1);
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <ili9488_Scroll+0xbc>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	2201      	movs	r2, #1
 8000f12:	4619      	mov	r1, r3
 8000f14:	2037      	movs	r0, #55	; 0x37
 8000f16:	f000 faa1 	bl	800145c <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9488_LCDMUTEX_POP();
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200000ec 	.word	0x200000ec
 8000f28:	200000ee 	.word	0x200000ee

08000f2c <LcdDirRead>:

#elif   LCD_SPI_MODE == 2
/* Fullduplex SPI : the direction is fix */
extern inline void LcdDirRead(uint32_t d);
inline void LcdDirRead(uint32_t d)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 8000f34:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <LcdDirRead+0x70>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000f3c:	4a17      	ldr	r2, [pc, #92]	; (8000f9c <LcdDirRead+0x70>)
 8000f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f42:	6013      	str	r3, [r2, #0]
  while(d--)
 8000f44:	e008      	b.n	8000f58 <LcdDirRead+0x2c>
  {
    GPIOX_ODR(LCD_SCK) = 0;
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <LcdDirRead+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
    LCD_READ_DELAY;
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f000 f965 	bl	800121c <LCD_IO_Delay>
    GPIOX_ODR(LCD_SCK) = 1;
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <LcdDirRead+0x74>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	601a      	str	r2, [r3, #0]
  while(d--)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	1e5a      	subs	r2, r3, #1
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1f1      	bne.n	8000f46 <LcdDirRead+0x1a>
  }
  GPIOX_MODER(MODE_ALTER, LCD_SCK);
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <LcdDirRead+0x70>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000f6a:	4a0c      	ldr	r2, [pc, #48]	; (8000f9c <LcdDirRead+0x70>)
 8000f6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f70:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8000f72:	e002      	b.n	8000f7a <LcdDirRead+0x4e>
    d = SPIX->DR;
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <LcdDirRead+0x78>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <LcdDirRead+0x7c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1f8      	bne.n	8000f74 <LcdDirRead+0x48>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_RXONLY;
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <LcdDirRead+0x78>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 8000f8a:	4a06      	ldr	r2, [pc, #24]	; (8000fa4 <LcdDirRead+0x78>)
 8000f8c:	f443 6384 	orr.w	r3, r3, #1056	; 0x420
 8000f90:	6013      	str	r3, [r2, #0]
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	42400294 	.word	0x42400294
 8000fa4:	40013000 	.word	0x40013000
 8000fa8:	42260100 	.word	0x42260100

08000fac <LcdDirWrite>:

extern inline void LcdDirWrite(void);
inline void LcdDirWrite(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
  volatile uint8_t d8 __attribute__((unused));
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8000fb2:	e003      	b.n	8000fbc <LcdDirWrite+0x10>
    d8 = SPIX->DR;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <LcdDirWrite+0x60>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	71fb      	strb	r3, [r7, #7]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <LcdDirWrite+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1f7      	bne.n	8000fb4 <LcdDirWrite+0x8>
  SPIX->CR1 &= ~SPI_CR1_SPE;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <LcdDirWrite+0x60>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a10      	ldr	r2, [pc, #64]	; (800100c <LcdDirWrite+0x60>)
 8000fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fce:	6013      	str	r3, [r2, #0]
  SPIX->CR1 = (SPIX->CR1 & ~(SPI_CR1_BR | SPI_CR1_RXONLY)) | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <LcdDirWrite+0x60>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	; (800100c <LcdDirWrite+0x60>)
 8000fda:	f043 0318 	orr.w	r3, r3, #24
 8000fde:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8000fe0:	2006      	movs	r0, #6
 8000fe2:	f000 f91b 	bl	800121c <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8000fe6:	e003      	b.n	8000ff0 <LcdDirWrite+0x44>
    d8 = SPIX->DR;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <LcdDirWrite+0x60>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	71fb      	strb	r3, [r7, #7]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <LcdDirWrite+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f7      	bne.n	8000fe8 <LcdDirWrite+0x3c>
  SPIX->CR1 |= SPI_CR1_SPE;
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <LcdDirWrite+0x60>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a03      	ldr	r2, [pc, #12]	; (800100c <LcdDirWrite+0x60>)
 8000ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40013000 	.word	0x40013000
 8001010:	42260100 	.word	0x42260100

08001014 <LcdWrite8>:
#endif

//-----------------------------------------------------------------------------
extern inline void LcdWrite8(uint8_t d8);
inline void LcdWrite8(uint8_t d8)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  SPIX->DR = d8;
 800101e:	4a07      	ldr	r2, [pc, #28]	; (800103c <LcdWrite8+0x28>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 8001024:	2002      	movs	r0, #2
 8001026:	f000 f8f9 	bl	800121c <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 800102a:	bf00      	nop
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <LcdWrite8+0x2c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1fb      	bne.n	800102c <LcdWrite8+0x18>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40013000 	.word	0x40013000
 8001040:	4226011c 	.word	0x4226011c

08001044 <LcdRead8>:

//-----------------------------------------------------------------------------
extern inline uint8_t LcdRead8(void);
inline uint8_t LcdRead8(void)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
  uint8_t d8;
  while(!BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos));
 800104a:	bf00      	nop
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <LcdRead8+0x24>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0fb      	beq.n	800104c <LcdRead8+0x8>
  d8 = (uint8_t)SPIX->DR;
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <LcdRead8+0x28>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	71fb      	strb	r3, [r7, #7]
  return d8;
 800105a:	79fb      	ldrb	r3, [r7, #7]
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	42260100 	.word	0x42260100
 800106c:	40013000 	.word	0x40013000

08001070 <LcdCmdWrite8>:

//-----------------------------------------------------------------------------
extern inline void LcdCmdWrite8(uint8_t cmd8);
inline void LcdCmdWrite8(uint8_t cmd8)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  LCD_RS_CMD;
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <LcdCmdWrite8+0x34>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
  SPIX->DR = cmd8;
 8001080:	4a09      	ldr	r2, [pc, #36]	; (80010a8 <LcdCmdWrite8+0x38>)
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 8001086:	2002      	movs	r0, #2
 8001088:	f000 f8c8 	bl	800121c <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 800108c:	bf00      	nop
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <LcdCmdWrite8+0x3c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1fb      	bne.n	800108e <LcdCmdWrite8+0x1e>
  LCD_RS_DATA;
 8001096:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <LcdCmdWrite8+0x34>)
 8001098:	2201      	movs	r2, #1
 800109a:	601a      	str	r2, [r3, #0]
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	4241029c 	.word	0x4241029c
 80010a8:	40013000 	.word	0x40013000
 80010ac:	4226011c 	.word	0x4226011c

080010b0 <LcdWrite16>:

//-----------------------------------------------------------------------------
extern inline void LcdWrite16(uint16_t d16);
inline void LcdWrite16(uint16_t d16)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	80fb      	strh	r3, [r7, #6]
  SPIX->DR = d16;
 80010ba:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <LcdWrite16+0x28>)
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f000 f8ab 	bl	800121c <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 80010c6:	bf00      	nop
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <LcdWrite16+0x2c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1fb      	bne.n	80010c8 <LcdWrite16+0x18>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40013000 	.word	0x40013000
 80010dc:	4226011c 	.word	0x4226011c

080010e0 <LCD_IO_WriteMultiData8>:
#if DMANUM(LCD_DMA_TX) == 0 || LCD_SPI == 0

/* SPI TX no DMA */

void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  while(Size--)
 80010ec:	e00a      	b.n	8001104 <LCD_IO_WriteMultiData8+0x24>
  {
    LcdWrite8(*pData);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff8e 	bl	8001014 <LcdWrite8>
    if(dinc)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d002      	beq.n	8001104 <LCD_IO_WriteMultiData8+0x24>
      pData++;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3301      	adds	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	1e5a      	subs	r2, r3, #1
 8001108:	60ba      	str	r2, [r7, #8]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1ef      	bne.n	80010ee <LCD_IO_WriteMultiData8+0xe>
  }
  LCD_CS_OFF;
 800110e:	4b03      	ldr	r3, [pc, #12]	; (800111c <LCD_IO_WriteMultiData8+0x3c>)
 8001110:	2201      	movs	r2, #1
 8001112:	601a      	str	r2, [r3, #0]
}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	42408298 	.word	0x42408298

08001120 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  while(Size--)
 800112c:	e00a      	b.n	8001144 <LCD_IO_WriteMultiData16+0x24>
  {
    LcdWrite16(*pData);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ffbc 	bl	80010b0 <LcdWrite16>
    if(dinc)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <LCD_IO_WriteMultiData16+0x24>
      pData++;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3302      	adds	r3, #2
 8001142:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	1e5a      	subs	r2, r3, #1
 8001148:	60ba      	str	r2, [r7, #8]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1ef      	bne.n	800112e <LCD_IO_WriteMultiData16+0xe>
  }
  LCD_CS_OFF;
 800114e:	4b03      	ldr	r3, [pc, #12]	; (800115c <LCD_IO_WriteMultiData16+0x3c>)
 8001150:	2201      	movs	r2, #1
 8001152:	601a      	str	r2, [r3, #0]
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	42408298 	.word	0x42408298

08001160 <LCD_IO_ReadMultiData8>:
//-----------------------------------------------------------------------------
#if LCD_SPI_MODE != 0
#if DMANUM(LCD_DMA_RX) == 0 || LCD_SPI == 0

void LCD_IO_ReadMultiData8(uint8_t * pData, uint32_t Size)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint8_t d8;
  while(Size--)
 800116a:	e009      	b.n	8001180 <LCD_IO_ReadMultiData8+0x20>
  {
    d8 = LcdRead8();
 800116c:	f7ff ff6a 	bl	8001044 <LcdRead8>
 8001170:	4603      	mov	r3, r0
 8001172:	73fb      	strb	r3, [r7, #15]
    *pData = d8;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	701a      	strb	r2, [r3, #0]
    pData++;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3301      	adds	r3, #1
 800117e:	607b      	str	r3, [r7, #4]
  while(Size--)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	1e5a      	subs	r2, r3, #1
 8001184:	603a      	str	r2, [r7, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <LCD_IO_ReadMultiData8+0xc>
  }
  LCD_CS_OFF;
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <LCD_IO_ReadMultiData8+0x3c>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 8001190:	f7ff ff0c 	bl	8000fac <LcdDirWrite>
}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	42408298 	.word	0x42408298

080011a0 <LCD_IO_ReadMultiData16to24>:
  LcdDirWrite();
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData16to24(uint16_t * pData, uint32_t Size)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint8_t  rgb888[3];
  while(Size--)
 80011aa:	e027      	b.n	80011fc <LCD_IO_ReadMultiData16to24+0x5c>
  {
    rgb888[0] = LcdRead8();
 80011ac:	f7ff ff4a 	bl	8001044 <LcdRead8>
 80011b0:	4603      	mov	r3, r0
 80011b2:	733b      	strb	r3, [r7, #12]
    rgb888[1] = LcdRead8();
 80011b4:	f7ff ff46 	bl	8001044 <LcdRead8>
 80011b8:	4603      	mov	r3, r0
 80011ba:	737b      	strb	r3, [r7, #13]
    rgb888[2] = LcdRead8();
 80011bc:	f7ff ff42 	bl	8001044 <LcdRead8>
 80011c0:	4603      	mov	r3, r0
 80011c2:	73bb      	strb	r3, [r7, #14]
    *pData = (rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3;
 80011c4:	7b3b      	ldrb	r3, [r7, #12]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80011ce:	f023 0307 	bic.w	r3, r3, #7
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	7b7b      	ldrb	r3, [r7, #13]
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	b21b      	sxth	r3, r3
 80011da:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	7bbb      	ldrb	r3, [r7, #14]
 80011e6:	08db      	lsrs	r3, r3, #3
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b21b      	sxth	r3, r3
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	801a      	strh	r2, [r3, #0]
    pData++;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3302      	adds	r3, #2
 80011fa:	607b      	str	r3, [r7, #4]
  while(Size--)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	1e5a      	subs	r2, r3, #1
 8001200:	603a      	str	r2, [r7, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1d2      	bne.n	80011ac <LCD_IO_ReadMultiData16to24+0xc>
  }
  LCD_CS_OFF;
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <LCD_IO_ReadMultiData16to24+0x78>)
 8001208:	2201      	movs	r2, #1
 800120a:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 800120c:	f7ff fece 	bl	8000fac <LcdDirWrite>
}
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	42408298 	.word	0x42408298

0800121c <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  while(c--);
 8001224:	bf00      	nop
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	1e5a      	subs	r2, r3, #1
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1fa      	bne.n	8001226 <LCD_IO_Delay+0xa>
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f001 f89d 	bl	8002384 <HAL_Delay>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  if(Bl)
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <LCD_IO_Bl_OnOff+0x18>
    GPIOX_ODR(LCD_BL) = LCD_BLON;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <LCD_IO_Bl_OnOff+0x2c>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 800126a:	e002      	b.n	8001272 <LCD_IO_Bl_OnOff+0x1e>
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <LCD_IO_Bl_OnOff+0x2c>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	424002a0 	.word	0x424002a0

08001284 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8001288:	4b50      	ldr	r3, [pc, #320]	; (80013cc <LCD_IO_Init+0x148>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	4a4f      	ldr	r2, [pc, #316]	; (80013cc <LCD_IO_Init+0x148>)
 800128e:	f043 0307 	orr.w	r3, r3, #7
 8001292:	6313      	str	r3, [r2, #48]	; 0x30
                  GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_MISO |
                  DMA1_CLOCK_TX | DMA1_CLOCK_RX;

  /* Backlight = output, light on */
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_BL);
 8001294:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <LCD_IO_Init+0x14c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800129c:	4a4c      	ldr	r2, [pc, #304]	; (80013d0 <LCD_IO_Init+0x14c>)
 800129e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a2:	6013      	str	r3, [r2, #0]
  LCD_IO_Bl_OnOff(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f7ff ffd5 	bl	8001254 <LCD_IO_Bl_OnOff>
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 80012aa:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <LCD_IO_Init+0x14c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80012b2:	4a47      	ldr	r2, [pc, #284]	; (80013d0 <LCD_IO_Init+0x14c>)
 80012b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b8:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 80012ba:	4b45      	ldr	r3, [pc, #276]	; (80013d0 <LCD_IO_Init+0x14c>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	4a44      	ldr	r2, [pc, #272]	; (80013d0 <LCD_IO_Init+0x14c>)
 80012c0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80012c4:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 80012c6:	4b43      	ldr	r3, [pc, #268]	; (80013d4 <LCD_IO_Init+0x150>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 80012cc:	4b42      	ldr	r3, [pc, #264]	; (80013d8 <LCD_IO_Init+0x154>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80012d2:	4b42      	ldr	r3, [pc, #264]	; (80013dc <LCD_IO_Init+0x158>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 80012d8:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <LCD_IO_Init+0x15c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012e0:	4a3f      	ldr	r2, [pc, #252]	; (80013e0 <LCD_IO_Init+0x15c>)
 80012e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e6:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 80012e8:	4b3e      	ldr	r3, [pc, #248]	; (80013e4 <LCD_IO_Init+0x160>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012f0:	4a3c      	ldr	r2, [pc, #240]	; (80013e4 <LCD_IO_Init+0x160>)
 80012f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012f6:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 80012f8:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <LCD_IO_Init+0x15c>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	4a38      	ldr	r2, [pc, #224]	; (80013e0 <LCD_IO_Init+0x15c>)
 80012fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001302:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8001304:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <LCD_IO_Init+0x160>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	4a36      	ldr	r2, [pc, #216]	; (80013e4 <LCD_IO_Init+0x160>)
 800130a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800130e:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 8001310:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <LCD_IO_Init+0x14c>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	4a2e      	ldr	r2, [pc, #184]	; (80013d0 <LCD_IO_Init+0x14c>)
 8001316:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800131a:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 800131c:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <LCD_IO_Init+0x14c>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	4a2b      	ldr	r2, [pc, #172]	; (80013d0 <LCD_IO_Init+0x14c>)
 8001322:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001326:	6093      	str	r3, [r2, #8]
  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 8001328:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <LCD_IO_Init+0x164>)
 800132a:	2201      	movs	r2, #1
 800132c:	601a      	str	r2, [r3, #0]
  #endif

  #else

  /* Hardware SPI */
  LCD_SPI_RCC_EN;
 800132e:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <LCD_IO_Init+0x168>)
 8001330:	2201      	movs	r2, #1
 8001332:	601a      	str	r2, [r3, #0]

  GPIOX_AFR(LCD_SPI_AFR, LCD_SCK);
 8001334:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <LCD_IO_Init+0x14c>)
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800133c:	4a24      	ldr	r2, [pc, #144]	; (80013d0 <LCD_IO_Init+0x14c>)
 800133e:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8001342:	6213      	str	r3, [r2, #32]
  GPIOX_MODER(MODE_ALTER, LCD_SCK);
 8001344:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <LCD_IO_Init+0x14c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800134c:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <LCD_IO_Init+0x14c>)
 800134e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001352:	6013      	str	r3, [r2, #0]
  GPIOX_AFR(LCD_SPI_AFR, LCD_MOSI);
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <LCD_IO_Init+0x14c>)
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800135c:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <LCD_IO_Init+0x14c>)
 800135e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8001362:	6213      	str	r3, [r2, #32]
  GPIOX_MODER(MODE_ALTER, LCD_MOSI);
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <LCD_IO_Init+0x14c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800136c:	4a18      	ldr	r2, [pc, #96]	; (80013d0 <LCD_IO_Init+0x14c>)
 800136e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001372:	6013      	str	r3, [r2, #0]

  /* MISO = input in full duplex mode */
  #if LCD_SPI_MODE == 2                 // Full duplex
  GPIOX_AFR(LCD_SPI_AFR, LCD_MISO);
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <LCD_IO_Init+0x14c>)
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800137c:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <LCD_IO_Init+0x14c>)
 800137e:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8001382:	6213      	str	r3, [r2, #32]
  GPIOX_MODER(MODE_ALTER, LCD_MISO);
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <LCD_IO_Init+0x14c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800138c:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <LCD_IO_Init+0x14c>)
 800138e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001392:	6013      	str	r3, [r2, #0]
  #if LCD_SPI_MODE == 1
  /* Half duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
  #else // #if LCD_SPI_MODE == 1
  /* TX or full duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <LCD_IO_Init+0x16c>)
 8001396:	f240 321f 	movw	r2, #799	; 0x31f
 800139a:	601a      	str	r2, [r3, #0]
  #endif // #else LCD_SPI_MODE == 1

  SPIX->CR1 |= SPI_CR1_SPE;
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <LCD_IO_Init+0x16c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a13      	ldr	r2, [pc, #76]	; (80013f0 <LCD_IO_Init+0x16c>)
 80013a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a6:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 80013a8:	200a      	movs	r0, #10
 80013aa:	f7ff ff47 	bl	800123c <LCD_Delay>
  LCD_RST_ON;
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <LCD_IO_Init+0x150>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 80013b4:	200a      	movs	r0, #10
 80013b6:	f7ff ff41 	bl	800123c <LCD_Delay>
  LCD_RST_OFF;
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <LCD_IO_Init+0x150>)
 80013bc:	2201      	movs	r2, #1
 80013be:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 80013c0:	200a      	movs	r0, #10
 80013c2:	f7ff ff3b 	bl	800123c <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020000 	.word	0x40020000
 80013d4:	424002a4 	.word	0x424002a4
 80013d8:	4241029c 	.word	0x4241029c
 80013dc:	42408298 	.word	0x42408298
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020400 	.word	0x40020400
 80013e8:	42400294 	.word	0x42400294
 80013ec:	424708b0 	.word	0x424708b0
 80013f0:	40013000 	.word	0x40013000

080013f4 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <LCD_IO_WriteCmd8+0x2c>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <LCD_IO_WriteCmd8+0x30>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fe2f 	bl	8001070 <LcdCmdWrite8>
  LCD_CS_OFF;
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <LCD_IO_WriteCmd8+0x30>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	4226002c 	.word	0x4226002c
 8001424:	42408298 	.word	0x42408298

08001428 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <LCD_IO_WriteData8+0x2c>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <LCD_IO_WriteData8+0x30>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fde7 	bl	8001014 <LcdWrite8>
  LCD_CS_OFF;
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <LCD_IO_WriteData8+0x30>)
 8001448:	2201      	movs	r2, #1
 800144a:	601a      	str	r2, [r3, #0]
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	4226002c 	.word	0x4226002c
 8001458:	42408298 	.word	0x42408298

0800145c <LCD_IO_WriteCmd8DataFill16>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	603a      	str	r2, [r7, #0]
 8001466:	71fb      	strb	r3, [r7, #7]
 8001468:	460b      	mov	r3, r1
 800146a:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  LcdSpiMode8();
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <LCD_IO_WriteCmd8DataFill16+0x40>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fdf8 	bl	8001070 <LcdCmdWrite8>
  LcdSpiMode16();
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <LCD_IO_WriteCmd8DataFill16+0x40>)
 8001482:	2201      	movs	r2, #1
 8001484:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2200      	movs	r2, #0
 800148a:	6839      	ldr	r1, [r7, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fe47 	bl	8001120 <LCD_IO_WriteMultiData16>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	4226002c 	.word	0x4226002c
 80014a0:	42408298 	.word	0x42408298

080014a4 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <LCD_IO_WriteCmd8MultipleData8+0x34>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <LCD_IO_WriteCmd8MultipleData8+0x38>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fdd5 	bl	8001070 <LcdCmdWrite8>
  LCD_IO_WriteMultiData8(pData, Size, 1);
 80014c6:	2201      	movs	r2, #1
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	68b8      	ldr	r0, [r7, #8]
 80014cc:	f7ff fe08 	bl	80010e0 <LCD_IO_WriteMultiData8>
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	4226002c 	.word	0x4226002c
 80014dc:	42408298 	.word	0x42408298

080014e0 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <LCD_IO_WriteCmd8MultipleData16+0x3c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fdb7 	bl	8001070 <LcdCmdWrite8>
  LcdSpiMode16();
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <LCD_IO_WriteCmd8MultipleData16+0x3c>)
 8001504:	2201      	movs	r2, #1
 8001506:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(pData, Size, 1);
 8001508:	2201      	movs	r2, #1
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	68b8      	ldr	r0, [r7, #8]
 800150e:	f7ff fe07 	bl	8001120 <LCD_IO_WriteMultiData16>
}
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	4226002c 	.word	0x4226002c
 8001520:	42408298 	.word	0x42408298

08001524 <LCD_IO_ReadCmd8MultipleData8>:
__weak void LCD_IO_ReadCmd16MultipleData24to16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
#else

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	4603      	mov	r3, r0
 8001532:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <LCD_IO_ReadCmd8MultipleData8+0x40>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <LCD_IO_ReadCmd8MultipleData8+0x44>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fd94 	bl	8001070 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 800154e:	6838      	ldr	r0, [r7, #0]
 8001550:	f7ff fcec 	bl	8000f2c <LcdDirRead>
  LCD_IO_ReadMultiData8(pData, Size);
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	68b8      	ldr	r0, [r7, #8]
 8001558:	f7ff fe02 	bl	8001160 <LCD_IO_ReadMultiData8>
}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	4226002c 	.word	0x4226002c
 8001568:	42408298 	.word	0x42408298

0800156c <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_IO_ReadMultiData16(pData, Size);
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <LCD_IO_ReadCmd8MultipleData24to16+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <LCD_IO_ReadCmd8MultipleData24to16+0x44>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fd70 	bl	8001070 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8001596:	6838      	ldr	r0, [r7, #0]
 8001598:	f7ff fcc8 	bl	8000f2c <LcdDirRead>
  LCD_IO_ReadMultiData16to24(pData, Size);
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	68b8      	ldr	r0, [r7, #8]
 80015a0:	f7ff fdfe 	bl	80011a0 <LCD_IO_ReadMultiData16to24>
}
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	4226002c 	.word	0x4226002c
 80015b0:	42408298 	.word	0x42408298

080015b4 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <BSP_LCD_Init+0x34>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <BSP_LCD_Init+0x38>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <BSP_LCD_Init+0x38>)
 80015ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d2:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <BSP_LCD_Init+0x38>)
 80015d6:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <BSP_LCD_Init+0x3c>)
 80015d8:	609a      	str	r2, [r3, #8]
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
  #endif
  
  ret = LCD_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80015de:	79fb      	ldrb	r3, [r7, #7]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000054 	.word	0x20000054
 80015ec:	20000468 	.word	0x20000468
 80015f0:	20000008 	.word	0x20000008

080015f4 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <BSP_LCD_GetXSize+0x14>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	4798      	blx	r3
 8001600:	4603      	mov	r3, r0
}
 8001602:	4618      	mov	r0, r3
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000054 	.word	0x20000054

0800160c <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <BSP_LCD_GetYSize+0x14>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001616:	4798      	blx	r3
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000054 	.word	0x20000054

08001624 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	4a03      	ldr	r2, [pc, #12]	; (8001640 <BSP_LCD_SetTextColor+0x1c>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	20000468 	.word	0x20000468

08001644 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	4a03      	ldr	r2, [pc, #12]	; (8001660 <BSP_LCD_SetBackColor+0x1c>)
 8001652:	6053      	str	r3, [r2, #4]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	20000468 	.word	0x20000468

08001664 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <BSP_LCD_SetFont+0x1c>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6093      	str	r3, [r2, #8]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000468 	.word	0x20000468

08001684 <BSP_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @param  None
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <BSP_LCD_GetFont+0x14>)
 800168a:	689b      	ldr	r3, [r3, #8]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000468 	.word	0x20000468

0800169c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 800169c:	b5b0      	push	{r4, r5, r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	4603      	mov	r3, r0
 80016a4:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <BSP_LCD_Clear+0x38>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80016ac:	f7ff ffa2 	bl	80015f4 <BSP_LCD_GetXSize>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461d      	mov	r5, r3
 80016b4:	f7ff ffaa 	bl	800160c <BSP_LCD_GetYSize>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461a      	mov	r2, r3
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	4613      	mov	r3, r2
 80016c2:	462a      	mov	r2, r5
 80016c4:	2100      	movs	r1, #0
 80016c6:	2000      	movs	r0, #0
 80016c8:	47a0      	blx	r4
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bdb0      	pop	{r4, r5, r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000054 	.word	0x20000054

080016d8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]
 80016e2:	460b      	mov	r3, r1
 80016e4:	80bb      	strh	r3, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <BSP_LCD_DisplayChar+0x50>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80016f4:	490c      	ldr	r1, [pc, #48]	; (8001728 <BSP_LCD_DisplayChar+0x50>)
 80016f6:	6889      	ldr	r1, [r1, #8]
 80016f8:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80016fa:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <BSP_LCD_DisplayChar+0x50>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	889b      	ldrh	r3, [r3, #4]
 8001704:	3307      	adds	r3, #7
 8001706:	2b00      	cmp	r3, #0
 8001708:	da00      	bge.n	800170c <BSP_LCD_DisplayChar+0x34>
 800170a:	3307      	adds	r3, #7
 800170c:	10db      	asrs	r3, r3, #3
 800170e:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001712:	441a      	add	r2, r3
 8001714:	88b9      	ldrh	r1, [r7, #4]
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	4618      	mov	r0, r3
 800171a:	f000 f875 	bl	8001808 <DrawChar>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000468 	.word	0x20000468

0800172c <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	603a      	str	r2, [r7, #0]
 8001736:	80fb      	strh	r3, [r7, #6]
 8001738:	460b      	mov	r3, r1
 800173a:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	3312      	adds	r3, #18
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	3313      	adds	r3, #19
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	441a      	add	r2, r3
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	3314      	adds	r3, #20
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	041b      	lsls	r3, r3, #16
 800175e:	441a      	add	r2, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	3315      	adds	r3, #21
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	061b      	lsls	r3, r3, #24
 8001768:	4413      	add	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	3316      	adds	r3, #22
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	3317      	adds	r3, #23
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	441a      	add	r2, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	3318      	adds	r3, #24
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	041b      	lsls	r3, r3, #16
 8001786:	441a      	add	r2, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	3319      	adds	r3, #25
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	061b      	lsls	r3, r3, #24
 8001790:	4413      	add	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	b29a      	uxth	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	b29b      	uxth	r3, r3
 800179c:	88b9      	ldrh	r1, [r7, #4]
 800179e:	88f8      	ldrh	r0, [r7, #6]
 80017a0:	f000 f924 	bl	80019ec <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <BSP_LCD_DrawBitmap+0xb0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d006      	beq.n	80017bc <BSP_LCD_DrawBitmap+0x90>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <BSP_LCD_DrawBitmap+0xb0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b4:	88b9      	ldrh	r1, [r7, #4]
 80017b6:	88f8      	ldrh	r0, [r7, #6]
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80017bc:	f7ff ff1a 	bl	80015f4 <BSP_LCD_GetXSize>
 80017c0:	4603      	mov	r3, r0
 80017c2:	461c      	mov	r4, r3
 80017c4:	f7ff ff22 	bl	800160c <BSP_LCD_GetYSize>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4622      	mov	r2, r4
 80017cc:	2100      	movs	r1, #0
 80017ce:	2000      	movs	r0, #0
 80017d0:	f000 f90c 	bl	80019ec <SetDisplayWindow>
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd90      	pop	{r4, r7, pc}
 80017dc:	20000054 	.word	0x20000054

080017e0 <BSP_LCD_DisplayOn>:
  * @brief  Enables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  lcd_drv->DisplayOn();
 80017e4:	4b02      	ldr	r3, [pc, #8]	; (80017f0 <BSP_LCD_DisplayOn+0x10>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	4798      	blx	r3
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000054 	.word	0x20000054

080017f4 <BSP_LCD_DisplayOff>:
  * @brief  Disables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOff(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  lcd_drv->DisplayOff();
 80017f8:	4b02      	ldr	r3, [pc, #8]	; (8001804 <BSP_LCD_DisplayOff+0x10>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	4798      	blx	r3
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000054 	.word	0x20000054

08001808 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	603a      	str	r2, [r7, #0]
 8001812:	80fb      	strh	r3, [r7, #6]
 8001814:	460b      	mov	r3, r1
 8001816:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
 8001820:	2300      	movs	r3, #0
 8001822:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	82fb      	strh	r3, [r7, #22]
 8001828:	2300      	movs	r3, #0
 800182a:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
  
  height = DrawProp.pFont->Height;
 8001838:	4b63      	ldr	r3, [pc, #396]	; (80019c8 <DrawChar+0x1c0>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	88db      	ldrh	r3, [r3, #6]
 800183e:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 8001840:	4b61      	ldr	r3, [pc, #388]	; (80019c8 <DrawChar+0x1c0>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	889b      	ldrh	r3, [r3, #4]
 8001846:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 8001848:	8afa      	ldrh	r2, [r7, #22]
 800184a:	8abb      	ldrh	r3, [r7, #20]
 800184c:	fb12 f303 	smulbb	r3, r2, r3
 8001850:	b29b      	uxth	r3, r3
 8001852:	331b      	adds	r3, #27
 8001854:	b29b      	uxth	r3, r3
 8001856:	4a5d      	ldr	r2, [pc, #372]	; (80019cc <DrawChar+0x1c4>)
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	b29b      	uxth	r3, r3
 800185c:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 800185e:	8afb      	ldrh	r3, [r7, #22]
 8001860:	8aba      	ldrh	r2, [r7, #20]
 8001862:	fb02 f303 	mul.w	r3, r2, r3
 8001866:	331b      	adds	r3, #27
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	141a      	asrs	r2, r3, #16
 800186c:	4b58      	ldr	r3, [pc, #352]	; (80019d0 <DrawChar+0x1c8>)
 800186e:	b292      	uxth	r2, r2
 8001870:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 8001872:	4b58      	ldr	r3, [pc, #352]	; (80019d4 <DrawChar+0x1cc>)
 8001874:	2236      	movs	r2, #54	; 0x36
 8001876:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 8001878:	4a57      	ldr	r2, [pc, #348]	; (80019d8 <DrawChar+0x1d0>)
 800187a:	8abb      	ldrh	r3, [r7, #20]
 800187c:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 800187e:	8abb      	ldrh	r3, [r7, #20]
 8001880:	141a      	asrs	r2, r3, #16
 8001882:	4b56      	ldr	r3, [pc, #344]	; (80019dc <DrawChar+0x1d4>)
 8001884:	b292      	uxth	r2, r2
 8001886:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 8001888:	4a55      	ldr	r2, [pc, #340]	; (80019e0 <DrawChar+0x1d8>)
 800188a:	8afb      	ldrh	r3, [r7, #22]
 800188c:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 800188e:	8afb      	ldrh	r3, [r7, #22]
 8001890:	141a      	asrs	r2, r3, #16
 8001892:	4b54      	ldr	r3, [pc, #336]	; (80019e4 <DrawChar+0x1dc>)
 8001894:	b292      	uxth	r2, r2
 8001896:	801a      	strh	r2, [r3, #0]
  
  offset =  8 *((width + 7)/8) - width ;
 8001898:	8abb      	ldrh	r3, [r7, #20]
 800189a:	3307      	adds	r3, #7
 800189c:	2b00      	cmp	r3, #0
 800189e:	da00      	bge.n	80018a2 <DrawChar+0x9a>
 80018a0:	3307      	adds	r3, #7
 80018a2:	10db      	asrs	r3, r3, #3
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	8abb      	ldrh	r3, [r7, #20]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
 80018b6:	e078      	b.n	80019aa <DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 80018b8:	8abb      	ldrh	r3, [r7, #20]
 80018ba:	3307      	adds	r3, #7
 80018bc:	2b00      	cmp	r3, #0
 80018be:	da00      	bge.n	80018c2 <DrawChar+0xba>
 80018c0:	3307      	adds	r3, #7
 80018c2:	10db      	asrs	r3, r3, #3
 80018c4:	461a      	mov	r2, r3
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	fb03 f302 	mul.w	r3, r3, r2
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 80018d2:	8abb      	ldrh	r3, [r7, #20]
 80018d4:	3b11      	subs	r3, #17
 80018d6:	2b07      	cmp	r3, #7
 80018d8:	d80c      	bhi.n	80018f4 <DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	041a      	lsls	r2, r3, #16
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3301      	adds	r3, #1
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	4313      	orrs	r3, r2
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	3202      	adds	r2, #2
 80018ee:	7812      	ldrb	r2, [r2, #0]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 2)
 80018f4:	8abb      	ldrh	r3, [r7, #20]
 80018f6:	3b09      	subs	r3, #9
 80018f8:	2b07      	cmp	r3, #7
 80018fa:	d807      	bhi.n	800190c <DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	3201      	adds	r2, #1
 8001906:	7812      	ldrb	r2, [r2, #0]
 8001908:	4313      	orrs	r3, r2
 800190a:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 1)
 800190c:	8abb      	ldrh	r3, [r7, #20]
 800190e:	3b01      	subs	r3, #1
 8001910:	2b07      	cmp	r3, #7
 8001912:	d802      	bhi.n	800191a <DrawChar+0x112>
    {
      line =  pchar[0];
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	61fb      	str	r3, [r7, #28]
    }    
    
    for (counterw = 0; counterw < width; counterw++)
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
 800191e:	e03d      	b.n	800199c <DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8001920:	8afa      	ldrh	r2, [r7, #22]
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	3b01      	subs	r3, #1
 8001928:	8aba      	ldrh	r2, [r7, #20]
 800192a:	fb02 f203 	mul.w	r2, r2, r3
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	4413      	add	r3, r2
 8001932:	331b      	adds	r3, #27
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 8001938:	8aba      	ldrh	r2, [r7, #20]
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	1ad2      	subs	r2, r2, r3
 800193e:	7cfb      	ldrb	r3, [r7, #19]
 8001940:	4413      	add	r3, r2
 8001942:	3b01      	subs	r3, #1
 8001944:	2201      	movs	r2, #1
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	461a      	mov	r2, r3
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	4013      	ands	r3, r2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d010      	beq.n	8001976 <DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 8001954:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <DrawChar+0x1c0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	b2d9      	uxtb	r1, r3
 800195a:	4a23      	ldr	r2, [pc, #140]	; (80019e8 <DrawChar+0x1e0>)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	4413      	add	r3, r2
 8001960:	460a      	mov	r2, r1
 8001962:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <DrawChar+0x1c0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	0a1a      	lsrs	r2, r3, #8
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	3301      	adds	r3, #1
 800196e:	b2d1      	uxtb	r1, r2
 8001970:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <DrawChar+0x1e0>)
 8001972:	54d1      	strb	r1, [r2, r3]
 8001974:	e00f      	b.n	8001996 <DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 8001976:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <DrawChar+0x1c0>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	b2d9      	uxtb	r1, r3
 800197c:	4a1a      	ldr	r2, [pc, #104]	; (80019e8 <DrawChar+0x1e0>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	4413      	add	r3, r2
 8001982:	460a      	mov	r2, r1
 8001984:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <DrawChar+0x1c0>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	0a1a      	lsrs	r2, r3, #8
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	3301      	adds	r3, #1
 8001990:	b2d1      	uxtb	r1, r2
 8001992:	4a15      	ldr	r2, [pc, #84]	; (80019e8 <DrawChar+0x1e0>)
 8001994:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	3301      	adds	r3, #1
 800199a:	623b      	str	r3, [r7, #32]
 800199c:	8abb      	ldrh	r3, [r7, #20]
 800199e:	6a3a      	ldr	r2, [r7, #32]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d3bd      	bcc.n	8001920 <DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	3301      	adds	r3, #1
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
 80019aa:	8afb      	ldrh	r3, [r7, #22]
 80019ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d382      	bcc.n	80018b8 <DrawChar+0xb0>
      } 
    }
  }
  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 80019b2:	88b9      	ldrh	r1, [r7, #4]
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <DrawChar+0x1e0>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff feb7 	bl	800172c <BSP_LCD_DrawBitmap>
}
 80019be:	bf00      	nop
 80019c0:	3728      	adds	r7, #40	; 0x28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000468 	.word	0x20000468
 80019cc:	200000f6 	.word	0x200000f6
 80019d0:	200000f8 	.word	0x200000f8
 80019d4:	200000fe 	.word	0x200000fe
 80019d8:	20000106 	.word	0x20000106
 80019dc:	20000108 	.word	0x20000108
 80019e0:	2000010a 	.word	0x2000010a
 80019e4:	2000010c 	.word	0x2000010c
 80019e8:	200000f4 	.word	0x200000f4

080019ec <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4604      	mov	r4, r0
 80019f4:	4608      	mov	r0, r1
 80019f6:	4611      	mov	r1, r2
 80019f8:	461a      	mov	r2, r3
 80019fa:	4623      	mov	r3, r4
 80019fc:	80fb      	strh	r3, [r7, #6]
 80019fe:	4603      	mov	r3, r0
 8001a00:	80bb      	strh	r3, [r7, #4]
 8001a02:	460b      	mov	r3, r1
 8001a04:	807b      	strh	r3, [r7, #2]
 8001a06:	4613      	mov	r3, r2
 8001a08:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <SetDisplayWindow+0x40>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d007      	beq.n	8001a24 <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <SetDisplayWindow+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	69dc      	ldr	r4, [r3, #28]
 8001a1a:	883b      	ldrh	r3, [r7, #0]
 8001a1c:	887a      	ldrh	r2, [r7, #2]
 8001a1e:	88b9      	ldrh	r1, [r7, #4]
 8001a20:	88f8      	ldrh	r0, [r7, #6]
 8001a22:	47a0      	blx	r4
  }  
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd90      	pop	{r4, r7, pc}
 8001a2c:	20000054 	.word	0x20000054

08001a30 <BSP_LCD_ReadID>:
  * @brief  Get display ID
  * @param  none
  * @retval ID number
  */
uint16_t BSP_LCD_ReadID(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  if(lcd_drv->ReadID)
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <BSP_LCD_ReadID+0x20>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <BSP_LCD_ReadID+0x1a>
    return lcd_drv->ReadID();
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <BSP_LCD_ReadID+0x20>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	4798      	blx	r3
 8001a46:	4603      	mov	r3, r0
 8001a48:	e000      	b.n	8001a4c <BSP_LCD_ReadID+0x1c>
  else
    return 0;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000054 	.word	0x20000054

08001a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a58:	f000 fc52 	bl	8002300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a5c:	f000 f80c 	bl	8001a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a60:	f000 f92a 	bl	8001cb8 <MX_GPIO_Init>
  MX_RTC_Init();
 8001a64:	f000 f896 	bl	8001b94 <MX_RTC_Init>
  MX_SPI1_Init();
 8001a68:	f000 f8ba 	bl	8001be0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001a6c:	f000 f8ee 	bl	8001c4c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  mainApp();
 8001a70:	f7fe fe20 	bl	80006b4 <mainApp>
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <main+0x20>
	...

08001a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b0ac      	sub	sp, #176	; 0xb0
 8001a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a82:	2234      	movs	r2, #52	; 0x34
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f002 fb32 	bl	80040f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	225c      	movs	r2, #92	; 0x5c
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f002 fb23 	bl	80040f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <SystemClock_Config+0x114>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	4a36      	ldr	r2, [pc, #216]	; (8001b8c <SystemClock_Config+0x114>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aba:	4b34      	ldr	r3, [pc, #208]	; (8001b8c <SystemClock_Config+0x114>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <SystemClock_Config+0x118>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ad2:	4a2f      	ldr	r2, [pc, #188]	; (8001b90 <SystemClock_Config+0x118>)
 8001ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <SystemClock_Config+0x118>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001ae6:	2306      	movs	r3, #6
 8001ae8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af0:	2301      	movs	r3, #1
 8001af2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001af6:	2310      	movs	r3, #16
 8001af8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afc:	2302      	movs	r3, #2
 8001afe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b08:	2308      	movs	r3, #8
 8001b0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001b0e:	2348      	movs	r3, #72	; 0x48
 8001b10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b14:	2302      	movs	r3, #2
 8001b16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b20:	2302      	movs	r3, #2
 8001b22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b26:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f001 fcdc 	bl	80034e8 <HAL_RCC_OscConfig>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b36:	f000 f95b 	bl	8001df0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b3a:	230f      	movs	r3, #15
 8001b3c:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b50:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b54:	2102      	movs	r1, #2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 fec4 	bl	80028e4 <HAL_RCC_ClockConfig>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001b62:	f000 f945 	bl	8001df0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b66:	2320      	movs	r3, #32
 8001b68:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b70:	f107 030c 	add.w	r3, r7, #12
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 ffed 	bl	8002b54 <HAL_RCCEx_PeriphCLKConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8001b80:	f000 f936 	bl	8001df0 <Error_Handler>
  }
}
 8001b84:	bf00      	nop
 8001b86:	37b0      	adds	r7, #176	; 0xb0
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40007000 	.word	0x40007000

08001b94 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <MX_RTC_Init+0x44>)
 8001b9a:	4a10      	ldr	r2, [pc, #64]	; (8001bdc <MX_RTC_Init+0x48>)
 8001b9c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <MX_RTC_Init+0x44>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <MX_RTC_Init+0x44>)
 8001ba6:	227f      	movs	r2, #127	; 0x7f
 8001ba8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <MX_RTC_Init+0x44>)
 8001bac:	22ff      	movs	r2, #255	; 0xff
 8001bae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MX_RTC_Init+0x44>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <MX_RTC_Init+0x44>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <MX_RTC_Init+0x44>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_RTC_Init+0x44>)
 8001bc4:	f001 feea 	bl	800399c <HAL_RTC_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001bce:	f000 f90f 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200004cc 	.word	0x200004cc
 8001bdc:	40002800 	.word	0x40002800

08001be0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001be6:	4a18      	ldr	r2, [pc, #96]	; (8001c48 <MX_SPI1_Init+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001bec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bf0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c2c:	220a      	movs	r2, #10
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c30:	4804      	ldr	r0, [pc, #16]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c32:	f001 ff98 	bl	8003b66 <HAL_SPI_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c3c:	f000 f8d8 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200004ec 	.word	0x200004ec
 8001c48:	40013000 	.word	0x40013000

08001c4c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c50:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <MX_SPI2_Init+0x64>)
 8001c52:	4a18      	ldr	r2, [pc, #96]	; (8001cb4 <MX_SPI2_Init+0x68>)
 8001c54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <MX_SPI2_Init+0x64>)
 8001c58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c5e:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <MX_SPI2_Init+0x64>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <MX_SPI2_Init+0x64>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <MX_SPI2_Init+0x64>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <MX_SPI2_Init+0x64>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <MX_SPI2_Init+0x64>)
 8001c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c7c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <MX_SPI2_Init+0x64>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <MX_SPI2_Init+0x64>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <MX_SPI2_Init+0x64>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <MX_SPI2_Init+0x64>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <MX_SPI2_Init+0x64>)
 8001c98:	220a      	movs	r2, #10
 8001c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c9c:	4804      	ldr	r0, [pc, #16]	; (8001cb0 <MX_SPI2_Init+0x64>)
 8001c9e:	f001 ff62 	bl	8003b66 <HAL_SPI_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ca8:	f000 f8a2 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000474 	.word	0x20000474
 8001cb4:	40003800 	.word	0x40003800

08001cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	4b3a      	ldr	r3, [pc, #232]	; (8001dbc <MX_GPIO_Init+0x104>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a39      	ldr	r2, [pc, #228]	; (8001dbc <MX_GPIO_Init+0x104>)
 8001cd8:	f043 0304 	orr.w	r3, r3, #4
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b37      	ldr	r3, [pc, #220]	; (8001dbc <MX_GPIO_Init+0x104>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b33      	ldr	r3, [pc, #204]	; (8001dbc <MX_GPIO_Init+0x104>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a32      	ldr	r2, [pc, #200]	; (8001dbc <MX_GPIO_Init+0x104>)
 8001cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b30      	ldr	r3, [pc, #192]	; (8001dbc <MX_GPIO_Init+0x104>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	4b2c      	ldr	r3, [pc, #176]	; (8001dbc <MX_GPIO_Init+0x104>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a2b      	ldr	r2, [pc, #172]	; (8001dbc <MX_GPIO_Init+0x104>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <MX_GPIO_Init+0x104>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <MX_GPIO_Init+0x104>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a24      	ldr	r2, [pc, #144]	; (8001dbc <MX_GPIO_Init+0x104>)
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <MX_GPIO_Init+0x104>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2180      	movs	r1, #128	; 0x80
 8001d42:	481f      	ldr	r0, [pc, #124]	; (8001dc0 <MX_GPIO_Init+0x108>)
 8001d44:	f000 fdb4 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001d4e:	481d      	ldr	r0, [pc, #116]	; (8001dc4 <MX_GPIO_Init+0x10c>)
 8001d50:	f000 fdae 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2140      	movs	r1, #64	; 0x40
 8001d58:	481b      	ldr	r0, [pc, #108]	; (8001dc8 <MX_GPIO_Init+0x110>)
 8001d5a:	f000 fda9 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d62:	2301      	movs	r3, #1
 8001d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	4619      	mov	r1, r3
 8001d74:	4812      	ldr	r0, [pc, #72]	; (8001dc0 <MX_GPIO_Init+0x108>)
 8001d76:	f000 fc09 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_RST_Pin;
 8001d7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d80:	2301      	movs	r3, #1
 8001d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	480c      	ldr	r0, [pc, #48]	; (8001dc4 <MX_GPIO_Init+0x10c>)
 8001d94:	f000 fbfa 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001d98:	2340      	movs	r3, #64	; 0x40
 8001d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2300      	movs	r3, #0
 8001da6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	4619      	mov	r1, r3
 8001dae:	4806      	ldr	r0, [pc, #24]	; (8001dc8 <MX_GPIO_Init+0x110>)
 8001db0:	f000 fbec 	bl	800258c <HAL_GPIO_Init>

}
 8001db4:	bf00      	nop
 8001db6:	3728      	adds	r7, #40	; 0x28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020800 	.word	0x40020800
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	40020400 	.word	0x40020400

08001dcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a04      	ldr	r2, [pc, #16]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dde:	f000 fab1 	bl	8002344 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40000800 	.word	0x40000800

08001df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	4a0f      	ldr	r2, [pc, #60]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e14:	6453      	str	r3, [r2, #68]	; 0x44
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	603b      	str	r3, [r7, #0]
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4a08      	ldr	r2, [pc, #32]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e30:	6413      	str	r3, [r2, #64]	; 0x40
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e3e:	2007      	movs	r0, #7
 8001e40:	f000 fb6f 	bl	8002522 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800

08001e50 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a05      	ldr	r2, [pc, #20]	; (8001e74 <HAL_RTC_MspInit+0x24>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d102      	bne.n	8001e68 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_RTC_MspInit+0x28>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	40002800 	.word	0x40002800
 8001e78:	42470e3c 	.word	0x42470e3c

08001e7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08c      	sub	sp, #48	; 0x30
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a49      	ldr	r2, [pc, #292]	; (8001fc0 <HAL_SPI_MspInit+0x144>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d12c      	bne.n	8001ef8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
 8001ea2:	4b48      	ldr	r3, [pc, #288]	; (8001fc4 <HAL_SPI_MspInit+0x148>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4a47      	ldr	r2, [pc, #284]	; (8001fc4 <HAL_SPI_MspInit+0x148>)
 8001ea8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eac:	6453      	str	r3, [r2, #68]	; 0x44
 8001eae:	4b45      	ldr	r3, [pc, #276]	; (8001fc4 <HAL_SPI_MspInit+0x148>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb6:	61bb      	str	r3, [r7, #24]
 8001eb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <HAL_SPI_MspInit+0x148>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a40      	ldr	r2, [pc, #256]	; (8001fc4 <HAL_SPI_MspInit+0x148>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b3e      	ldr	r3, [pc, #248]	; (8001fc4 <HAL_SPI_MspInit+0x148>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ed6:	23e0      	movs	r3, #224	; 0xe0
 8001ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ee6:	2305      	movs	r3, #5
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4835      	ldr	r0, [pc, #212]	; (8001fc8 <HAL_SPI_MspInit+0x14c>)
 8001ef2:	f000 fb4b 	bl	800258c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ef6:	e05f      	b.n	8001fb8 <HAL_SPI_MspInit+0x13c>
  else if(hspi->Instance==SPI2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a33      	ldr	r2, [pc, #204]	; (8001fcc <HAL_SPI_MspInit+0x150>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d15a      	bne.n	8001fb8 <HAL_SPI_MspInit+0x13c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4b2f      	ldr	r3, [pc, #188]	; (8001fc4 <HAL_SPI_MspInit+0x148>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a2e      	ldr	r2, [pc, #184]	; (8001fc4 <HAL_SPI_MspInit+0x148>)
 8001f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b2c      	ldr	r3, [pc, #176]	; (8001fc4 <HAL_SPI_MspInit+0x148>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <HAL_SPI_MspInit+0x148>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a27      	ldr	r2, [pc, #156]	; (8001fc4 <HAL_SPI_MspInit+0x148>)
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <HAL_SPI_MspInit+0x148>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_SPI_MspInit+0x148>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a20      	ldr	r2, [pc, #128]	; (8001fc4 <HAL_SPI_MspInit+0x148>)
 8001f44:	f043 0302 	orr.w	r3, r3, #2
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_SPI_MspInit+0x148>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f56:	2302      	movs	r3, #2
 8001f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001f66:	2307      	movs	r3, #7
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4817      	ldr	r0, [pc, #92]	; (8001fd0 <HAL_SPI_MspInit+0x154>)
 8001f72:	f000 fb0b 	bl	800258c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f76:	2304      	movs	r3, #4
 8001f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f82:	2303      	movs	r3, #3
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f86:	2305      	movs	r3, #5
 8001f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8a:	f107 031c 	add.w	r3, r7, #28
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480f      	ldr	r0, [pc, #60]	; (8001fd0 <HAL_SPI_MspInit+0x154>)
 8001f92:	f000 fafb 	bl	800258c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fa8:	2305      	movs	r3, #5
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4808      	ldr	r0, [pc, #32]	; (8001fd4 <HAL_SPI_MspInit+0x158>)
 8001fb4:	f000 faea 	bl	800258c <HAL_GPIO_Init>
}
 8001fb8:	bf00      	nop
 8001fba:	3730      	adds	r7, #48	; 0x30
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40013000 	.word	0x40013000
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40020000 	.word	0x40020000
 8001fcc:	40003800 	.word	0x40003800
 8001fd0:	40020800 	.word	0x40020800
 8001fd4:	40020400 	.word	0x40020400

08001fd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08c      	sub	sp, #48	; 0x30
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	201e      	movs	r0, #30
 8001fee:	f000 faa3 	bl	8002538 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ff2:	201e      	movs	r0, #30
 8001ff4:	f000 fabc 	bl	8002570 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	4b1f      	ldr	r3, [pc, #124]	; (800207c <HAL_InitTick+0xa4>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	4a1e      	ldr	r2, [pc, #120]	; (800207c <HAL_InitTick+0xa4>)
 8002002:	f043 0304 	orr.w	r3, r3, #4
 8002006:	6413      	str	r3, [r2, #64]	; 0x40
 8002008:	4b1c      	ldr	r3, [pc, #112]	; (800207c <HAL_InitTick+0xa4>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002014:	f107 0210 	add.w	r2, r7, #16
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f000 fd66 	bl	8002af0 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002024:	f000 fd50 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8002028:	4603      	mov	r3, r0
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800202e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002030:	4a13      	ldr	r2, [pc, #76]	; (8002080 <HAL_InitTick+0xa8>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	0c9b      	lsrs	r3, r3, #18
 8002038:	3b01      	subs	r3, #1
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800203c:	4b11      	ldr	r3, [pc, #68]	; (8002084 <HAL_InitTick+0xac>)
 800203e:	4a12      	ldr	r2, [pc, #72]	; (8002088 <HAL_InitTick+0xb0>)
 8002040:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <HAL_InitTick+0xac>)
 8002044:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002048:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800204a:	4a0e      	ldr	r2, [pc, #56]	; (8002084 <HAL_InitTick+0xac>)
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <HAL_InitTick+0xac>)
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_InitTick+0xac>)
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800205c:	4809      	ldr	r0, [pc, #36]	; (8002084 <HAL_InitTick+0xac>)
 800205e:	f001 fde6 	bl	8003c2e <HAL_TIM_Base_Init>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d104      	bne.n	8002072 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8002068:	4806      	ldr	r0, [pc, #24]	; (8002084 <HAL_InitTick+0xac>)
 800206a:	f001 fe15 	bl	8003c98 <HAL_TIM_Base_Start_IT>
 800206e:	4603      	mov	r3, r0
 8002070:	e000      	b.n	8002074 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
}
 8002074:	4618      	mov	r0, r3
 8002076:	3730      	adds	r7, #48	; 0x30
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40023800 	.word	0x40023800
 8002080:	431bde83 	.word	0x431bde83
 8002084:	20000544 	.word	0x20000544
 8002088:	40000800 	.word	0x40000800

0800208c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209e:	e7fe      	b.n	800209e <HardFault_Handler+0x4>

080020a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <MemManage_Handler+0x4>

080020a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020aa:	e7fe      	b.n	80020aa <BusFault_Handler+0x4>

080020ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <UsageFault_Handler+0x4>

080020b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <TIM4_IRQHandler+0x10>)
 80020f2:	f001 fdf5 	bl	8003ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000544 	.word	0x20000544

08002100 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002108:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800210c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d013      	beq.n	8002140 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002118:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800211c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002120:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00b      	beq.n	8002140 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002128:	e000      	b.n	800212c <ITM_SendChar+0x2c>
    {
      __NOP();
 800212a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800212c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f9      	beq.n	800212a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002136:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002140:	687b      	ldr	r3, [r7, #4]
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	int i;
	for(i = 0; i < len; i++)
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e009      	b.n	8002174 <_write+0x26>
		ITM_SendChar(*ptr++);
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	60ba      	str	r2, [r7, #8]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ffc9 	bl	8002100 <ITM_SendChar>
	for(i = 0; i < len; i++)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3301      	adds	r3, #1
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	429a      	cmp	r2, r3
 800217a:	dbf1      	blt.n	8002160 <_write+0x12>
	return len;
 800217c:	687b      	ldr	r3, [r7, #4]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <_sbrk+0x38>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d102      	bne.n	800219e <_sbrk+0x16>
		heap_end = & end;
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <_sbrk+0x38>)
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <_sbrk+0x3c>)
 800219c:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <_sbrk+0x38>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <_sbrk+0x38>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4413      	add	r3, r2
 80021ac:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <_sbrk+0x38>)
 80021ae:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 80021b0:	68fb      	ldr	r3, [r7, #12]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	2000045c 	.word	0x2000045c
 80021c4:	20000590 	.word	0x20000590

080021c8 <_close>:

int _close(int32_t file)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <_close+0x20>)
 80021d2:	2258      	movs	r2, #88	; 0x58
 80021d4:	601a      	str	r2, [r3, #0]
	return -1;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000588 	.word	0x20000588

080021ec <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <_fstat+0x20>)
 80021f8:	2258      	movs	r2, #88	; 0x58
 80021fa:	601a      	str	r2, [r3, #0]
	return -1;
 80021fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	20000588 	.word	0x20000588

08002210 <_isatty>:

int _isatty(int32_t file)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <_isatty+0x1c>)
 800221a:	2258      	movs	r2, #88	; 0x58
 800221c:	601a      	str	r2, [r3, #0]
	return 0;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	20000588 	.word	0x20000588

08002230 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <_lseek+0x24>)
 800223e:	2258      	movs	r2, #88	; 0x58
 8002240:	601a      	str	r2, [r3, #0]
	return -1;
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000588 	.word	0x20000588

08002258 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <_read+0x24>)
 8002266:	2258      	movs	r2, #88	; 0x58
 8002268:	601a      	str	r2, [r3, #0]
	return -1;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000588 	.word	0x20000588

08002280 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <SystemInit+0x28>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228a:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <SystemInit+0x28>)
 800228c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <SystemInit+0x28>)
 8002296:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800229a:	609a      	str	r2, [r3, #8]
#endif
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022b2:	e003      	b.n	80022bc <LoopCopyDataInit>

080022b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022ba:	3104      	adds	r1, #4

080022bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022bc:	480b      	ldr	r0, [pc, #44]	; (80022ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022c4:	d3f6      	bcc.n	80022b4 <CopyDataInit>
  ldr  r2, =_sbss
 80022c6:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022c8:	e002      	b.n	80022d0 <LoopFillZerobss>

080022ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022cc:	f842 3b04 	str.w	r3, [r2], #4

080022d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022d4:	d3f9      	bcc.n	80022ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022d6:	f7ff ffd3 	bl	8002280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022da:	f001 fee5 	bl	80040a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022de:	f7ff fbb9 	bl	8001a54 <main>
  bx  lr    
 80022e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80022e8:	08006f28 	.word	0x08006f28
  ldr  r0, =_sdata
 80022ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022f0:	200000c8 	.word	0x200000c8
  ldr  r2, =_sbss
 80022f4:	200000c8 	.word	0x200000c8
  ldr  r3, = _ebss
 80022f8:	2000058c 	.word	0x2000058c

080022fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022fc:	e7fe      	b.n	80022fc <ADC_IRQHandler>
	...

08002300 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_Init+0x40>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <HAL_Init+0x40>)
 800230a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800230e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_Init+0x40>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <HAL_Init+0x40>)
 8002316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800231a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <HAL_Init+0x40>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a07      	ldr	r2, [pc, #28]	; (8002340 <HAL_Init+0x40>)
 8002322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002326:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002328:	2003      	movs	r0, #3
 800232a:	f000 f8fa 	bl	8002522 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232e:	2000      	movs	r0, #0
 8002330:	f7ff fe52 	bl	8001fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002334:	f7ff fd64 	bl	8001e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023c00 	.word	0x40023c00

08002344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x20>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_IncTick+0x24>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4413      	add	r3, r2
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <HAL_IncTick+0x24>)
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000060 	.word	0x20000060
 8002368:	20000584 	.word	0x20000584

0800236c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return uwTick;
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_GetTick+0x14>)
 8002372:	681b      	ldr	r3, [r3, #0]
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20000584 	.word	0x20000584

08002384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800238c:	f7ff ffee 	bl	800236c <HAL_GetTick>
 8002390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239c:	d005      	beq.n	80023aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <HAL_Delay+0x40>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023aa:	bf00      	nop
 80023ac:	f7ff ffde 	bl	800236c <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d8f7      	bhi.n	80023ac <HAL_Delay+0x28>
  {
  }
}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000060 	.word	0x20000060

080023c8 <__NVIC_SetPriorityGrouping>:
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <__NVIC_SetPriorityGrouping+0x44>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e4:	4013      	ands	r3, r2
 80023e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023fa:	4a04      	ldr	r2, [pc, #16]	; (800240c <__NVIC_SetPriorityGrouping+0x44>)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	60d3      	str	r3, [r2, #12]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_GetPriorityGrouping>:
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <__NVIC_GetPriorityGrouping+0x18>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	f003 0307 	and.w	r3, r3, #7
}
 800241e:	4618      	mov	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <__NVIC_EnableIRQ>:
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	2b00      	cmp	r3, #0
 800243c:	db0b      	blt.n	8002456 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	f003 021f 	and.w	r2, r3, #31
 8002444:	4907      	ldr	r1, [pc, #28]	; (8002464 <__NVIC_EnableIRQ+0x38>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	2001      	movs	r0, #1
 800244e:	fa00 f202 	lsl.w	r2, r0, r2
 8002452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000e100 	.word	0xe000e100

08002468 <__NVIC_SetPriority>:
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002478:	2b00      	cmp	r3, #0
 800247a:	db0a      	blt.n	8002492 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	b2da      	uxtb	r2, r3
 8002480:	490c      	ldr	r1, [pc, #48]	; (80024b4 <__NVIC_SetPriority+0x4c>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	0112      	lsls	r2, r2, #4
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	440b      	add	r3, r1
 800248c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002490:	e00a      	b.n	80024a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4908      	ldr	r1, [pc, #32]	; (80024b8 <__NVIC_SetPriority+0x50>)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	3b04      	subs	r3, #4
 80024a0:	0112      	lsls	r2, r2, #4
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	440b      	add	r3, r1
 80024a6:	761a      	strb	r2, [r3, #24]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000e100 	.word	0xe000e100
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <NVIC_EncodePriority>:
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	; 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f1c3 0307 	rsb	r3, r3, #7
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	bf28      	it	cs
 80024da:	2304      	movcs	r3, #4
 80024dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3304      	adds	r3, #4
 80024e2:	2b06      	cmp	r3, #6
 80024e4:	d902      	bls.n	80024ec <NVIC_EncodePriority+0x30>
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3b03      	subs	r3, #3
 80024ea:	e000      	b.n	80024ee <NVIC_EncodePriority+0x32>
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	f04f 32ff 	mov.w	r2, #4294967295
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43da      	mvns	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	401a      	ands	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002504:	f04f 31ff 	mov.w	r1, #4294967295
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	43d9      	mvns	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002514:	4313      	orrs	r3, r2
}
 8002516:	4618      	mov	r0, r3
 8002518:	3724      	adds	r7, #36	; 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ff4c 	bl	80023c8 <__NVIC_SetPriorityGrouping>
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800254a:	f7ff ff61 	bl	8002410 <__NVIC_GetPriorityGrouping>
 800254e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	68b9      	ldr	r1, [r7, #8]
 8002554:	6978      	ldr	r0, [r7, #20]
 8002556:	f7ff ffb1 	bl	80024bc <NVIC_EncodePriority>
 800255a:	4602      	mov	r2, r0
 800255c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ff80 	bl	8002468 <__NVIC_SetPriority>
}
 8002568:	bf00      	nop
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff ff54 	bl	800242c <__NVIC_EnableIRQ>
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	e165      	b.n	8002874 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025a8:	2201      	movs	r2, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4013      	ands	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	f040 8154 	bne.w	800286e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d00b      	beq.n	80025e6 <HAL_GPIO_Init+0x5a>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d007      	beq.n	80025e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025da:	2b11      	cmp	r3, #17
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b12      	cmp	r3, #18
 80025e4:	d130      	bne.n	8002648 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	2203      	movs	r2, #3
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800261c:	2201      	movs	r2, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 0201 	and.w	r2, r3, #1
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	2203      	movs	r2, #3
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0xfc>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b12      	cmp	r3, #18
 8002686:	d123      	bne.n	80026d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	08da      	lsrs	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3208      	adds	r2, #8
 8002690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	220f      	movs	r2, #15
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	08da      	lsrs	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3208      	adds	r2, #8
 80026ca:	69b9      	ldr	r1, [r7, #24]
 80026cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0203 	and.w	r2, r3, #3
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80ae 	beq.w	800286e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	4b5c      	ldr	r3, [pc, #368]	; (8002888 <HAL_GPIO_Init+0x2fc>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	4a5b      	ldr	r2, [pc, #364]	; (8002888 <HAL_GPIO_Init+0x2fc>)
 800271c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002720:	6453      	str	r3, [r2, #68]	; 0x44
 8002722:	4b59      	ldr	r3, [pc, #356]	; (8002888 <HAL_GPIO_Init+0x2fc>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800272e:	4a57      	ldr	r2, [pc, #348]	; (800288c <HAL_GPIO_Init+0x300>)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	089b      	lsrs	r3, r3, #2
 8002734:	3302      	adds	r3, #2
 8002736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	220f      	movs	r2, #15
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4e      	ldr	r2, [pc, #312]	; (8002890 <HAL_GPIO_Init+0x304>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d025      	beq.n	80027a6 <HAL_GPIO_Init+0x21a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4d      	ldr	r2, [pc, #308]	; (8002894 <HAL_GPIO_Init+0x308>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d01f      	beq.n	80027a2 <HAL_GPIO_Init+0x216>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4c      	ldr	r2, [pc, #304]	; (8002898 <HAL_GPIO_Init+0x30c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d019      	beq.n	800279e <HAL_GPIO_Init+0x212>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4b      	ldr	r2, [pc, #300]	; (800289c <HAL_GPIO_Init+0x310>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d013      	beq.n	800279a <HAL_GPIO_Init+0x20e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4a      	ldr	r2, [pc, #296]	; (80028a0 <HAL_GPIO_Init+0x314>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00d      	beq.n	8002796 <HAL_GPIO_Init+0x20a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a49      	ldr	r2, [pc, #292]	; (80028a4 <HAL_GPIO_Init+0x318>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d007      	beq.n	8002792 <HAL_GPIO_Init+0x206>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a48      	ldr	r2, [pc, #288]	; (80028a8 <HAL_GPIO_Init+0x31c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d101      	bne.n	800278e <HAL_GPIO_Init+0x202>
 800278a:	2306      	movs	r3, #6
 800278c:	e00c      	b.n	80027a8 <HAL_GPIO_Init+0x21c>
 800278e:	2307      	movs	r3, #7
 8002790:	e00a      	b.n	80027a8 <HAL_GPIO_Init+0x21c>
 8002792:	2305      	movs	r3, #5
 8002794:	e008      	b.n	80027a8 <HAL_GPIO_Init+0x21c>
 8002796:	2304      	movs	r3, #4
 8002798:	e006      	b.n	80027a8 <HAL_GPIO_Init+0x21c>
 800279a:	2303      	movs	r3, #3
 800279c:	e004      	b.n	80027a8 <HAL_GPIO_Init+0x21c>
 800279e:	2302      	movs	r3, #2
 80027a0:	e002      	b.n	80027a8 <HAL_GPIO_Init+0x21c>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <HAL_GPIO_Init+0x21c>
 80027a6:	2300      	movs	r3, #0
 80027a8:	69fa      	ldr	r2, [r7, #28]
 80027aa:	f002 0203 	and.w	r2, r2, #3
 80027ae:	0092      	lsls	r2, r2, #2
 80027b0:	4093      	lsls	r3, r2
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027b8:	4934      	ldr	r1, [pc, #208]	; (800288c <HAL_GPIO_Init+0x300>)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	3302      	adds	r3, #2
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c6:	4b39      	ldr	r3, [pc, #228]	; (80028ac <HAL_GPIO_Init+0x320>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ea:	4a30      	ldr	r2, [pc, #192]	; (80028ac <HAL_GPIO_Init+0x320>)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027f0:	4b2e      	ldr	r3, [pc, #184]	; (80028ac <HAL_GPIO_Init+0x320>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002814:	4a25      	ldr	r2, [pc, #148]	; (80028ac <HAL_GPIO_Init+0x320>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281a:	4b24      	ldr	r3, [pc, #144]	; (80028ac <HAL_GPIO_Init+0x320>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800283e:	4a1b      	ldr	r2, [pc, #108]	; (80028ac <HAL_GPIO_Init+0x320>)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_GPIO_Init+0x320>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002868:	4a10      	ldr	r2, [pc, #64]	; (80028ac <HAL_GPIO_Init+0x320>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3301      	adds	r3, #1
 8002872:	61fb      	str	r3, [r7, #28]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	2b0f      	cmp	r3, #15
 8002878:	f67f ae96 	bls.w	80025a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800287c:	bf00      	nop
 800287e:	3724      	adds	r7, #36	; 0x24
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	40023800 	.word	0x40023800
 800288c:	40013800 	.word	0x40013800
 8002890:	40020000 	.word	0x40020000
 8002894:	40020400 	.word	0x40020400
 8002898:	40020800 	.word	0x40020800
 800289c:	40020c00 	.word	0x40020c00
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40021400 	.word	0x40021400
 80028a8:	40021800 	.word	0x40021800
 80028ac:	40013c00 	.word	0x40013c00

080028b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	807b      	strh	r3, [r7, #2]
 80028bc:	4613      	mov	r3, r2
 80028be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028c0:	787b      	ldrb	r3, [r7, #1]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028cc:	e003      	b.n	80028d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ce:	887b      	ldrh	r3, [r7, #2]
 80028d0:	041a      	lsls	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	619a      	str	r2, [r3, #24]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
	...

080028e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0cc      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028f8:	4b68      	ldr	r3, [pc, #416]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d90c      	bls.n	8002920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b65      	ldr	r3, [pc, #404]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290e:	4b63      	ldr	r3, [pc, #396]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0b8      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002938:	4b59      	ldr	r3, [pc, #356]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4a58      	ldr	r2, [pc, #352]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002950:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	4a52      	ldr	r2, [pc, #328]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800295a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295c:	4b50      	ldr	r3, [pc, #320]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	494d      	ldr	r1, [pc, #308]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d044      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d119      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e07f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d003      	beq.n	80029a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a2:	4b3f      	ldr	r3, [pc, #252]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e06f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b2:	4b3b      	ldr	r3, [pc, #236]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e067      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c2:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f023 0203 	bic.w	r2, r3, #3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4934      	ldr	r1, [pc, #208]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d4:	f7ff fcca 	bl	800236c <HAL_GetTick>
 80029d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029dc:	f7ff fcc6 	bl	800236c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e04f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 020c 	and.w	r2, r3, #12
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d1eb      	bne.n	80029dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a04:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d20c      	bcs.n	8002a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e032      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4916      	ldr	r1, [pc, #88]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	490e      	ldr	r1, [pc, #56]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a6a:	f000 fb9d 	bl	80031a8 <HAL_RCC_GetSysClockFreq>
 8002a6e:	4601      	mov	r1, r0
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	5cd3      	ldrb	r3, [r2, r3]
 8002a7e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_RCC_ClockConfig+0x1c8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff faa4 	bl	8001fd8 <HAL_InitTick>

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023c00 	.word	0x40023c00
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	08006e68 	.word	0x08006e68
 8002aa8:	20000058 	.word	0x20000058
 8002aac:	2000005c 	.word	0x2000005c

08002ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000058 	.word	0x20000058

08002ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002acc:	f7ff fff0 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002ad0:	4601      	mov	r1, r0
 8002ad2:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	0a9b      	lsrs	r3, r3, #10
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4a03      	ldr	r2, [pc, #12]	; (8002aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ade:	5cd3      	ldrb	r3, [r2, r3]
 8002ae0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	08006e78 	.word	0x08006e78

08002af0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	220f      	movs	r2, #15
 8002afe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b00:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_RCC_GetClockConfig+0x5c>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0203 	and.w	r2, r3, #3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <HAL_RCC_GetClockConfig+0x5c>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <HAL_RCC_GetClockConfig+0x5c>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b24:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <HAL_RCC_GetClockConfig+0x5c>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	08db      	lsrs	r3, r3, #3
 8002b2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b32:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <HAL_RCC_GetClockConfig+0x60>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 020f 	and.w	r2, r3, #15
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	601a      	str	r2, [r3, #0]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40023c00 	.word	0x40023c00

08002b54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08c      	sub	sp, #48	; 0x30
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d010      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002b8c:	4b6f      	ldr	r3, [pc, #444]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b92:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	496c      	ldr	r1, [pc, #432]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002baa:	2301      	movs	r3, #1
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d010      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002bba:	4b64      	ldr	r3, [pc, #400]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bc0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc8:	4960      	ldr	r1, [pc, #384]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d017      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002be8:	4b58      	ldr	r3, [pc, #352]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	4955      	ldr	r1, [pc, #340]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c06:	d101      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002c14:	2301      	movs	r3, #1
 8002c16:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d017      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c24:	4b49      	ldr	r3, [pc, #292]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c32:	4946      	ldr	r1, [pc, #280]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c42:	d101      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002c44:	2301      	movs	r3, #1
 8002c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002c50:	2301      	movs	r3, #1
 8002c52:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 808a 	beq.w	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	4a38      	ldr	r2, [pc, #224]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c70:	6413      	str	r3, [r2, #64]	; 0x40
 8002c72:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002c7e:	4b34      	ldr	r3, [pc, #208]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a33      	ldr	r2, [pc, #204]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c88:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c8a:	f7ff fb6f 	bl	800236c <HAL_GetTick>
 8002c8e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c92:	f7ff fb6b 	bl	800236c <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e278      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ca4:	4b2a      	ldr	r3, [pc, #168]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cb0:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d02f      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc8:	6a3a      	ldr	r2, [r7, #32]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d028      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cce:	4b1f      	ldr	r3, [pc, #124]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cd8:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cde:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ce4:	4a19      	ldr	r2, [pc, #100]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002cea:	4b18      	ldr	r3, [pc, #96]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d114      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002cf6:	f7ff fb39 	bl	800236c <HAL_GetTick>
 8002cfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfc:	e00a      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cfe:	f7ff fb35 	bl	800236c <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e240      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0ee      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d2c:	d114      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002d2e:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d42:	4902      	ldr	r1, [pc, #8]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	608b      	str	r3, [r1, #8]
 8002d48:	e00c      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40007000 	.word	0x40007000
 8002d54:	42470e40 	.word	0x42470e40
 8002d58:	4b4a      	ldr	r3, [pc, #296]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	4a49      	ldr	r2, [pc, #292]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d62:	6093      	str	r3, [r2, #8]
 8002d64:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d70:	4944      	ldr	r1, [pc, #272]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0310 	and.w	r3, r3, #16
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d004      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002d88:	4b3f      	ldr	r3, [pc, #252]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002d8a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002d98:	4b3a      	ldr	r3, [pc, #232]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da6:	4937      	ldr	r1, [pc, #220]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002dba:	4b32      	ldr	r3, [pc, #200]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc8:	492e      	ldr	r1, [pc, #184]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d011      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ddc:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	4926      	ldr	r1, [pc, #152]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dfa:	d101      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	491a      	ldr	r1, [pc, #104]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d011      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e34:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3c:	4911      	ldr	r1, [pc, #68]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d005      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e60:	f040 80ff 	bne.w	8003062 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e6a:	f7ff fa7f 	bl	800236c <HAL_GetTick>
 8002e6e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e70:	e00e      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e72:	f7ff fa7b 	bl	800236c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d907      	bls.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e188      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002e84:	40023800 	.word	0x40023800
 8002e88:	424711e0 	.word	0x424711e0
 8002e8c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e90:	4b7e      	ldr	r3, [pc, #504]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ea      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d009      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d028      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d124      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002ec4:	4b71      	ldr	r3, [pc, #452]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eca:	0c1b      	lsrs	r3, r3, #16
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ed6:	4b6d      	ldr	r3, [pc, #436]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002edc:	0e1b      	lsrs	r3, r3, #24
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	019b      	lsls	r3, r3, #6
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	085b      	lsrs	r3, r3, #1
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	041b      	lsls	r3, r3, #16
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	061b      	lsls	r3, r3, #24
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	071b      	lsls	r3, r3, #28
 8002f06:	4961      	ldr	r1, [pc, #388]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d004      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f22:	d00a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d035      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f38:	d130      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002f3a:	4b54      	ldr	r3, [pc, #336]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f40:	0c1b      	lsrs	r3, r3, #16
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	3301      	adds	r3, #1
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f4c:	4b4f      	ldr	r3, [pc, #316]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f52:	0f1b      	lsrs	r3, r3, #28
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	019b      	lsls	r3, r3, #6
 8002f64:	431a      	orrs	r2, r3
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	085b      	lsrs	r3, r3, #1
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	041b      	lsls	r3, r3, #16
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	061b      	lsls	r3, r3, #24
 8002f76:	431a      	orrs	r2, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	071b      	lsls	r3, r3, #28
 8002f7c:	4943      	ldr	r1, [pc, #268]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f84:	4b41      	ldr	r3, [pc, #260]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f8a:	f023 021f 	bic.w	r2, r3, #31
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	3b01      	subs	r3, #1
 8002f94:	493d      	ldr	r1, [pc, #244]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d029      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fb0:	d124      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002fb2:	4b36      	ldr	r3, [pc, #216]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fc4:	4b31      	ldr	r3, [pc, #196]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fca:	0f1b      	lsrs	r3, r3, #28
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	019b      	lsls	r3, r3, #6
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	085b      	lsrs	r3, r3, #1
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	041b      	lsls	r3, r3, #16
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	061b      	lsls	r3, r3, #24
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	071b      	lsls	r3, r3, #28
 8002ff4:	4925      	ldr	r1, [pc, #148]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003004:	2b00      	cmp	r3, #0
 8003006:	d016      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	019b      	lsls	r3, r3, #6
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	085b      	lsrs	r3, r3, #1
 800301a:	3b01      	subs	r3, #1
 800301c:	041b      	lsls	r3, r3, #16
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	061b      	lsls	r3, r3, #24
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	071b      	lsls	r3, r3, #28
 800302e:	4917      	ldr	r1, [pc, #92]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003036:	4b16      	ldr	r3, [pc, #88]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003038:	2201      	movs	r2, #1
 800303a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800303c:	f7ff f996 	bl	800236c <HAL_GetTick>
 8003040:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003044:	f7ff f992 	bl	800236c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e09f      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003064:	2b01      	cmp	r3, #1
 8003066:	f040 8095 	bne.w	8003194 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800306a:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003070:	f7ff f97c 	bl	800236c <HAL_GetTick>
 8003074:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003076:	e00f      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003078:	f7ff f978 	bl	800236c <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d908      	bls.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e085      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800
 8003090:	42470068 	.word	0x42470068
 8003094:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003098:	4b41      	ldr	r3, [pc, #260]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030a4:	d0e8      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x566>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d02b      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d127      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80030ce:	4b34      	ldr	r3, [pc, #208]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d4:	0c1b      	lsrs	r3, r3, #16
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	3301      	adds	r3, #1
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699a      	ldr	r2, [r3, #24]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	019b      	lsls	r3, r3, #6
 80030ea:	431a      	orrs	r2, r3
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	3b01      	subs	r3, #1
 80030f2:	041b      	lsls	r3, r3, #16
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	061b      	lsls	r3, r3, #24
 80030fc:	4928      	ldr	r1, [pc, #160]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003104:	4b26      	ldr	r3, [pc, #152]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800310a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	3b01      	subs	r3, #1
 8003114:	021b      	lsls	r3, r3, #8
 8003116:	4922      	ldr	r1, [pc, #136]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d01d      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003132:	d118      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003134:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313a:	0e1b      	lsrs	r3, r3, #24
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699a      	ldr	r2, [r3, #24]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	019b      	lsls	r3, r3, #6
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	085b      	lsrs	r3, r3, #1
 8003154:	3b01      	subs	r3, #1
 8003156:	041b      	lsls	r3, r3, #16
 8003158:	431a      	orrs	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	061b      	lsls	r3, r3, #24
 800315e:	4910      	ldr	r1, [pc, #64]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003166:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800316c:	f7ff f8fe 	bl	800236c <HAL_GetTick>
 8003170:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003174:	f7ff f8fa 	bl	800236c <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e007      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800318e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003192:	d1ef      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3730      	adds	r7, #48	; 0x30
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40023800 	.word	0x40023800
 80031a4:	42470070 	.word	0x42470070

080031a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031c2:	4bc6      	ldr	r3, [pc, #792]	; (80034dc <HAL_RCC_GetSysClockFreq+0x334>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b0c      	cmp	r3, #12
 80031cc:	f200 817e 	bhi.w	80034cc <HAL_RCC_GetSysClockFreq+0x324>
 80031d0:	a201      	add	r2, pc, #4	; (adr r2, 80031d8 <HAL_RCC_GetSysClockFreq+0x30>)
 80031d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d6:	bf00      	nop
 80031d8:	0800320d 	.word	0x0800320d
 80031dc:	080034cd 	.word	0x080034cd
 80031e0:	080034cd 	.word	0x080034cd
 80031e4:	080034cd 	.word	0x080034cd
 80031e8:	08003213 	.word	0x08003213
 80031ec:	080034cd 	.word	0x080034cd
 80031f0:	080034cd 	.word	0x080034cd
 80031f4:	080034cd 	.word	0x080034cd
 80031f8:	08003219 	.word	0x08003219
 80031fc:	080034cd 	.word	0x080034cd
 8003200:	080034cd 	.word	0x080034cd
 8003204:	080034cd 	.word	0x080034cd
 8003208:	08003375 	.word	0x08003375
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800320c:	4bb4      	ldr	r3, [pc, #720]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x338>)
 800320e:	613b      	str	r3, [r7, #16]
       break;
 8003210:	e15f      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003212:	4bb4      	ldr	r3, [pc, #720]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003214:	613b      	str	r3, [r7, #16]
      break;
 8003216:	e15c      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003218:	4bb0      	ldr	r3, [pc, #704]	; (80034dc <HAL_RCC_GetSysClockFreq+0x334>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003220:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003222:	4bae      	ldr	r3, [pc, #696]	; (80034dc <HAL_RCC_GetSysClockFreq+0x334>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d04a      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800322e:	4bab      	ldr	r3, [pc, #684]	; (80034dc <HAL_RCC_GetSysClockFreq+0x334>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	099b      	lsrs	r3, r3, #6
 8003234:	f04f 0400 	mov.w	r4, #0
 8003238:	f240 11ff 	movw	r1, #511	; 0x1ff
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	ea03 0501 	and.w	r5, r3, r1
 8003244:	ea04 0602 	and.w	r6, r4, r2
 8003248:	4629      	mov	r1, r5
 800324a:	4632      	mov	r2, r6
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	f04f 0400 	mov.w	r4, #0
 8003254:	0154      	lsls	r4, r2, #5
 8003256:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800325a:	014b      	lsls	r3, r1, #5
 800325c:	4619      	mov	r1, r3
 800325e:	4622      	mov	r2, r4
 8003260:	1b49      	subs	r1, r1, r5
 8003262:	eb62 0206 	sbc.w	r2, r2, r6
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	f04f 0400 	mov.w	r4, #0
 800326e:	0194      	lsls	r4, r2, #6
 8003270:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003274:	018b      	lsls	r3, r1, #6
 8003276:	1a5b      	subs	r3, r3, r1
 8003278:	eb64 0402 	sbc.w	r4, r4, r2
 800327c:	f04f 0100 	mov.w	r1, #0
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	00e2      	lsls	r2, r4, #3
 8003286:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800328a:	00d9      	lsls	r1, r3, #3
 800328c:	460b      	mov	r3, r1
 800328e:	4614      	mov	r4, r2
 8003290:	195b      	adds	r3, r3, r5
 8003292:	eb44 0406 	adc.w	r4, r4, r6
 8003296:	f04f 0100 	mov.w	r1, #0
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	0262      	lsls	r2, r4, #9
 80032a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80032a4:	0259      	lsls	r1, r3, #9
 80032a6:	460b      	mov	r3, r1
 80032a8:	4614      	mov	r4, r2
 80032aa:	4618      	mov	r0, r3
 80032ac:	4621      	mov	r1, r4
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f04f 0400 	mov.w	r4, #0
 80032b4:	461a      	mov	r2, r3
 80032b6:	4623      	mov	r3, r4
 80032b8:	f7fc fffa 	bl	80002b0 <__aeabi_uldivmod>
 80032bc:	4603      	mov	r3, r0
 80032be:	460c      	mov	r4, r1
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	e049      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c4:	4b85      	ldr	r3, [pc, #532]	; (80034dc <HAL_RCC_GetSysClockFreq+0x334>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	099b      	lsrs	r3, r3, #6
 80032ca:	f04f 0400 	mov.w	r4, #0
 80032ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	ea03 0501 	and.w	r5, r3, r1
 80032da:	ea04 0602 	and.w	r6, r4, r2
 80032de:	4629      	mov	r1, r5
 80032e0:	4632      	mov	r2, r6
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	f04f 0400 	mov.w	r4, #0
 80032ea:	0154      	lsls	r4, r2, #5
 80032ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032f0:	014b      	lsls	r3, r1, #5
 80032f2:	4619      	mov	r1, r3
 80032f4:	4622      	mov	r2, r4
 80032f6:	1b49      	subs	r1, r1, r5
 80032f8:	eb62 0206 	sbc.w	r2, r2, r6
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	f04f 0400 	mov.w	r4, #0
 8003304:	0194      	lsls	r4, r2, #6
 8003306:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800330a:	018b      	lsls	r3, r1, #6
 800330c:	1a5b      	subs	r3, r3, r1
 800330e:	eb64 0402 	sbc.w	r4, r4, r2
 8003312:	f04f 0100 	mov.w	r1, #0
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	00e2      	lsls	r2, r4, #3
 800331c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003320:	00d9      	lsls	r1, r3, #3
 8003322:	460b      	mov	r3, r1
 8003324:	4614      	mov	r4, r2
 8003326:	195b      	adds	r3, r3, r5
 8003328:	eb44 0406 	adc.w	r4, r4, r6
 800332c:	f04f 0100 	mov.w	r1, #0
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	02a2      	lsls	r2, r4, #10
 8003336:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800333a:	0299      	lsls	r1, r3, #10
 800333c:	460b      	mov	r3, r1
 800333e:	4614      	mov	r4, r2
 8003340:	4618      	mov	r0, r3
 8003342:	4621      	mov	r1, r4
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f04f 0400 	mov.w	r4, #0
 800334a:	461a      	mov	r2, r3
 800334c:	4623      	mov	r3, r4
 800334e:	f7fc ffaf 	bl	80002b0 <__aeabi_uldivmod>
 8003352:	4603      	mov	r3, r0
 8003354:	460c      	mov	r4, r1
 8003356:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003358:	4b60      	ldr	r3, [pc, #384]	; (80034dc <HAL_RCC_GetSysClockFreq+0x334>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	0c1b      	lsrs	r3, r3, #16
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	3301      	adds	r3, #1
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003370:	613b      	str	r3, [r7, #16]
      break;
 8003372:	e0ae      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003374:	4b59      	ldr	r3, [pc, #356]	; (80034dc <HAL_RCC_GetSysClockFreq+0x334>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800337c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800337e:	4b57      	ldr	r3, [pc, #348]	; (80034dc <HAL_RCC_GetSysClockFreq+0x334>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d04a      	beq.n	8003420 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338a:	4b54      	ldr	r3, [pc, #336]	; (80034dc <HAL_RCC_GetSysClockFreq+0x334>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	099b      	lsrs	r3, r3, #6
 8003390:	f04f 0400 	mov.w	r4, #0
 8003394:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	ea03 0501 	and.w	r5, r3, r1
 80033a0:	ea04 0602 	and.w	r6, r4, r2
 80033a4:	4629      	mov	r1, r5
 80033a6:	4632      	mov	r2, r6
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	f04f 0400 	mov.w	r4, #0
 80033b0:	0154      	lsls	r4, r2, #5
 80033b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033b6:	014b      	lsls	r3, r1, #5
 80033b8:	4619      	mov	r1, r3
 80033ba:	4622      	mov	r2, r4
 80033bc:	1b49      	subs	r1, r1, r5
 80033be:	eb62 0206 	sbc.w	r2, r2, r6
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	f04f 0400 	mov.w	r4, #0
 80033ca:	0194      	lsls	r4, r2, #6
 80033cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033d0:	018b      	lsls	r3, r1, #6
 80033d2:	1a5b      	subs	r3, r3, r1
 80033d4:	eb64 0402 	sbc.w	r4, r4, r2
 80033d8:	f04f 0100 	mov.w	r1, #0
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	00e2      	lsls	r2, r4, #3
 80033e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033e6:	00d9      	lsls	r1, r3, #3
 80033e8:	460b      	mov	r3, r1
 80033ea:	4614      	mov	r4, r2
 80033ec:	195b      	adds	r3, r3, r5
 80033ee:	eb44 0406 	adc.w	r4, r4, r6
 80033f2:	f04f 0100 	mov.w	r1, #0
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	0262      	lsls	r2, r4, #9
 80033fc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003400:	0259      	lsls	r1, r3, #9
 8003402:	460b      	mov	r3, r1
 8003404:	4614      	mov	r4, r2
 8003406:	4618      	mov	r0, r3
 8003408:	4621      	mov	r1, r4
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f04f 0400 	mov.w	r4, #0
 8003410:	461a      	mov	r2, r3
 8003412:	4623      	mov	r3, r4
 8003414:	f7fc ff4c 	bl	80002b0 <__aeabi_uldivmod>
 8003418:	4603      	mov	r3, r0
 800341a:	460c      	mov	r4, r1
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	e049      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003420:	4b2e      	ldr	r3, [pc, #184]	; (80034dc <HAL_RCC_GetSysClockFreq+0x334>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	099b      	lsrs	r3, r3, #6
 8003426:	f04f 0400 	mov.w	r4, #0
 800342a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	ea03 0501 	and.w	r5, r3, r1
 8003436:	ea04 0602 	and.w	r6, r4, r2
 800343a:	4629      	mov	r1, r5
 800343c:	4632      	mov	r2, r6
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	f04f 0400 	mov.w	r4, #0
 8003446:	0154      	lsls	r4, r2, #5
 8003448:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800344c:	014b      	lsls	r3, r1, #5
 800344e:	4619      	mov	r1, r3
 8003450:	4622      	mov	r2, r4
 8003452:	1b49      	subs	r1, r1, r5
 8003454:	eb62 0206 	sbc.w	r2, r2, r6
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	f04f 0400 	mov.w	r4, #0
 8003460:	0194      	lsls	r4, r2, #6
 8003462:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003466:	018b      	lsls	r3, r1, #6
 8003468:	1a5b      	subs	r3, r3, r1
 800346a:	eb64 0402 	sbc.w	r4, r4, r2
 800346e:	f04f 0100 	mov.w	r1, #0
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	00e2      	lsls	r2, r4, #3
 8003478:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800347c:	00d9      	lsls	r1, r3, #3
 800347e:	460b      	mov	r3, r1
 8003480:	4614      	mov	r4, r2
 8003482:	195b      	adds	r3, r3, r5
 8003484:	eb44 0406 	adc.w	r4, r4, r6
 8003488:	f04f 0100 	mov.w	r1, #0
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	02a2      	lsls	r2, r4, #10
 8003492:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003496:	0299      	lsls	r1, r3, #10
 8003498:	460b      	mov	r3, r1
 800349a:	4614      	mov	r4, r2
 800349c:	4618      	mov	r0, r3
 800349e:	4621      	mov	r1, r4
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f04f 0400 	mov.w	r4, #0
 80034a6:	461a      	mov	r2, r3
 80034a8:	4623      	mov	r3, r4
 80034aa:	f7fc ff01 	bl	80002b0 <__aeabi_uldivmod>
 80034ae:	4603      	mov	r3, r0
 80034b0:	460c      	mov	r4, r1
 80034b2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034b4:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_RCC_GetSysClockFreq+0x334>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	0f1b      	lsrs	r3, r3, #28
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c8:	613b      	str	r3, [r7, #16]
      break;
 80034ca:	e002      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034cc:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x338>)
 80034ce:	613b      	str	r3, [r7, #16]
      break;
 80034d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034d2:	693b      	ldr	r3, [r7, #16]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034dc:	40023800 	.word	0x40023800
 80034e0:	00f42400 	.word	0x00f42400
 80034e4:	007a1200 	.word	0x007a1200

080034e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8083 	beq.w	8003608 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003502:	4b95      	ldr	r3, [pc, #596]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b04      	cmp	r3, #4
 800350c:	d019      	beq.n	8003542 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800350e:	4b92      	ldr	r3, [pc, #584]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003516:	2b08      	cmp	r3, #8
 8003518:	d106      	bne.n	8003528 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800351a:	4b8f      	ldr	r3, [pc, #572]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003526:	d00c      	beq.n	8003542 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003528:	4b8b      	ldr	r3, [pc, #556]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003530:	2b0c      	cmp	r3, #12
 8003532:	d112      	bne.n	800355a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003534:	4b88      	ldr	r3, [pc, #544]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003540:	d10b      	bne.n	800355a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003542:	4b85      	ldr	r3, [pc, #532]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d05b      	beq.n	8003606 <HAL_RCC_OscConfig+0x11e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d157      	bne.n	8003606 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e216      	b.n	8003988 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003562:	d106      	bne.n	8003572 <HAL_RCC_OscConfig+0x8a>
 8003564:	4b7c      	ldr	r3, [pc, #496]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a7b      	ldr	r2, [pc, #492]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 800356a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	e01d      	b.n	80035ae <HAL_RCC_OscConfig+0xc6>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800357a:	d10c      	bne.n	8003596 <HAL_RCC_OscConfig+0xae>
 800357c:	4b76      	ldr	r3, [pc, #472]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a75      	ldr	r2, [pc, #468]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 8003582:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b73      	ldr	r3, [pc, #460]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a72      	ldr	r2, [pc, #456]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 800358e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	e00b      	b.n	80035ae <HAL_RCC_OscConfig+0xc6>
 8003596:	4b70      	ldr	r3, [pc, #448]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a6f      	ldr	r2, [pc, #444]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 800359c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	4b6d      	ldr	r3, [pc, #436]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a6c      	ldr	r2, [pc, #432]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 80035a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d013      	beq.n	80035de <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b6:	f7fe fed9 	bl	800236c <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035be:	f7fe fed5 	bl	800236c <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b64      	cmp	r3, #100	; 0x64
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e1db      	b.n	8003988 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d0:	4b61      	ldr	r3, [pc, #388]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0xd6>
 80035dc:	e014      	b.n	8003608 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035de:	f7fe fec5 	bl	800236c <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e6:	f7fe fec1 	bl	800236c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b64      	cmp	r3, #100	; 0x64
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e1c7      	b.n	8003988 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f8:	4b57      	ldr	r3, [pc, #348]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f0      	bne.n	80035e6 <HAL_RCC_OscConfig+0xfe>
 8003604:	e000      	b.n	8003608 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003606:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d06f      	beq.n	80036f4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003614:	4b50      	ldr	r3, [pc, #320]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 030c 	and.w	r3, r3, #12
 800361c:	2b00      	cmp	r3, #0
 800361e:	d017      	beq.n	8003650 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003620:	4b4d      	ldr	r3, [pc, #308]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003628:	2b08      	cmp	r3, #8
 800362a:	d105      	bne.n	8003638 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800362c:	4b4a      	ldr	r3, [pc, #296]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00b      	beq.n	8003650 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003638:	4b47      	ldr	r3, [pc, #284]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003640:	2b0c      	cmp	r3, #12
 8003642:	d11c      	bne.n	800367e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003644:	4b44      	ldr	r3, [pc, #272]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d116      	bne.n	800367e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003650:	4b41      	ldr	r3, [pc, #260]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_RCC_OscConfig+0x180>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d001      	beq.n	8003668 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e18f      	b.n	8003988 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003668:	4b3b      	ldr	r3, [pc, #236]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4938      	ldr	r1, [pc, #224]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 8003678:	4313      	orrs	r3, r2
 800367a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367c:	e03a      	b.n	80036f4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d020      	beq.n	80036c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003686:	4b35      	ldr	r3, [pc, #212]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003688:	2201      	movs	r2, #1
 800368a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368c:	f7fe fe6e 	bl	800236c <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003694:	f7fe fe6a 	bl	800236c <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e170      	b.n	8003988 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a6:	4b2c      	ldr	r3, [pc, #176]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f0      	beq.n	8003694 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b2:	4b29      	ldr	r3, [pc, #164]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4925      	ldr	r1, [pc, #148]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]
 80036c6:	e015      	b.n	80036f4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c8:	4b24      	ldr	r3, [pc, #144]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ce:	f7fe fe4d 	bl	800236c <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d6:	f7fe fe49 	bl	800236c <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e14f      	b.n	8003988 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e8:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1f0      	bne.n	80036d6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d037      	beq.n	8003770 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d016      	beq.n	8003736 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003708:	4b15      	ldr	r3, [pc, #84]	; (8003760 <HAL_RCC_OscConfig+0x278>)
 800370a:	2201      	movs	r2, #1
 800370c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370e:	f7fe fe2d 	bl	800236c <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003716:	f7fe fe29 	bl	800236c <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e12f      	b.n	8003988 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 800372a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0f0      	beq.n	8003716 <HAL_RCC_OscConfig+0x22e>
 8003734:	e01c      	b.n	8003770 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003736:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_RCC_OscConfig+0x278>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373c:	f7fe fe16 	bl	800236c <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003742:	e00f      	b.n	8003764 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003744:	f7fe fe12 	bl	800236c <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d908      	bls.n	8003764 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e118      	b.n	8003988 <HAL_RCC_OscConfig+0x4a0>
 8003756:	bf00      	nop
 8003758:	40023800 	.word	0x40023800
 800375c:	42470000 	.word	0x42470000
 8003760:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003764:	4b8a      	ldr	r3, [pc, #552]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 8003766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e9      	bne.n	8003744 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 8097 	beq.w	80038ac <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377e:	2300      	movs	r3, #0
 8003780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003782:	4b83      	ldr	r3, [pc, #524]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10f      	bne.n	80037ae <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	4b7f      	ldr	r3, [pc, #508]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	4a7e      	ldr	r2, [pc, #504]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 8003798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800379c:	6413      	str	r3, [r2, #64]	; 0x40
 800379e:	4b7c      	ldr	r3, [pc, #496]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037aa:	2301      	movs	r3, #1
 80037ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ae:	4b79      	ldr	r3, [pc, #484]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d118      	bne.n	80037ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ba:	4b76      	ldr	r3, [pc, #472]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a75      	ldr	r2, [pc, #468]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80037c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c6:	f7fe fdd1 	bl	800236c <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ce:	f7fe fdcd 	bl	800236c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e0d3      	b.n	8003988 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e0:	4b6c      	ldr	r3, [pc, #432]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d106      	bne.n	8003802 <HAL_RCC_OscConfig+0x31a>
 80037f4:	4b66      	ldr	r3, [pc, #408]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	4a65      	ldr	r2, [pc, #404]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003800:	e01c      	b.n	800383c <HAL_RCC_OscConfig+0x354>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b05      	cmp	r3, #5
 8003808:	d10c      	bne.n	8003824 <HAL_RCC_OscConfig+0x33c>
 800380a:	4b61      	ldr	r3, [pc, #388]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	4a60      	ldr	r2, [pc, #384]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 8003810:	f043 0304 	orr.w	r3, r3, #4
 8003814:	6713      	str	r3, [r2, #112]	; 0x70
 8003816:	4b5e      	ldr	r3, [pc, #376]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381a:	4a5d      	ldr	r2, [pc, #372]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	6713      	str	r3, [r2, #112]	; 0x70
 8003822:	e00b      	b.n	800383c <HAL_RCC_OscConfig+0x354>
 8003824:	4b5a      	ldr	r3, [pc, #360]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	4a59      	ldr	r2, [pc, #356]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	6713      	str	r3, [r2, #112]	; 0x70
 8003830:	4b57      	ldr	r3, [pc, #348]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	4a56      	ldr	r2, [pc, #344]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 8003836:	f023 0304 	bic.w	r3, r3, #4
 800383a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d015      	beq.n	8003870 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003844:	f7fe fd92 	bl	800236c <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800384c:	f7fe fd8e 	bl	800236c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	; 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e092      	b.n	8003988 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003862:	4b4b      	ldr	r3, [pc, #300]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0ee      	beq.n	800384c <HAL_RCC_OscConfig+0x364>
 800386e:	e014      	b.n	800389a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003870:	f7fe fd7c 	bl	800236c <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003876:	e00a      	b.n	800388e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003878:	f7fe fd78 	bl	800236c <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	; 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e07c      	b.n	8003988 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388e:	4b40      	ldr	r3, [pc, #256]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1ee      	bne.n	8003878 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d105      	bne.n	80038ac <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a0:	4b3b      	ldr	r3, [pc, #236]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	4a3a      	ldr	r2, [pc, #232]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 80038a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d068      	beq.n	8003986 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038b4:	4b36      	ldr	r3, [pc, #216]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 030c 	and.w	r3, r3, #12
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d060      	beq.n	8003982 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d145      	bne.n	8003954 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c8:	4b33      	ldr	r3, [pc, #204]	; (8003998 <HAL_RCC_OscConfig+0x4b0>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ce:	f7fe fd4d 	bl	800236c <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d6:	f7fe fd49 	bl	800236c <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e04f      	b.n	8003988 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e8:	4b29      	ldr	r3, [pc, #164]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f0      	bne.n	80038d6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69da      	ldr	r2, [r3, #28]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	019b      	lsls	r3, r3, #6
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	085b      	lsrs	r3, r3, #1
 800390c:	3b01      	subs	r3, #1
 800390e:	041b      	lsls	r3, r3, #16
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	061b      	lsls	r3, r3, #24
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	071b      	lsls	r3, r3, #28
 8003920:	491b      	ldr	r1, [pc, #108]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 8003922:	4313      	orrs	r3, r2
 8003924:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003926:	4b1c      	ldr	r3, [pc, #112]	; (8003998 <HAL_RCC_OscConfig+0x4b0>)
 8003928:	2201      	movs	r2, #1
 800392a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7fe fd1e 	bl	800236c <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003934:	f7fe fd1a 	bl	800236c <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e020      	b.n	8003988 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003946:	4b12      	ldr	r3, [pc, #72]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0x44c>
 8003952:	e018      	b.n	8003986 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003954:	4b10      	ldr	r3, [pc, #64]	; (8003998 <HAL_RCC_OscConfig+0x4b0>)
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395a:	f7fe fd07 	bl	800236c <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003962:	f7fe fd03 	bl	800236c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e009      	b.n	8003988 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <HAL_RCC_OscConfig+0x4a8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f0      	bne.n	8003962 <HAL_RCC_OscConfig+0x47a>
 8003980:	e001      	b.n	8003986 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40023800 	.word	0x40023800
 8003994:	40007000 	.word	0x40007000
 8003998:	42470060 	.word	0x42470060

0800399c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e083      	b.n	8003ab6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7f5b      	ldrb	r3, [r3, #29]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d105      	bne.n	80039c4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fe fa46 	bl	8001e50 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	22ca      	movs	r2, #202	; 0xca
 80039d0:	625a      	str	r2, [r3, #36]	; 0x24
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2253      	movs	r2, #83	; 0x53
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f897 	bl	8003b0e <RTC_EnterInitMode>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d008      	beq.n	80039f8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	22ff      	movs	r2, #255	; 0xff
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2204      	movs	r2, #4
 80039f2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e05e      	b.n	8003ab6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a0a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6899      	ldr	r1, [r3, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	68d2      	ldr	r2, [r2, #12]
 8003a32:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6919      	ldr	r1, [r3, #16]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	041a      	lsls	r2, r3, #16
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a56:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10e      	bne.n	8003a84 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f829 	bl	8003abe <HAL_RTC_WaitForSynchro>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d008      	beq.n	8003a84 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	22ff      	movs	r2, #255	; 0xff
 8003a78:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e018      	b.n	8003ab6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a92:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	22ff      	movs	r2, #255	; 0xff
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
  }
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ad8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ada:	f7fe fc47 	bl	800236c <HAL_GetTick>
 8003ade:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003ae0:	e009      	b.n	8003af6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003ae2:	f7fe fc43 	bl	800236c <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003af0:	d901      	bls.n	8003af6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e007      	b.n	8003b06 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ee      	beq.n	8003ae2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d119      	bne.n	8003b5c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b30:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b32:	f7fe fc1b 	bl	800236c <HAL_GetTick>
 8003b36:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b38:	e009      	b.n	8003b4e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003b3a:	f7fe fc17 	bl	800236c <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b48:	d901      	bls.n	8003b4e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e007      	b.n	8003b5e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0ee      	beq.n	8003b3a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e056      	b.n	8003c26 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fe f972 	bl	8001e7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	ea42 0103 	orr.w	r1, r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	0c1b      	lsrs	r3, r3, #16
 8003bf6:	f003 0104 	and.w	r1, r3, #4
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69da      	ldr	r2, [r3, #28]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e01d      	b.n	8003c7c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d106      	bne.n	8003c5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f815 	bl	8003c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	f000 f967 	bl	8003f40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b06      	cmp	r3, #6
 8003cc0:	d007      	beq.n	8003cd2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0201 	orr.w	r2, r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d122      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d11b      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0202 	mvn.w	r2, #2
 8003d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f8ee 	bl	8003f04 <HAL_TIM_IC_CaptureCallback>
 8003d28:	e005      	b.n	8003d36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f8e0 	bl	8003ef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f8f1 	bl	8003f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d122      	bne.n	8003d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d11b      	bne.n	8003d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0204 	mvn.w	r2, #4
 8003d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f8c4 	bl	8003f04 <HAL_TIM_IC_CaptureCallback>
 8003d7c:	e005      	b.n	8003d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f8b6 	bl	8003ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f8c7 	bl	8003f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d122      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d11b      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0208 	mvn.w	r2, #8
 8003db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2204      	movs	r2, #4
 8003dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f89a 	bl	8003f04 <HAL_TIM_IC_CaptureCallback>
 8003dd0:	e005      	b.n	8003dde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f88c 	bl	8003ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f89d 	bl	8003f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b10      	cmp	r3, #16
 8003df0:	d122      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d11b      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0210 	mvn.w	r2, #16
 8003e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f870 	bl	8003f04 <HAL_TIM_IC_CaptureCallback>
 8003e24:	e005      	b.n	8003e32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f862 	bl	8003ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f873 	bl	8003f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d10e      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d107      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0201 	mvn.w	r2, #1
 8003e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fd ffb4 	bl	8001dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6e:	2b80      	cmp	r3, #128	; 0x80
 8003e70:	d10e      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7c:	2b80      	cmp	r3, #128	; 0x80
 8003e7e:	d107      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f902 	bl	8004094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9a:	2b40      	cmp	r3, #64	; 0x40
 8003e9c:	d10e      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea8:	2b40      	cmp	r3, #64	; 0x40
 8003eaa:	d107      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f838 	bl	8003f2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d10e      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d107      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0220 	mvn.w	r2, #32
 8003ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f8cc 	bl	8004080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ee8:	bf00      	nop
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a40      	ldr	r2, [pc, #256]	; (8004054 <TIM_Base_SetConfig+0x114>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d013      	beq.n	8003f80 <TIM_Base_SetConfig+0x40>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5e:	d00f      	beq.n	8003f80 <TIM_Base_SetConfig+0x40>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a3d      	ldr	r2, [pc, #244]	; (8004058 <TIM_Base_SetConfig+0x118>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00b      	beq.n	8003f80 <TIM_Base_SetConfig+0x40>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a3c      	ldr	r2, [pc, #240]	; (800405c <TIM_Base_SetConfig+0x11c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d007      	beq.n	8003f80 <TIM_Base_SetConfig+0x40>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a3b      	ldr	r2, [pc, #236]	; (8004060 <TIM_Base_SetConfig+0x120>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_Base_SetConfig+0x40>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a3a      	ldr	r2, [pc, #232]	; (8004064 <TIM_Base_SetConfig+0x124>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d108      	bne.n	8003f92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a2f      	ldr	r2, [pc, #188]	; (8004054 <TIM_Base_SetConfig+0x114>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d02b      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa0:	d027      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a2c      	ldr	r2, [pc, #176]	; (8004058 <TIM_Base_SetConfig+0x118>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d023      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a2b      	ldr	r2, [pc, #172]	; (800405c <TIM_Base_SetConfig+0x11c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d01f      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a2a      	ldr	r2, [pc, #168]	; (8004060 <TIM_Base_SetConfig+0x120>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01b      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a29      	ldr	r2, [pc, #164]	; (8004064 <TIM_Base_SetConfig+0x124>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d017      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a28      	ldr	r2, [pc, #160]	; (8004068 <TIM_Base_SetConfig+0x128>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d013      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a27      	ldr	r2, [pc, #156]	; (800406c <TIM_Base_SetConfig+0x12c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00f      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a26      	ldr	r2, [pc, #152]	; (8004070 <TIM_Base_SetConfig+0x130>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00b      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a25      	ldr	r2, [pc, #148]	; (8004074 <TIM_Base_SetConfig+0x134>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a24      	ldr	r2, [pc, #144]	; (8004078 <TIM_Base_SetConfig+0x138>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <TIM_Base_SetConfig+0xb2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a23      	ldr	r2, [pc, #140]	; (800407c <TIM_Base_SetConfig+0x13c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d108      	bne.n	8004004 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a0a      	ldr	r2, [pc, #40]	; (8004054 <TIM_Base_SetConfig+0x114>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d003      	beq.n	8004038 <TIM_Base_SetConfig+0xf8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a0c      	ldr	r2, [pc, #48]	; (8004064 <TIM_Base_SetConfig+0x124>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d103      	bne.n	8004040 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	615a      	str	r2, [r3, #20]
}
 8004046:	bf00      	nop
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40010000 	.word	0x40010000
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800
 8004060:	40000c00 	.word	0x40000c00
 8004064:	40010400 	.word	0x40010400
 8004068:	40014000 	.word	0x40014000
 800406c:	40014400 	.word	0x40014400
 8004070:	40014800 	.word	0x40014800
 8004074:	40001800 	.word	0x40001800
 8004078:	40001c00 	.word	0x40001c00
 800407c:	40002000 	.word	0x40002000

08004080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <__libc_init_array>:
 80040a8:	b570      	push	{r4, r5, r6, lr}
 80040aa:	4e0d      	ldr	r6, [pc, #52]	; (80040e0 <__libc_init_array+0x38>)
 80040ac:	4c0d      	ldr	r4, [pc, #52]	; (80040e4 <__libc_init_array+0x3c>)
 80040ae:	1ba4      	subs	r4, r4, r6
 80040b0:	10a4      	asrs	r4, r4, #2
 80040b2:	2500      	movs	r5, #0
 80040b4:	42a5      	cmp	r5, r4
 80040b6:	d109      	bne.n	80040cc <__libc_init_array+0x24>
 80040b8:	4e0b      	ldr	r6, [pc, #44]	; (80040e8 <__libc_init_array+0x40>)
 80040ba:	4c0c      	ldr	r4, [pc, #48]	; (80040ec <__libc_init_array+0x44>)
 80040bc:	f000 ffa4 	bl	8005008 <_init>
 80040c0:	1ba4      	subs	r4, r4, r6
 80040c2:	10a4      	asrs	r4, r4, #2
 80040c4:	2500      	movs	r5, #0
 80040c6:	42a5      	cmp	r5, r4
 80040c8:	d105      	bne.n	80040d6 <__libc_init_array+0x2e>
 80040ca:	bd70      	pop	{r4, r5, r6, pc}
 80040cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040d0:	4798      	blx	r3
 80040d2:	3501      	adds	r5, #1
 80040d4:	e7ee      	b.n	80040b4 <__libc_init_array+0xc>
 80040d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040da:	4798      	blx	r3
 80040dc:	3501      	adds	r5, #1
 80040de:	e7f2      	b.n	80040c6 <__libc_init_array+0x1e>
 80040e0:	08006f20 	.word	0x08006f20
 80040e4:	08006f20 	.word	0x08006f20
 80040e8:	08006f20 	.word	0x08006f20
 80040ec:	08006f24 	.word	0x08006f24

080040f0 <memset>:
 80040f0:	4402      	add	r2, r0
 80040f2:	4603      	mov	r3, r0
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d100      	bne.n	80040fa <memset+0xa>
 80040f8:	4770      	bx	lr
 80040fa:	f803 1b01 	strb.w	r1, [r3], #1
 80040fe:	e7f9      	b.n	80040f4 <memset+0x4>

08004100 <iprintf>:
 8004100:	b40f      	push	{r0, r1, r2, r3}
 8004102:	4b0a      	ldr	r3, [pc, #40]	; (800412c <iprintf+0x2c>)
 8004104:	b513      	push	{r0, r1, r4, lr}
 8004106:	681c      	ldr	r4, [r3, #0]
 8004108:	b124      	cbz	r4, 8004114 <iprintf+0x14>
 800410a:	69a3      	ldr	r3, [r4, #24]
 800410c:	b913      	cbnz	r3, 8004114 <iprintf+0x14>
 800410e:	4620      	mov	r0, r4
 8004110:	f000 fa56 	bl	80045c0 <__sinit>
 8004114:	ab05      	add	r3, sp, #20
 8004116:	9a04      	ldr	r2, [sp, #16]
 8004118:	68a1      	ldr	r1, [r4, #8]
 800411a:	9301      	str	r3, [sp, #4]
 800411c:	4620      	mov	r0, r4
 800411e:	f000 fc17 	bl	8004950 <_vfiprintf_r>
 8004122:	b002      	add	sp, #8
 8004124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004128:	b004      	add	sp, #16
 800412a:	4770      	bx	lr
 800412c:	20000064 	.word	0x20000064

08004130 <_puts_r>:
 8004130:	b570      	push	{r4, r5, r6, lr}
 8004132:	460e      	mov	r6, r1
 8004134:	4605      	mov	r5, r0
 8004136:	b118      	cbz	r0, 8004140 <_puts_r+0x10>
 8004138:	6983      	ldr	r3, [r0, #24]
 800413a:	b90b      	cbnz	r3, 8004140 <_puts_r+0x10>
 800413c:	f000 fa40 	bl	80045c0 <__sinit>
 8004140:	69ab      	ldr	r3, [r5, #24]
 8004142:	68ac      	ldr	r4, [r5, #8]
 8004144:	b913      	cbnz	r3, 800414c <_puts_r+0x1c>
 8004146:	4628      	mov	r0, r5
 8004148:	f000 fa3a 	bl	80045c0 <__sinit>
 800414c:	4b23      	ldr	r3, [pc, #140]	; (80041dc <_puts_r+0xac>)
 800414e:	429c      	cmp	r4, r3
 8004150:	d117      	bne.n	8004182 <_puts_r+0x52>
 8004152:	686c      	ldr	r4, [r5, #4]
 8004154:	89a3      	ldrh	r3, [r4, #12]
 8004156:	071b      	lsls	r3, r3, #28
 8004158:	d51d      	bpl.n	8004196 <_puts_r+0x66>
 800415a:	6923      	ldr	r3, [r4, #16]
 800415c:	b1db      	cbz	r3, 8004196 <_puts_r+0x66>
 800415e:	3e01      	subs	r6, #1
 8004160:	68a3      	ldr	r3, [r4, #8]
 8004162:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004166:	3b01      	subs	r3, #1
 8004168:	60a3      	str	r3, [r4, #8]
 800416a:	b9e9      	cbnz	r1, 80041a8 <_puts_r+0x78>
 800416c:	2b00      	cmp	r3, #0
 800416e:	da2e      	bge.n	80041ce <_puts_r+0x9e>
 8004170:	4622      	mov	r2, r4
 8004172:	210a      	movs	r1, #10
 8004174:	4628      	mov	r0, r5
 8004176:	f000 f873 	bl	8004260 <__swbuf_r>
 800417a:	3001      	adds	r0, #1
 800417c:	d011      	beq.n	80041a2 <_puts_r+0x72>
 800417e:	200a      	movs	r0, #10
 8004180:	e011      	b.n	80041a6 <_puts_r+0x76>
 8004182:	4b17      	ldr	r3, [pc, #92]	; (80041e0 <_puts_r+0xb0>)
 8004184:	429c      	cmp	r4, r3
 8004186:	d101      	bne.n	800418c <_puts_r+0x5c>
 8004188:	68ac      	ldr	r4, [r5, #8]
 800418a:	e7e3      	b.n	8004154 <_puts_r+0x24>
 800418c:	4b15      	ldr	r3, [pc, #84]	; (80041e4 <_puts_r+0xb4>)
 800418e:	429c      	cmp	r4, r3
 8004190:	bf08      	it	eq
 8004192:	68ec      	ldreq	r4, [r5, #12]
 8004194:	e7de      	b.n	8004154 <_puts_r+0x24>
 8004196:	4621      	mov	r1, r4
 8004198:	4628      	mov	r0, r5
 800419a:	f000 f8b3 	bl	8004304 <__swsetup_r>
 800419e:	2800      	cmp	r0, #0
 80041a0:	d0dd      	beq.n	800415e <_puts_r+0x2e>
 80041a2:	f04f 30ff 	mov.w	r0, #4294967295
 80041a6:	bd70      	pop	{r4, r5, r6, pc}
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	da04      	bge.n	80041b6 <_puts_r+0x86>
 80041ac:	69a2      	ldr	r2, [r4, #24]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	dc06      	bgt.n	80041c0 <_puts_r+0x90>
 80041b2:	290a      	cmp	r1, #10
 80041b4:	d004      	beq.n	80041c0 <_puts_r+0x90>
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	6022      	str	r2, [r4, #0]
 80041bc:	7019      	strb	r1, [r3, #0]
 80041be:	e7cf      	b.n	8004160 <_puts_r+0x30>
 80041c0:	4622      	mov	r2, r4
 80041c2:	4628      	mov	r0, r5
 80041c4:	f000 f84c 	bl	8004260 <__swbuf_r>
 80041c8:	3001      	adds	r0, #1
 80041ca:	d1c9      	bne.n	8004160 <_puts_r+0x30>
 80041cc:	e7e9      	b.n	80041a2 <_puts_r+0x72>
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	200a      	movs	r0, #10
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	6022      	str	r2, [r4, #0]
 80041d6:	7018      	strb	r0, [r3, #0]
 80041d8:	e7e5      	b.n	80041a6 <_puts_r+0x76>
 80041da:	bf00      	nop
 80041dc:	08006ea4 	.word	0x08006ea4
 80041e0:	08006ec4 	.word	0x08006ec4
 80041e4:	08006e84 	.word	0x08006e84

080041e8 <puts>:
 80041e8:	4b02      	ldr	r3, [pc, #8]	; (80041f4 <puts+0xc>)
 80041ea:	4601      	mov	r1, r0
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	f7ff bf9f 	b.w	8004130 <_puts_r>
 80041f2:	bf00      	nop
 80041f4:	20000064 	.word	0x20000064

080041f8 <random>:
 80041f8:	b538      	push	{r3, r4, r5, lr}
 80041fa:	4b13      	ldr	r3, [pc, #76]	; (8004248 <random+0x50>)
 80041fc:	681c      	ldr	r4, [r3, #0]
 80041fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004200:	b97b      	cbnz	r3, 8004222 <random+0x2a>
 8004202:	2018      	movs	r0, #24
 8004204:	f000 faca 	bl	800479c <malloc>
 8004208:	4a10      	ldr	r2, [pc, #64]	; (800424c <random+0x54>)
 800420a:	4b11      	ldr	r3, [pc, #68]	; (8004250 <random+0x58>)
 800420c:	63a0      	str	r0, [r4, #56]	; 0x38
 800420e:	e9c0 2300 	strd	r2, r3, [r0]
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <random+0x5c>)
 8004214:	6083      	str	r3, [r0, #8]
 8004216:	230b      	movs	r3, #11
 8004218:	8183      	strh	r3, [r0, #12]
 800421a:	2201      	movs	r2, #1
 800421c:	2300      	movs	r3, #0
 800421e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004222:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004224:	480c      	ldr	r0, [pc, #48]	; (8004258 <random+0x60>)
 8004226:	690a      	ldr	r2, [r1, #16]
 8004228:	694b      	ldr	r3, [r1, #20]
 800422a:	4c0c      	ldr	r4, [pc, #48]	; (800425c <random+0x64>)
 800422c:	4350      	muls	r0, r2
 800422e:	fb04 0003 	mla	r0, r4, r3, r0
 8004232:	fba2 2304 	umull	r2, r3, r2, r4
 8004236:	4403      	add	r3, r0
 8004238:	1c54      	adds	r4, r2, #1
 800423a:	f143 0500 	adc.w	r5, r3, #0
 800423e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8004242:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8004246:	bd38      	pop	{r3, r4, r5, pc}
 8004248:	20000064 	.word	0x20000064
 800424c:	abcd330e 	.word	0xabcd330e
 8004250:	e66d1234 	.word	0xe66d1234
 8004254:	0005deec 	.word	0x0005deec
 8004258:	5851f42d 	.word	0x5851f42d
 800425c:	4c957f2d 	.word	0x4c957f2d

08004260 <__swbuf_r>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	460e      	mov	r6, r1
 8004264:	4614      	mov	r4, r2
 8004266:	4605      	mov	r5, r0
 8004268:	b118      	cbz	r0, 8004272 <__swbuf_r+0x12>
 800426a:	6983      	ldr	r3, [r0, #24]
 800426c:	b90b      	cbnz	r3, 8004272 <__swbuf_r+0x12>
 800426e:	f000 f9a7 	bl	80045c0 <__sinit>
 8004272:	4b21      	ldr	r3, [pc, #132]	; (80042f8 <__swbuf_r+0x98>)
 8004274:	429c      	cmp	r4, r3
 8004276:	d12a      	bne.n	80042ce <__swbuf_r+0x6e>
 8004278:	686c      	ldr	r4, [r5, #4]
 800427a:	69a3      	ldr	r3, [r4, #24]
 800427c:	60a3      	str	r3, [r4, #8]
 800427e:	89a3      	ldrh	r3, [r4, #12]
 8004280:	071a      	lsls	r2, r3, #28
 8004282:	d52e      	bpl.n	80042e2 <__swbuf_r+0x82>
 8004284:	6923      	ldr	r3, [r4, #16]
 8004286:	b363      	cbz	r3, 80042e2 <__swbuf_r+0x82>
 8004288:	6923      	ldr	r3, [r4, #16]
 800428a:	6820      	ldr	r0, [r4, #0]
 800428c:	1ac0      	subs	r0, r0, r3
 800428e:	6963      	ldr	r3, [r4, #20]
 8004290:	b2f6      	uxtb	r6, r6
 8004292:	4283      	cmp	r3, r0
 8004294:	4637      	mov	r7, r6
 8004296:	dc04      	bgt.n	80042a2 <__swbuf_r+0x42>
 8004298:	4621      	mov	r1, r4
 800429a:	4628      	mov	r0, r5
 800429c:	f000 f926 	bl	80044ec <_fflush_r>
 80042a0:	bb28      	cbnz	r0, 80042ee <__swbuf_r+0x8e>
 80042a2:	68a3      	ldr	r3, [r4, #8]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	60a3      	str	r3, [r4, #8]
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	6022      	str	r2, [r4, #0]
 80042ae:	701e      	strb	r6, [r3, #0]
 80042b0:	6963      	ldr	r3, [r4, #20]
 80042b2:	3001      	adds	r0, #1
 80042b4:	4283      	cmp	r3, r0
 80042b6:	d004      	beq.n	80042c2 <__swbuf_r+0x62>
 80042b8:	89a3      	ldrh	r3, [r4, #12]
 80042ba:	07db      	lsls	r3, r3, #31
 80042bc:	d519      	bpl.n	80042f2 <__swbuf_r+0x92>
 80042be:	2e0a      	cmp	r6, #10
 80042c0:	d117      	bne.n	80042f2 <__swbuf_r+0x92>
 80042c2:	4621      	mov	r1, r4
 80042c4:	4628      	mov	r0, r5
 80042c6:	f000 f911 	bl	80044ec <_fflush_r>
 80042ca:	b190      	cbz	r0, 80042f2 <__swbuf_r+0x92>
 80042cc:	e00f      	b.n	80042ee <__swbuf_r+0x8e>
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <__swbuf_r+0x9c>)
 80042d0:	429c      	cmp	r4, r3
 80042d2:	d101      	bne.n	80042d8 <__swbuf_r+0x78>
 80042d4:	68ac      	ldr	r4, [r5, #8]
 80042d6:	e7d0      	b.n	800427a <__swbuf_r+0x1a>
 80042d8:	4b09      	ldr	r3, [pc, #36]	; (8004300 <__swbuf_r+0xa0>)
 80042da:	429c      	cmp	r4, r3
 80042dc:	bf08      	it	eq
 80042de:	68ec      	ldreq	r4, [r5, #12]
 80042e0:	e7cb      	b.n	800427a <__swbuf_r+0x1a>
 80042e2:	4621      	mov	r1, r4
 80042e4:	4628      	mov	r0, r5
 80042e6:	f000 f80d 	bl	8004304 <__swsetup_r>
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d0cc      	beq.n	8004288 <__swbuf_r+0x28>
 80042ee:	f04f 37ff 	mov.w	r7, #4294967295
 80042f2:	4638      	mov	r0, r7
 80042f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042f6:	bf00      	nop
 80042f8:	08006ea4 	.word	0x08006ea4
 80042fc:	08006ec4 	.word	0x08006ec4
 8004300:	08006e84 	.word	0x08006e84

08004304 <__swsetup_r>:
 8004304:	4b32      	ldr	r3, [pc, #200]	; (80043d0 <__swsetup_r+0xcc>)
 8004306:	b570      	push	{r4, r5, r6, lr}
 8004308:	681d      	ldr	r5, [r3, #0]
 800430a:	4606      	mov	r6, r0
 800430c:	460c      	mov	r4, r1
 800430e:	b125      	cbz	r5, 800431a <__swsetup_r+0x16>
 8004310:	69ab      	ldr	r3, [r5, #24]
 8004312:	b913      	cbnz	r3, 800431a <__swsetup_r+0x16>
 8004314:	4628      	mov	r0, r5
 8004316:	f000 f953 	bl	80045c0 <__sinit>
 800431a:	4b2e      	ldr	r3, [pc, #184]	; (80043d4 <__swsetup_r+0xd0>)
 800431c:	429c      	cmp	r4, r3
 800431e:	d10f      	bne.n	8004340 <__swsetup_r+0x3c>
 8004320:	686c      	ldr	r4, [r5, #4]
 8004322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004326:	b29a      	uxth	r2, r3
 8004328:	0715      	lsls	r5, r2, #28
 800432a:	d42c      	bmi.n	8004386 <__swsetup_r+0x82>
 800432c:	06d0      	lsls	r0, r2, #27
 800432e:	d411      	bmi.n	8004354 <__swsetup_r+0x50>
 8004330:	2209      	movs	r2, #9
 8004332:	6032      	str	r2, [r6, #0]
 8004334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004338:	81a3      	strh	r3, [r4, #12]
 800433a:	f04f 30ff 	mov.w	r0, #4294967295
 800433e:	e03e      	b.n	80043be <__swsetup_r+0xba>
 8004340:	4b25      	ldr	r3, [pc, #148]	; (80043d8 <__swsetup_r+0xd4>)
 8004342:	429c      	cmp	r4, r3
 8004344:	d101      	bne.n	800434a <__swsetup_r+0x46>
 8004346:	68ac      	ldr	r4, [r5, #8]
 8004348:	e7eb      	b.n	8004322 <__swsetup_r+0x1e>
 800434a:	4b24      	ldr	r3, [pc, #144]	; (80043dc <__swsetup_r+0xd8>)
 800434c:	429c      	cmp	r4, r3
 800434e:	bf08      	it	eq
 8004350:	68ec      	ldreq	r4, [r5, #12]
 8004352:	e7e6      	b.n	8004322 <__swsetup_r+0x1e>
 8004354:	0751      	lsls	r1, r2, #29
 8004356:	d512      	bpl.n	800437e <__swsetup_r+0x7a>
 8004358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800435a:	b141      	cbz	r1, 800436e <__swsetup_r+0x6a>
 800435c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004360:	4299      	cmp	r1, r3
 8004362:	d002      	beq.n	800436a <__swsetup_r+0x66>
 8004364:	4630      	mov	r0, r6
 8004366:	f000 fa21 	bl	80047ac <_free_r>
 800436a:	2300      	movs	r3, #0
 800436c:	6363      	str	r3, [r4, #52]	; 0x34
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004374:	81a3      	strh	r3, [r4, #12]
 8004376:	2300      	movs	r3, #0
 8004378:	6063      	str	r3, [r4, #4]
 800437a:	6923      	ldr	r3, [r4, #16]
 800437c:	6023      	str	r3, [r4, #0]
 800437e:	89a3      	ldrh	r3, [r4, #12]
 8004380:	f043 0308 	orr.w	r3, r3, #8
 8004384:	81a3      	strh	r3, [r4, #12]
 8004386:	6923      	ldr	r3, [r4, #16]
 8004388:	b94b      	cbnz	r3, 800439e <__swsetup_r+0x9a>
 800438a:	89a3      	ldrh	r3, [r4, #12]
 800438c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004394:	d003      	beq.n	800439e <__swsetup_r+0x9a>
 8004396:	4621      	mov	r1, r4
 8004398:	4630      	mov	r0, r6
 800439a:	f000 f9bf 	bl	800471c <__smakebuf_r>
 800439e:	89a2      	ldrh	r2, [r4, #12]
 80043a0:	f012 0301 	ands.w	r3, r2, #1
 80043a4:	d00c      	beq.n	80043c0 <__swsetup_r+0xbc>
 80043a6:	2300      	movs	r3, #0
 80043a8:	60a3      	str	r3, [r4, #8]
 80043aa:	6963      	ldr	r3, [r4, #20]
 80043ac:	425b      	negs	r3, r3
 80043ae:	61a3      	str	r3, [r4, #24]
 80043b0:	6923      	ldr	r3, [r4, #16]
 80043b2:	b953      	cbnz	r3, 80043ca <__swsetup_r+0xc6>
 80043b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80043bc:	d1ba      	bne.n	8004334 <__swsetup_r+0x30>
 80043be:	bd70      	pop	{r4, r5, r6, pc}
 80043c0:	0792      	lsls	r2, r2, #30
 80043c2:	bf58      	it	pl
 80043c4:	6963      	ldrpl	r3, [r4, #20]
 80043c6:	60a3      	str	r3, [r4, #8]
 80043c8:	e7f2      	b.n	80043b0 <__swsetup_r+0xac>
 80043ca:	2000      	movs	r0, #0
 80043cc:	e7f7      	b.n	80043be <__swsetup_r+0xba>
 80043ce:	bf00      	nop
 80043d0:	20000064 	.word	0x20000064
 80043d4:	08006ea4 	.word	0x08006ea4
 80043d8:	08006ec4 	.word	0x08006ec4
 80043dc:	08006e84 	.word	0x08006e84

080043e0 <__sflush_r>:
 80043e0:	898a      	ldrh	r2, [r1, #12]
 80043e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043e6:	4605      	mov	r5, r0
 80043e8:	0710      	lsls	r0, r2, #28
 80043ea:	460c      	mov	r4, r1
 80043ec:	d458      	bmi.n	80044a0 <__sflush_r+0xc0>
 80043ee:	684b      	ldr	r3, [r1, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	dc05      	bgt.n	8004400 <__sflush_r+0x20>
 80043f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	dc02      	bgt.n	8004400 <__sflush_r+0x20>
 80043fa:	2000      	movs	r0, #0
 80043fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004402:	2e00      	cmp	r6, #0
 8004404:	d0f9      	beq.n	80043fa <__sflush_r+0x1a>
 8004406:	2300      	movs	r3, #0
 8004408:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800440c:	682f      	ldr	r7, [r5, #0]
 800440e:	6a21      	ldr	r1, [r4, #32]
 8004410:	602b      	str	r3, [r5, #0]
 8004412:	d032      	beq.n	800447a <__sflush_r+0x9a>
 8004414:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004416:	89a3      	ldrh	r3, [r4, #12]
 8004418:	075a      	lsls	r2, r3, #29
 800441a:	d505      	bpl.n	8004428 <__sflush_r+0x48>
 800441c:	6863      	ldr	r3, [r4, #4]
 800441e:	1ac0      	subs	r0, r0, r3
 8004420:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004422:	b10b      	cbz	r3, 8004428 <__sflush_r+0x48>
 8004424:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004426:	1ac0      	subs	r0, r0, r3
 8004428:	2300      	movs	r3, #0
 800442a:	4602      	mov	r2, r0
 800442c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800442e:	6a21      	ldr	r1, [r4, #32]
 8004430:	4628      	mov	r0, r5
 8004432:	47b0      	blx	r6
 8004434:	1c43      	adds	r3, r0, #1
 8004436:	89a3      	ldrh	r3, [r4, #12]
 8004438:	d106      	bne.n	8004448 <__sflush_r+0x68>
 800443a:	6829      	ldr	r1, [r5, #0]
 800443c:	291d      	cmp	r1, #29
 800443e:	d848      	bhi.n	80044d2 <__sflush_r+0xf2>
 8004440:	4a29      	ldr	r2, [pc, #164]	; (80044e8 <__sflush_r+0x108>)
 8004442:	40ca      	lsrs	r2, r1
 8004444:	07d6      	lsls	r6, r2, #31
 8004446:	d544      	bpl.n	80044d2 <__sflush_r+0xf2>
 8004448:	2200      	movs	r2, #0
 800444a:	6062      	str	r2, [r4, #4]
 800444c:	04d9      	lsls	r1, r3, #19
 800444e:	6922      	ldr	r2, [r4, #16]
 8004450:	6022      	str	r2, [r4, #0]
 8004452:	d504      	bpl.n	800445e <__sflush_r+0x7e>
 8004454:	1c42      	adds	r2, r0, #1
 8004456:	d101      	bne.n	800445c <__sflush_r+0x7c>
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	b903      	cbnz	r3, 800445e <__sflush_r+0x7e>
 800445c:	6560      	str	r0, [r4, #84]	; 0x54
 800445e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004460:	602f      	str	r7, [r5, #0]
 8004462:	2900      	cmp	r1, #0
 8004464:	d0c9      	beq.n	80043fa <__sflush_r+0x1a>
 8004466:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800446a:	4299      	cmp	r1, r3
 800446c:	d002      	beq.n	8004474 <__sflush_r+0x94>
 800446e:	4628      	mov	r0, r5
 8004470:	f000 f99c 	bl	80047ac <_free_r>
 8004474:	2000      	movs	r0, #0
 8004476:	6360      	str	r0, [r4, #52]	; 0x34
 8004478:	e7c0      	b.n	80043fc <__sflush_r+0x1c>
 800447a:	2301      	movs	r3, #1
 800447c:	4628      	mov	r0, r5
 800447e:	47b0      	blx	r6
 8004480:	1c41      	adds	r1, r0, #1
 8004482:	d1c8      	bne.n	8004416 <__sflush_r+0x36>
 8004484:	682b      	ldr	r3, [r5, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0c5      	beq.n	8004416 <__sflush_r+0x36>
 800448a:	2b1d      	cmp	r3, #29
 800448c:	d001      	beq.n	8004492 <__sflush_r+0xb2>
 800448e:	2b16      	cmp	r3, #22
 8004490:	d101      	bne.n	8004496 <__sflush_r+0xb6>
 8004492:	602f      	str	r7, [r5, #0]
 8004494:	e7b1      	b.n	80043fa <__sflush_r+0x1a>
 8004496:	89a3      	ldrh	r3, [r4, #12]
 8004498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800449c:	81a3      	strh	r3, [r4, #12]
 800449e:	e7ad      	b.n	80043fc <__sflush_r+0x1c>
 80044a0:	690f      	ldr	r7, [r1, #16]
 80044a2:	2f00      	cmp	r7, #0
 80044a4:	d0a9      	beq.n	80043fa <__sflush_r+0x1a>
 80044a6:	0793      	lsls	r3, r2, #30
 80044a8:	680e      	ldr	r6, [r1, #0]
 80044aa:	bf08      	it	eq
 80044ac:	694b      	ldreq	r3, [r1, #20]
 80044ae:	600f      	str	r7, [r1, #0]
 80044b0:	bf18      	it	ne
 80044b2:	2300      	movne	r3, #0
 80044b4:	eba6 0807 	sub.w	r8, r6, r7
 80044b8:	608b      	str	r3, [r1, #8]
 80044ba:	f1b8 0f00 	cmp.w	r8, #0
 80044be:	dd9c      	ble.n	80043fa <__sflush_r+0x1a>
 80044c0:	4643      	mov	r3, r8
 80044c2:	463a      	mov	r2, r7
 80044c4:	6a21      	ldr	r1, [r4, #32]
 80044c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80044c8:	4628      	mov	r0, r5
 80044ca:	47b0      	blx	r6
 80044cc:	2800      	cmp	r0, #0
 80044ce:	dc06      	bgt.n	80044de <__sflush_r+0xfe>
 80044d0:	89a3      	ldrh	r3, [r4, #12]
 80044d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d6:	81a3      	strh	r3, [r4, #12]
 80044d8:	f04f 30ff 	mov.w	r0, #4294967295
 80044dc:	e78e      	b.n	80043fc <__sflush_r+0x1c>
 80044de:	4407      	add	r7, r0
 80044e0:	eba8 0800 	sub.w	r8, r8, r0
 80044e4:	e7e9      	b.n	80044ba <__sflush_r+0xda>
 80044e6:	bf00      	nop
 80044e8:	20400001 	.word	0x20400001

080044ec <_fflush_r>:
 80044ec:	b538      	push	{r3, r4, r5, lr}
 80044ee:	690b      	ldr	r3, [r1, #16]
 80044f0:	4605      	mov	r5, r0
 80044f2:	460c      	mov	r4, r1
 80044f4:	b1db      	cbz	r3, 800452e <_fflush_r+0x42>
 80044f6:	b118      	cbz	r0, 8004500 <_fflush_r+0x14>
 80044f8:	6983      	ldr	r3, [r0, #24]
 80044fa:	b90b      	cbnz	r3, 8004500 <_fflush_r+0x14>
 80044fc:	f000 f860 	bl	80045c0 <__sinit>
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <_fflush_r+0x48>)
 8004502:	429c      	cmp	r4, r3
 8004504:	d109      	bne.n	800451a <_fflush_r+0x2e>
 8004506:	686c      	ldr	r4, [r5, #4]
 8004508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800450c:	b17b      	cbz	r3, 800452e <_fflush_r+0x42>
 800450e:	4621      	mov	r1, r4
 8004510:	4628      	mov	r0, r5
 8004512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004516:	f7ff bf63 	b.w	80043e0 <__sflush_r>
 800451a:	4b07      	ldr	r3, [pc, #28]	; (8004538 <_fflush_r+0x4c>)
 800451c:	429c      	cmp	r4, r3
 800451e:	d101      	bne.n	8004524 <_fflush_r+0x38>
 8004520:	68ac      	ldr	r4, [r5, #8]
 8004522:	e7f1      	b.n	8004508 <_fflush_r+0x1c>
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <_fflush_r+0x50>)
 8004526:	429c      	cmp	r4, r3
 8004528:	bf08      	it	eq
 800452a:	68ec      	ldreq	r4, [r5, #12]
 800452c:	e7ec      	b.n	8004508 <_fflush_r+0x1c>
 800452e:	2000      	movs	r0, #0
 8004530:	bd38      	pop	{r3, r4, r5, pc}
 8004532:	bf00      	nop
 8004534:	08006ea4 	.word	0x08006ea4
 8004538:	08006ec4 	.word	0x08006ec4
 800453c:	08006e84 	.word	0x08006e84

08004540 <std>:
 8004540:	2300      	movs	r3, #0
 8004542:	b510      	push	{r4, lr}
 8004544:	4604      	mov	r4, r0
 8004546:	e9c0 3300 	strd	r3, r3, [r0]
 800454a:	6083      	str	r3, [r0, #8]
 800454c:	8181      	strh	r1, [r0, #12]
 800454e:	6643      	str	r3, [r0, #100]	; 0x64
 8004550:	81c2      	strh	r2, [r0, #14]
 8004552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004556:	6183      	str	r3, [r0, #24]
 8004558:	4619      	mov	r1, r3
 800455a:	2208      	movs	r2, #8
 800455c:	305c      	adds	r0, #92	; 0x5c
 800455e:	f7ff fdc7 	bl	80040f0 <memset>
 8004562:	4b05      	ldr	r3, [pc, #20]	; (8004578 <std+0x38>)
 8004564:	6263      	str	r3, [r4, #36]	; 0x24
 8004566:	4b05      	ldr	r3, [pc, #20]	; (800457c <std+0x3c>)
 8004568:	62a3      	str	r3, [r4, #40]	; 0x28
 800456a:	4b05      	ldr	r3, [pc, #20]	; (8004580 <std+0x40>)
 800456c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <std+0x44>)
 8004570:	6224      	str	r4, [r4, #32]
 8004572:	6323      	str	r3, [r4, #48]	; 0x30
 8004574:	bd10      	pop	{r4, pc}
 8004576:	bf00      	nop
 8004578:	08004ead 	.word	0x08004ead
 800457c:	08004ecf 	.word	0x08004ecf
 8004580:	08004f07 	.word	0x08004f07
 8004584:	08004f2b 	.word	0x08004f2b

08004588 <_cleanup_r>:
 8004588:	4901      	ldr	r1, [pc, #4]	; (8004590 <_cleanup_r+0x8>)
 800458a:	f000 b885 	b.w	8004698 <_fwalk_reent>
 800458e:	bf00      	nop
 8004590:	080044ed 	.word	0x080044ed

08004594 <__sfmoreglue>:
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	1e4a      	subs	r2, r1, #1
 8004598:	2568      	movs	r5, #104	; 0x68
 800459a:	4355      	muls	r5, r2
 800459c:	460e      	mov	r6, r1
 800459e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80045a2:	f000 f951 	bl	8004848 <_malloc_r>
 80045a6:	4604      	mov	r4, r0
 80045a8:	b140      	cbz	r0, 80045bc <__sfmoreglue+0x28>
 80045aa:	2100      	movs	r1, #0
 80045ac:	e9c0 1600 	strd	r1, r6, [r0]
 80045b0:	300c      	adds	r0, #12
 80045b2:	60a0      	str	r0, [r4, #8]
 80045b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80045b8:	f7ff fd9a 	bl	80040f0 <memset>
 80045bc:	4620      	mov	r0, r4
 80045be:	bd70      	pop	{r4, r5, r6, pc}

080045c0 <__sinit>:
 80045c0:	6983      	ldr	r3, [r0, #24]
 80045c2:	b510      	push	{r4, lr}
 80045c4:	4604      	mov	r4, r0
 80045c6:	bb33      	cbnz	r3, 8004616 <__sinit+0x56>
 80045c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80045cc:	6503      	str	r3, [r0, #80]	; 0x50
 80045ce:	4b12      	ldr	r3, [pc, #72]	; (8004618 <__sinit+0x58>)
 80045d0:	4a12      	ldr	r2, [pc, #72]	; (800461c <__sinit+0x5c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6282      	str	r2, [r0, #40]	; 0x28
 80045d6:	4298      	cmp	r0, r3
 80045d8:	bf04      	itt	eq
 80045da:	2301      	moveq	r3, #1
 80045dc:	6183      	streq	r3, [r0, #24]
 80045de:	f000 f81f 	bl	8004620 <__sfp>
 80045e2:	6060      	str	r0, [r4, #4]
 80045e4:	4620      	mov	r0, r4
 80045e6:	f000 f81b 	bl	8004620 <__sfp>
 80045ea:	60a0      	str	r0, [r4, #8]
 80045ec:	4620      	mov	r0, r4
 80045ee:	f000 f817 	bl	8004620 <__sfp>
 80045f2:	2200      	movs	r2, #0
 80045f4:	60e0      	str	r0, [r4, #12]
 80045f6:	2104      	movs	r1, #4
 80045f8:	6860      	ldr	r0, [r4, #4]
 80045fa:	f7ff ffa1 	bl	8004540 <std>
 80045fe:	2201      	movs	r2, #1
 8004600:	2109      	movs	r1, #9
 8004602:	68a0      	ldr	r0, [r4, #8]
 8004604:	f7ff ff9c 	bl	8004540 <std>
 8004608:	2202      	movs	r2, #2
 800460a:	2112      	movs	r1, #18
 800460c:	68e0      	ldr	r0, [r4, #12]
 800460e:	f7ff ff97 	bl	8004540 <std>
 8004612:	2301      	movs	r3, #1
 8004614:	61a3      	str	r3, [r4, #24]
 8004616:	bd10      	pop	{r4, pc}
 8004618:	08006e80 	.word	0x08006e80
 800461c:	08004589 	.word	0x08004589

08004620 <__sfp>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	4b1b      	ldr	r3, [pc, #108]	; (8004690 <__sfp+0x70>)
 8004624:	681e      	ldr	r6, [r3, #0]
 8004626:	69b3      	ldr	r3, [r6, #24]
 8004628:	4607      	mov	r7, r0
 800462a:	b913      	cbnz	r3, 8004632 <__sfp+0x12>
 800462c:	4630      	mov	r0, r6
 800462e:	f7ff ffc7 	bl	80045c0 <__sinit>
 8004632:	3648      	adds	r6, #72	; 0x48
 8004634:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004638:	3b01      	subs	r3, #1
 800463a:	d503      	bpl.n	8004644 <__sfp+0x24>
 800463c:	6833      	ldr	r3, [r6, #0]
 800463e:	b133      	cbz	r3, 800464e <__sfp+0x2e>
 8004640:	6836      	ldr	r6, [r6, #0]
 8004642:	e7f7      	b.n	8004634 <__sfp+0x14>
 8004644:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004648:	b16d      	cbz	r5, 8004666 <__sfp+0x46>
 800464a:	3468      	adds	r4, #104	; 0x68
 800464c:	e7f4      	b.n	8004638 <__sfp+0x18>
 800464e:	2104      	movs	r1, #4
 8004650:	4638      	mov	r0, r7
 8004652:	f7ff ff9f 	bl	8004594 <__sfmoreglue>
 8004656:	6030      	str	r0, [r6, #0]
 8004658:	2800      	cmp	r0, #0
 800465a:	d1f1      	bne.n	8004640 <__sfp+0x20>
 800465c:	230c      	movs	r3, #12
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	4604      	mov	r4, r0
 8004662:	4620      	mov	r0, r4
 8004664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004666:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <__sfp+0x74>)
 8004668:	6665      	str	r5, [r4, #100]	; 0x64
 800466a:	e9c4 5500 	strd	r5, r5, [r4]
 800466e:	60a5      	str	r5, [r4, #8]
 8004670:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004674:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004678:	2208      	movs	r2, #8
 800467a:	4629      	mov	r1, r5
 800467c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004680:	f7ff fd36 	bl	80040f0 <memset>
 8004684:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004688:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800468c:	e7e9      	b.n	8004662 <__sfp+0x42>
 800468e:	bf00      	nop
 8004690:	08006e80 	.word	0x08006e80
 8004694:	ffff0001 	.word	0xffff0001

08004698 <_fwalk_reent>:
 8004698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800469c:	4680      	mov	r8, r0
 800469e:	4689      	mov	r9, r1
 80046a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80046a4:	2600      	movs	r6, #0
 80046a6:	b914      	cbnz	r4, 80046ae <_fwalk_reent+0x16>
 80046a8:	4630      	mov	r0, r6
 80046aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80046b2:	3f01      	subs	r7, #1
 80046b4:	d501      	bpl.n	80046ba <_fwalk_reent+0x22>
 80046b6:	6824      	ldr	r4, [r4, #0]
 80046b8:	e7f5      	b.n	80046a6 <_fwalk_reent+0xe>
 80046ba:	89ab      	ldrh	r3, [r5, #12]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d907      	bls.n	80046d0 <_fwalk_reent+0x38>
 80046c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046c4:	3301      	adds	r3, #1
 80046c6:	d003      	beq.n	80046d0 <_fwalk_reent+0x38>
 80046c8:	4629      	mov	r1, r5
 80046ca:	4640      	mov	r0, r8
 80046cc:	47c8      	blx	r9
 80046ce:	4306      	orrs	r6, r0
 80046d0:	3568      	adds	r5, #104	; 0x68
 80046d2:	e7ee      	b.n	80046b2 <_fwalk_reent+0x1a>

080046d4 <__swhatbuf_r>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	460e      	mov	r6, r1
 80046d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046dc:	2900      	cmp	r1, #0
 80046de:	b096      	sub	sp, #88	; 0x58
 80046e0:	4614      	mov	r4, r2
 80046e2:	461d      	mov	r5, r3
 80046e4:	da07      	bge.n	80046f6 <__swhatbuf_r+0x22>
 80046e6:	2300      	movs	r3, #0
 80046e8:	602b      	str	r3, [r5, #0]
 80046ea:	89b3      	ldrh	r3, [r6, #12]
 80046ec:	061a      	lsls	r2, r3, #24
 80046ee:	d410      	bmi.n	8004712 <__swhatbuf_r+0x3e>
 80046f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046f4:	e00e      	b.n	8004714 <__swhatbuf_r+0x40>
 80046f6:	466a      	mov	r2, sp
 80046f8:	f000 fc3e 	bl	8004f78 <_fstat_r>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	dbf2      	blt.n	80046e6 <__swhatbuf_r+0x12>
 8004700:	9a01      	ldr	r2, [sp, #4]
 8004702:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004706:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800470a:	425a      	negs	r2, r3
 800470c:	415a      	adcs	r2, r3
 800470e:	602a      	str	r2, [r5, #0]
 8004710:	e7ee      	b.n	80046f0 <__swhatbuf_r+0x1c>
 8004712:	2340      	movs	r3, #64	; 0x40
 8004714:	2000      	movs	r0, #0
 8004716:	6023      	str	r3, [r4, #0]
 8004718:	b016      	add	sp, #88	; 0x58
 800471a:	bd70      	pop	{r4, r5, r6, pc}

0800471c <__smakebuf_r>:
 800471c:	898b      	ldrh	r3, [r1, #12]
 800471e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004720:	079d      	lsls	r5, r3, #30
 8004722:	4606      	mov	r6, r0
 8004724:	460c      	mov	r4, r1
 8004726:	d507      	bpl.n	8004738 <__smakebuf_r+0x1c>
 8004728:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	6123      	str	r3, [r4, #16]
 8004730:	2301      	movs	r3, #1
 8004732:	6163      	str	r3, [r4, #20]
 8004734:	b002      	add	sp, #8
 8004736:	bd70      	pop	{r4, r5, r6, pc}
 8004738:	ab01      	add	r3, sp, #4
 800473a:	466a      	mov	r2, sp
 800473c:	f7ff ffca 	bl	80046d4 <__swhatbuf_r>
 8004740:	9900      	ldr	r1, [sp, #0]
 8004742:	4605      	mov	r5, r0
 8004744:	4630      	mov	r0, r6
 8004746:	f000 f87f 	bl	8004848 <_malloc_r>
 800474a:	b948      	cbnz	r0, 8004760 <__smakebuf_r+0x44>
 800474c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004750:	059a      	lsls	r2, r3, #22
 8004752:	d4ef      	bmi.n	8004734 <__smakebuf_r+0x18>
 8004754:	f023 0303 	bic.w	r3, r3, #3
 8004758:	f043 0302 	orr.w	r3, r3, #2
 800475c:	81a3      	strh	r3, [r4, #12]
 800475e:	e7e3      	b.n	8004728 <__smakebuf_r+0xc>
 8004760:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <__smakebuf_r+0x7c>)
 8004762:	62b3      	str	r3, [r6, #40]	; 0x28
 8004764:	89a3      	ldrh	r3, [r4, #12]
 8004766:	6020      	str	r0, [r4, #0]
 8004768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476c:	81a3      	strh	r3, [r4, #12]
 800476e:	9b00      	ldr	r3, [sp, #0]
 8004770:	6163      	str	r3, [r4, #20]
 8004772:	9b01      	ldr	r3, [sp, #4]
 8004774:	6120      	str	r0, [r4, #16]
 8004776:	b15b      	cbz	r3, 8004790 <__smakebuf_r+0x74>
 8004778:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800477c:	4630      	mov	r0, r6
 800477e:	f000 fc0d 	bl	8004f9c <_isatty_r>
 8004782:	b128      	cbz	r0, 8004790 <__smakebuf_r+0x74>
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	f023 0303 	bic.w	r3, r3, #3
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	81a3      	strh	r3, [r4, #12]
 8004790:	89a3      	ldrh	r3, [r4, #12]
 8004792:	431d      	orrs	r5, r3
 8004794:	81a5      	strh	r5, [r4, #12]
 8004796:	e7cd      	b.n	8004734 <__smakebuf_r+0x18>
 8004798:	08004589 	.word	0x08004589

0800479c <malloc>:
 800479c:	4b02      	ldr	r3, [pc, #8]	; (80047a8 <malloc+0xc>)
 800479e:	4601      	mov	r1, r0
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	f000 b851 	b.w	8004848 <_malloc_r>
 80047a6:	bf00      	nop
 80047a8:	20000064 	.word	0x20000064

080047ac <_free_r>:
 80047ac:	b538      	push	{r3, r4, r5, lr}
 80047ae:	4605      	mov	r5, r0
 80047b0:	2900      	cmp	r1, #0
 80047b2:	d045      	beq.n	8004840 <_free_r+0x94>
 80047b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b8:	1f0c      	subs	r4, r1, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bfb8      	it	lt
 80047be:	18e4      	addlt	r4, r4, r3
 80047c0:	f000 fc0e 	bl	8004fe0 <__malloc_lock>
 80047c4:	4a1f      	ldr	r2, [pc, #124]	; (8004844 <_free_r+0x98>)
 80047c6:	6813      	ldr	r3, [r2, #0]
 80047c8:	4610      	mov	r0, r2
 80047ca:	b933      	cbnz	r3, 80047da <_free_r+0x2e>
 80047cc:	6063      	str	r3, [r4, #4]
 80047ce:	6014      	str	r4, [r2, #0]
 80047d0:	4628      	mov	r0, r5
 80047d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047d6:	f000 bc04 	b.w	8004fe2 <__malloc_unlock>
 80047da:	42a3      	cmp	r3, r4
 80047dc:	d90c      	bls.n	80047f8 <_free_r+0x4c>
 80047de:	6821      	ldr	r1, [r4, #0]
 80047e0:	1862      	adds	r2, r4, r1
 80047e2:	4293      	cmp	r3, r2
 80047e4:	bf04      	itt	eq
 80047e6:	681a      	ldreq	r2, [r3, #0]
 80047e8:	685b      	ldreq	r3, [r3, #4]
 80047ea:	6063      	str	r3, [r4, #4]
 80047ec:	bf04      	itt	eq
 80047ee:	1852      	addeq	r2, r2, r1
 80047f0:	6022      	streq	r2, [r4, #0]
 80047f2:	6004      	str	r4, [r0, #0]
 80047f4:	e7ec      	b.n	80047d0 <_free_r+0x24>
 80047f6:	4613      	mov	r3, r2
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	b10a      	cbz	r2, 8004800 <_free_r+0x54>
 80047fc:	42a2      	cmp	r2, r4
 80047fe:	d9fa      	bls.n	80047f6 <_free_r+0x4a>
 8004800:	6819      	ldr	r1, [r3, #0]
 8004802:	1858      	adds	r0, r3, r1
 8004804:	42a0      	cmp	r0, r4
 8004806:	d10b      	bne.n	8004820 <_free_r+0x74>
 8004808:	6820      	ldr	r0, [r4, #0]
 800480a:	4401      	add	r1, r0
 800480c:	1858      	adds	r0, r3, r1
 800480e:	4282      	cmp	r2, r0
 8004810:	6019      	str	r1, [r3, #0]
 8004812:	d1dd      	bne.n	80047d0 <_free_r+0x24>
 8004814:	6810      	ldr	r0, [r2, #0]
 8004816:	6852      	ldr	r2, [r2, #4]
 8004818:	605a      	str	r2, [r3, #4]
 800481a:	4401      	add	r1, r0
 800481c:	6019      	str	r1, [r3, #0]
 800481e:	e7d7      	b.n	80047d0 <_free_r+0x24>
 8004820:	d902      	bls.n	8004828 <_free_r+0x7c>
 8004822:	230c      	movs	r3, #12
 8004824:	602b      	str	r3, [r5, #0]
 8004826:	e7d3      	b.n	80047d0 <_free_r+0x24>
 8004828:	6820      	ldr	r0, [r4, #0]
 800482a:	1821      	adds	r1, r4, r0
 800482c:	428a      	cmp	r2, r1
 800482e:	bf04      	itt	eq
 8004830:	6811      	ldreq	r1, [r2, #0]
 8004832:	6852      	ldreq	r2, [r2, #4]
 8004834:	6062      	str	r2, [r4, #4]
 8004836:	bf04      	itt	eq
 8004838:	1809      	addeq	r1, r1, r0
 800483a:	6021      	streq	r1, [r4, #0]
 800483c:	605c      	str	r4, [r3, #4]
 800483e:	e7c7      	b.n	80047d0 <_free_r+0x24>
 8004840:	bd38      	pop	{r3, r4, r5, pc}
 8004842:	bf00      	nop
 8004844:	20000460 	.word	0x20000460

08004848 <_malloc_r>:
 8004848:	b570      	push	{r4, r5, r6, lr}
 800484a:	1ccd      	adds	r5, r1, #3
 800484c:	f025 0503 	bic.w	r5, r5, #3
 8004850:	3508      	adds	r5, #8
 8004852:	2d0c      	cmp	r5, #12
 8004854:	bf38      	it	cc
 8004856:	250c      	movcc	r5, #12
 8004858:	2d00      	cmp	r5, #0
 800485a:	4606      	mov	r6, r0
 800485c:	db01      	blt.n	8004862 <_malloc_r+0x1a>
 800485e:	42a9      	cmp	r1, r5
 8004860:	d903      	bls.n	800486a <_malloc_r+0x22>
 8004862:	230c      	movs	r3, #12
 8004864:	6033      	str	r3, [r6, #0]
 8004866:	2000      	movs	r0, #0
 8004868:	bd70      	pop	{r4, r5, r6, pc}
 800486a:	f000 fbb9 	bl	8004fe0 <__malloc_lock>
 800486e:	4a21      	ldr	r2, [pc, #132]	; (80048f4 <_malloc_r+0xac>)
 8004870:	6814      	ldr	r4, [r2, #0]
 8004872:	4621      	mov	r1, r4
 8004874:	b991      	cbnz	r1, 800489c <_malloc_r+0x54>
 8004876:	4c20      	ldr	r4, [pc, #128]	; (80048f8 <_malloc_r+0xb0>)
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	b91b      	cbnz	r3, 8004884 <_malloc_r+0x3c>
 800487c:	4630      	mov	r0, r6
 800487e:	f000 fb05 	bl	8004e8c <_sbrk_r>
 8004882:	6020      	str	r0, [r4, #0]
 8004884:	4629      	mov	r1, r5
 8004886:	4630      	mov	r0, r6
 8004888:	f000 fb00 	bl	8004e8c <_sbrk_r>
 800488c:	1c43      	adds	r3, r0, #1
 800488e:	d124      	bne.n	80048da <_malloc_r+0x92>
 8004890:	230c      	movs	r3, #12
 8004892:	6033      	str	r3, [r6, #0]
 8004894:	4630      	mov	r0, r6
 8004896:	f000 fba4 	bl	8004fe2 <__malloc_unlock>
 800489a:	e7e4      	b.n	8004866 <_malloc_r+0x1e>
 800489c:	680b      	ldr	r3, [r1, #0]
 800489e:	1b5b      	subs	r3, r3, r5
 80048a0:	d418      	bmi.n	80048d4 <_malloc_r+0x8c>
 80048a2:	2b0b      	cmp	r3, #11
 80048a4:	d90f      	bls.n	80048c6 <_malloc_r+0x7e>
 80048a6:	600b      	str	r3, [r1, #0]
 80048a8:	50cd      	str	r5, [r1, r3]
 80048aa:	18cc      	adds	r4, r1, r3
 80048ac:	4630      	mov	r0, r6
 80048ae:	f000 fb98 	bl	8004fe2 <__malloc_unlock>
 80048b2:	f104 000b 	add.w	r0, r4, #11
 80048b6:	1d23      	adds	r3, r4, #4
 80048b8:	f020 0007 	bic.w	r0, r0, #7
 80048bc:	1ac3      	subs	r3, r0, r3
 80048be:	d0d3      	beq.n	8004868 <_malloc_r+0x20>
 80048c0:	425a      	negs	r2, r3
 80048c2:	50e2      	str	r2, [r4, r3]
 80048c4:	e7d0      	b.n	8004868 <_malloc_r+0x20>
 80048c6:	428c      	cmp	r4, r1
 80048c8:	684b      	ldr	r3, [r1, #4]
 80048ca:	bf16      	itet	ne
 80048cc:	6063      	strne	r3, [r4, #4]
 80048ce:	6013      	streq	r3, [r2, #0]
 80048d0:	460c      	movne	r4, r1
 80048d2:	e7eb      	b.n	80048ac <_malloc_r+0x64>
 80048d4:	460c      	mov	r4, r1
 80048d6:	6849      	ldr	r1, [r1, #4]
 80048d8:	e7cc      	b.n	8004874 <_malloc_r+0x2c>
 80048da:	1cc4      	adds	r4, r0, #3
 80048dc:	f024 0403 	bic.w	r4, r4, #3
 80048e0:	42a0      	cmp	r0, r4
 80048e2:	d005      	beq.n	80048f0 <_malloc_r+0xa8>
 80048e4:	1a21      	subs	r1, r4, r0
 80048e6:	4630      	mov	r0, r6
 80048e8:	f000 fad0 	bl	8004e8c <_sbrk_r>
 80048ec:	3001      	adds	r0, #1
 80048ee:	d0cf      	beq.n	8004890 <_malloc_r+0x48>
 80048f0:	6025      	str	r5, [r4, #0]
 80048f2:	e7db      	b.n	80048ac <_malloc_r+0x64>
 80048f4:	20000460 	.word	0x20000460
 80048f8:	20000464 	.word	0x20000464

080048fc <__sfputc_r>:
 80048fc:	6893      	ldr	r3, [r2, #8]
 80048fe:	3b01      	subs	r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	b410      	push	{r4}
 8004904:	6093      	str	r3, [r2, #8]
 8004906:	da08      	bge.n	800491a <__sfputc_r+0x1e>
 8004908:	6994      	ldr	r4, [r2, #24]
 800490a:	42a3      	cmp	r3, r4
 800490c:	db01      	blt.n	8004912 <__sfputc_r+0x16>
 800490e:	290a      	cmp	r1, #10
 8004910:	d103      	bne.n	800491a <__sfputc_r+0x1e>
 8004912:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004916:	f7ff bca3 	b.w	8004260 <__swbuf_r>
 800491a:	6813      	ldr	r3, [r2, #0]
 800491c:	1c58      	adds	r0, r3, #1
 800491e:	6010      	str	r0, [r2, #0]
 8004920:	7019      	strb	r1, [r3, #0]
 8004922:	4608      	mov	r0, r1
 8004924:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004928:	4770      	bx	lr

0800492a <__sfputs_r>:
 800492a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492c:	4606      	mov	r6, r0
 800492e:	460f      	mov	r7, r1
 8004930:	4614      	mov	r4, r2
 8004932:	18d5      	adds	r5, r2, r3
 8004934:	42ac      	cmp	r4, r5
 8004936:	d101      	bne.n	800493c <__sfputs_r+0x12>
 8004938:	2000      	movs	r0, #0
 800493a:	e007      	b.n	800494c <__sfputs_r+0x22>
 800493c:	463a      	mov	r2, r7
 800493e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004942:	4630      	mov	r0, r6
 8004944:	f7ff ffda 	bl	80048fc <__sfputc_r>
 8004948:	1c43      	adds	r3, r0, #1
 800494a:	d1f3      	bne.n	8004934 <__sfputs_r+0xa>
 800494c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004950 <_vfiprintf_r>:
 8004950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004954:	460c      	mov	r4, r1
 8004956:	b09d      	sub	sp, #116	; 0x74
 8004958:	4617      	mov	r7, r2
 800495a:	461d      	mov	r5, r3
 800495c:	4606      	mov	r6, r0
 800495e:	b118      	cbz	r0, 8004968 <_vfiprintf_r+0x18>
 8004960:	6983      	ldr	r3, [r0, #24]
 8004962:	b90b      	cbnz	r3, 8004968 <_vfiprintf_r+0x18>
 8004964:	f7ff fe2c 	bl	80045c0 <__sinit>
 8004968:	4b7c      	ldr	r3, [pc, #496]	; (8004b5c <_vfiprintf_r+0x20c>)
 800496a:	429c      	cmp	r4, r3
 800496c:	d158      	bne.n	8004a20 <_vfiprintf_r+0xd0>
 800496e:	6874      	ldr	r4, [r6, #4]
 8004970:	89a3      	ldrh	r3, [r4, #12]
 8004972:	0718      	lsls	r0, r3, #28
 8004974:	d55e      	bpl.n	8004a34 <_vfiprintf_r+0xe4>
 8004976:	6923      	ldr	r3, [r4, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d05b      	beq.n	8004a34 <_vfiprintf_r+0xe4>
 800497c:	2300      	movs	r3, #0
 800497e:	9309      	str	r3, [sp, #36]	; 0x24
 8004980:	2320      	movs	r3, #32
 8004982:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004986:	2330      	movs	r3, #48	; 0x30
 8004988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800498c:	9503      	str	r5, [sp, #12]
 800498e:	f04f 0b01 	mov.w	fp, #1
 8004992:	46b8      	mov	r8, r7
 8004994:	4645      	mov	r5, r8
 8004996:	f815 3b01 	ldrb.w	r3, [r5], #1
 800499a:	b10b      	cbz	r3, 80049a0 <_vfiprintf_r+0x50>
 800499c:	2b25      	cmp	r3, #37	; 0x25
 800499e:	d154      	bne.n	8004a4a <_vfiprintf_r+0xfa>
 80049a0:	ebb8 0a07 	subs.w	sl, r8, r7
 80049a4:	d00b      	beq.n	80049be <_vfiprintf_r+0x6e>
 80049a6:	4653      	mov	r3, sl
 80049a8:	463a      	mov	r2, r7
 80049aa:	4621      	mov	r1, r4
 80049ac:	4630      	mov	r0, r6
 80049ae:	f7ff ffbc 	bl	800492a <__sfputs_r>
 80049b2:	3001      	adds	r0, #1
 80049b4:	f000 80c2 	beq.w	8004b3c <_vfiprintf_r+0x1ec>
 80049b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ba:	4453      	add	r3, sl
 80049bc:	9309      	str	r3, [sp, #36]	; 0x24
 80049be:	f898 3000 	ldrb.w	r3, [r8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 80ba 	beq.w	8004b3c <_vfiprintf_r+0x1ec>
 80049c8:	2300      	movs	r3, #0
 80049ca:	f04f 32ff 	mov.w	r2, #4294967295
 80049ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049d2:	9304      	str	r3, [sp, #16]
 80049d4:	9307      	str	r3, [sp, #28]
 80049d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049da:	931a      	str	r3, [sp, #104]	; 0x68
 80049dc:	46a8      	mov	r8, r5
 80049de:	2205      	movs	r2, #5
 80049e0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80049e4:	485e      	ldr	r0, [pc, #376]	; (8004b60 <_vfiprintf_r+0x210>)
 80049e6:	f7fb fc13 	bl	8000210 <memchr>
 80049ea:	9b04      	ldr	r3, [sp, #16]
 80049ec:	bb78      	cbnz	r0, 8004a4e <_vfiprintf_r+0xfe>
 80049ee:	06d9      	lsls	r1, r3, #27
 80049f0:	bf44      	itt	mi
 80049f2:	2220      	movmi	r2, #32
 80049f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80049f8:	071a      	lsls	r2, r3, #28
 80049fa:	bf44      	itt	mi
 80049fc:	222b      	movmi	r2, #43	; 0x2b
 80049fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a02:	782a      	ldrb	r2, [r5, #0]
 8004a04:	2a2a      	cmp	r2, #42	; 0x2a
 8004a06:	d02a      	beq.n	8004a5e <_vfiprintf_r+0x10e>
 8004a08:	9a07      	ldr	r2, [sp, #28]
 8004a0a:	46a8      	mov	r8, r5
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	250a      	movs	r5, #10
 8004a10:	4641      	mov	r1, r8
 8004a12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a16:	3b30      	subs	r3, #48	; 0x30
 8004a18:	2b09      	cmp	r3, #9
 8004a1a:	d969      	bls.n	8004af0 <_vfiprintf_r+0x1a0>
 8004a1c:	b360      	cbz	r0, 8004a78 <_vfiprintf_r+0x128>
 8004a1e:	e024      	b.n	8004a6a <_vfiprintf_r+0x11a>
 8004a20:	4b50      	ldr	r3, [pc, #320]	; (8004b64 <_vfiprintf_r+0x214>)
 8004a22:	429c      	cmp	r4, r3
 8004a24:	d101      	bne.n	8004a2a <_vfiprintf_r+0xda>
 8004a26:	68b4      	ldr	r4, [r6, #8]
 8004a28:	e7a2      	b.n	8004970 <_vfiprintf_r+0x20>
 8004a2a:	4b4f      	ldr	r3, [pc, #316]	; (8004b68 <_vfiprintf_r+0x218>)
 8004a2c:	429c      	cmp	r4, r3
 8004a2e:	bf08      	it	eq
 8004a30:	68f4      	ldreq	r4, [r6, #12]
 8004a32:	e79d      	b.n	8004970 <_vfiprintf_r+0x20>
 8004a34:	4621      	mov	r1, r4
 8004a36:	4630      	mov	r0, r6
 8004a38:	f7ff fc64 	bl	8004304 <__swsetup_r>
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d09d      	beq.n	800497c <_vfiprintf_r+0x2c>
 8004a40:	f04f 30ff 	mov.w	r0, #4294967295
 8004a44:	b01d      	add	sp, #116	; 0x74
 8004a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a4a:	46a8      	mov	r8, r5
 8004a4c:	e7a2      	b.n	8004994 <_vfiprintf_r+0x44>
 8004a4e:	4a44      	ldr	r2, [pc, #272]	; (8004b60 <_vfiprintf_r+0x210>)
 8004a50:	1a80      	subs	r0, r0, r2
 8004a52:	fa0b f000 	lsl.w	r0, fp, r0
 8004a56:	4318      	orrs	r0, r3
 8004a58:	9004      	str	r0, [sp, #16]
 8004a5a:	4645      	mov	r5, r8
 8004a5c:	e7be      	b.n	80049dc <_vfiprintf_r+0x8c>
 8004a5e:	9a03      	ldr	r2, [sp, #12]
 8004a60:	1d11      	adds	r1, r2, #4
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	9103      	str	r1, [sp, #12]
 8004a66:	2a00      	cmp	r2, #0
 8004a68:	db01      	blt.n	8004a6e <_vfiprintf_r+0x11e>
 8004a6a:	9207      	str	r2, [sp, #28]
 8004a6c:	e004      	b.n	8004a78 <_vfiprintf_r+0x128>
 8004a6e:	4252      	negs	r2, r2
 8004a70:	f043 0302 	orr.w	r3, r3, #2
 8004a74:	9207      	str	r2, [sp, #28]
 8004a76:	9304      	str	r3, [sp, #16]
 8004a78:	f898 3000 	ldrb.w	r3, [r8]
 8004a7c:	2b2e      	cmp	r3, #46	; 0x2e
 8004a7e:	d10e      	bne.n	8004a9e <_vfiprintf_r+0x14e>
 8004a80:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004a84:	2b2a      	cmp	r3, #42	; 0x2a
 8004a86:	d138      	bne.n	8004afa <_vfiprintf_r+0x1aa>
 8004a88:	9b03      	ldr	r3, [sp, #12]
 8004a8a:	1d1a      	adds	r2, r3, #4
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	9203      	str	r2, [sp, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	bfb8      	it	lt
 8004a94:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a98:	f108 0802 	add.w	r8, r8, #2
 8004a9c:	9305      	str	r3, [sp, #20]
 8004a9e:	4d33      	ldr	r5, [pc, #204]	; (8004b6c <_vfiprintf_r+0x21c>)
 8004aa0:	f898 1000 	ldrb.w	r1, [r8]
 8004aa4:	2203      	movs	r2, #3
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	f7fb fbb2 	bl	8000210 <memchr>
 8004aac:	b140      	cbz	r0, 8004ac0 <_vfiprintf_r+0x170>
 8004aae:	2340      	movs	r3, #64	; 0x40
 8004ab0:	1b40      	subs	r0, r0, r5
 8004ab2:	fa03 f000 	lsl.w	r0, r3, r0
 8004ab6:	9b04      	ldr	r3, [sp, #16]
 8004ab8:	4303      	orrs	r3, r0
 8004aba:	f108 0801 	add.w	r8, r8, #1
 8004abe:	9304      	str	r3, [sp, #16]
 8004ac0:	f898 1000 	ldrb.w	r1, [r8]
 8004ac4:	482a      	ldr	r0, [pc, #168]	; (8004b70 <_vfiprintf_r+0x220>)
 8004ac6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004aca:	2206      	movs	r2, #6
 8004acc:	f108 0701 	add.w	r7, r8, #1
 8004ad0:	f7fb fb9e 	bl	8000210 <memchr>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	d037      	beq.n	8004b48 <_vfiprintf_r+0x1f8>
 8004ad8:	4b26      	ldr	r3, [pc, #152]	; (8004b74 <_vfiprintf_r+0x224>)
 8004ada:	bb1b      	cbnz	r3, 8004b24 <_vfiprintf_r+0x1d4>
 8004adc:	9b03      	ldr	r3, [sp, #12]
 8004ade:	3307      	adds	r3, #7
 8004ae0:	f023 0307 	bic.w	r3, r3, #7
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	9303      	str	r3, [sp, #12]
 8004ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aea:	444b      	add	r3, r9
 8004aec:	9309      	str	r3, [sp, #36]	; 0x24
 8004aee:	e750      	b.n	8004992 <_vfiprintf_r+0x42>
 8004af0:	fb05 3202 	mla	r2, r5, r2, r3
 8004af4:	2001      	movs	r0, #1
 8004af6:	4688      	mov	r8, r1
 8004af8:	e78a      	b.n	8004a10 <_vfiprintf_r+0xc0>
 8004afa:	2300      	movs	r3, #0
 8004afc:	f108 0801 	add.w	r8, r8, #1
 8004b00:	9305      	str	r3, [sp, #20]
 8004b02:	4619      	mov	r1, r3
 8004b04:	250a      	movs	r5, #10
 8004b06:	4640      	mov	r0, r8
 8004b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b0c:	3a30      	subs	r2, #48	; 0x30
 8004b0e:	2a09      	cmp	r2, #9
 8004b10:	d903      	bls.n	8004b1a <_vfiprintf_r+0x1ca>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0c3      	beq.n	8004a9e <_vfiprintf_r+0x14e>
 8004b16:	9105      	str	r1, [sp, #20]
 8004b18:	e7c1      	b.n	8004a9e <_vfiprintf_r+0x14e>
 8004b1a:	fb05 2101 	mla	r1, r5, r1, r2
 8004b1e:	2301      	movs	r3, #1
 8004b20:	4680      	mov	r8, r0
 8004b22:	e7f0      	b.n	8004b06 <_vfiprintf_r+0x1b6>
 8004b24:	ab03      	add	r3, sp, #12
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	4622      	mov	r2, r4
 8004b2a:	4b13      	ldr	r3, [pc, #76]	; (8004b78 <_vfiprintf_r+0x228>)
 8004b2c:	a904      	add	r1, sp, #16
 8004b2e:	4630      	mov	r0, r6
 8004b30:	f3af 8000 	nop.w
 8004b34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004b38:	4681      	mov	r9, r0
 8004b3a:	d1d5      	bne.n	8004ae8 <_vfiprintf_r+0x198>
 8004b3c:	89a3      	ldrh	r3, [r4, #12]
 8004b3e:	065b      	lsls	r3, r3, #25
 8004b40:	f53f af7e 	bmi.w	8004a40 <_vfiprintf_r+0xf0>
 8004b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b46:	e77d      	b.n	8004a44 <_vfiprintf_r+0xf4>
 8004b48:	ab03      	add	r3, sp, #12
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	4622      	mov	r2, r4
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <_vfiprintf_r+0x228>)
 8004b50:	a904      	add	r1, sp, #16
 8004b52:	4630      	mov	r0, r6
 8004b54:	f000 f888 	bl	8004c68 <_printf_i>
 8004b58:	e7ec      	b.n	8004b34 <_vfiprintf_r+0x1e4>
 8004b5a:	bf00      	nop
 8004b5c:	08006ea4 	.word	0x08006ea4
 8004b60:	08006ee4 	.word	0x08006ee4
 8004b64:	08006ec4 	.word	0x08006ec4
 8004b68:	08006e84 	.word	0x08006e84
 8004b6c:	08006eea 	.word	0x08006eea
 8004b70:	08006eee 	.word	0x08006eee
 8004b74:	00000000 	.word	0x00000000
 8004b78:	0800492b 	.word	0x0800492b

08004b7c <_printf_common>:
 8004b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b80:	4691      	mov	r9, r2
 8004b82:	461f      	mov	r7, r3
 8004b84:	688a      	ldr	r2, [r1, #8]
 8004b86:	690b      	ldr	r3, [r1, #16]
 8004b88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	bfb8      	it	lt
 8004b90:	4613      	movlt	r3, r2
 8004b92:	f8c9 3000 	str.w	r3, [r9]
 8004b96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b9a:	4606      	mov	r6, r0
 8004b9c:	460c      	mov	r4, r1
 8004b9e:	b112      	cbz	r2, 8004ba6 <_printf_common+0x2a>
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	f8c9 3000 	str.w	r3, [r9]
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	0699      	lsls	r1, r3, #26
 8004baa:	bf42      	ittt	mi
 8004bac:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004bb0:	3302      	addmi	r3, #2
 8004bb2:	f8c9 3000 	strmi.w	r3, [r9]
 8004bb6:	6825      	ldr	r5, [r4, #0]
 8004bb8:	f015 0506 	ands.w	r5, r5, #6
 8004bbc:	d107      	bne.n	8004bce <_printf_common+0x52>
 8004bbe:	f104 0a19 	add.w	sl, r4, #25
 8004bc2:	68e3      	ldr	r3, [r4, #12]
 8004bc4:	f8d9 2000 	ldr.w	r2, [r9]
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	42ab      	cmp	r3, r5
 8004bcc:	dc28      	bgt.n	8004c20 <_printf_common+0xa4>
 8004bce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004bd2:	6822      	ldr	r2, [r4, #0]
 8004bd4:	3300      	adds	r3, #0
 8004bd6:	bf18      	it	ne
 8004bd8:	2301      	movne	r3, #1
 8004bda:	0692      	lsls	r2, r2, #26
 8004bdc:	d42d      	bmi.n	8004c3a <_printf_common+0xbe>
 8004bde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004be2:	4639      	mov	r1, r7
 8004be4:	4630      	mov	r0, r6
 8004be6:	47c0      	blx	r8
 8004be8:	3001      	adds	r0, #1
 8004bea:	d020      	beq.n	8004c2e <_printf_common+0xb2>
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	68e5      	ldr	r5, [r4, #12]
 8004bf0:	f8d9 2000 	ldr.w	r2, [r9]
 8004bf4:	f003 0306 	and.w	r3, r3, #6
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	bf08      	it	eq
 8004bfc:	1aad      	subeq	r5, r5, r2
 8004bfe:	68a3      	ldr	r3, [r4, #8]
 8004c00:	6922      	ldr	r2, [r4, #16]
 8004c02:	bf0c      	ite	eq
 8004c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c08:	2500      	movne	r5, #0
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	bfc4      	itt	gt
 8004c0e:	1a9b      	subgt	r3, r3, r2
 8004c10:	18ed      	addgt	r5, r5, r3
 8004c12:	f04f 0900 	mov.w	r9, #0
 8004c16:	341a      	adds	r4, #26
 8004c18:	454d      	cmp	r5, r9
 8004c1a:	d11a      	bne.n	8004c52 <_printf_common+0xd6>
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	e008      	b.n	8004c32 <_printf_common+0xb6>
 8004c20:	2301      	movs	r3, #1
 8004c22:	4652      	mov	r2, sl
 8004c24:	4639      	mov	r1, r7
 8004c26:	4630      	mov	r0, r6
 8004c28:	47c0      	blx	r8
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	d103      	bne.n	8004c36 <_printf_common+0xba>
 8004c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c36:	3501      	adds	r5, #1
 8004c38:	e7c3      	b.n	8004bc2 <_printf_common+0x46>
 8004c3a:	18e1      	adds	r1, r4, r3
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	2030      	movs	r0, #48	; 0x30
 8004c40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c44:	4422      	add	r2, r4
 8004c46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c4e:	3302      	adds	r3, #2
 8004c50:	e7c5      	b.n	8004bde <_printf_common+0x62>
 8004c52:	2301      	movs	r3, #1
 8004c54:	4622      	mov	r2, r4
 8004c56:	4639      	mov	r1, r7
 8004c58:	4630      	mov	r0, r6
 8004c5a:	47c0      	blx	r8
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d0e6      	beq.n	8004c2e <_printf_common+0xb2>
 8004c60:	f109 0901 	add.w	r9, r9, #1
 8004c64:	e7d8      	b.n	8004c18 <_printf_common+0x9c>
	...

08004c68 <_printf_i>:
 8004c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c6c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004c70:	460c      	mov	r4, r1
 8004c72:	7e09      	ldrb	r1, [r1, #24]
 8004c74:	b085      	sub	sp, #20
 8004c76:	296e      	cmp	r1, #110	; 0x6e
 8004c78:	4617      	mov	r7, r2
 8004c7a:	4606      	mov	r6, r0
 8004c7c:	4698      	mov	r8, r3
 8004c7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c80:	f000 80b3 	beq.w	8004dea <_printf_i+0x182>
 8004c84:	d822      	bhi.n	8004ccc <_printf_i+0x64>
 8004c86:	2963      	cmp	r1, #99	; 0x63
 8004c88:	d036      	beq.n	8004cf8 <_printf_i+0x90>
 8004c8a:	d80a      	bhi.n	8004ca2 <_printf_i+0x3a>
 8004c8c:	2900      	cmp	r1, #0
 8004c8e:	f000 80b9 	beq.w	8004e04 <_printf_i+0x19c>
 8004c92:	2958      	cmp	r1, #88	; 0x58
 8004c94:	f000 8083 	beq.w	8004d9e <_printf_i+0x136>
 8004c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c9c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004ca0:	e032      	b.n	8004d08 <_printf_i+0xa0>
 8004ca2:	2964      	cmp	r1, #100	; 0x64
 8004ca4:	d001      	beq.n	8004caa <_printf_i+0x42>
 8004ca6:	2969      	cmp	r1, #105	; 0x69
 8004ca8:	d1f6      	bne.n	8004c98 <_printf_i+0x30>
 8004caa:	6820      	ldr	r0, [r4, #0]
 8004cac:	6813      	ldr	r3, [r2, #0]
 8004cae:	0605      	lsls	r5, r0, #24
 8004cb0:	f103 0104 	add.w	r1, r3, #4
 8004cb4:	d52a      	bpl.n	8004d0c <_printf_i+0xa4>
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6011      	str	r1, [r2, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	da03      	bge.n	8004cc6 <_printf_i+0x5e>
 8004cbe:	222d      	movs	r2, #45	; 0x2d
 8004cc0:	425b      	negs	r3, r3
 8004cc2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004cc6:	486f      	ldr	r0, [pc, #444]	; (8004e84 <_printf_i+0x21c>)
 8004cc8:	220a      	movs	r2, #10
 8004cca:	e039      	b.n	8004d40 <_printf_i+0xd8>
 8004ccc:	2973      	cmp	r1, #115	; 0x73
 8004cce:	f000 809d 	beq.w	8004e0c <_printf_i+0x1a4>
 8004cd2:	d808      	bhi.n	8004ce6 <_printf_i+0x7e>
 8004cd4:	296f      	cmp	r1, #111	; 0x6f
 8004cd6:	d020      	beq.n	8004d1a <_printf_i+0xb2>
 8004cd8:	2970      	cmp	r1, #112	; 0x70
 8004cda:	d1dd      	bne.n	8004c98 <_printf_i+0x30>
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	f043 0320 	orr.w	r3, r3, #32
 8004ce2:	6023      	str	r3, [r4, #0]
 8004ce4:	e003      	b.n	8004cee <_printf_i+0x86>
 8004ce6:	2975      	cmp	r1, #117	; 0x75
 8004ce8:	d017      	beq.n	8004d1a <_printf_i+0xb2>
 8004cea:	2978      	cmp	r1, #120	; 0x78
 8004cec:	d1d4      	bne.n	8004c98 <_printf_i+0x30>
 8004cee:	2378      	movs	r3, #120	; 0x78
 8004cf0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cf4:	4864      	ldr	r0, [pc, #400]	; (8004e88 <_printf_i+0x220>)
 8004cf6:	e055      	b.n	8004da4 <_printf_i+0x13c>
 8004cf8:	6813      	ldr	r3, [r2, #0]
 8004cfa:	1d19      	adds	r1, r3, #4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6011      	str	r1, [r2, #0]
 8004d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e08c      	b.n	8004e26 <_printf_i+0x1be>
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6011      	str	r1, [r2, #0]
 8004d10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d14:	bf18      	it	ne
 8004d16:	b21b      	sxthne	r3, r3
 8004d18:	e7cf      	b.n	8004cba <_printf_i+0x52>
 8004d1a:	6813      	ldr	r3, [r2, #0]
 8004d1c:	6825      	ldr	r5, [r4, #0]
 8004d1e:	1d18      	adds	r0, r3, #4
 8004d20:	6010      	str	r0, [r2, #0]
 8004d22:	0628      	lsls	r0, r5, #24
 8004d24:	d501      	bpl.n	8004d2a <_printf_i+0xc2>
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	e002      	b.n	8004d30 <_printf_i+0xc8>
 8004d2a:	0668      	lsls	r0, r5, #25
 8004d2c:	d5fb      	bpl.n	8004d26 <_printf_i+0xbe>
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	4854      	ldr	r0, [pc, #336]	; (8004e84 <_printf_i+0x21c>)
 8004d32:	296f      	cmp	r1, #111	; 0x6f
 8004d34:	bf14      	ite	ne
 8004d36:	220a      	movne	r2, #10
 8004d38:	2208      	moveq	r2, #8
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d40:	6865      	ldr	r5, [r4, #4]
 8004d42:	60a5      	str	r5, [r4, #8]
 8004d44:	2d00      	cmp	r5, #0
 8004d46:	f2c0 8095 	blt.w	8004e74 <_printf_i+0x20c>
 8004d4a:	6821      	ldr	r1, [r4, #0]
 8004d4c:	f021 0104 	bic.w	r1, r1, #4
 8004d50:	6021      	str	r1, [r4, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d13d      	bne.n	8004dd2 <_printf_i+0x16a>
 8004d56:	2d00      	cmp	r5, #0
 8004d58:	f040 808e 	bne.w	8004e78 <_printf_i+0x210>
 8004d5c:	4665      	mov	r5, ip
 8004d5e:	2a08      	cmp	r2, #8
 8004d60:	d10b      	bne.n	8004d7a <_printf_i+0x112>
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	07db      	lsls	r3, r3, #31
 8004d66:	d508      	bpl.n	8004d7a <_printf_i+0x112>
 8004d68:	6923      	ldr	r3, [r4, #16]
 8004d6a:	6862      	ldr	r2, [r4, #4]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	bfde      	ittt	le
 8004d70:	2330      	movle	r3, #48	; 0x30
 8004d72:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d76:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d7a:	ebac 0305 	sub.w	r3, ip, r5
 8004d7e:	6123      	str	r3, [r4, #16]
 8004d80:	f8cd 8000 	str.w	r8, [sp]
 8004d84:	463b      	mov	r3, r7
 8004d86:	aa03      	add	r2, sp, #12
 8004d88:	4621      	mov	r1, r4
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	f7ff fef6 	bl	8004b7c <_printf_common>
 8004d90:	3001      	adds	r0, #1
 8004d92:	d14d      	bne.n	8004e30 <_printf_i+0x1c8>
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295
 8004d98:	b005      	add	sp, #20
 8004d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d9e:	4839      	ldr	r0, [pc, #228]	; (8004e84 <_printf_i+0x21c>)
 8004da0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004da4:	6813      	ldr	r3, [r2, #0]
 8004da6:	6821      	ldr	r1, [r4, #0]
 8004da8:	1d1d      	adds	r5, r3, #4
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6015      	str	r5, [r2, #0]
 8004dae:	060a      	lsls	r2, r1, #24
 8004db0:	d50b      	bpl.n	8004dca <_printf_i+0x162>
 8004db2:	07ca      	lsls	r2, r1, #31
 8004db4:	bf44      	itt	mi
 8004db6:	f041 0120 	orrmi.w	r1, r1, #32
 8004dba:	6021      	strmi	r1, [r4, #0]
 8004dbc:	b91b      	cbnz	r3, 8004dc6 <_printf_i+0x15e>
 8004dbe:	6822      	ldr	r2, [r4, #0]
 8004dc0:	f022 0220 	bic.w	r2, r2, #32
 8004dc4:	6022      	str	r2, [r4, #0]
 8004dc6:	2210      	movs	r2, #16
 8004dc8:	e7b7      	b.n	8004d3a <_printf_i+0xd2>
 8004dca:	064d      	lsls	r5, r1, #25
 8004dcc:	bf48      	it	mi
 8004dce:	b29b      	uxthmi	r3, r3
 8004dd0:	e7ef      	b.n	8004db2 <_printf_i+0x14a>
 8004dd2:	4665      	mov	r5, ip
 8004dd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004dd8:	fb02 3311 	mls	r3, r2, r1, r3
 8004ddc:	5cc3      	ldrb	r3, [r0, r3]
 8004dde:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004de2:	460b      	mov	r3, r1
 8004de4:	2900      	cmp	r1, #0
 8004de6:	d1f5      	bne.n	8004dd4 <_printf_i+0x16c>
 8004de8:	e7b9      	b.n	8004d5e <_printf_i+0xf6>
 8004dea:	6813      	ldr	r3, [r2, #0]
 8004dec:	6825      	ldr	r5, [r4, #0]
 8004dee:	6961      	ldr	r1, [r4, #20]
 8004df0:	1d18      	adds	r0, r3, #4
 8004df2:	6010      	str	r0, [r2, #0]
 8004df4:	0628      	lsls	r0, r5, #24
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	d501      	bpl.n	8004dfe <_printf_i+0x196>
 8004dfa:	6019      	str	r1, [r3, #0]
 8004dfc:	e002      	b.n	8004e04 <_printf_i+0x19c>
 8004dfe:	066a      	lsls	r2, r5, #25
 8004e00:	d5fb      	bpl.n	8004dfa <_printf_i+0x192>
 8004e02:	8019      	strh	r1, [r3, #0]
 8004e04:	2300      	movs	r3, #0
 8004e06:	6123      	str	r3, [r4, #16]
 8004e08:	4665      	mov	r5, ip
 8004e0a:	e7b9      	b.n	8004d80 <_printf_i+0x118>
 8004e0c:	6813      	ldr	r3, [r2, #0]
 8004e0e:	1d19      	adds	r1, r3, #4
 8004e10:	6011      	str	r1, [r2, #0]
 8004e12:	681d      	ldr	r5, [r3, #0]
 8004e14:	6862      	ldr	r2, [r4, #4]
 8004e16:	2100      	movs	r1, #0
 8004e18:	4628      	mov	r0, r5
 8004e1a:	f7fb f9f9 	bl	8000210 <memchr>
 8004e1e:	b108      	cbz	r0, 8004e24 <_printf_i+0x1bc>
 8004e20:	1b40      	subs	r0, r0, r5
 8004e22:	6060      	str	r0, [r4, #4]
 8004e24:	6863      	ldr	r3, [r4, #4]
 8004e26:	6123      	str	r3, [r4, #16]
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e2e:	e7a7      	b.n	8004d80 <_printf_i+0x118>
 8004e30:	6923      	ldr	r3, [r4, #16]
 8004e32:	462a      	mov	r2, r5
 8004e34:	4639      	mov	r1, r7
 8004e36:	4630      	mov	r0, r6
 8004e38:	47c0      	blx	r8
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	d0aa      	beq.n	8004d94 <_printf_i+0x12c>
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	079b      	lsls	r3, r3, #30
 8004e42:	d413      	bmi.n	8004e6c <_printf_i+0x204>
 8004e44:	68e0      	ldr	r0, [r4, #12]
 8004e46:	9b03      	ldr	r3, [sp, #12]
 8004e48:	4298      	cmp	r0, r3
 8004e4a:	bfb8      	it	lt
 8004e4c:	4618      	movlt	r0, r3
 8004e4e:	e7a3      	b.n	8004d98 <_printf_i+0x130>
 8004e50:	2301      	movs	r3, #1
 8004e52:	464a      	mov	r2, r9
 8004e54:	4639      	mov	r1, r7
 8004e56:	4630      	mov	r0, r6
 8004e58:	47c0      	blx	r8
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	d09a      	beq.n	8004d94 <_printf_i+0x12c>
 8004e5e:	3501      	adds	r5, #1
 8004e60:	68e3      	ldr	r3, [r4, #12]
 8004e62:	9a03      	ldr	r2, [sp, #12]
 8004e64:	1a9b      	subs	r3, r3, r2
 8004e66:	42ab      	cmp	r3, r5
 8004e68:	dcf2      	bgt.n	8004e50 <_printf_i+0x1e8>
 8004e6a:	e7eb      	b.n	8004e44 <_printf_i+0x1dc>
 8004e6c:	2500      	movs	r5, #0
 8004e6e:	f104 0919 	add.w	r9, r4, #25
 8004e72:	e7f5      	b.n	8004e60 <_printf_i+0x1f8>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1ac      	bne.n	8004dd2 <_printf_i+0x16a>
 8004e78:	7803      	ldrb	r3, [r0, #0]
 8004e7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e82:	e76c      	b.n	8004d5e <_printf_i+0xf6>
 8004e84:	08006ef5 	.word	0x08006ef5
 8004e88:	08006f06 	.word	0x08006f06

08004e8c <_sbrk_r>:
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	4c06      	ldr	r4, [pc, #24]	; (8004ea8 <_sbrk_r+0x1c>)
 8004e90:	2300      	movs	r3, #0
 8004e92:	4605      	mov	r5, r0
 8004e94:	4608      	mov	r0, r1
 8004e96:	6023      	str	r3, [r4, #0]
 8004e98:	f7fd f976 	bl	8002188 <_sbrk>
 8004e9c:	1c43      	adds	r3, r0, #1
 8004e9e:	d102      	bne.n	8004ea6 <_sbrk_r+0x1a>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	b103      	cbz	r3, 8004ea6 <_sbrk_r+0x1a>
 8004ea4:	602b      	str	r3, [r5, #0]
 8004ea6:	bd38      	pop	{r3, r4, r5, pc}
 8004ea8:	20000588 	.word	0x20000588

08004eac <__sread>:
 8004eac:	b510      	push	{r4, lr}
 8004eae:	460c      	mov	r4, r1
 8004eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb4:	f000 f896 	bl	8004fe4 <_read_r>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	bfab      	itete	ge
 8004ebc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8004ec0:	181b      	addge	r3, r3, r0
 8004ec2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ec6:	bfac      	ite	ge
 8004ec8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004eca:	81a3      	strhlt	r3, [r4, #12]
 8004ecc:	bd10      	pop	{r4, pc}

08004ece <__swrite>:
 8004ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed2:	461f      	mov	r7, r3
 8004ed4:	898b      	ldrh	r3, [r1, #12]
 8004ed6:	05db      	lsls	r3, r3, #23
 8004ed8:	4605      	mov	r5, r0
 8004eda:	460c      	mov	r4, r1
 8004edc:	4616      	mov	r6, r2
 8004ede:	d505      	bpl.n	8004eec <__swrite+0x1e>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ee8:	f000 f868 	bl	8004fbc <_lseek_r>
 8004eec:	89a3      	ldrh	r3, [r4, #12]
 8004eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ef6:	81a3      	strh	r3, [r4, #12]
 8004ef8:	4632      	mov	r2, r6
 8004efa:	463b      	mov	r3, r7
 8004efc:	4628      	mov	r0, r5
 8004efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f02:	f000 b817 	b.w	8004f34 <_write_r>

08004f06 <__sseek>:
 8004f06:	b510      	push	{r4, lr}
 8004f08:	460c      	mov	r4, r1
 8004f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f0e:	f000 f855 	bl	8004fbc <_lseek_r>
 8004f12:	1c43      	adds	r3, r0, #1
 8004f14:	89a3      	ldrh	r3, [r4, #12]
 8004f16:	bf15      	itete	ne
 8004f18:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f22:	81a3      	strheq	r3, [r4, #12]
 8004f24:	bf18      	it	ne
 8004f26:	81a3      	strhne	r3, [r4, #12]
 8004f28:	bd10      	pop	{r4, pc}

08004f2a <__sclose>:
 8004f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f2e:	f000 b813 	b.w	8004f58 <_close_r>
	...

08004f34 <_write_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	4c07      	ldr	r4, [pc, #28]	; (8004f54 <_write_r+0x20>)
 8004f38:	4605      	mov	r5, r0
 8004f3a:	4608      	mov	r0, r1
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	2200      	movs	r2, #0
 8004f40:	6022      	str	r2, [r4, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	f7fd f903 	bl	800214e <_write>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d102      	bne.n	8004f52 <_write_r+0x1e>
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	b103      	cbz	r3, 8004f52 <_write_r+0x1e>
 8004f50:	602b      	str	r3, [r5, #0]
 8004f52:	bd38      	pop	{r3, r4, r5, pc}
 8004f54:	20000588 	.word	0x20000588

08004f58 <_close_r>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	4c06      	ldr	r4, [pc, #24]	; (8004f74 <_close_r+0x1c>)
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	4605      	mov	r5, r0
 8004f60:	4608      	mov	r0, r1
 8004f62:	6023      	str	r3, [r4, #0]
 8004f64:	f7fd f930 	bl	80021c8 <_close>
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	d102      	bne.n	8004f72 <_close_r+0x1a>
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	b103      	cbz	r3, 8004f72 <_close_r+0x1a>
 8004f70:	602b      	str	r3, [r5, #0]
 8004f72:	bd38      	pop	{r3, r4, r5, pc}
 8004f74:	20000588 	.word	0x20000588

08004f78 <_fstat_r>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	4c07      	ldr	r4, [pc, #28]	; (8004f98 <_fstat_r+0x20>)
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	4605      	mov	r5, r0
 8004f80:	4608      	mov	r0, r1
 8004f82:	4611      	mov	r1, r2
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	f7fd f931 	bl	80021ec <_fstat>
 8004f8a:	1c43      	adds	r3, r0, #1
 8004f8c:	d102      	bne.n	8004f94 <_fstat_r+0x1c>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	b103      	cbz	r3, 8004f94 <_fstat_r+0x1c>
 8004f92:	602b      	str	r3, [r5, #0]
 8004f94:	bd38      	pop	{r3, r4, r5, pc}
 8004f96:	bf00      	nop
 8004f98:	20000588 	.word	0x20000588

08004f9c <_isatty_r>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	4c06      	ldr	r4, [pc, #24]	; (8004fb8 <_isatty_r+0x1c>)
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	4605      	mov	r5, r0
 8004fa4:	4608      	mov	r0, r1
 8004fa6:	6023      	str	r3, [r4, #0]
 8004fa8:	f7fd f932 	bl	8002210 <_isatty>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	d102      	bne.n	8004fb6 <_isatty_r+0x1a>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	b103      	cbz	r3, 8004fb6 <_isatty_r+0x1a>
 8004fb4:	602b      	str	r3, [r5, #0]
 8004fb6:	bd38      	pop	{r3, r4, r5, pc}
 8004fb8:	20000588 	.word	0x20000588

08004fbc <_lseek_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	4c07      	ldr	r4, [pc, #28]	; (8004fdc <_lseek_r+0x20>)
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	4608      	mov	r0, r1
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	6022      	str	r2, [r4, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f7fd f930 	bl	8002230 <_lseek>
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	d102      	bne.n	8004fda <_lseek_r+0x1e>
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	b103      	cbz	r3, 8004fda <_lseek_r+0x1e>
 8004fd8:	602b      	str	r3, [r5, #0]
 8004fda:	bd38      	pop	{r3, r4, r5, pc}
 8004fdc:	20000588 	.word	0x20000588

08004fe0 <__malloc_lock>:
 8004fe0:	4770      	bx	lr

08004fe2 <__malloc_unlock>:
 8004fe2:	4770      	bx	lr

08004fe4 <_read_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	4c07      	ldr	r4, [pc, #28]	; (8005004 <_read_r+0x20>)
 8004fe8:	4605      	mov	r5, r0
 8004fea:	4608      	mov	r0, r1
 8004fec:	4611      	mov	r1, r2
 8004fee:	2200      	movs	r2, #0
 8004ff0:	6022      	str	r2, [r4, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f7fd f930 	bl	8002258 <_read>
 8004ff8:	1c43      	adds	r3, r0, #1
 8004ffa:	d102      	bne.n	8005002 <_read_r+0x1e>
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	b103      	cbz	r3, 8005002 <_read_r+0x1e>
 8005000:	602b      	str	r3, [r5, #0]
 8005002:	bd38      	pop	{r3, r4, r5, pc}
 8005004:	20000588 	.word	0x20000588

08005008 <_init>:
 8005008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500a:	bf00      	nop
 800500c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800500e:	bc08      	pop	{r3}
 8005010:	469e      	mov	lr, r3
 8005012:	4770      	bx	lr

08005014 <_fini>:
 8005014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005016:	bf00      	nop
 8005018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501a:	bc08      	pop	{r3}
 800501c:	469e      	mov	lr, r3
 800501e:	4770      	bx	lr
