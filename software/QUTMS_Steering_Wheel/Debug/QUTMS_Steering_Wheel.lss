
QUTMS_Steering_Wheel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000502  00800100  000058f0  00005984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000058f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800602  00800602  00005e86  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005e86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005eb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00005ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ef8  00000000  00000000  00006168  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000050c  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022a2  00000000  00000000  0000856c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a5c  00000000  00000000  0000a810  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000902  00000000  00000000  0000b26c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000167a  00000000  00000000  0000bb6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 07 13 	jmp	0x260e	; 0x260e <__ctors_end>
       4:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
       8:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
       c:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      10:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      14:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      18:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      1c:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      20:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      24:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      28:	0c 94 ea 15 	jmp	0x2bd4	; 0x2bd4 <__vector_10>
      2c:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      30:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      34:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      38:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      3c:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      40:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      44:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      48:	0c 94 0b 16 	jmp	0x2c16	; 0x2c16 <__vector_18>
      4c:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      50:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      54:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      58:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      5c:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      60:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      64:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      68:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      6c:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      70:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      74:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      78:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__FUSE_REGION_LENGTH__+0x4d0>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <Motorsport>:
	...
     21e:	00 00 03 f8 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     23e:	00 00 1f fe 00 fc 03 f7 ff ff 3f c0 1f e0 1f f0     ..........?.....
	...
     25e:	00 00 7f ff 80 fc 07 e7 ff fe 3f c0 3f e0 1f e0     ..........?.?...
	...
     27e:	00 00 ff ff c1 f8 07 e7 ff fe 3f c0 3f c0 1f e0     ..........?.?...
	...
     29e:	00 01 ff ff c1 f8 07 ef ff fe 7f 80 3f c0 3f e0     ............?.?.
	...
     2be:	00 07 ff ff e1 f8 0f cf ff fc 7f 80 3f c0 3f c0     ............?.?.
	...
     2de:	00 07 fc 7f e3 f0 0f c0 3f 00 7f 80 7f 80 3f c0     ........?.....?.
	...
     2fe:	00 0f f0 1f e3 f0 0f c0 3f 00 ff 00 7f 80 7f c0     ........?.......
	...
     31e:	00 1f c0 0f e3 f0 1f 80 7e 00 ff 00 7f 80 7f 80     ........~.......
	...
     33e:	00 3f 80 0f e7 e0 1f 80 7e 00 00 ff 00 7f 80 00     .?......~.......
	...
     35e:	00 3f 80 0f e7 e0 1f 80 7e 00 00 ff 00 ff 00 00     .?......~.......
	...
     37e:	00 7f 00 0f e7 e0 3f 00 fc 00 01 ff 00 ff 00 00     ......?.........
	...
     39e:	00 7f 00 0f cf c0 3f 00 fc 00 01 fe 00 ff 00 00     ......?.........
	...
     3be:	00 7e 00 0f cf c0 3f 00 fc 00 01 fe 01 fe 00 00     .~....?.........
	...
     3de:	00 7e 01 ff cf c0 7e 01 f8 00 03 fe 01 fe 00 00     .~....~.........
	...
     3fe:	00 fe 03 ff 9f 80 7e 01 f8 00 03 fc 01 fe 00 00     ......~.........
	...
     41e:	00 fe 03 ff 9f 80 7e 01 f8 00 03 fc 03 fc 00 00     ......~.........
	...
     43e:	00 fe 01 ff 1f 80 fc 03 f0 07 f8 03 fc 03 fc 00     ................
	...
     45e:	00 ff 01 ff 1f 80 fc 03 f0 07 f8 07 fc 03 fc 00     ................
	...
     47e:	00 ff 83 fe 3f 81 f8 03 f0 0f f8 07 f8 03 fc 00     ....?...........
	...
     49e:	00 7f ff fc 3f ff f8 07 f0 0f f0 07 f8 07 f8 00     ....?...........
	...
     4be:	00 7f ff fc 1f ff f0 07 e0 0f f0 0f f8 07 f8 00     ................
	...
     4de:	00 3f ff fc 1f ff e0 07 e0 1f f0 0f f0 07 f8 00     .?..............
	...
     4fe:	00 3f ff fe 0f ff c0 0f e0 1f e0 0f f0 0f f8 00     .?..............
	...
     51e:	00 0f ff fe 07 ff 00 0f c0 1f e0 1f f0 0f f0 00     ................
	...
     53e:	00 03 f8 7e 01 f8 00 0f c0 1f c0 1f e0 0f f0 00     ...~............
	...
     59e:	07 ff ff ff ff ff ff ff ff ff ff ff ff ff e0 00     ................
	...
     5be:	0f ff ff ff ff ff ff ff ff ff ff ff ff ff e0 00     ................
	...
     5de:	0f ff ff ff ff ff ff ff ff ff ff ff ff ff c0 00     ................
	...
     5fe:	0e fd f0 3c 07 81 f0 3e 0f 81 f0 3e 07 81 c0 00     ...<...>...>....
	...
     61e:	1c 79 e0 1c 07 01 e0 3c 07 01 e0 3c 07 01 c0 00     .y.....<...<....
	...
     63e:	1c 61 c7 1f 3e 38 e7 38 cf 39 c7 1c 67 cf 80 00     .a..>8.8.9..g...
	...
     65e:	1c 03 cf 1e 3c 79 e7 38 3f 31 8f 1c e7 cf 80 00     ....<y.8?1......
	...
     67e:	38 03 8f 1e 7c f9 c0 7c 1e 03 9f 38 0f 8f 80 00     8...|..|...8....
	...
     69e:	39 03 8f 3e 7c f1 c0 ff 8e 07 9e 38 1f 9f 00 00     9..>|......8....
	...
     6be:	39 e7 8c 3c 7c 63 cc f3 9c 1f 8c 79 9f 9f 00 00     9..<|c.....y....
	...
     6de:	71 e7 80 7c fc 07 8c f0 1c 7f 80 f1 9f 1f 00 00     q..|............
	...
     6fe:	73 c7 c1 fc fe 0f 9c 78 3c ff c1 f3 8f 3e 00 00     s......x<....>..
	...
     71e:	7f ff ff ff ff ff ff ff ff ff ff ff ff fe 00 00     ................
	...
     73e:	ff ff ff ff ff ff ff ff ff ff ff ff ff fe 00 00     ................
	...

000008d6 <BigText>:
	...
     8fe:	0c 00 0c 00 0c 00 0c 00 0c 00 0c 00 0c 00 0c 00     ................
     90e:	0c 00 0c 00 00 00 0e 00 0e 00 0e 00 00 00 00 00     ................
     91e:	00 00 00 00 00 00 19 80 19 80 19 80 19 80 19 80     ................
	...
     94a:	00 00 13 00 13 00 13 00 ff c0 ff c0 13 00 36 00     ..............6.
     95a:	ff 80 ff 80 36 00 36 00 36 00 36 00 00 00 00 00     ....6.6.6.6.....
     96a:	00 00 00 00 02 00 02 00 1f 80 3f 80 66 00 66 00     ..........?.f.f.
     97a:	74 00 3c 00 1f 00 07 80 0c c0 0c c0 4d c0 7f 80     t.<.........M...
     98a:	3f 00 08 00 08 00 00 00 00 00 00 00 78 40 fc c0     ?...........x@..
     99a:	cd 80 cd 00 ff 00 7e 00 04 00 0c 00 0b c0 17 e0     ......~.........
     9aa:	36 60 26 60 67 e0 c3 c0 00 00 00 00 00 00 00 00     6`&`g...........
     9ba:	00 00 0f 00 3f 80 31 80 31 80 33 80 1f 00 1c 00     ....?.1.1.3.....
     9ca:	3c 60 66 60 63 e0 61 c0 71 c0 3f e0 1f 70 00 00     <`f`c.a.q.?..p..
	...
     9e2:	0c 00 0c 00 0c 00 0c 00 0c 00 00 00 00 00 00 00     ................
	...
     a06:	01 00 03 80 03 00 06 00 0c 00 0c 00 18 00 18 00     ................
     a16:	18 00 18 00 18 00 18 00 18 00 0c 00 0c 00 06 00     ................
     a26:	07 00 03 80 01 00 10 00 38 00 18 00 0c 00 06 00     ........8.......
     a36:	06 00 03 00 03 00 03 00 03 00 03 00 03 00 03 00     ................
     a46:	06 00 06 00 0c 00 18 00 38 00 10 00 00 00 04 00     ........8.......
     a56:	24 80 35 80 0e 00 0e 00 37 80 24 80 04 00 00 00     $.5.....7.$.....
	...
     a7e:	00 00 06 00 06 00 06 00 06 00 7f e0 7f e0 06 00     ................
     a8e:	06 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     ab6:	0c 00 0e 00 06 00 06 00 3c 00 38 00 00 00 00 00     ........<.8.....
	...
     ad2:	00 00 1f 80 1f 80 00 00 00 00 00 00 00 00 00 00     ................
	...
     b02:	0e 00 0e 00 0e 00 00 00 00 00 00 00 00 00 00 00     ................
     b12:	00 80 01 80 01 80 03 00 03 00 02 00 06 00 04 00     ................
     b22:	0c 00 08 00 18 00 18 00 10 00 30 00 20 00 60 00     ..........0. .`.
	...
     b3a:	0f 00 1f c0 30 c0 70 e0 60 e0 63 e0 6f 60 7c 60     ....0.p.`.c.o`|`
     b4a:	70 60 70 e0 30 c0 3f 80 0f 00 00 00 00 00 00 00     p`p.0.?.........
     b5a:	00 00 00 00 00 00 06 00 1e 00 36 00 26 00 06 00     ..........6.&...
     b6a:	06 00 06 00 06 00 06 00 06 00 06 00 3f c0 3f c0     ............?.?.
	...
     b86:	3c 00 7e 00 43 00 03 00 03 00 03 00 06 00 0c 00     <.~.C...........
     b96:	18 00 30 00 20 00 7f 80 7f 80 00 00 00 00 00 00     ..0. ...........
     ba6:	00 00 00 00 00 00 1e 00 3f 80 21 80 01 80 01 80     ........?.!.....
     bb6:	0f 00 0f 80 01 c0 00 c0 00 c0 01 c0 3f 80 3e 00     ............?.>.
	...
     bd2:	07 00 0f 00 0b 00 1b 00 33 00 23 00 63 00 c3 00     ........3.#.c...
     be2:	ff c0 ff c0 03 00 03 00 03 00 00 00 00 00 00 00     ................
     bf2:	00 00 00 00 00 00 3f 80 3f 80 30 00 30 00 30 00     ......?.?.0.0.0.
     c02:	3f 00 3f 80 01 c0 00 c0 00 c0 01 c0 3f 80 3e 00     ?.?.........?.>.
	...
     c1e:	07 80 1f 80 38 00 30 00 60 00 6f 00 7f 80 71 c0     ....8.0.`.o...q.
     c2e:	60 c0 60 c0 31 c0 3f 80 1f 00 00 00 00 00 00 00     `.`.1.?.........
     c3e:	00 00 00 00 00 00 7f c0 7f c0 00 c0 01 80 01 80     ................
     c4e:	03 00 03 00 06 00 06 00 0c 00 0c 00 18 00 18 00     ................
	...
     c6a:	1f 00 3f c0 60 c0 60 c0 71 80 1f 00 1f 00 33 80     ..?.`.`.q.....3.
     c7a:	60 c0 60 c0 60 c0 3f 80 1f 00 00 00 00 00 00 00     `.`.`.?.........
     c8a:	00 00 00 00 00 00 1f 00 3f 80 71 80 60 c0 60 c0     ........?.q.`.`.
     c9a:	71 c0 3f c0 1e c0 00 c0 01 80 03 80 3f 00 3c 00     q.?.........?.<.
	...
     cba:	00 00 0e 00 0e 00 0e 00 00 00 00 00 00 00 00 00     ................
     cca:	0e 00 0e 00 0e 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     ce2:	0e 00 0e 00 0e 00 00 00 00 00 00 00 00 00 0c 00     ................
     cf2:	0e 00 06 00 06 00 3c 00 38 00 00 00 00 00 00 00     ......<.8.......
     d02:	00 00 00 00 01 00 03 00 06 00 0c 00 30 00 60 00     ............0.`.
     d12:	30 00 0c 00 06 00 03 00 01 00 00 00 00 00 00 00     0...............
	...
     d32:	7f 80 7f 80 00 00 00 00 7f 80 7f 80 00 00 00 00     ................
	...
     d52:	10 00 18 00 0c 00 06 00 01 80 00 c0 01 80 06 00     ................
     d62:	0c 00 18 00 10 00 00 00 00 00 00 00 00 00 00 00     ................
     d72:	1c 00 1f 00 03 00 01 80 01 80 01 80 0f 80 0f 00     ................
     d82:	0c 00 0c 00 00 00 0e 00 0e 00 0e 00 00 00 00 00     ................
     d92:	00 00 00 00 00 00 0f 00 11 80 20 80 60 40 40 40     .......... .`@@@
     da2:	4f 40 9f 40 9b 40 b3 40 b3 40 b3 40 bf 80 9d 80     O@.@.@.@.@.@....
     db2:	80 00 c0 00 40 00 61 00 3e 00 00 00 00 00 0e 00     ....@.a.>.......
     dc2:	0a 00 0a 00 1b 00 1b 00 11 00 31 80 31 80 3f 80     ..........1.1.?.
     dd2:	3f 80 60 c0 60 c0 40 c0 00 00 00 00 00 00 00 00     ?.`.`.@.........
     de2:	00 00 00 00 3f 80 3f e0 30 60 30 60 30 e0 3f 80     ....?.?.0`0`0.?.
     df2:	3f c0 30 e0 30 60 30 60 30 e0 3f c0 3f 00 00 00     ?.0.0`0`0.?.?...
	...
     e0a:	00 00 0f 80 1f c0 38 40 30 00 60 00 60 00 60 00     ......8@0.`.`.`.
     e1a:	60 00 60 00 70 00 38 40 1f c0 0f 80 00 00 00 00     `.`.p.8@........
	...
     e32:	7e 00 7f 80 61 80 61 c0 60 c0 60 c0 60 c0 60 c0     ~...a.a.`.`.`.`.
     e42:	60 c0 61 c0 63 80 7f 00 7e 00 00 00 00 00 00 00     `.a.c...~.......
     e52:	00 00 00 00 00 00 3f 80 3f 80 30 00 30 00 30 00     ......?.?.0.0.0.
     e62:	3f 80 3f 80 30 00 30 00 30 00 30 00 3f 80 3f 80     ?.?.0.0.0.0.?.?.
	...
     e7e:	3f 80 3f 80 30 00 30 00 30 00 3f 80 3f 80 30 00     ?.?.0.0.0.?.?.0.
     e8e:	30 00 30 00 30 00 30 00 30 00 00 00 00 00 00 00     0.0.0.0.0.......
     e9e:	00 00 00 00 00 00 07 c0 1f e0 38 20 30 00 60 00     ..........8 0.`.
     eae:	63 e0 63 e0 60 60 60 60 70 60 38 60 1f e0 0f c0     c.c.````p`8`....
	...
     eca:	60 c0 60 c0 60 c0 60 c0 60 c0 7f c0 7f c0 60 c0     `.`.`.`.`.....`.
     eda:	60 c0 60 c0 60 c0 60 c0 60 c0 00 00 00 00 00 00     `.`.`.`.`.......
     eea:	00 00 00 00 00 00 3f c0 3f c0 06 00 06 00 06 00     ......?.?.......
     efa:	06 00 06 00 06 00 06 00 06 00 06 00 3f c0 3f c0     ............?.?.
	...
     f16:	3f 80 3f 80 01 80 01 80 01 80 01 80 01 80 01 80     ?.?.............
     f26:	01 80 01 80 23 80 3f 00 1e 00 00 00 00 00 00 00     ....#.?.........
     f36:	00 00 00 00 00 00 30 c0 31 80 33 00 33 00 36 00     ......0.1.3.3.6.
     f46:	34 00 3c 00 34 00 36 00 33 00 33 00 31 80 30 c0     4.<.4.6.3.3.1.0.
	...
     f62:	30 00 30 00 30 00 30 00 30 00 30 00 30 00 30 00     0.0.0.0.0.0.0.0.
     f72:	30 00 30 00 30 00 3f 80 3f 80 00 00 00 00 00 00     0.0.0.?.?.......
     f82:	00 00 00 00 00 00 60 c0 71 c0 71 c0 71 c0 7b c0     ......`.q.q.q.{.
     f92:	6a c0 6a c0 6e c0 64 c0 60 c0 60 c0 60 c0 60 c0     j.j.n.d.`.`.`.`.
	...
     fae:	70 c0 70 c0 78 c0 68 c0 68 c0 6c c0 64 c0 66 c0     p.p.x.h.h.l.d.f.
     fbe:	62 c0 62 c0 63 c0 61 c0 61 c0 00 00 00 00 00 00     b.b.c.a.a.......
     fce:	00 00 00 00 00 00 0f 00 3f 80 31 80 70 c0 60 c0     ........?.1.p.`.
     fde:	60 c0 60 c0 60 c0 60 c0 61 c0 31 80 3f 80 1e 00     `.`.`.`.a.1.?...
	...
     ffa:	3f 80 3f c0 30 e0 30 60 30 60 30 e0 3f c0 3f 00     ?.?.0.0`0`0.?.?.
    100a:	30 00 30 00 30 00 30 00 30 00 00 00 00 00 00 00     0.0.0.0.0.......
    101a:	00 00 00 00 00 00 0f 00 1f c0 30 c0 70 e0 60 60     ..........0.p.``
    102a:	60 60 60 60 60 60 60 60 70 e0 30 c0 3f 80 1f 00     ````````p.0.?...
    103a:	06 00 07 10 03 f0 01 e0 00 00 00 00 3f 00 3f 80     ............?.?.
    104a:	31 c0 30 c0 30 c0 31 c0 3f 80 3e 00 33 80 31 80     1.0.0.1.?.>.3.1.
    105a:	30 c0 30 c0 30 60 00 00 00 00 00 00 00 00 00 00     0.0.0`..........
    106a:	00 00 1f 00 3f 80 60 80 60 00 70 00 3c 00 1f 00     ....?.`.`.p.<...
    107a:	03 80 00 c0 00 c0 41 c0 7f 80 3f 00 00 00 00 00     ......A...?.....
	...
    1092:	7f e0 7f e0 06 00 06 00 06 00 06 00 06 00 06 00     ................
    10a2:	06 00 06 00 06 00 06 00 06 00 00 00 00 00 00 00     ................
    10b2:	00 00 00 00 00 00 60 c0 60 c0 60 c0 60 c0 60 c0     ......`.`.`.`.`.
    10c2:	60 c0 60 c0 60 c0 60 c0 60 c0 71 c0 3f 80 1f 00     `.`.`.`.`.q.?...
	...
    10de:	c0 40 c0 c0 c0 c0 60 80 61 80 21 80 31 80 31 00     .@....`.a.!.1.1.
    10ee:	1b 00 1b 00 1a 00 0e 00 0e 00 00 00 00 00 00 00     ................
    10fe:	00 00 00 00 00 00 40 40 40 40 40 40 40 40 44 40     ......@@@@@@@@D@
    110e:	4e 40 4a 40 4a 40 5b 40 51 40 51 c0 71 c0 60 c0     N@J@J@[@Q@Q.q.`.
	...
    112a:	60 c0 31 80 3b 00 1b 00 0e 00 0e 00 0e 00 1f 00     `.1.;...........
    113a:	1b 00 31 80 31 80 60 c0 c0 e0 00 00 00 00 00 00     ..1.1.`.........
    114a:	00 00 00 00 00 00 c0 30 60 60 30 c0 30 c0 19 80     .......0``0.0...
    115a:	1d 80 0f 00 06 00 06 00 06 00 06 00 06 00 06 00     ................
	...
    1176:	7f c0 7f c0 00 80 01 00 03 00 06 00 04 00 0c 00     ................
    1186:	18 00 10 00 30 00 7f c0 7f c0 00 00 00 00 00 00     ....0...........
	...
    11a2:	1f 00 3f 80 21 80 01 80 1f 80 7f 80 61 80 63 80     ..?.!.......a.c.
    11b2:	7f 80 3d 80 00 00 00 00 00 00 00 00 00 00 30 00     ..=...........0.
    11c2:	30 00 30 00 30 00 37 80 3f c0 38 e0 30 60 30 60     0.0.0.7.?.8.0`0`
    11d2:	30 60 30 60 30 c0 3f c0 1f 00 00 00 00 00 00 00     0`0`0.?.........
	...
    11ee:	07 80 1f c0 18 40 30 00 30 00 30 00 30 00 38 40     .....@0.0.0.0.8@
    11fe:	1f c0 0f 80 00 00 00 00 00 00 00 00 00 00 00 c0     ................
    120e:	00 c0 00 c0 00 c0 0f c0 3f c0 30 c0 60 c0 60 c0     ........?.0.`.`.
    121e:	60 c0 60 c0 73 c0 3f c0 1e c0 00 00 00 00 00 00     `.`.s.?.........
	...
    123a:	1f 00 3f 80 31 c0 60 c0 7f c0 7f c0 60 00 70 00     ..?.1.`.....`.p.
    124a:	3f 80 1f 80 00 00 00 00 00 00 00 00 00 00 03 c0     ?...............
    125a:	07 c0 0c 00 0c 00 0c 00 7f 80 7f 80 0c 00 0c 00     ................
    126a:	0c 00 0c 00 0c 00 0c 00 0c 00 00 00 00 00 00 00     ................
	...
    1286:	0f c0 1f c0 31 80 31 80 31 80 1f 00 3e 00 60 00     ....1.1.1...>.`.
    1296:	7f 80 3f c0 60 c0 60 c0 7f 80 3f 00 00 00 30 00     ..?.`.`...?...0.
    12a6:	30 00 30 00 30 00 37 80 3f c0 38 c0 30 c0 30 c0     0.0.0.7.?.8.0.0.
    12b6:	30 c0 30 c0 30 c0 30 c0 30 c0 00 00 00 00 00 00     0.0.0.0.0.......
    12c6:	00 00 0e 00 0e 00 0e 00 00 00 00 00 3e 00 3e 00     ............>.>.
    12d6:	06 00 06 00 06 00 06 00 06 00 06 00 3f c0 3f c0     ............?.?.
	...
    12ee:	03 80 03 80 03 80 00 00 00 00 3f 80 3f 80 01 80     ..........?.?...
    12fe:	01 80 01 80 01 80 01 80 01 80 01 80 01 80 01 80     ................
    130e:	21 80 3f 00 1e 00 00 00 30 00 30 00 30 00 30 00     !.?.....0.0.0.0.
    131e:	30 c0 31 80 33 00 36 00 3c 00 36 00 36 00 33 00     0.1.3.6.<.6.6.3.
    132e:	31 80 30 c0 00 00 00 00 00 00 00 00 00 00 3e 00     1.0...........>.
    133e:	3e 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00     >...............
    134e:	06 00 06 00 06 00 3f c0 3f c0 00 00 00 00 00 00     ......?.?.......
	...
    136a:	6c c0 7f e0 77 60 66 60 66 60 66 60 66 60 66 60     l...w`f`f`f`f`f`
    137a:	66 60 66 60 00 00 00 00 00 00 00 00 00 00 00 00     f`f`............
    138a:	00 00 00 00 00 00 37 80 3f c0 38 c0 30 c0 30 c0     ......7.?.8.0.0.
    139a:	30 c0 30 c0 30 c0 30 c0 30 c0 00 00 00 00 00 00     0.0.0.0.0.......
	...
    13b6:	1f 00 3f 80 31 c0 60 c0 60 c0 60 c0 60 c0 71 80     ..?.1.`.`.`.`.q.
    13c6:	3f 80 1f 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
    13d6:	00 00 00 00 00 00 37 00 3f 80 39 c0 30 c0 30 c0     ......7.?.9.0.0.
    13e6:	30 c0 30 c0 31 c0 3f 80 3f 00 30 00 30 00 30 00     0.0.1.?.?.0.0.0.
    13f6:	30 00 00 00 00 00 00 00 00 00 00 00 0f c0 3f c0     0.............?.
    1406:	30 c0 60 c0 60 c0 60 c0 60 c0 73 c0 3f c0 1e c0     0.`.`.`.`.s.?...
    1416:	00 c0 00 c0 00 c0 00 c0 00 00 00 00 00 00 00 00     ................
    1426:	00 00 37 80 3f c0 38 c0 30 c0 30 00 30 00 30 00     ..7.?.8.0.0.0.0.
    1436:	30 00 30 00 30 00 00 00 00 00 00 00 00 00 00 00     0.0.0...........
	...
    144e:	0f 00 3f 80 30 80 30 00 1e 00 07 80 00 c0 20 c0     ..?.0.0....... .
    145e:	3f c0 1f 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
    146e:	0c 00 0c 00 0c 00 7f c0 7f c0 0c 00 0c 00 0c 00     ................
    147e:	0c 00 0c 00 0c 00 0f c0 07 c0 00 00 00 00 00 00     ................
	...
    149a:	30 c0 30 c0 30 c0 30 c0 30 c0 30 c0 30 c0 31 c0     0.0.0.0.0.0.0.1.
    14aa:	3f c0 1e c0 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
    14ba:	00 00 00 00 00 00 60 c0 60 c0 60 80 31 80 31 80     ......`.`.`.1.1.
    14ca:	11 00 1b 00 1a 00 0a 00 0e 00 00 00 00 00 00 00     ................
	...
    14e6:	40 40 40 40 64 40 66 40 6a 40 6a 40 2b 40 29 40     @@@@d@f@j@j@+@)@
    14f6:	39 c0 31 c0 00 00 00 00 00 00 00 00 00 00 00 00     9.1.............
    1506:	00 00 00 00 00 00 60 c0 31 80 1b 00 1b 00 0e 00     ......`.1.......
    1516:	0e 00 1b 00 1b 00 31 80 61 c0 00 00 00 00 00 00     ......1.a.......
	...
    1532:	60 c0 60 c0 60 80 31 80 31 00 11 00 1b 00 1a 00     `.`.`.1.1.......
    1542:	0e 00 0c 00 0c 00 18 00 f8 00 f0 00 00 00 00 00     ................
    1552:	00 00 00 00 00 00 3f c0 3f c0 00 80 01 00 02 00     ......?.?.......
    1562:	04 00 08 00 18 00 3f c0 3f c0 00 00 00 00 00 00     ......?.?.......
	...

00001574 <BiggerText>:
	...
    15a8:	03 80 03 80 03 80 03 80 03 80 03 80 03 80 03 80     ................
    15b8:	03 80 03 80 03 80 03 80 03 80 03 80 00 00 00 00     ................
    15c8:	03 80 03 80 03 80 00 00 00 00 00 00 00 00 00 00     ................
    15d8:	00 00 1c e0 1c e0 1c e0 1c e0 1c e0 1c e0 00 00     ................
	...
    1610:	06 38 06 38 06 38 06 38 3f fe 3f fe 0e 70 0e 70     .8.8.8.8?.?..p.p
    1620:	0c 70 0c 70 7f fc 7f fc 0c 70 1c e0 1c e0 1c e0     .p.p.....p......
    1630:	1c e0 00 00 00 00 00 00 00 00 00 00 00 60 00 c0     .............`..
    1640:	00 c0 07 f0 0f f8 1c c8 38 c0 38 c0 38 80 1f 80     ........8.8.8...
    1650:	0f 80 07 e0 01 f8 01 bc 01 9c 03 1c 03 1c 23 38     ..............#8
    1660:	3f f8 1f e0 03 00 03 00 06 00 00 00 00 00 00 00     ?...............
    1670:	3c 0c 7e 18 e7 38 e7 30 e7 60 e7 60 7e c0 3d 80     <.~..8.0.`.`~.=.
    1680:	01 80 03 00 07 00 06 78 0c fc 1d ce 19 ce 31 ce     .......x......1.
    1690:	31 ce 60 fc c0 78 00 00 00 00 00 00 00 00 00 00     1.`..x..........
    16a0:	00 00 07 c0 1f e0 3c f0 38 70 38 70 38 70 38 e0     ......<.8p8p8p8.
    16b0:	1d c0 1f 80 1e 00 3f 1c 3b 9c 71 dc 71 d8 70 f8     ......?.;.q.q.p.
    16c0:	70 70 78 f8 3f fc 0f 8e 00 00 00 00 00 00 00 00     ppx.?...........
    16d0:	00 00 00 00 03 80 03 80 03 80 03 80 03 80 03 80     ................
	...
    1704:	00 40 00 e0 01 c0 03 80 03 00 07 00 0e 00 0e 00     .@..............
    1714:	0e 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00     ................
    1724:	0e 00 0e 00 0e 00 07 00 07 00 03 80 01 c0 00 e0     ................
    1734:	00 40 04 00 0e 00 07 00 03 80 01 c0 01 c0 00 e0     .@..............
    1744:	00 e0 00 e0 00 70 00 70 00 70 00 70 00 70 00 70     .....p.p.p.p.p.p
    1754:	00 70 00 e0 00 e0 00 e0 01 c0 01 80 03 80 07 00     .p..............
    1764:	0e 00 04 00 00 00 01 80 01 80 09 90 1d b8 07 e0     ................
    1774:	01 80 07 e0 1d b8 01 90 01 80 01 80 00 00 00 00     ................
	...
    17a8:	03 80 03 80 03 80 03 80 03 80 7f fc 7f fc 03 80     ................
    17b8:	03 80 03 80 03 80 03 80 00 00 00 00 00 00 00 00     ................
	...
    17ec:	07 00 07 80 07 80 03 80 03 80 03 80 07 00 1e 00     ................
    17fc:	1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1814:	00 00 1f e0 1f e0 00 00 00 00 00 00 00 00 00 00     ................
	...
    1850:	03 00 07 80 07 80 03 00 00 00 00 00 00 00 00 00     ................
    1860:	00 00 00 00 00 18 00 38 00 30 00 30 00 60 00 60     .......8.0.0.`.`
    1870:	00 e0 00 c0 00 c0 01 80 01 80 03 00 03 00 07 00     ................
    1880:	06 00 06 00 0c 00 0c 00 1c 00 18 00 18 00 30 00     ..............0.
	...
    1898:	00 00 07 c0 1f f0 1c 78 38 38 38 38 70 3c 70 7c     .......x8888p<p|
    18a8:	71 dc 73 9c 77 1c 7c 1c 78 1c 38 38 38 38 3c 70     q.s.w.|.x.8888<p
    18b8:	1f f0 07 c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
    18c8:	00 00 00 00 01 c0 07 c0 1d c0 39 c0 11 c0 01 c0     ..........9.....
    18d8:	01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
    18e8:	01 c0 1f f8 1f f8 00 00 00 00 00 00 00 00 00 00     ................
    18f8:	00 00 00 00 00 00 0f 80 1f e0 38 e0 10 70 00 70     ..........8..p.p
    1908:	00 70 00 70 00 e0 00 e0 01 c0 03 80 07 00 0e 00     .p.p............
    1918:	1c 00 18 00 3f f8 3f f8 00 00 00 00 00 00 00 00     ....?.?.........
	...
    1930:	1f 80 3f e0 20 f0 00 70 00 70 00 70 00 e0 0f c0     ..?. ..p.p.p....
    1940:	0f e0 00 f0 00 38 00 38 00 38 00 38 00 f0 3f e0     .....8.8.8.8..?.
    1950:	3f 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
    1960:	00 00 00 78 00 f8 01 f8 03 b8 03 38 06 38 0e 38     ...x.......8.8.8
    1970:	0c 38 18 38 30 38 70 38 7f fe 7f fe 00 38 00 38     .8.808p8.....8.8
    1980:	00 38 00 38 00 00 00 00 00 00 00 00 00 00 00 00     .8.8............
    1990:	00 00 00 00 3f f0 3f f0 38 00 38 00 38 00 38 00     ....?.?.8.8.8.8.
    19a0:	38 00 3f c0 3f f0 00 f8 00 38 00 38 00 38 00 78     8.?.?....8.8.8.x
    19b0:	00 f0 3f e0 3f 80 00 00 00 00 00 00 00 00 00 00     ..?.?...........
    19c0:	00 00 00 00 00 00 01 f8 07 f8 0f 00 1e 00 1c 00     ................
    19d0:	18 00 38 00 3b f0 3f f8 3c 3c 38 1c 38 1c 38 1c     ..8.;.?.<<8.8.8.
    19e0:	1c 1c 1c 38 0f f0 07 e0 00 00 00 00 00 00 00 00     ...8............
	...
    19f8:	3f fc 3f fc 00 1c 00 18 00 38 00 30 00 70 00 60     ?.?......8.0.p.`
    1a08:	00 e0 00 c0 01 c0 01 80 03 80 03 00 07 00 06 00     ................
    1a18:	0e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1a28:	00 00 07 e0 1f f8 3c 3c 38 1c 38 1c 3c 1c 1e 78     ......<<8.8.<..x
    1a38:	0f e0 07 f0 1e 78 1c 3c 38 1c 38 1c 38 1c 3c 3c     .....x.<8.8.8.<<
    1a48:	1f f8 07 e0 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1a58:	00 00 00 00 07 c0 1f f0 3c 78 78 38 70 1c 70 1c     ........<xx8p.p.
    1a68:	70 1c 70 1c 38 3c 3f fc 0f dc 00 18 00 38 00 70     p.p.8<?......8.p
    1a78:	00 f0 3f c0 3f 00 00 00 00 00 00 00 00 00 00 00     ..?.?...........
	...
    1a94:	00 00 03 00 07 80 07 80 03 00 00 00 00 00 00 00     ................
    1aa4:	00 00 00 00 03 00 07 80 07 80 03 00 00 00 00 00     ................
	...
    1ac8:	01 80 03 c0 03 c0 01 80 00 00 00 00 00 00 00 00     ................
    1ad8:	00 00 03 80 03 c0 03 c0 01 c0 01 c0 01 c0 03 80     ................
    1ae8:	0f 00 0e 00 00 00 00 00 00 00 00 00 00 00 00 20     ............... 
    1af8:	00 70 00 e0 01 c0 07 00 0e 00 1c 00 38 00 1c 00     .p..........8...
    1b08:	0e 00 07 80 01 c0 00 e0 00 70 00 20 00 00 00 00     .........p. ....
	...
    1b30:	3f f8 3f f8 00 00 00 00 00 00 3f f8 3f f8 00 00     ?.?.......?.?...
	...
    1b58:	00 00 08 00 1c 00 0e 00 07 00 03 c0 00 e0 00 70     ...............p
    1b68:	00 38 00 70 00 e0 01 c0 07 00 0e 00 1c 00 08 00     .8.p............
	...
    1b84:	0f 00 0f c0 01 e0 00 70 00 38 00 38 00 38 00 38     .......p.8.8.8.8
    1b94:	00 78 03 f0 03 e0 03 80 03 80 03 80 00 00 00 00     .x..............
    1ba4:	07 00 07 00 07 00 00 00 00 00 00 00 00 00 00 00     ................
    1bb4:	00 00 03 e0 07 f8 0e 18 18 0c 38 0c 30 06 60 06     ..........8.0.`.
    1bc4:	61 f6 63 f6 c7 36 c6 76 ce 66 ce 66 ce 66 ce 66     a.c..6.v.f.f.f.f
    1bd4:	ce ec cf bc c7 38 e0 00 60 00 70 00 38 20 1f e0     .....8..`.p.8 ..
    1be4:	0f c0 00 00 00 00 00 00 03 80 02 c0 06 c0 06 c0     ................
    1bf4:	06 e0 0c 60 0c 60 0c 70 18 30 18 30 18 30 3f f8     ...`.`.p.0.0.0?.
    1c04:	3f f8 30 18 70 1c 60 0c 60 0c 00 00 00 00 00 00     ?.0.p.`.`.......
	...
    1c1c:	00 00 3f e0 3f f0 38 78 38 38 38 38 38 38 38 70     ..?.?.8x8888888p
    1c2c:	3f e0 3f f0 38 38 38 1c 38 1c 38 1c 38 1c 38 38     ?.?.888.8.8.8.88
    1c3c:	3f f0 3f c0 00 00 00 00 00 00 00 00 00 00 00 00     ?.?.............
    1c4c:	00 00 00 00 03 f0 0f f8 1e 08 3c 00 38 00 70 00     ..........<.8.p.
    1c5c:	70 00 70 00 70 00 70 00 70 00 70 00 38 00 38 00     p.p.p.p.p.p.8.8.
    1c6c:	1e 08 0f f8 07 f0 00 00 00 00 00 00 00 00 00 00     ................
    1c7c:	00 00 00 00 00 00 7f 80 7f e0 70 70 70 38 70 38     ..........ppp8p8
    1c8c:	70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 38     p.p.p.p.p.p.p.p8
    1c9c:	70 38 70 f0 7f e0 7f 80 00 00 00 00 00 00 00 00     p8p.............
	...
    1cb4:	1f f8 1f f8 1c 00 1c 00 1c 00 1c 00 1c 00 1f f8     ................
    1cc4:	1f f8 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1f f8     ................
    1cd4:	1f f8 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1ce4:	00 00 1f f8 1f f8 1c 00 1c 00 1c 00 1c 00 1c 00     ................
    1cf4:	1f f8 1f f8 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00     ................
    1d04:	1c 00 1c 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d14:	00 00 00 00 03 f8 0f fc 1e 04 3c 00 38 00 78 00     ..........<.8.x.
    1d24:	70 00 70 fc 70 fc 70 1c 70 1c 70 1c 38 1c 38 1c     p.p.p.p.p.p.8.8.
    1d34:	1e 1c 0f fc 03 f0 00 00 00 00 00 00 00 00 00 00     ................
    1d44:	00 00 00 00 00 00 70 38 70 38 70 38 70 38 70 38     ......p8p8p8p8p8
    1d54:	70 38 70 38 7f f8 7f f8 70 38 70 38 70 38 70 38     p8p8....p8p8p8p8
    1d64:	70 38 70 38 70 38 70 38 00 00 00 00 00 00 00 00     p8p8p8p8........
	...
    1d7c:	3f f8 3f f8 03 80 03 80 03 80 03 80 03 80 03 80     ?.?.............
    1d8c:	03 80 03 80 03 80 03 80 03 80 03 80 03 80 3f f8     ..............?.
    1d9c:	3f f8 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
    1dac:	00 00 3f f0 3f f0 00 70 00 70 00 70 00 70 00 70     ..?.?..p.p.p.p.p
    1dbc:	00 70 00 70 00 70 00 70 00 70 00 70 00 70 20 e0     .p.p.p.p.p.p.p .
    1dcc:	3f c0 1f 80 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
    1ddc:	00 00 00 00 38 18 38 38 38 70 38 e0 38 c0 39 80     ....8.888p8.8.9.
    1dec:	3b 80 3b 00 3e 00 3b 00 3b 80 39 c0 38 c0 38 e0     ;.;.>.;.;.9.8.8.
    1dfc:	38 70 38 38 38 1c 00 00 00 00 00 00 00 00 00 00     8p888...........
    1e0c:	00 00 00 00 00 00 1c 00 1c 00 1c 00 1c 00 1c 00     ................
    1e1c:	1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00     ................
    1e2c:	1c 00 1c 00 1f f8 1f f8 00 00 00 00 00 00 00 00     ................
	...
    1e44:	38 38 38 38 38 38 3c 78 3c 78 34 58 36 d8 36 98     888888<x<x4X6.6.
    1e54:	32 98 33 98 30 18 30 18 30 18 30 18 30 18 30 18     2.3.0.0.0.0.0.0.
    1e64:	30 18 00 00 00 00 00 00 00 00 00 00 00 00 00 00     0...............
    1e74:	00 00 3c 38 3c 38 3c 38 3e 38 3a 38 3a 38 3b 38     ..<8<8<8>8:8:8;8
    1e84:	39 38 39 38 39 b8 39 b8 38 b8 38 f8 38 f8 38 78     98989.9.8.8.8.8x
    1e94:	38 78 38 78 00 00 00 00 00 00 00 00 00 00 00 00     8x8x............
    1ea4:	00 00 00 00 07 c0 0f f0 1c 78 38 38 38 3c 70 1c     .........x888<p.
    1eb4:	70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 78 38 38 38     p.p.p.p.p.p.x888
    1ec4:	3c 70 1f e0 07 c0 00 00 00 00 00 00 00 00 00 00     <p..............
    1ed4:	00 00 00 00 00 00 3f e0 3f f0 38 78 38 1c 38 1c     ......?.?.8x8.8.
    1ee4:	38 1c 38 1c 38 3c 38 78 3f f0 3f c0 38 00 38 00     8.8.8<8x?.?.8.8.
    1ef4:	38 00 38 00 38 00 38 00 00 00 00 00 00 00 00 00     8.8.8.8.........
	...
    1f0c:	07 e0 0f f8 1c 3c 38 1c 38 1c 70 0e 70 0e 70 0e     .....<8.8.p.p.p.
    1f1c:	70 0e 70 0e 70 0e 70 0e 78 1c 38 1c 3c 38 1f f0     p.p.p.p.x.8.<8..
    1f2c:	07 e0 01 c0 01 c0 00 e2 00 ff 00 3e 00 00 00 00     ...........>....
    1f3c:	00 00 3f c0 3f f0 38 78 38 38 38 38 38 38 38 38     ..?.?.8x88888888
    1f4c:	38 70 3f e0 3f c0 38 e0 38 70 38 70 38 38 38 38     8p?.?.8.8p8p8888
    1f5c:	38 18 38 1c 00 00 00 00 00 00 00 00 00 00 00 00     8.8.............
    1f6c:	00 00 00 00 07 f0 0f f8 1c 08 38 00 38 00 38 00     ..........8.8.8.
    1f7c:	1e 00 1f 80 07 e0 00 f8 00 3c 00 1c 00 1c 00 1c     .........<......
    1f8c:	20 38 3f f0 1f e0 00 00 00 00 00 00 00 00 00 00      8?.............
    1f9c:	00 00 00 00 00 00 7f fc 7f fc 03 80 03 80 03 80     ................
    1fac:	03 80 03 80 03 80 03 80 03 80 03 80 03 80 03 80     ................
    1fbc:	03 80 03 80 03 80 03 80 00 00 00 00 00 00 00 00     ................
	...
    1fd4:	70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c     p.p.p.p.p.p.p.p.
    1fe4:	70 1c 70 1c 70 1c 70 1c 70 1c 70 3c 38 38 1f f0     p.p.p.p.p.p<88..
    1ff4:	0f c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2004:	00 00 60 0c 70 0c 70 1c 30 18 30 18 38 38 18 30     ..`.p.p.0.0.88.0
    2014:	18 30 1c 70 1c 60 0c 60 0e e0 0e c0 06 c0 06 c0     .0.p.`.`........
    2024:	07 80 03 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2034:	00 00 00 00 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c     ....p.p.p.p.p.p.
    2044:	71 9c 73 9c 73 9c 72 9c 76 dc 36 d8 34 58 3c 78     q.s.s.r.v.6.4X<x
    2054:	3c 78 38 38 38 38 00 00 00 00 00 00 00 00 00 00     <x8888..........
    2064:	00 00 00 00 00 00 70 1c 38 38 18 30 1c 70 0e e0     ......p.88.0.p..
    2074:	07 c0 07 c0 03 80 03 80 07 c0 0e e0 0e e0 1c 70     ...............p
    2084:	38 38 38 38 70 1c e0 0e 00 00 00 00 00 00 00 00     8888p...........
	...
    209c:	e0 0e 70 1c 70 1c 38 38 38 38 1c 70 0c 60 0e e0     ..p.p.8888.p.`..
    20ac:	06 c0 07 c0 03 80 03 80 03 80 03 80 03 80 03 80     ................
    20bc:	03 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    20cc:	00 00 7f f8 7f f8 00 30 00 60 00 e0 00 c0 01 c0     .......0.`......
    20dc:	01 80 03 00 07 00 06 00 0c 00 1c 00 18 00 30 00     ..............0.
    20ec:	7f fc 7f fc 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2108:	07 e0 1f f8 10 3c 00 1c 00 1c 07 fc 1f fc 3c 1c     .....<........<.
    2118:	38 1c 38 1c 3c 7c 1f fc 0f 9c 00 00 00 00 00 00     8.8.<|..........
    2128:	00 00 00 00 00 00 38 00 38 00 38 00 38 00 38 00     ......8.8.8.8.8.
    2138:	38 00 39 e0 3b f8 3e 38 3c 1c 38 1c 38 1c 38 1c     8.9.;.>8<.8.8.8.
    2148:	38 1c 38 1c 38 38 38 78 3f f0 1f c0 00 00 00 00     8.8.888x?.......
	...
    216c:	03 e0 0f f0 1e 10 1c 00 38 00 38 00 38 00 38 00     ........8.8.8.8.
    217c:	38 00 3c 00 1e 10 0f f0 07 e0 00 00 00 00 00 00     8.<.............
    218c:	00 00 00 00 00 00 00 38 00 38 00 38 00 38 00 38     .......8.8.8.8.8
    219c:	00 38 07 f8 1f f8 3c 38 38 38 70 38 70 38 70 38     .8....<888p8p8p8
    21ac:	70 38 70 38 70 78 38 f8 3f b8 0f 38 00 00 00 00     p8p8px8.?..8....
	...
    21d0:	03 e0 0f f0 1c 38 18 1c 38 1c 3f fc 3f fc 38 00     .....8..8.?.?.8.
    21e0:	38 00 3c 00 1e 08 0f f8 07 f0 00 00 00 00 00 00     8.<.............
    21f0:	00 00 00 00 00 00 00 fc 03 fc 03 80 07 00 07 00     ................
    2200:	07 00 07 00 7f f8 7f f8 07 00 07 00 07 00 07 00     ................
    2210:	07 00 07 00 07 00 07 00 07 00 07 00 00 00 00 00     ................
	...
    2234:	07 fc 1f fc 3c 78 38 38 38 38 38 38 3c 78 1f f0     ....<x888888<x..
    2244:	3f c0 38 00 38 00 3f f0 1f fc 70 1c 70 1c 78 3c     ?.8.8.?...p.p.x<
    2254:	3f f8 1f e0 00 00 38 00 38 00 38 00 38 00 38 00     ?.....8.8.8.8.8.
    2264:	38 00 39 e0 3b f0 3e 78 3c 38 38 38 38 38 38 38     8.9.;.>x<8888888
    2274:	38 38 38 38 38 38 38 38 38 38 38 38 00 00 00 00     888888888888....
	...
    228c:	00 00 01 80 03 c0 01 80 00 00 00 00 3f c0 3f c0     ............?.?.
    229c:	01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
    22ac:	01 c0 3f f8 3f f8 00 00 00 00 00 00 00 00 00 00     ..?.?...........
    22bc:	00 00 00 00 00 c0 01 e0 00 c0 00 00 00 00 3f e0     ..............?.
    22cc:	3f e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0     ?...............
    22dc:	00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 41 c0 7f 80     ............A...
    22ec:	3f 00 00 00 38 00 38 00 38 00 38 00 38 00 38 00     ?...8.8.8.8.8.8.
    22fc:	38 38 38 70 38 e0 39 c0 3b 80 3f 00 3b 80 3b 80     888p8.9.;.?.;.;.
    230c:	39 c0 38 e0 38 e0 38 70 38 38 00 00 00 00 00 00     9.8.8.8p88......
    231c:	00 00 00 00 00 00 3f c0 3f c0 01 c0 01 c0 01 c0     ......?.?.......
    232c:	01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
    233c:	01 c0 01 c0 01 c0 01 c0 3f f8 3f f8 00 00 00 00     ........?.?.....
	...
    2360:	77 38 7f 7c 7b dc 73 9c 73 9c 73 9c 73 9c 73 9c     w8.|{.s.s.s.s.s.
    2370:	73 9c 73 9c 73 9c 73 9c 73 9c 00 00 00 00 00 00     s.s.s.s.s.......
	...
    2390:	00 00 39 e0 3f f0 3e 78 3c 38 38 38 38 38 38 38     ..9.?.>x<8888888
    23a0:	38 38 38 38 38 38 38 38 38 38 38 38 00 00 00 00     888888888888....
	...
    23c4:	07 e0 1f f0 3c 78 38 3c 70 1c 70 1c 70 1c 70 1c     ....<x8<p.p.p.p.
    23d4:	70 1c 38 38 3c 78 1f f0 0f c0 00 00 00 00 00 00     p.88<x..........
	...
    23f4:	00 00 39 e0 3f f8 3e 38 3c 1c 38 1c 38 1c 38 1c     ..9.?.>8<.8.8.8.
    2404:	38 1c 38 1c 38 38 38 78 3f f0 3f c0 38 00 38 00     8.8.888x?.?.8.8.
    2414:	38 00 38 00 38 00 00 00 00 00 00 00 00 00 00 00     8.8.8...........
    2424:	00 00 00 00 07 f8 1f f8 3c 38 38 38 70 38 70 38     ........<888p8p8
    2434:	70 38 70 38 70 38 70 78 38 f8 3f b8 0f 38 00 38     p8p8p8px8.?..8.8
    2444:	00 38 00 38 00 38 00 38 00 00 00 00 00 00 00 00     .8.8.8.8........
    2454:	00 00 00 00 00 00 1c f8 1d fc 1f 1e 1e 0e 1c 0e     ................
    2464:	1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00     ................
	...
    248c:	07 e0 1f f0 3c 10 38 00 3c 00 1f 00 0f e0 01 f0     ....<.8.<.......
    249c:	00 38 00 38 20 78 3f f0 1f c0 00 00 00 00 00 00     .8.8 x?.........
	...
    24b4:	00 00 07 00 07 00 07 00 07 00 7f f8 7f f8 07 00     ................
    24c4:	07 00 07 00 07 00 07 00 07 00 07 00 07 00 07 80     ................
    24d4:	03 f8 01 f8 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    24f0:	38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38     8888888888888888
    2500:	38 38 38 78 3c f8 1f f8 0f 38 00 00 00 00 00 00     888x<....8......
	...
    2520:	00 00 60 18 70 18 30 38 30 30 38 30 18 60 1c 60     ..`.p.080080.`.`
    2530:	0c 60 0c c0 06 c0 06 c0 07 80 03 80 00 00 00 00     .`..............
	...
    2554:	60 0c 60 0c 60 0c 61 8c 63 8c 73 8c 32 cc 32 cc     `.`.`.a.c.s.2.2.
    2564:	36 6c 34 68 34 68 1c 38 1c 38 00 00 00 00 00 00     6l4h4h.8.8......
	...
    2584:	00 00 70 1c 38 38 1c 70 0c 60 0e e0 07 c0 03 80     ..p.88.p.`......
    2594:	07 c0 06 e0 0c 60 1c 70 38 38 70 1c 00 00 00 00     .....`.p88p.....
	...
    25b8:	60 18 70 38 30 38 38 30 38 30 18 60 1c 60 0c 60     `.p8088080.`.`.`
    25c8:	0e c0 06 c0 06 80 03 80 03 80 03 00 07 00 0e 00     ................
    25d8:	fc 00 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    25e8:	00 00 3f f0 3f f0 00 60 00 c0 01 c0 01 80 03 00     ..?.?..`........
    25f8:	06 00 0e 00 0c 00 18 00 3f f0 3f f0 00 00 00 00     ........?.?.....
    2608:	00 00 00 00 00 00                                   ......

0000260e <__ctors_end>:
    260e:	11 24       	eor	r1, r1
    2610:	1f be       	out	0x3f, r1	; 63
    2612:	cf ef       	ldi	r28, 0xFF	; 255
    2614:	d0 e1       	ldi	r29, 0x10	; 16
    2616:	de bf       	out	0x3e, r29	; 62
    2618:	cd bf       	out	0x3d, r28	; 61

0000261a <__do_copy_data>:
    261a:	16 e0       	ldi	r17, 0x06	; 6
    261c:	a0 e0       	ldi	r26, 0x00	; 0
    261e:	b1 e0       	ldi	r27, 0x01	; 1
    2620:	e0 ef       	ldi	r30, 0xF0	; 240
    2622:	f8 e5       	ldi	r31, 0x58	; 88
    2624:	02 c0       	rjmp	.+4      	; 0x262a <__do_copy_data+0x10>
    2626:	05 90       	lpm	r0, Z+
    2628:	0d 92       	st	X+, r0
    262a:	a2 30       	cpi	r26, 0x02	; 2
    262c:	b1 07       	cpc	r27, r17
    262e:	d9 f7       	brne	.-10     	; 0x2626 <__do_copy_data+0xc>

00002630 <__do_clear_bss>:
    2630:	26 e0       	ldi	r18, 0x06	; 6
    2632:	a2 e0       	ldi	r26, 0x02	; 2
    2634:	b6 e0       	ldi	r27, 0x06	; 6
    2636:	01 c0       	rjmp	.+2      	; 0x263a <.do_clear_bss_start>

00002638 <.do_clear_bss_loop>:
    2638:	1d 92       	st	X+, r1

0000263a <.do_clear_bss_start>:
    263a:	a1 31       	cpi	r26, 0x11	; 17
    263c:	b2 07       	cpc	r27, r18
    263e:	e1 f7       	brne	.-8      	; 0x2638 <.do_clear_bss_loop>
    2640:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <main>
    2644:	0c 94 76 2c 	jmp	0x58ec	; 0x58ec <_exit>

00002648 <__bad_interrupt>:
    2648:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000264c <CAN_init>:
	if(mob>=0)CAN_TXMOB(mob, 2, tData, 0, 2); //transmit registration and do not wait for finish
	return mob;
}

uint8_t CAN_init()
{
    264c:	cf 93       	push	r28
    264e:	df 93       	push	r29
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
    2654:	2f 97       	sbiw	r28, 0x0f	; 15
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	de bf       	out	0x3e, r29	; 62
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	cd bf       	out	0x3d, r28	; 61
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
    2660:	88 ed       	ldi	r24, 0xD8	; 216
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	21 e0       	ldi	r18, 0x01	; 1
    2666:	fc 01       	movw	r30, r24
    2668:	20 83       	st	Z, r18
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
    266a:	19 82       	std	Y+1, r1	; 0x01
    266c:	22 c0       	rjmp	.+68     	; 0x26b2 <CAN_init+0x66>
	{
		CANPAGE = (mobCount << 4);		//select the message object to modify
    266e:	8d ee       	ldi	r24, 0xED	; 237
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	29 81       	ldd	r18, Y+1	; 0x01
    2674:	22 95       	swap	r18
    2676:	20 7f       	andi	r18, 0xF0	; 240
    2678:	fc 01       	movw	r30, r24
    267a:	20 83       	st	Z, r18
		CANCDMOB = 0;					//make sure we do not do any actions on this mob.
    267c:	8f ee       	ldi	r24, 0xEF	; 239
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	fc 01       	movw	r30, r24
    2682:	10 82       	st	Z, r1
		CANSTMOB = 0;					//make sure no interrupts are set.
    2684:	8e ee       	ldi	r24, 0xEE	; 238
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	fc 01       	movw	r30, r24
    268a:	10 82       	st	Z, r1
		CANIDM1 = 0;
    268c:	87 ef       	ldi	r24, 0xF7	; 247
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	fc 01       	movw	r30, r24
    2692:	10 82       	st	Z, r1
		CANIDM2 = 0;
    2694:	86 ef       	ldi	r24, 0xF6	; 246
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	fc 01       	movw	r30, r24
    269a:	10 82       	st	Z, r1
		CANIDM3 = 0;
    269c:	85 ef       	ldi	r24, 0xF5	; 245
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	fc 01       	movw	r30, r24
    26a2:	10 82       	st	Z, r1
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
    26a4:	84 ef       	ldi	r24, 0xF4	; 244
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	fc 01       	movw	r30, r24
    26aa:	10 82       	st	Z, r1

uint8_t CAN_init()
{
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	8f 5f       	subi	r24, 0xFF	; 255
    26b0:	89 83       	std	Y+1, r24	; 0x01
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	86 30       	cpi	r24, 0x06	; 6
    26b6:	d8 f2       	brcs	.-74     	; 0x266e <CAN_init+0x22>
		CANIDM1 = 0;
		CANIDM2 = 0;
		CANIDM3 = 0;
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
	}
	CANBT1 = 0x0E;		//these registers control speed of communication
    26b8:	82 ee       	ldi	r24, 0xE2	; 226
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	2e e0       	ldi	r18, 0x0E	; 14
    26be:	fc 01       	movw	r30, r24
    26c0:	20 83       	st	Z, r18
	CANBT2 = 0x04;		//currently with these values, it is 250kbps
    26c2:	83 ee       	ldi	r24, 0xE3	; 227
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	24 e0       	ldi	r18, 0x04	; 4
    26c8:	fc 01       	movw	r30, r24
    26ca:	20 83       	st	Z, r18
	CANBT3 = 0x13;		//with 8 TQ per bit.
    26cc:	84 ee       	ldi	r24, 0xE4	; 228
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	23 e1       	ldi	r18, 0x13	; 19
    26d2:	fc 01       	movw	r30, r24
    26d4:	20 83       	st	Z, r18

	CANIE2 = (1 << IEMOB4)|(1 << IEMOB5);		//enable interrupts on MOB 4 and 5 for receiving
    26d6:	8e ed       	ldi	r24, 0xDE	; 222
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	20 e3       	ldi	r18, 0x30	; 48
    26dc:	fc 01       	movw	r30, r24
    26de:	20 83       	st	Z, r18
	CANGIE = (1 << ENRX)|(1 << ENIT);		//enable receive interrupt; enable global CAN interrupt (all interrupts)
    26e0:	8b ed       	ldi	r24, 0xDB	; 219
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	20 ea       	ldi	r18, 0xA0	; 160
    26e6:	fc 01       	movw	r30, r24
    26e8:	20 83       	st	Z, r18
	//put other initialisation functions here.

	CANGCON = (1 << ENASTB);    // Enable the CAN. 
    26ea:	88 ed       	ldi	r24, 0xD8	; 216
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	22 e0       	ldi	r18, 0x02	; 2
    26f0:	fc 01       	movw	r30, r24
    26f2:	20 83       	st	Z, r18
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	a8 e4       	ldi	r26, 0x48	; 72
    26fa:	b2 e4       	ldi	r27, 0x42	; 66
    26fc:	8a 83       	std	Y+2, r24	; 0x02
    26fe:	9b 83       	std	Y+3, r25	; 0x03
    2700:	ac 83       	std	Y+4, r26	; 0x04
    2702:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	4a e7       	ldi	r20, 0x7A	; 122
    270a:	55 e4       	ldi	r21, 0x45	; 69
    270c:	6a 81       	ldd	r22, Y+2	; 0x02
    270e:	7b 81       	ldd	r23, Y+3	; 0x03
    2710:	8c 81       	ldd	r24, Y+4	; 0x04
    2712:	9d 81       	ldd	r25, Y+5	; 0x05
    2714:	0e 94 30 2b 	call	0x5660	; 0x5660 <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	8e 83       	std	Y+6, r24	; 0x06
    271e:	9f 83       	std	Y+7, r25	; 0x07
    2720:	a8 87       	std	Y+8, r26	; 0x08
    2722:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e8       	ldi	r20, 0x80	; 128
    272a:	5f e3       	ldi	r21, 0x3F	; 63
    272c:	6e 81       	ldd	r22, Y+6	; 0x06
    272e:	7f 81       	ldd	r23, Y+7	; 0x07
    2730:	88 85       	ldd	r24, Y+8	; 0x08
    2732:	99 85       	ldd	r25, Y+9	; 0x09
    2734:	0e 94 e6 29 	call	0x53cc	; 0x53cc <__cmpsf2>
    2738:	88 23       	and	r24, r24
    273a:	2c f4       	brge	.+10     	; 0x2746 <CAN_init+0xfa>
		__ticks = 1;
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	9b 87       	std	Y+11, r25	; 0x0b
    2742:	8a 87       	std	Y+10, r24	; 0x0a
    2744:	3f c0       	rjmp	.+126    	; 0x27c4 <CAN_init+0x178>
	else if (__tmp > 65535)
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	3f ef       	ldi	r19, 0xFF	; 255
    274a:	4f e7       	ldi	r20, 0x7F	; 127
    274c:	57 e4       	ldi	r21, 0x47	; 71
    274e:	6e 81       	ldd	r22, Y+6	; 0x06
    2750:	7f 81       	ldd	r23, Y+7	; 0x07
    2752:	88 85       	ldd	r24, Y+8	; 0x08
    2754:	99 85       	ldd	r25, Y+9	; 0x09
    2756:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__gesf2>
    275a:	18 16       	cp	r1, r24
    275c:	4c f5       	brge	.+82     	; 0x27b0 <CAN_init+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e2       	ldi	r20, 0x20	; 32
    2764:	51 e4       	ldi	r21, 0x41	; 65
    2766:	6a 81       	ldd	r22, Y+2	; 0x02
    2768:	7b 81       	ldd	r23, Y+3	; 0x03
    276a:	8c 81       	ldd	r24, Y+4	; 0x04
    276c:	9d 81       	ldd	r25, Y+5	; 0x05
    276e:	0e 94 30 2b 	call	0x5660	; 0x5660 <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	bc 01       	movw	r22, r24
    2778:	cd 01       	movw	r24, r26
    277a:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <__fixunssfsi>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	9b 87       	std	Y+11, r25	; 0x0b
    2784:	8a 87       	std	Y+10, r24	; 0x0a
    2786:	0f c0       	rjmp	.+30     	; 0x27a6 <CAN_init+0x15a>
    2788:	80 e9       	ldi	r24, 0x90	; 144
    278a:	91 e0       	ldi	r25, 0x01	; 1
    278c:	9d 87       	std	Y+13, r25	; 0x0d
    278e:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2790:	8c 85       	ldd	r24, Y+12	; 0x0c
    2792:	9d 85       	ldd	r25, Y+13	; 0x0d
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <CAN_init+0x148>
    2798:	9d 87       	std	Y+13, r25	; 0x0d
    279a:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279c:	8a 85       	ldd	r24, Y+10	; 0x0a
    279e:	9b 85       	ldd	r25, Y+11	; 0x0b
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	9b 87       	std	Y+11, r25	; 0x0b
    27a4:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    27a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    27aa:	89 2b       	or	r24, r25
    27ac:	69 f7       	brne	.-38     	; 0x2788 <CAN_init+0x13c>
    27ae:	14 c0       	rjmp	.+40     	; 0x27d8 <CAN_init+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b0:	6e 81       	ldd	r22, Y+6	; 0x06
    27b2:	7f 81       	ldd	r23, Y+7	; 0x07
    27b4:	88 85       	ldd	r24, Y+8	; 0x08
    27b6:	99 85       	ldd	r25, Y+9	; 0x09
    27b8:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	9b 87       	std	Y+11, r25	; 0x0b
    27c2:	8a 87       	std	Y+10, r24	; 0x0a
    27c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    27c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    27c8:	9f 87       	std	Y+15, r25	; 0x0f
    27ca:	8e 87       	std	Y+14, r24	; 0x0e
    27cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    27ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	f1 f7       	brne	.-4      	; 0x27d0 <CAN_init+0x184>
    27d4:	9f 87       	std	Y+15, r25	; 0x0f
    27d6:	8e 87       	std	Y+14, r24	; 0x0e
	_delay_ms(50);
	if(!(CANGSTA & (1<<ENFG)))return 1;
    27d8:	89 ed       	ldi	r24, 0xD9	; 217
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	fc 01       	movw	r30, r24
    27de:	80 81       	ld	r24, Z
    27e0:	88 2f       	mov	r24, r24
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	84 70       	andi	r24, 0x04	; 4
    27e6:	99 27       	eor	r25, r25
    27e8:	89 2b       	or	r24, r25
    27ea:	11 f4       	brne	.+4      	; 0x27f0 <CAN_init+0x1a4>
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	01 c0       	rjmp	.+2      	; 0x27f2 <CAN_init+0x1a6>
	return 0;
    27f0:	80 e0       	ldi	r24, 0x00	; 0
}
    27f2:	2f 96       	adiw	r28, 0x0f	; 15
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61
    27fe:	df 91       	pop	r29
    2800:	cf 91       	pop	r28
    2802:	08 95       	ret

00002804 <CAN_RXInit>:

void CAN_RXInit(int8_t mob, uint8_t numBytes, uint32_t IDmsk, uint32_t ID)
{
    2804:	ef 92       	push	r14
    2806:	ff 92       	push	r15
    2808:	0f 93       	push	r16
    280a:	1f 93       	push	r17
    280c:	cf 93       	push	r28
    280e:	df 93       	push	r29
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
    2814:	2a 97       	sbiw	r28, 0x0a	; 10
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	de bf       	out	0x3e, r29	; 62
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	cd bf       	out	0x3d, r28	; 61
    2820:	89 83       	std	Y+1, r24	; 0x01
    2822:	6a 83       	std	Y+2, r22	; 0x02
    2824:	2b 83       	std	Y+3, r18	; 0x03
    2826:	3c 83       	std	Y+4, r19	; 0x04
    2828:	4d 83       	std	Y+5, r20	; 0x05
    282a:	5e 83       	std	Y+6, r21	; 0x06
    282c:	ef 82       	std	Y+7, r14	; 0x07
    282e:	f8 86       	std	Y+8, r15	; 0x08
    2830:	09 87       	std	Y+9, r16	; 0x09
    2832:	1a 87       	std	Y+10, r17	; 0x0a
	CANPAGE = ( mob << 4);		//use the mobth mob for receiving.
    2834:	8d ee       	ldi	r24, 0xED	; 237
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	29 81       	ldd	r18, Y+1	; 0x01
    283a:	22 95       	swap	r18
    283c:	20 7f       	andi	r18, 0xF0	; 240
    283e:	fc 01       	movw	r30, r24
    2840:	20 83       	st	Z, r18
	//IDEMSK is sent with the CAN packet, we choose to not require that it be set, and instead focus on ID match
	CANIDM4 = (IDmsk<<03) & 0xF8;	//shifts the value sets RTRMSK to zero and IDEMSK to 0
    2842:	84 ef       	ldi	r24, 0xF4	; 244
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	2b 81       	ldd	r18, Y+3	; 0x03
    2848:	22 0f       	add	r18, r18
    284a:	22 0f       	add	r18, r18
    284c:	22 0f       	add	r18, r18
    284e:	fc 01       	movw	r30, r24
    2850:	20 83       	st	Z, r18
	CANIDM3 = (IDmsk>>05) & 0xFF;
    2852:	25 ef       	ldi	r18, 0xF5	; 245
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	8b 81       	ldd	r24, Y+3	; 0x03
    2858:	9c 81       	ldd	r25, Y+4	; 0x04
    285a:	ad 81       	ldd	r26, Y+5	; 0x05
    285c:	be 81       	ldd	r27, Y+6	; 0x06
    285e:	68 94       	set
    2860:	14 f8       	bld	r1, 4
    2862:	b6 95       	lsr	r27
    2864:	a7 95       	ror	r26
    2866:	97 95       	ror	r25
    2868:	87 95       	ror	r24
    286a:	16 94       	lsr	r1
    286c:	d1 f7       	brne	.-12     	; 0x2862 <CAN_RXInit+0x5e>
    286e:	f9 01       	movw	r30, r18
    2870:	80 83       	st	Z, r24
	CANIDM2 = (IDmsk>>13) & 0xFF;	
    2872:	26 ef       	ldi	r18, 0xF6	; 246
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	8b 81       	ldd	r24, Y+3	; 0x03
    2878:	9c 81       	ldd	r25, Y+4	; 0x04
    287a:	ad 81       	ldd	r26, Y+5	; 0x05
    287c:	be 81       	ldd	r27, Y+6	; 0x06
    287e:	07 2e       	mov	r0, r23
    2880:	7d e0       	ldi	r23, 0x0D	; 13
    2882:	b6 95       	lsr	r27
    2884:	a7 95       	ror	r26
    2886:	97 95       	ror	r25
    2888:	87 95       	ror	r24
    288a:	7a 95       	dec	r23
    288c:	d1 f7       	brne	.-12     	; 0x2882 <CAN_RXInit+0x7e>
    288e:	70 2d       	mov	r23, r0
    2890:	f9 01       	movw	r30, r18
    2892:	80 83       	st	Z, r24
	CANIDM1 = (IDmsk>>21) & 0xFF;
    2894:	27 ef       	ldi	r18, 0xF7	; 247
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	9c 81       	ldd	r25, Y+4	; 0x04
    289c:	ad 81       	ldd	r26, Y+5	; 0x05
    289e:	be 81       	ldd	r27, Y+6	; 0x06
    28a0:	07 2e       	mov	r0, r23
    28a2:	75 e1       	ldi	r23, 0x15	; 21
    28a4:	b6 95       	lsr	r27
    28a6:	a7 95       	ror	r26
    28a8:	97 95       	ror	r25
    28aa:	87 95       	ror	r24
    28ac:	7a 95       	dec	r23
    28ae:	d1 f7       	brne	.-12     	; 0x28a4 <CAN_RXInit+0xa0>
    28b0:	70 2d       	mov	r23, r0
    28b2:	f9 01       	movw	r30, r18
    28b4:	80 83       	st	Z, r24
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG to 0
    28b6:	80 ef       	ldi	r24, 0xF0	; 240
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	2f 81       	ldd	r18, Y+7	; 0x07
    28bc:	22 0f       	add	r18, r18
    28be:	22 0f       	add	r18, r18
    28c0:	22 0f       	add	r18, r18
    28c2:	fc 01       	movw	r30, r24
    28c4:	20 83       	st	Z, r18
	CANIDT3 = (ID>>05) & 0xFF;
    28c6:	21 ef       	ldi	r18, 0xF1	; 241
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	8f 81       	ldd	r24, Y+7	; 0x07
    28cc:	98 85       	ldd	r25, Y+8	; 0x08
    28ce:	a9 85       	ldd	r26, Y+9	; 0x09
    28d0:	ba 85       	ldd	r27, Y+10	; 0x0a
    28d2:	68 94       	set
    28d4:	14 f8       	bld	r1, 4
    28d6:	b6 95       	lsr	r27
    28d8:	a7 95       	ror	r26
    28da:	97 95       	ror	r25
    28dc:	87 95       	ror	r24
    28de:	16 94       	lsr	r1
    28e0:	d1 f7       	brne	.-12     	; 0x28d6 <CAN_RXInit+0xd2>
    28e2:	f9 01       	movw	r30, r18
    28e4:	80 83       	st	Z, r24
	CANIDT2 = (ID>>13) & 0xFF;
    28e6:	22 ef       	ldi	r18, 0xF2	; 242
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	8f 81       	ldd	r24, Y+7	; 0x07
    28ec:	98 85       	ldd	r25, Y+8	; 0x08
    28ee:	a9 85       	ldd	r26, Y+9	; 0x09
    28f0:	ba 85       	ldd	r27, Y+10	; 0x0a
    28f2:	07 2e       	mov	r0, r23
    28f4:	7d e0       	ldi	r23, 0x0D	; 13
    28f6:	b6 95       	lsr	r27
    28f8:	a7 95       	ror	r26
    28fa:	97 95       	ror	r25
    28fc:	87 95       	ror	r24
    28fe:	7a 95       	dec	r23
    2900:	d1 f7       	brne	.-12     	; 0x28f6 <CAN_RXInit+0xf2>
    2902:	70 2d       	mov	r23, r0
    2904:	f9 01       	movw	r30, r18
    2906:	80 83       	st	Z, r24
	CANIDT1 = (ID>>21) & 0xFF;
    2908:	23 ef       	ldi	r18, 0xF3	; 243
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	8f 81       	ldd	r24, Y+7	; 0x07
    290e:	98 85       	ldd	r25, Y+8	; 0x08
    2910:	a9 85       	ldd	r26, Y+9	; 0x09
    2912:	ba 85       	ldd	r27, Y+10	; 0x0a
    2914:	07 2e       	mov	r0, r23
    2916:	75 e1       	ldi	r23, 0x15	; 21
    2918:	b6 95       	lsr	r27
    291a:	a7 95       	ror	r26
    291c:	97 95       	ror	r25
    291e:	87 95       	ror	r24
    2920:	7a 95       	dec	r23
    2922:	d1 f7       	brne	.-12     	; 0x2918 <CAN_RXInit+0x114>
    2924:	70 2d       	mov	r23, r0
    2926:	f9 01       	movw	r30, r18
    2928:	80 83       	st	Z, r24
	
	CANCDMOB = (numBytes << DLC0)|(2<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.
    292a:	8f ee       	ldi	r24, 0xEF	; 239
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	2a 81       	ldd	r18, Y+2	; 0x02
    2930:	20 69       	ori	r18, 0x90	; 144
    2932:	fc 01       	movw	r30, r24
    2934:	20 83       	st	Z, r18
}
    2936:	2a 96       	adiw	r28, 0x0a	; 10
    2938:	0f b6       	in	r0, 0x3f	; 63
    293a:	f8 94       	cli
    293c:	de bf       	out	0x3e, r29	; 62
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	cd bf       	out	0x3d, r28	; 61
    2942:	df 91       	pop	r29
    2944:	cf 91       	pop	r28
    2946:	1f 91       	pop	r17
    2948:	0f 91       	pop	r16
    294a:	ff 90       	pop	r15
    294c:	ef 90       	pop	r14
    294e:	08 95       	ret

00002950 <CAN_TXMOB>:

void CAN_TXMOB(int8_t mob, uint8_t numBytes, uint8_t * data, uint32_t ID, uint8_t ms_loop_until_TXOK)
{
    2950:	ef 92       	push	r14
    2952:	0f 93       	push	r16
    2954:	1f 93       	push	r17
    2956:	cf 93       	push	r28
    2958:	df 93       	push	r29
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	69 97       	sbiw	r28, 0x19	; 25
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
    296a:	89 8b       	std	Y+17, r24	; 0x11
    296c:	6a 8b       	std	Y+18, r22	; 0x12
    296e:	5c 8b       	std	Y+20, r21	; 0x14
    2970:	4b 8b       	std	Y+19, r20	; 0x13
    2972:	0d 8b       	std	Y+21, r16	; 0x15
    2974:	1e 8b       	std	Y+22, r17	; 0x16
    2976:	2f 8b       	std	Y+23, r18	; 0x17
    2978:	38 8f       	std	Y+24, r19	; 0x18
    297a:	e9 8e       	std	Y+25, r14	; 0x19
	CANPAGE = ( mob << 4);		//use the mobth mob
    297c:	8d ee       	ldi	r24, 0xED	; 237
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	29 89       	ldd	r18, Y+17	; 0x11
    2982:	22 95       	swap	r18
    2984:	20 7f       	andi	r18, 0xF0	; 240
    2986:	fc 01       	movw	r30, r24
    2988:	20 83       	st	Z, r18
	//IDEMSK is sent with the CAN packet, we choose to not set it, and instead the receiver will focus on ID match
	CANSTMOB &= ~(1<<TXOK);
    298a:	8e ee       	ldi	r24, 0xEE	; 238
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	2e ee       	ldi	r18, 0xEE	; 238
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	f9 01       	movw	r30, r18
    2994:	20 81       	ld	r18, Z
    2996:	2f 7b       	andi	r18, 0xBF	; 191
    2998:	fc 01       	movw	r30, r24
    299a:	20 83       	st	Z, r18
	CANIDM4 = 0;
    299c:	84 ef       	ldi	r24, 0xF4	; 244
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	fc 01       	movw	r30, r24
    29a2:	10 82       	st	Z, r1
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG
    29a4:	80 ef       	ldi	r24, 0xF0	; 240
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	2d 89       	ldd	r18, Y+21	; 0x15
    29aa:	22 0f       	add	r18, r18
    29ac:	22 0f       	add	r18, r18
    29ae:	22 0f       	add	r18, r18
    29b0:	fc 01       	movw	r30, r24
    29b2:	20 83       	st	Z, r18
	CANIDT3 = (ID>>05) & 0xFF;
    29b4:	21 ef       	ldi	r18, 0xF1	; 241
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	8d 89       	ldd	r24, Y+21	; 0x15
    29ba:	9e 89       	ldd	r25, Y+22	; 0x16
    29bc:	af 89       	ldd	r26, Y+23	; 0x17
    29be:	b8 8d       	ldd	r27, Y+24	; 0x18
    29c0:	68 94       	set
    29c2:	14 f8       	bld	r1, 4
    29c4:	b6 95       	lsr	r27
    29c6:	a7 95       	ror	r26
    29c8:	97 95       	ror	r25
    29ca:	87 95       	ror	r24
    29cc:	16 94       	lsr	r1
    29ce:	d1 f7       	brne	.-12     	; 0x29c4 <CAN_TXMOB+0x74>
    29d0:	f9 01       	movw	r30, r18
    29d2:	80 83       	st	Z, r24
	CANIDT2 = (ID>>13) & 0xFF;
    29d4:	22 ef       	ldi	r18, 0xF2	; 242
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	8d 89       	ldd	r24, Y+21	; 0x15
    29da:	9e 89       	ldd	r25, Y+22	; 0x16
    29dc:	af 89       	ldd	r26, Y+23	; 0x17
    29de:	b8 8d       	ldd	r27, Y+24	; 0x18
    29e0:	07 2e       	mov	r0, r23
    29e2:	7d e0       	ldi	r23, 0x0D	; 13
    29e4:	b6 95       	lsr	r27
    29e6:	a7 95       	ror	r26
    29e8:	97 95       	ror	r25
    29ea:	87 95       	ror	r24
    29ec:	7a 95       	dec	r23
    29ee:	d1 f7       	brne	.-12     	; 0x29e4 <CAN_TXMOB+0x94>
    29f0:	70 2d       	mov	r23, r0
    29f2:	f9 01       	movw	r30, r18
    29f4:	80 83       	st	Z, r24
	CANIDT1 = (ID>>21) & 0xFF;
    29f6:	23 ef       	ldi	r18, 0xF3	; 243
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	8d 89       	ldd	r24, Y+21	; 0x15
    29fc:	9e 89       	ldd	r25, Y+22	; 0x16
    29fe:	af 89       	ldd	r26, Y+23	; 0x17
    2a00:	b8 8d       	ldd	r27, Y+24	; 0x18
    2a02:	07 2e       	mov	r0, r23
    2a04:	75 e1       	ldi	r23, 0x15	; 21
    2a06:	b6 95       	lsr	r27
    2a08:	a7 95       	ror	r26
    2a0a:	97 95       	ror	r25
    2a0c:	87 95       	ror	r24
    2a0e:	7a 95       	dec	r23
    2a10:	d1 f7       	brne	.-12     	; 0x2a06 <CAN_TXMOB+0xb6>
    2a12:	70 2d       	mov	r23, r0
    2a14:	f9 01       	movw	r30, r18
    2a16:	80 83       	st	Z, r24
	for(uint8_t i = 0; i < numBytes; i++)
    2a18:	19 82       	std	Y+1, r1	; 0x01
    2a1a:	10 c0       	rjmp	.+32     	; 0x2a3c <CAN_TXMOB+0xec>
	{
		CANMSG = data[i];
    2a1c:	8a ef       	ldi	r24, 0xFA	; 250
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	29 81       	ldd	r18, Y+1	; 0x01
    2a22:	22 2f       	mov	r18, r18
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	4b 89       	ldd	r20, Y+19	; 0x13
    2a28:	5c 89       	ldd	r21, Y+20	; 0x14
    2a2a:	24 0f       	add	r18, r20
    2a2c:	35 1f       	adc	r19, r21
    2a2e:	f9 01       	movw	r30, r18
    2a30:	20 81       	ld	r18, Z
    2a32:	fc 01       	movw	r30, r24
    2a34:	20 83       	st	Z, r18
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG
	CANIDT3 = (ID>>05) & 0xFF;
	CANIDT2 = (ID>>13) & 0xFF;
	CANIDT1 = (ID>>21) & 0xFF;
	for(uint8_t i = 0; i < numBytes; i++)
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	8f 5f       	subi	r24, 0xFF	; 255
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    2a3c:	99 81       	ldd	r25, Y+1	; 0x01
    2a3e:	8a 89       	ldd	r24, Y+18	; 0x12
    2a40:	98 17       	cp	r25, r24
    2a42:	60 f3       	brcs	.-40     	; 0x2a1c <CAN_TXMOB+0xcc>
	{
		CANMSG = data[i];
	}
	CANCDMOB = (numBytes << DLC0)|(1<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.
    2a44:	8f ee       	ldi	r24, 0xEF	; 239
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	2a 89       	ldd	r18, Y+18	; 0x12
    2a4a:	20 65       	ori	r18, 0x50	; 80
    2a4c:	fc 01       	movw	r30, r24
    2a4e:	20 83       	st	Z, r18

	for(uint8_t i = 0; i < ms_loop_until_TXOK; i++)	//loop until specified wait time is up
    2a50:	1a 82       	std	Y+2, r1	; 0x02
    2a52:	80 c0       	rjmp	.+256    	; 0x2b54 <CAN_TXMOB+0x204>
	{
		if((CANSTMOB & (1 << TXOK)))break;		//check for transmission complete
    2a54:	8e ee       	ldi	r24, 0xEE	; 238
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	fc 01       	movw	r30, r24
    2a5a:	80 81       	ld	r24, Z
    2a5c:	88 2f       	mov	r24, r24
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	80 74       	andi	r24, 0x40	; 64
    2a62:	99 27       	eor	r25, r25
    2a64:	89 2b       	or	r24, r25
    2a66:	09 f0       	breq	.+2      	; 0x2a6a <CAN_TXMOB+0x11a>
    2a68:	7a c0       	rjmp	.+244    	; 0x2b5e <CAN_TXMOB+0x20e>
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	a0 e8       	ldi	r26, 0x80	; 128
    2a70:	bf e3       	ldi	r27, 0x3F	; 63
    2a72:	8b 83       	std	Y+3, r24	; 0x03
    2a74:	9c 83       	std	Y+4, r25	; 0x04
    2a76:	ad 83       	std	Y+5, r26	; 0x05
    2a78:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	4a e7       	ldi	r20, 0x7A	; 122
    2a80:	55 e4       	ldi	r21, 0x45	; 69
    2a82:	6b 81       	ldd	r22, Y+3	; 0x03
    2a84:	7c 81       	ldd	r23, Y+4	; 0x04
    2a86:	8d 81       	ldd	r24, Y+5	; 0x05
    2a88:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8a:	0e 94 30 2b 	call	0x5660	; 0x5660 <__mulsf3>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	8f 83       	std	Y+7, r24	; 0x07
    2a94:	98 87       	std	Y+8, r25	; 0x08
    2a96:	a9 87       	std	Y+9, r26	; 0x09
    2a98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	40 e8       	ldi	r20, 0x80	; 128
    2aa0:	5f e3       	ldi	r21, 0x3F	; 63
    2aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa4:	78 85       	ldd	r23, Y+8	; 0x08
    2aa6:	89 85       	ldd	r24, Y+9	; 0x09
    2aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aaa:	0e 94 e6 29 	call	0x53cc	; 0x53cc <__cmpsf2>
    2aae:	88 23       	and	r24, r24
    2ab0:	2c f4       	brge	.+10     	; 0x2abc <CAN_TXMOB+0x16c>
		__ticks = 1;
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	9c 87       	std	Y+12, r25	; 0x0c
    2ab8:	8b 87       	std	Y+11, r24	; 0x0b
    2aba:	3f c0       	rjmp	.+126    	; 0x2b3a <CAN_TXMOB+0x1ea>
	else if (__tmp > 65535)
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	3f ef       	ldi	r19, 0xFF	; 255
    2ac0:	4f e7       	ldi	r20, 0x7F	; 127
    2ac2:	57 e4       	ldi	r21, 0x47	; 71
    2ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac6:	78 85       	ldd	r23, Y+8	; 0x08
    2ac8:	89 85       	ldd	r24, Y+9	; 0x09
    2aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2acc:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__gesf2>
    2ad0:	18 16       	cp	r1, r24
    2ad2:	4c f5       	brge	.+82     	; 0x2b26 <CAN_TXMOB+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	40 e2       	ldi	r20, 0x20	; 32
    2ada:	51 e4       	ldi	r21, 0x41	; 65
    2adc:	6b 81       	ldd	r22, Y+3	; 0x03
    2ade:	7c 81       	ldd	r23, Y+4	; 0x04
    2ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae4:	0e 94 30 2b 	call	0x5660	; 0x5660 <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	bc 01       	movw	r22, r24
    2aee:	cd 01       	movw	r24, r26
    2af0:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <__fixunssfsi>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	9c 87       	std	Y+12, r25	; 0x0c
    2afa:	8b 87       	std	Y+11, r24	; 0x0b
    2afc:	0f c0       	rjmp	.+30     	; 0x2b1c <CAN_TXMOB+0x1cc>
    2afe:	80 e9       	ldi	r24, 0x90	; 144
    2b00:	91 e0       	ldi	r25, 0x01	; 1
    2b02:	9e 87       	std	Y+14, r25	; 0x0e
    2b04:	8d 87       	std	Y+13, r24	; 0x0d
    2b06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	f1 f7       	brne	.-4      	; 0x2b0a <CAN_TXMOB+0x1ba>
    2b0e:	9e 87       	std	Y+14, r25	; 0x0e
    2b10:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b12:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b14:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	9c 87       	std	Y+12, r25	; 0x0c
    2b1a:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b20:	89 2b       	or	r24, r25
    2b22:	69 f7       	brne	.-38     	; 0x2afe <CAN_TXMOB+0x1ae>
    2b24:	14 c0       	rjmp	.+40     	; 0x2b4e <CAN_TXMOB+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b26:	6f 81       	ldd	r22, Y+7	; 0x07
    2b28:	78 85       	ldd	r23, Y+8	; 0x08
    2b2a:	89 85       	ldd	r24, Y+9	; 0x09
    2b2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2e:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <__fixunssfsi>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	9c 87       	std	Y+12, r25	; 0x0c
    2b38:	8b 87       	std	Y+11, r24	; 0x0b
    2b3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b3e:	98 8b       	std	Y+16, r25	; 0x10
    2b40:	8f 87       	std	Y+15, r24	; 0x0f
    2b42:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b44:	98 89       	ldd	r25, Y+16	; 0x10
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	f1 f7       	brne	.-4      	; 0x2b46 <CAN_TXMOB+0x1f6>
    2b4a:	98 8b       	std	Y+16, r25	; 0x10
    2b4c:	8f 87       	std	Y+15, r24	; 0x0f
	{
		CANMSG = data[i];
	}
	CANCDMOB = (numBytes << DLC0)|(1<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.

	for(uint8_t i = 0; i < ms_loop_until_TXOK; i++)	//loop until specified wait time is up
    2b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b50:	8f 5f       	subi	r24, 0xFF	; 255
    2b52:	8a 83       	std	Y+2, r24	; 0x02
    2b54:	9a 81       	ldd	r25, Y+2	; 0x02
    2b56:	89 8d       	ldd	r24, Y+25	; 0x19
    2b58:	98 17       	cp	r25, r24
    2b5a:	08 f4       	brcc	.+2      	; 0x2b5e <CAN_TXMOB+0x20e>
    2b5c:	7b cf       	rjmp	.-266    	; 0x2a54 <CAN_TXMOB+0x104>
	{
		if((CANSTMOB & (1 << TXOK)))break;		//check for transmission complete
		_delay_ms(1);								//do nothing for 1 ms
	}
}
    2b5e:	69 96       	adiw	r28, 0x19	; 25
    2b60:	0f b6       	in	r0, 0x3f	; 63
    2b62:	f8 94       	cli
    2b64:	de bf       	out	0x3e, r29	; 62
    2b66:	0f be       	out	0x3f, r0	; 63
    2b68:	cd bf       	out	0x3d, r28	; 61
    2b6a:	df 91       	pop	r29
    2b6c:	cf 91       	pop	r28
    2b6e:	1f 91       	pop	r17
    2b70:	0f 91       	pop	r16
    2b72:	ef 90       	pop	r14
    2b74:	08 95       	ret

00002b76 <CAN_findFreeTXMOB>:

int8_t CAN_findFreeTXMOB()
{
    2b76:	cf 93       	push	r28
    2b78:	df 93       	push	r29
    2b7a:	1f 92       	push	r1
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
    2b80:	19 82       	std	Y+1, r1	; 0x01
    2b82:	20 c0       	rjmp	.+64     	; 0x2bc4 <CAN_findFreeTXMOB+0x4e>
	{
		CANPAGE = ( i << 4);		//use the mobth mob
    2b84:	8d ee       	ldi	r24, 0xED	; 237
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	29 81       	ldd	r18, Y+1	; 0x01
    2b8a:	22 95       	swap	r18
    2b8c:	20 7f       	andi	r18, 0xF0	; 240
    2b8e:	fc 01       	movw	r30, r24
    2b90:	20 83       	st	Z, r18
		if((CANSTMOB & (1<<TXOK)) || !(CANCDMOB & (1<<CONMOB0))) //if the transmission is complete or the mob has not been setup yet
    2b92:	8e ee       	ldi	r24, 0xEE	; 238
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	fc 01       	movw	r30, r24
    2b98:	80 81       	ld	r24, Z
    2b9a:	88 2f       	mov	r24, r24
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	80 74       	andi	r24, 0x40	; 64
    2ba0:	99 27       	eor	r25, r25
    2ba2:	89 2b       	or	r24, r25
    2ba4:	51 f4       	brne	.+20     	; 0x2bba <CAN_findFreeTXMOB+0x44>
    2ba6:	8f ee       	ldi	r24, 0xEF	; 239
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	fc 01       	movw	r30, r24
    2bac:	80 81       	ld	r24, Z
    2bae:	88 2f       	mov	r24, r24
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	80 74       	andi	r24, 0x40	; 64
    2bb4:	99 27       	eor	r25, r25
    2bb6:	89 2b       	or	r24, r25
    2bb8:	11 f4       	brne	.+4      	; 0x2bbe <CAN_findFreeTXMOB+0x48>
		{
			return i;			//send back the free mob
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	07 c0       	rjmp	.+14     	; 0x2bcc <CAN_findFreeTXMOB+0x56>
	}
}

int8_t CAN_findFreeTXMOB()
{
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	8f 5f       	subi	r24, 0xFF	; 255
    2bc2:	89 83       	std	Y+1, r24	; 0x01
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	84 30       	cpi	r24, 0x04	; 4
    2bc8:	e8 f2       	brcs	.-70     	; 0x2b84 <CAN_findFreeTXMOB+0xe>
		if((CANSTMOB & (1<<TXOK)) || !(CANCDMOB & (1<<CONMOB0))) //if the transmission is complete or the mob has not been setup yet
		{
			return i;			//send back the free mob
		}
	}
	return -1;		//otherwise, none are free
    2bca:	8f ef       	ldi	r24, 0xFF	; 255
    2bcc:	0f 90       	pop	r0
    2bce:	df 91       	pop	r29
    2bd0:	cf 91       	pop	r28
    2bd2:	08 95       	ret

00002bd4 <__vector_10>:
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  ISR
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

ISR(INT3_vect)
{
    2bd4:	1f 92       	push	r1
    2bd6:	0f 92       	push	r0
    2bd8:	00 90 5f 00 	lds	r0, 0x005F
    2bdc:	0f 92       	push	r0
    2bde:	11 24       	eor	r1, r1
    2be0:	2f 93       	push	r18
    2be2:	8f 93       	push	r24
    2be4:	9f 93       	push	r25
    2be6:	ef 93       	push	r30
    2be8:	ff 93       	push	r31
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
	SMCR = (0<<SM2)|(0<<SM1)|(1<<SM0)|(0<<SE);		//disable the mode, and disable the enable bit.
    2bf2:	83 e5       	ldi	r24, 0x53	; 83
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	22 e0       	ldi	r18, 0x02	; 2
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	20 83       	st	Z, r18
}
    2bfc:	df 91       	pop	r29
    2bfe:	cf 91       	pop	r28
    2c00:	ff 91       	pop	r31
    2c02:	ef 91       	pop	r30
    2c04:	9f 91       	pop	r25
    2c06:	8f 91       	pop	r24
    2c08:	2f 91       	pop	r18
    2c0a:	0f 90       	pop	r0
    2c0c:	00 92 5f 00 	sts	0x005F, r0
    2c10:	0f 90       	pop	r0
    2c12:	1f 90       	pop	r1
    2c14:	18 95       	reti

00002c16 <__vector_18>:

ISR(CAN_INT_vect)
{
    2c16:	1f 92       	push	r1
    2c18:	0f 92       	push	r0
    2c1a:	00 90 5f 00 	lds	r0, 0x005F
    2c1e:	0f 92       	push	r0
    2c20:	11 24       	eor	r1, r1
    2c22:	ef 92       	push	r14
    2c24:	ff 92       	push	r15
    2c26:	0f 93       	push	r16
    2c28:	1f 93       	push	r17
    2c2a:	2f 93       	push	r18
    2c2c:	3f 93       	push	r19
    2c2e:	4f 93       	push	r20
    2c30:	5f 93       	push	r21
    2c32:	6f 93       	push	r22
    2c34:	7f 93       	push	r23
    2c36:	8f 93       	push	r24
    2c38:	9f 93       	push	r25
    2c3a:	af 93       	push	r26
    2c3c:	bf 93       	push	r27
    2c3e:	ef 93       	push	r30
    2c40:	ff 93       	push	r31
    2c42:	cf 93       	push	r28
    2c44:	df 93       	push	r29
    2c46:	00 d0       	rcall	.+0      	; 0x2c48 <__vector_18+0x32>
    2c48:	cd b7       	in	r28, 0x3d	; 61
    2c4a:	de b7       	in	r29, 0x3e	; 62
	//uint8_t authority;
	int8_t mob;
	if((CANSIT2 & (1 << SIT5)))	//we received a CAN message on mob 5, which is set up to receive exclusively from the AMU.
    2c4c:	80 ee       	ldi	r24, 0xE0	; 224
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	fc 01       	movw	r30, r24
    2c52:	80 81       	ld	r24, Z
    2c54:	88 2f       	mov	r24, r24
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	80 72       	andi	r24, 0x20	; 32
    2c5a:	99 27       	eor	r25, r25
    2c5c:	89 2b       	or	r24, r25
    2c5e:	09 f4       	brne	.+2      	; 0x2c62 <__vector_18+0x4c>
    2c60:	d2 c0       	rjmp	.+420    	; 0x2e06 <__vector_18+0x1f0>
	{
		
		CANPAGE = (5 << 4);			//set the canpage to the receiver MOB
    2c62:	8d ee       	ldi	r24, 0xED	; 237
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	20 e5       	ldi	r18, 0x50	; 80
    2c68:	fc 01       	movw	r30, r24
    2c6a:	20 83       	st	Z, r18
		ThrottlePercentageData = CANMSG << 8;
    2c6c:	8a ef       	ldi	r24, 0xFA	; 250
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	fc 01       	movw	r30, r24
    2c72:	80 81       	ld	r24, Z
    2c74:	88 2f       	mov	r24, r24
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	98 2f       	mov	r25, r24
    2c7a:	88 27       	eor	r24, r24
    2c7c:	90 93 03 06 	sts	0x0603, r25
    2c80:	80 93 02 06 	sts	0x0602, r24
		ThrottlePercentageData += CANMSG;
    2c84:	8a ef       	ldi	r24, 0xFA	; 250
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	fc 01       	movw	r30, r24
    2c8a:	80 81       	ld	r24, Z
    2c8c:	28 2f       	mov	r18, r24
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	80 91 02 06 	lds	r24, 0x0602
    2c94:	90 91 03 06 	lds	r25, 0x0603
    2c98:	82 0f       	add	r24, r18
    2c9a:	93 1f       	adc	r25, r19
    2c9c:	90 93 03 06 	sts	0x0603, r25
    2ca0:	80 93 02 06 	sts	0x0602, r24
		ThrottlePercentageData = ThrottlePercentageData * 100 /511; // Scale to percentage
    2ca4:	80 91 02 06 	lds	r24, 0x0602
    2ca8:	90 91 03 06 	lds	r25, 0x0603
    2cac:	24 e6       	ldi	r18, 0x64	; 100
    2cae:	28 9f       	mul	r18, r24
    2cb0:	a0 01       	movw	r20, r0
    2cb2:	29 9f       	mul	r18, r25
    2cb4:	50 0d       	add	r21, r0
    2cb6:	11 24       	eor	r1, r1
    2cb8:	2f ef       	ldi	r18, 0xFF	; 255
    2cba:	31 e0       	ldi	r19, 0x01	; 1
    2cbc:	ca 01       	movw	r24, r20
    2cbe:	b9 01       	movw	r22, r18
    2cc0:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <__udivmodhi4>
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	90 93 03 06 	sts	0x0603, r25
    2cca:	80 93 02 06 	sts	0x0602, r24
		RPMData = CANMSG << 8;
    2cce:	8a ef       	ldi	r24, 0xFA	; 250
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	fc 01       	movw	r30, r24
    2cd4:	80 81       	ld	r24, Z
    2cd6:	88 2f       	mov	r24, r24
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	98 2f       	mov	r25, r24
    2cdc:	88 27       	eor	r24, r24
    2cde:	09 2e       	mov	r0, r25
    2ce0:	00 0c       	add	r0, r0
    2ce2:	aa 0b       	sbc	r26, r26
    2ce4:	bb 0b       	sbc	r27, r27
    2ce6:	80 93 04 06 	sts	0x0604, r24
    2cea:	90 93 05 06 	sts	0x0605, r25
    2cee:	a0 93 06 06 	sts	0x0606, r26
    2cf2:	b0 93 07 06 	sts	0x0607, r27
		RPMData += CANMSG;
    2cf6:	8a ef       	ldi	r24, 0xFA	; 250
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	fc 01       	movw	r30, r24
    2cfc:	80 81       	ld	r24, Z
    2cfe:	28 2f       	mov	r18, r24
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	40 e0       	ldi	r20, 0x00	; 0
    2d04:	50 e0       	ldi	r21, 0x00	; 0
    2d06:	80 91 04 06 	lds	r24, 0x0604
    2d0a:	90 91 05 06 	lds	r25, 0x0605
    2d0e:	a0 91 06 06 	lds	r26, 0x0606
    2d12:	b0 91 07 06 	lds	r27, 0x0607
    2d16:	82 0f       	add	r24, r18
    2d18:	93 1f       	adc	r25, r19
    2d1a:	a4 1f       	adc	r26, r20
    2d1c:	b5 1f       	adc	r27, r21
    2d1e:	80 93 04 06 	sts	0x0604, r24
    2d22:	90 93 05 06 	sts	0x0605, r25
    2d26:	a0 93 06 06 	sts	0x0606, r26
    2d2a:	b0 93 07 06 	sts	0x0607, r27
		GearboxTempData = CANMSG << 8;
    2d2e:	8a ef       	ldi	r24, 0xFA	; 250
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	fc 01       	movw	r30, r24
    2d34:	80 81       	ld	r24, Z
    2d36:	88 2f       	mov	r24, r24
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	98 2f       	mov	r25, r24
    2d3c:	88 27       	eor	r24, r24
    2d3e:	09 2e       	mov	r0, r25
    2d40:	00 0c       	add	r0, r0
    2d42:	aa 0b       	sbc	r26, r26
    2d44:	bb 0b       	sbc	r27, r27
    2d46:	80 93 08 06 	sts	0x0608, r24
    2d4a:	90 93 09 06 	sts	0x0609, r25
    2d4e:	a0 93 0a 06 	sts	0x060A, r26
    2d52:	b0 93 0b 06 	sts	0x060B, r27
		GearboxTempData += CANMSG;
    2d56:	8a ef       	ldi	r24, 0xFA	; 250
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	80 81       	ld	r24, Z
    2d5e:	28 2f       	mov	r18, r24
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 e0       	ldi	r20, 0x00	; 0
    2d64:	50 e0       	ldi	r21, 0x00	; 0
    2d66:	80 91 08 06 	lds	r24, 0x0608
    2d6a:	90 91 09 06 	lds	r25, 0x0609
    2d6e:	a0 91 0a 06 	lds	r26, 0x060A
    2d72:	b0 91 0b 06 	lds	r27, 0x060B
    2d76:	82 0f       	add	r24, r18
    2d78:	93 1f       	adc	r25, r19
    2d7a:	a4 1f       	adc	r26, r20
    2d7c:	b5 1f       	adc	r27, r21
    2d7e:	80 93 08 06 	sts	0x0608, r24
    2d82:	90 93 09 06 	sts	0x0609, r25
    2d86:	a0 93 0a 06 	sts	0x060A, r26
    2d8a:	b0 93 0b 06 	sts	0x060B, r27
		VoltageData = CANMSG << 8;
    2d8e:	8a ef       	ldi	r24, 0xFA	; 250
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	fc 01       	movw	r30, r24
    2d94:	80 81       	ld	r24, Z
    2d96:	88 2f       	mov	r24, r24
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	98 2f       	mov	r25, r24
    2d9c:	88 27       	eor	r24, r24
    2d9e:	09 2e       	mov	r0, r25
    2da0:	00 0c       	add	r0, r0
    2da2:	aa 0b       	sbc	r26, r26
    2da4:	bb 0b       	sbc	r27, r27
    2da6:	80 93 0c 06 	sts	0x060C, r24
    2daa:	90 93 0d 06 	sts	0x060D, r25
    2dae:	a0 93 0e 06 	sts	0x060E, r26
    2db2:	b0 93 0f 06 	sts	0x060F, r27
		VoltageData += CANMSG;
    2db6:	8a ef       	ldi	r24, 0xFA	; 250
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	fc 01       	movw	r30, r24
    2dbc:	80 81       	ld	r24, Z
    2dbe:	28 2f       	mov	r18, r24
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	40 e0       	ldi	r20, 0x00	; 0
    2dc4:	50 e0       	ldi	r21, 0x00	; 0
    2dc6:	80 91 0c 06 	lds	r24, 0x060C
    2dca:	90 91 0d 06 	lds	r25, 0x060D
    2dce:	a0 91 0e 06 	lds	r26, 0x060E
    2dd2:	b0 91 0f 06 	lds	r27, 0x060F
    2dd6:	82 0f       	add	r24, r18
    2dd8:	93 1f       	adc	r25, r19
    2dda:	a4 1f       	adc	r26, r20
    2ddc:	b5 1f       	adc	r27, r21
    2dde:	80 93 0c 06 	sts	0x060C, r24
    2de2:	90 93 0d 06 	sts	0x060D, r25
    2de6:	a0 93 0e 06 	sts	0x060E, r26
    2dea:	b0 93 0f 06 	sts	0x060F, r27

		CAN_RXInit(5,8,0x400000, 0x400000);
    2dee:	e1 2c       	mov	r14, r1
    2df0:	f1 2c       	mov	r15, r1
    2df2:	00 e4       	ldi	r16, 0x40	; 64
    2df4:	10 e0       	ldi	r17, 0x00	; 0
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	40 e4       	ldi	r20, 0x40	; 64
    2dfc:	50 e0       	ldi	r21, 0x00	; 0
    2dfe:	68 e0       	ldi	r22, 0x08	; 8
    2e00:	85 e0       	ldi	r24, 0x05	; 5
    2e02:	0e 94 02 14 	call	0x2804	; 0x2804 <CAN_RXInit>
	}
	
	CANPAGE = (5 << 4);			//set the canpage to the receiver MOB
    2e06:	8d ee       	ldi	r24, 0xED	; 237
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	20 e5       	ldi	r18, 0x50	; 80
    2e0c:	fc 01       	movw	r30, r24
    2e0e:	20 83       	st	Z, r18
	CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
    2e10:	8e ee       	ldi	r24, 0xEE	; 238
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	2e ee       	ldi	r18, 0xEE	; 238
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	f9 01       	movw	r30, r18
    2e1a:	20 81       	ld	r18, Z
    2e1c:	2f 7d       	andi	r18, 0xDF	; 223
    2e1e:	fc 01       	movw	r30, r24
    2e20:	20 83       	st	Z, r18
	CANPAGE = (4 << 4);
    2e22:	8d ee       	ldi	r24, 0xED	; 237
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	20 e4       	ldi	r18, 0x40	; 64
    2e28:	fc 01       	movw	r30, r24
    2e2a:	20 83       	st	Z, r18
	CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
    2e2c:	8e ee       	ldi	r24, 0xEE	; 238
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	2e ee       	ldi	r18, 0xEE	; 238
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	f9 01       	movw	r30, r18
    2e36:	20 81       	ld	r18, Z
    2e38:	2f 7d       	andi	r18, 0xDF	; 223
    2e3a:	fc 01       	movw	r30, r24
    2e3c:	20 83       	st	Z, r18
}
    2e3e:	0f 90       	pop	r0
    2e40:	0f 90       	pop	r0
    2e42:	df 91       	pop	r29
    2e44:	cf 91       	pop	r28
    2e46:	ff 91       	pop	r31
    2e48:	ef 91       	pop	r30
    2e4a:	bf 91       	pop	r27
    2e4c:	af 91       	pop	r26
    2e4e:	9f 91       	pop	r25
    2e50:	8f 91       	pop	r24
    2e52:	7f 91       	pop	r23
    2e54:	6f 91       	pop	r22
    2e56:	5f 91       	pop	r21
    2e58:	4f 91       	pop	r20
    2e5a:	3f 91       	pop	r19
    2e5c:	2f 91       	pop	r18
    2e5e:	1f 91       	pop	r17
    2e60:	0f 91       	pop	r16
    2e62:	ff 90       	pop	r15
    2e64:	ef 90       	pop	r14
    2e66:	0f 90       	pop	r0
    2e68:	00 92 5f 00 	sts	0x005F, r0
    2e6c:	0f 90       	pop	r0
    2e6e:	1f 90       	pop	r1
    2e70:	18 95       	reti

00002e72 <ADC_init>:
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  ADC
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

void ADC_init()
{
    2e72:	cf 93       	push	r28
    2e74:	df 93       	push	r29
    2e76:	cd b7       	in	r28, 0x3d	; 61
    2e78:	de b7       	in	r29, 0x3e	; 62
	ADMUX=(1<<REFS0)|(1<<AREFEN);                      // For Aref=AVcc with external capacitor;
    2e7a:	8c e7       	ldi	r24, 0x7C	; 124
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	20 e6       	ldi	r18, 0x60	; 96
    2e80:	fc 01       	movw	r30, r24
    2e82:	20 83       	st	Z, r18
	ADMUX &= ~(1<<ADLAR);								//make sure adlar is not set.
    2e84:	8c e7       	ldi	r24, 0x7C	; 124
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	2c e7       	ldi	r18, 0x7C	; 124
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	f9 01       	movw	r30, r18
    2e8e:	20 81       	ld	r18, Z
    2e90:	2f 7d       	andi	r18, 0xDF	; 223
    2e92:	fc 01       	movw	r30, r24
    2e94:	20 83       	st	Z, r18
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Prescaler div factor = 128, 125kHz --> lowest we can go for best accuracy.
    2e96:	8a e7       	ldi	r24, 0x7A	; 122
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	27 e8       	ldi	r18, 0x87	; 135
    2e9c:	fc 01       	movw	r30, r24
    2e9e:	20 83       	st	Z, r18
}
    2ea0:	df 91       	pop	r29
    2ea2:	cf 91       	pop	r28
    2ea4:	08 95       	ret

00002ea6 <ADC_read>:
uint16_t ADC_read(uint8_t channel)
{
    2ea6:	cf 93       	push	r28
    2ea8:	df 93       	push	r29
    2eaa:	00 d0       	rcall	.+0      	; 0x2eac <ADC_read+0x6>
    2eac:	1f 92       	push	r1
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
    2eb2:	8b 83       	std	Y+3, r24	; 0x03
	channel = (ADMUX & 0xe0)|(channel & 0x1F); //ADMUX | 0b11100000 and channel | 0b00011111 --> this keeps all bits of ADMUX the same except for the bits signalling which channel to use.
    2eb4:	8c e7       	ldi	r24, 0x7C	; 124
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	fc 01       	movw	r30, r24
    2eba:	80 81       	ld	r24, Z
    2ebc:	98 2f       	mov	r25, r24
    2ebe:	90 7e       	andi	r25, 0xE0	; 224
    2ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec2:	8f 71       	andi	r24, 0x1F	; 31
    2ec4:	89 2b       	or	r24, r25
    2ec6:	8b 83       	std	Y+3, r24	; 0x03
	ADMUX = channel;
    2ec8:	8c e7       	ldi	r24, 0x7C	; 124
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	2b 81       	ldd	r18, Y+3	; 0x03
    2ece:	fc 01       	movw	r30, r24
    2ed0:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);							//ADSC (single conversion bit) is set to 1 to start the conversion process.
    2ed2:	8a e7       	ldi	r24, 0x7A	; 122
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	2a e7       	ldi	r18, 0x7A	; 122
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	f9 01       	movw	r30, r18
    2edc:	20 81       	ld	r18, Z
    2ede:	20 64       	ori	r18, 0x40	; 64
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	20 83       	st	Z, r18
	while(!(ADCSRA & (1<<ADIF)));				//run a loop while the conversion is taking place.
    2ee4:	00 00       	nop
    2ee6:	8a e7       	ldi	r24, 0x7A	; 122
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	fc 01       	movw	r30, r24
    2eec:	80 81       	ld	r24, Z
    2eee:	88 2f       	mov	r24, r24
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	80 71       	andi	r24, 0x10	; 16
    2ef4:	99 27       	eor	r25, r25
    2ef6:	89 2b       	or	r24, r25
    2ef8:	b1 f3       	breq	.-20     	; 0x2ee6 <ADC_read+0x40>
	uint16_t result = 0;
    2efa:	1a 82       	std	Y+2, r1	; 0x02
    2efc:	19 82       	std	Y+1, r1	; 0x01
	result = ADCL;								//read ADCL first, ADCH after --> order is important! --> also not sure if this code is correct. other ADC examples return 'ADC' instead.
    2efe:	88 e7       	ldi	r24, 0x78	; 120
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	fc 01       	movw	r30, r24
    2f04:	80 81       	ld	r24, Z
    2f06:	88 2f       	mov	r24, r24
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	9a 83       	std	Y+2, r25	; 0x02
    2f0c:	89 83       	std	Y+1, r24	; 0x01
	result |= ((3 & ADCH) << 8);
    2f0e:	89 e7       	ldi	r24, 0x79	; 121
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	fc 01       	movw	r30, r24
    2f14:	80 81       	ld	r24, Z
    2f16:	88 2f       	mov	r24, r24
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	83 70       	andi	r24, 0x03	; 3
    2f1c:	99 27       	eor	r25, r25
    2f1e:	98 2f       	mov	r25, r24
    2f20:	88 27       	eor	r24, r24
    2f22:	9c 01       	movw	r18, r24
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
    2f26:	9a 81       	ldd	r25, Y+2	; 0x02
    2f28:	82 2b       	or	r24, r18
    2f2a:	93 2b       	or	r25, r19
    2f2c:	9a 83       	std	Y+2, r25	; 0x02
    2f2e:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA|=(1<<ADIF);							//once read and done, clear the 'complete' status by writing 1 to the ADIF bit.
    2f30:	8a e7       	ldi	r24, 0x7A	; 122
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	2a e7       	ldi	r18, 0x7A	; 122
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	f9 01       	movw	r30, r18
    2f3a:	20 81       	ld	r18, Z
    2f3c:	20 61       	ori	r18, 0x10	; 16
    2f3e:	fc 01       	movw	r30, r24
    2f40:	20 83       	st	Z, r18
	return result;								//pass the 10 bit ADC number to requesting function.
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
    2f44:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	df 91       	pop	r29
    2f4e:	cf 91       	pop	r28
    2f50:	08 95       	ret

00002f52 <spi_init>:

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  SPI Functions
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void spi_init()
{
    2f52:	cf 93       	push	r28
    2f54:	df 93       	push	r29
    2f56:	cd b7       	in	r28, 0x3d	; 61
    2f58:	de b7       	in	r29, 0x3e	; 62
	MCUCR &= ~(1<<SPIPS);		//make sure we are getting spi not on the _A spi pins.
    2f5a:	85 e5       	ldi	r24, 0x55	; 85
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	25 e5       	ldi	r18, 0x55	; 85
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	f9 01       	movw	r30, r18
    2f64:	20 81       	ld	r18, Z
    2f66:	2f 77       	andi	r18, 0x7F	; 127
    2f68:	fc 01       	movw	r30, r24
    2f6a:	20 83       	st	Z, r18
	SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR0)|(0<<SPR1);  //set interrupt, enable SPI, MSB mode, set as master, low is idle, read on leading edge, Set to speed(fosc/4) SPR0=1, SPR1=0
    2f6c:	8c e4       	ldi	r24, 0x4C	; 76
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	20 e5       	ldi	r18, 0x50	; 80
    2f72:	fc 01       	movw	r30, r24
    2f74:	20 83       	st	Z, r18
	SPSR = (1<<SPI2X);	//set whether we want 2x speed or not (1=2x speed).
    2f76:	8d e4       	ldi	r24, 0x4D	; 77
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	21 e0       	ldi	r18, 0x01	; 1
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	20 83       	st	Z, r18
	SPDR = 0x00;		//ensure data register has nothing in it
    2f80:	8e e4       	ldi	r24, 0x4E	; 78
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	fc 01       	movw	r30, r24
    2f86:	10 82       	st	Z, r1
}
    2f88:	df 91       	pop	r29
    2f8a:	cf 91       	pop	r28
    2f8c:	08 95       	ret

00002f8e <spi_send_byte>:

uint8_t spi_send_byte(uint8_t c)
{
    2f8e:	cf 93       	push	r28
    2f90:	df 93       	push	r29
    2f92:	1f 92       	push	r1
    2f94:	cd b7       	in	r28, 0x3d	; 61
    2f96:	de b7       	in	r29, 0x3e	; 62
    2f98:	89 83       	std	Y+1, r24	; 0x01
	SPDR = c;					//write data to the transmission register. Writing to this initiates transmission.
    2f9a:	8e e4       	ldi	r24, 0x4E	; 78
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	29 81       	ldd	r18, Y+1	; 0x01
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    2fa4:	00 00       	nop
    2fa6:	8d e4       	ldi	r24, 0x4D	; 77
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	fc 01       	movw	r30, r24
    2fac:	80 81       	ld	r24, Z
    2fae:	88 23       	and	r24, r24
    2fb0:	d4 f7       	brge	.-12     	; 0x2fa6 <spi_send_byte+0x18>
	return SPDR;				//return any data that was shifted into this register upon transmission.
    2fb2:	8e e4       	ldi	r24, 0x4E	; 78
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	80 81       	ld	r24, Z
}
    2fba:	0f 90       	pop	r0
    2fbc:	df 91       	pop	r29
    2fbe:	cf 91       	pop	r28
    2fc0:	08 95       	ret

00002fc2 <main>:

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  Main Program
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
int main()
{
    2fc2:	af 92       	push	r10
    2fc4:	cf 92       	push	r12
    2fc6:	ef 92       	push	r14
    2fc8:	ff 92       	push	r15
    2fca:	0f 93       	push	r16
    2fcc:	1f 93       	push	r17
    2fce:	cf 93       	push	r28
    2fd0:	df 93       	push	r29
    2fd2:	cd b7       	in	r28, 0x3d	; 61
    2fd4:	de b7       	in	r29, 0x3e	; 62
    2fd6:	c7 5a       	subi	r28, 0xA7	; 167
    2fd8:	d1 09       	sbc	r29, r1
    2fda:	0f b6       	in	r0, 0x3f	; 63
    2fdc:	f8 94       	cli
    2fde:	de bf       	out	0x3e, r29	; 62
    2fe0:	0f be       	out	0x3f, r0	; 63
    2fe2:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0b11100011;	//b7 - SCK; b1 - MOSI
    2fe4:	84 e2       	ldi	r24, 0x24	; 36
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	23 ee       	ldi	r18, 0xE3	; 227
    2fea:	fc 01       	movw	r30, r24
    2fec:	20 83       	st	Z, r18
	//DDRC &= ~(1 << PINC0);
	DDRD = 0b00001001;	//b3 - SS pin
    2fee:	8a e2       	ldi	r24, 0x2A	; 42
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	29 e0       	ldi	r18, 0x09	; 9
    2ff4:	fc 01       	movw	r30, r24
    2ff6:	20 83       	st	Z, r18
	SPI_clock_high;
    2ff8:	85 e2       	ldi	r24, 0x25	; 37
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	25 e2       	ldi	r18, 0x25	; 37
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	f9 01       	movw	r30, r18
    3002:	20 81       	ld	r18, Z
    3004:	20 68       	ori	r18, 0x80	; 128
    3006:	fc 01       	movw	r30, r24
    3008:	20 83       	st	Z, r18
	
	CAN_init();		// Initialise CAN
    300a:	0e 94 26 13 	call	0x264c	; 0x264c <CAN_init>
	CAN_RXInit(5,8,0x400000, 0x400000);
    300e:	e1 2c       	mov	r14, r1
    3010:	f1 2c       	mov	r15, r1
    3012:	00 e4       	ldi	r16, 0x40	; 64
    3014:	10 e0       	ldi	r17, 0x00	; 0
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	40 e4       	ldi	r20, 0x40	; 64
    301c:	50 e0       	ldi	r21, 0x00	; 0
    301e:	68 e0       	ldi	r22, 0x08	; 8
    3020:	85 e0       	ldi	r24, 0x05	; 5
    3022:	0e 94 02 14 	call	0x2804	; 0x2804 <CAN_RXInit>
	ADC_init();		// Initialise ADC
    3026:	0e 94 39 17 	call	0x2e72	; 0x2e72 <ADC_init>
	spi_init();		// Initialise SPI (OLED screen communication)
    302a:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <spi_init>
	OLED_Init();	// Initialise the OLED screen
    302e:	0e 94 18 29 	call	0x5230	; 0x5230 <OLED_Init>
	sei();
    3032:	78 94       	sei
	
	Fill_RAM(0x00);			// Clear Screen
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	0e 94 4f 20 	call	0x409e	; 0x409e <Fill_RAM>
	
	Display_Picture(Motorsport);
    303a:	86 ed       	ldi	r24, 0xD6	; 214
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	0e 94 be 28 	call	0x517c	; 0x517c <Display_Picture>
	Delay(3000);
    3042:	88 eb       	ldi	r24, 0xB8	; 184
    3044:	9b e0       	ldi	r25, 0x0B	; 11
    3046:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <Delay>

	Fill_RAM(0x00);			// Clear Screen
    304a:	80 e0       	ldi	r24, 0x00	; 0
    304c:	0e 94 4f 20 	call	0x409e	; 0x409e <Fill_RAM>
	Draw_Rectangle(0xFF,0x01,0x00,0x3F,0x31,0x3F);
	*/
	
	// Globals
	// If using Show_String, append 0x00 as an extra character on end of the string, eg: unsigned char Acceleration[]= {'A','C','C','E','L','E','R','A','T','I','O','N',0x00};
	unsigned char Acceleration[]= {'A','C','C','E','L','E','R','A','T','I','O','N'};
    3050:	8c e0       	ldi	r24, 0x0C	; 12
    3052:	e0 eb       	ldi	r30, 0xB0	; 176
    3054:	f5 e0       	ldi	r31, 0x05	; 5
    3056:	de 01       	movw	r26, r28
    3058:	d6 96       	adiw	r26, 0x36	; 54
    305a:	01 90       	ld	r0, Z+
    305c:	0d 92       	st	X+, r0
    305e:	8a 95       	dec	r24
    3060:	e1 f7       	brne	.-8      	; 0x305a <main+0x98>
	unsigned char SkidPad[]= {'S','K','I','D','P','A','D'};
    3062:	ce 01       	movw	r24, r28
    3064:	8e 5b       	subi	r24, 0xBE	; 190
    3066:	9f 4f       	sbci	r25, 0xFF	; 255
    3068:	27 e0       	ldi	r18, 0x07	; 7
    306a:	ec eb       	ldi	r30, 0xBC	; 188
    306c:	f5 e0       	ldi	r31, 0x05	; 5
    306e:	dc 01       	movw	r26, r24
    3070:	01 90       	ld	r0, Z+
    3072:	0d 92       	st	X+, r0
    3074:	2a 95       	dec	r18
    3076:	e1 f7       	brne	.-8      	; 0x3070 <main+0xae>
	unsigned char AutoCross[]= {'A','U','T','O','C','R','O','S','S'};
    3078:	ce 01       	movw	r24, r28
    307a:	87 5b       	subi	r24, 0xB7	; 183
    307c:	9f 4f       	sbci	r25, 0xFF	; 255
    307e:	29 e0       	ldi	r18, 0x09	; 9
    3080:	e3 ec       	ldi	r30, 0xC3	; 195
    3082:	f5 e0       	ldi	r31, 0x05	; 5
    3084:	dc 01       	movw	r26, r24
    3086:	01 90       	ld	r0, Z+
    3088:	0d 92       	st	X+, r0
    308a:	2a 95       	dec	r18
    308c:	e1 f7       	brne	.-8      	; 0x3086 <main+0xc4>
	unsigned char Endurance[]= {'E','N','D','U','R','A','N,','C','E'};
    308e:	ce 01       	movw	r24, r28
    3090:	8e 5a       	subi	r24, 0xAE	; 174
    3092:	9f 4f       	sbci	r25, 0xFF	; 255
    3094:	29 e0       	ldi	r18, 0x09	; 9
    3096:	ec ec       	ldi	r30, 0xCC	; 204
    3098:	f5 e0       	ldi	r31, 0x05	; 5
    309a:	dc 01       	movw	r26, r24
    309c:	01 90       	ld	r0, Z+
    309e:	0d 92       	st	X+, r0
    30a0:	2a 95       	dec	r18
    30a2:	e1 f7       	brne	.-8      	; 0x309c <main+0xda>
	unsigned char SelectionRight[]= {'>','>','>','>'};
    30a4:	ce 01       	movw	r24, r28
    30a6:	85 5a       	subi	r24, 0xA5	; 165
    30a8:	9f 4f       	sbci	r25, 0xFF	; 255
    30aa:	2e e3       	ldi	r18, 0x3E	; 62
    30ac:	fc 01       	movw	r30, r24
    30ae:	20 83       	st	Z, r18
    30b0:	ce 01       	movw	r24, r28
    30b2:	85 5a       	subi	r24, 0xA5	; 165
    30b4:	9f 4f       	sbci	r25, 0xFF	; 255
    30b6:	2e e3       	ldi	r18, 0x3E	; 62
    30b8:	fc 01       	movw	r30, r24
    30ba:	21 83       	std	Z+1, r18	; 0x01
    30bc:	ce 01       	movw	r24, r28
    30be:	85 5a       	subi	r24, 0xA5	; 165
    30c0:	9f 4f       	sbci	r25, 0xFF	; 255
    30c2:	2e e3       	ldi	r18, 0x3E	; 62
    30c4:	fc 01       	movw	r30, r24
    30c6:	22 83       	std	Z+2, r18	; 0x02
    30c8:	ce 01       	movw	r24, r28
    30ca:	85 5a       	subi	r24, 0xA5	; 165
    30cc:	9f 4f       	sbci	r25, 0xFF	; 255
    30ce:	2e e3       	ldi	r18, 0x3E	; 62
    30d0:	fc 01       	movw	r30, r24
    30d2:	23 83       	std	Z+3, r18	; 0x03
	unsigned char SelectionLeft[]= {'<','<','<','<'};
    30d4:	ce 01       	movw	r24, r28
    30d6:	81 5a       	subi	r24, 0xA1	; 161
    30d8:	9f 4f       	sbci	r25, 0xFF	; 255
    30da:	2c e3       	ldi	r18, 0x3C	; 60
    30dc:	fc 01       	movw	r30, r24
    30de:	20 83       	st	Z, r18
    30e0:	ce 01       	movw	r24, r28
    30e2:	81 5a       	subi	r24, 0xA1	; 161
    30e4:	9f 4f       	sbci	r25, 0xFF	; 255
    30e6:	2c e3       	ldi	r18, 0x3C	; 60
    30e8:	fc 01       	movw	r30, r24
    30ea:	21 83       	std	Z+1, r18	; 0x01
    30ec:	ce 01       	movw	r24, r28
    30ee:	81 5a       	subi	r24, 0xA1	; 161
    30f0:	9f 4f       	sbci	r25, 0xFF	; 255
    30f2:	2c e3       	ldi	r18, 0x3C	; 60
    30f4:	fc 01       	movw	r30, r24
    30f6:	22 83       	std	Z+2, r18	; 0x02
    30f8:	ce 01       	movw	r24, r28
    30fa:	81 5a       	subi	r24, 0xA1	; 161
    30fc:	9f 4f       	sbci	r25, 0xFF	; 255
    30fe:	2c e3       	ldi	r18, 0x3C	; 60
    3100:	fc 01       	movw	r30, r24
    3102:	23 83       	std	Z+3, r18	; 0x03
	unsigned char Voltage[]= {'V','O','L','T','A','G','E',' ',':'};
    3104:	ce 01       	movw	r24, r28
    3106:	8d 59       	subi	r24, 0x9D	; 157
    3108:	9f 4f       	sbci	r25, 0xFF	; 255
    310a:	29 e0       	ldi	r18, 0x09	; 9
    310c:	e5 ed       	ldi	r30, 0xD5	; 213
    310e:	f5 e0       	ldi	r31, 0x05	; 5
    3110:	dc 01       	movw	r26, r24
    3112:	01 90       	ld	r0, Z+
    3114:	0d 92       	st	X+, r0
    3116:	2a 95       	dec	r18
    3118:	e1 f7       	brne	.-8      	; 0x3112 <main+0x150>
	unsigned char RPM[] = {'R','P','M',' ',':'};
    311a:	ce 01       	movw	r24, r28
    311c:	84 59       	subi	r24, 0x94	; 148
    311e:	9f 4f       	sbci	r25, 0xFF	; 255
    3120:	25 e0       	ldi	r18, 0x05	; 5
    3122:	ee ed       	ldi	r30, 0xDE	; 222
    3124:	f5 e0       	ldi	r31, 0x05	; 5
    3126:	dc 01       	movw	r26, r24
    3128:	01 90       	ld	r0, Z+
    312a:	0d 92       	st	X+, r0
    312c:	2a 95       	dec	r18
    312e:	e1 f7       	brne	.-8      	; 0x3128 <main+0x166>
	unsigned char GearboxTemp[] = {'G','E','A','R','B','O','X',' ','T','E','M','P',' ',':'};
    3130:	ce 01       	movw	r24, r28
    3132:	8f 58       	subi	r24, 0x8F	; 143
    3134:	9f 4f       	sbci	r25, 0xFF	; 255
    3136:	2e e0       	ldi	r18, 0x0E	; 14
    3138:	e3 ee       	ldi	r30, 0xE3	; 227
    313a:	f5 e0       	ldi	r31, 0x05	; 5
    313c:	dc 01       	movw	r26, r24
    313e:	01 90       	ld	r0, Z+
    3140:	0d 92       	st	X+, r0
    3142:	2a 95       	dec	r18
    3144:	e1 f7       	brne	.-8      	; 0x313e <main+0x17c>
	unsigned char Throttle[]= {'T','H','R','O','T','T','L','E',' ','%',' ',':'};
    3146:	ce 01       	movw	r24, r28
    3148:	81 58       	subi	r24, 0x81	; 129
    314a:	9f 4f       	sbci	r25, 0xFF	; 255
    314c:	2c e0       	ldi	r18, 0x0C	; 12
    314e:	e1 ef       	ldi	r30, 0xF1	; 241
    3150:	f5 e0       	ldi	r31, 0x05	; 5
    3152:	dc 01       	movw	r26, r24
    3154:	01 90       	ld	r0, Z+
    3156:	0d 92       	st	X+, r0
    3158:	2a 95       	dec	r18
    315a:	e1 f7       	brne	.-8      	; 0x3154 <main+0x192>
	unsigned char BlankNumber[] = {' ',' ',' ',' ',' '};
    315c:	ce 01       	movw	r24, r28
    315e:	85 57       	subi	r24, 0x75	; 117
    3160:	9f 4f       	sbci	r25, 0xFF	; 255
    3162:	25 e0       	ldi	r18, 0x05	; 5
    3164:	ed ef       	ldi	r30, 0xFD	; 253
    3166:	f5 e0       	ldi	r31, 0x05	; 5
    3168:	dc 01       	movw	r26, r24
    316a:	01 90       	ld	r0, Z+
    316c:	0d 92       	st	X+, r0
    316e:	2a 95       	dec	r18
    3170:	e1 f7       	brne	.-8      	; 0x316a <main+0x1a8>
	unsigned char LeftArrow[]= {'<'};
    3172:	ce 01       	movw	r24, r28
    3174:	80 57       	subi	r24, 0x70	; 112
    3176:	9f 4f       	sbci	r25, 0xFF	; 255
    3178:	2c e3       	ldi	r18, 0x3C	; 60
    317a:	fc 01       	movw	r30, r24
    317c:	20 83       	st	Z, r18
	unsigned char RightArrow[]= {'>'};
    317e:	ce 01       	movw	r24, r28
    3180:	8f 56       	subi	r24, 0x6F	; 111
    3182:	9f 4f       	sbci	r25, 0xFF	; 255
    3184:	2e e3       	ldi	r18, 0x3E	; 62
    3186:	fc 01       	movw	r30, r24
    3188:	20 83       	st	Z, r18
	unsigned char TempBuffer[10];
	unsigned int RPMMaxFlag = 0;
    318a:	1c 86       	std	Y+12, r1	; 0x0c
    318c:	1b 86       	std	Y+11, r1	; 0x0b
	unsigned int ThrottleMaxFlag = 0;
    318e:	1a 82       	std	Y+2, r1	; 0x02
    3190:	19 82       	std	Y+1, r1	; 0x01
	unsigned int ThrottleGreaterThan10 = 0;
    3192:	1c 82       	std	Y+4, r1	; 0x04
    3194:	1b 82       	std	Y+3, r1	; 0x03
	unsigned int RPMGreaterThan100 = 0;
    3196:	1e 82       	std	Y+6, r1	; 0x06
    3198:	1d 82       	std	Y+5, r1	; 0x05
	unsigned int RPMGreaterThan1000 = 0;
    319a:	1e 86       	std	Y+14, r1	; 0x0e
    319c:	1d 86       	std	Y+13, r1	; 0x0d
	unsigned int GearboxTempCount = 0;
    319e:	18 8a       	std	Y+16, r1	; 0x10
    31a0:	1f 86       	std	Y+15, r1	; 0x0f
	unsigned int GearboxTempMaxFlag = 0;
    31a2:	1a 8a       	std	Y+18, r1	; 0x12
    31a4:	19 8a       	std	Y+17, r1	; 0x11
	unsigned int RPMCounter = 0;
    31a6:	1c 8a       	std	Y+20, r1	; 0x14
    31a8:	1b 8a       	std	Y+19, r1	; 0x13
	unsigned int BootFlag = 0;
    31aa:	1e 8a       	std	Y+22, r1	; 0x16
    31ac:	1d 8a       	std	Y+21, r1	; 0x15
	int ScreenFlag = 0;
    31ae:	18 8e       	std	Y+24, r1	; 0x18
    31b0:	1f 8a       	std	Y+23, r1	; 0x17
	int ADC_Change = 1;
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	98 87       	std	Y+8, r25	; 0x08
    31b8:	8f 83       	std	Y+7, r24	; 0x07
	int ADC_Previous = 0;
    31ba:	1a 8e       	std	Y+26, r1	; 0x1a
    31bc:	19 8e       	std	Y+25, r1	; 0x19
	int digitLength = 0;
    31be:	1c 8e       	std	Y+28, r1	; 0x1c
    31c0:	1b 8e       	std	Y+27, r1	; 0x1b
	uint16_t LeftDialADC;
	uint16_t LeftDialADCOld = 0;
    31c2:	1a 86       	std	Y+10, r1	; 0x0a
    31c4:	19 86       	std	Y+9, r1	; 0x09
	int LeftDialADCScaled;
	uint16_t RightDialADC;
	uint16_t RightDialADCOld = 0;
    31c6:	1e 8e       	std	Y+30, r1	; 0x1e
    31c8:	1d 8e       	std	Y+29, r1	; 0x1d
	int RightDialADCScaled;
	uint8_t mob;
	
	while(1)
	{	
		readDials();
    31ca:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <readDials>
		LeftDialADC = ADC_read(3); // 3 = LEFT DIAL
    31ce:	83 e0       	ldi	r24, 0x03	; 3
    31d0:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <ADC_read>
    31d4:	98 a3       	std	Y+32, r25	; 0x20
    31d6:	8f 8f       	std	Y+31, r24	; 0x1f
		LeftDialADCScaled = (int)(LeftDialADC >> 2) / 24; // Scale values from 1 to 8 - need to verify with new PCB since dials are playing up
    31d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31da:	98 a1       	ldd	r25, Y+32	; 0x20
    31dc:	96 95       	lsr	r25
    31de:	87 95       	ror	r24
    31e0:	96 95       	lsr	r25
    31e2:	87 95       	ror	r24
    31e4:	28 e1       	ldi	r18, 0x18	; 24
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	b9 01       	movw	r22, r18
    31ea:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <__divmodhi4>
    31ee:	cb 01       	movw	r24, r22
    31f0:	9a a3       	std	Y+34, r25	; 0x22
    31f2:	89 a3       	std	Y+33, r24	; 0x21
		RightDialADC = ADC_read(2); // 2 = RIGHT DIAL
    31f4:	82 e0       	ldi	r24, 0x02	; 2
    31f6:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <ADC_read>
    31fa:	9c a3       	std	Y+36, r25	; 0x24
    31fc:	8b a3       	std	Y+35, r24	; 0x23
		RightDialADCScaled = (int)(RightDialADC >> 2) / 24; // Scale values from 1 to 8 - need to verify with new PCB since dials are playing up
    31fe:	8b a1       	ldd	r24, Y+35	; 0x23
    3200:	9c a1       	ldd	r25, Y+36	; 0x24
    3202:	96 95       	lsr	r25
    3204:	87 95       	ror	r24
    3206:	96 95       	lsr	r25
    3208:	87 95       	ror	r24
    320a:	28 e1       	ldi	r18, 0x18	; 24
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	b9 01       	movw	r22, r18
    3210:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <__divmodhi4>
    3214:	cb 01       	movw	r24, r22
    3216:	9e a3       	std	Y+38, r25	; 0x26
    3218:	8d a3       	std	Y+37, r24	; 0x25
		mob = CAN_findFreeTXMOB();
    321a:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <CAN_findFreeTXMOB>
    321e:	8f a3       	std	Y+39, r24	; 0x27
		//if(mob > 0)
		CAN_TXMOB(0, 1, &CAN_Dial, 0x400001,0);
    3220:	e1 2c       	mov	r14, r1
    3222:	01 e0       	ldi	r16, 0x01	; 1
    3224:	10 e0       	ldi	r17, 0x00	; 0
    3226:	20 e4       	ldi	r18, 0x40	; 64
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	40 e1       	ldi	r20, 0x10	; 16
    322c:	56 e0       	ldi	r21, 0x06	; 6
    322e:	61 e0       	ldi	r22, 0x01	; 1
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	0e 94 a8 14 	call	0x2950	; 0x2950 <CAN_TXMOB>
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	a8 ec       	ldi	r26, 0xC8	; 200
    323c:	b2 e4       	ldi	r27, 0x42	; 66
    323e:	88 a7       	std	Y+40, r24	; 0x28
    3240:	99 a7       	std	Y+41, r25	; 0x29
    3242:	aa a7       	std	Y+42, r26	; 0x2a
    3244:	bb a7       	std	Y+43, r27	; 0x2b

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	4a e7       	ldi	r20, 0x7A	; 122
    324c:	55 e4       	ldi	r21, 0x45	; 69
    324e:	68 a5       	ldd	r22, Y+40	; 0x28
    3250:	79 a5       	ldd	r23, Y+41	; 0x29
    3252:	8a a5       	ldd	r24, Y+42	; 0x2a
    3254:	9b a5       	ldd	r25, Y+43	; 0x2b
    3256:	0e 94 30 2b 	call	0x5660	; 0x5660 <__mulsf3>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	8c a7       	std	Y+44, r24	; 0x2c
    3260:	9d a7       	std	Y+45, r25	; 0x2d
    3262:	ae a7       	std	Y+46, r26	; 0x2e
    3264:	bf a7       	std	Y+47, r27	; 0x2f
	if (__tmp < 1.0)
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	40 e8       	ldi	r20, 0x80	; 128
    326c:	5f e3       	ldi	r21, 0x3F	; 63
    326e:	6c a5       	ldd	r22, Y+44	; 0x2c
    3270:	7d a5       	ldd	r23, Y+45	; 0x2d
    3272:	8e a5       	ldd	r24, Y+46	; 0x2e
    3274:	9f a5       	ldd	r25, Y+47	; 0x2f
    3276:	0e 94 e6 29 	call	0x53cc	; 0x53cc <__cmpsf2>
    327a:	88 23       	and	r24, r24
    327c:	2c f4       	brge	.+10     	; 0x3288 <main+0x2c6>
		__ticks = 1;
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	99 ab       	std	Y+49, r25	; 0x31
    3284:	88 ab       	std	Y+48, r24	; 0x30
    3286:	3f c0       	rjmp	.+126    	; 0x3306 <main+0x344>
	else if (__tmp > 65535)
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	3f ef       	ldi	r19, 0xFF	; 255
    328c:	4f e7       	ldi	r20, 0x7F	; 127
    328e:	57 e4       	ldi	r21, 0x47	; 71
    3290:	6c a5       	ldd	r22, Y+44	; 0x2c
    3292:	7d a5       	ldd	r23, Y+45	; 0x2d
    3294:	8e a5       	ldd	r24, Y+46	; 0x2e
    3296:	9f a5       	ldd	r25, Y+47	; 0x2f
    3298:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__gesf2>
    329c:	18 16       	cp	r1, r24
    329e:	4c f5       	brge	.+82     	; 0x32f2 <main+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	40 e2       	ldi	r20, 0x20	; 32
    32a6:	51 e4       	ldi	r21, 0x41	; 65
    32a8:	68 a5       	ldd	r22, Y+40	; 0x28
    32aa:	79 a5       	ldd	r23, Y+41	; 0x29
    32ac:	8a a5       	ldd	r24, Y+42	; 0x2a
    32ae:	9b a5       	ldd	r25, Y+43	; 0x2b
    32b0:	0e 94 30 2b 	call	0x5660	; 0x5660 <__mulsf3>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	bc 01       	movw	r22, r24
    32ba:	cd 01       	movw	r24, r26
    32bc:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <__fixunssfsi>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	99 ab       	std	Y+49, r25	; 0x31
    32c6:	88 ab       	std	Y+48, r24	; 0x30
    32c8:	0f c0       	rjmp	.+30     	; 0x32e8 <main+0x326>
    32ca:	80 e9       	ldi	r24, 0x90	; 144
    32cc:	91 e0       	ldi	r25, 0x01	; 1
    32ce:	9b ab       	std	Y+51, r25	; 0x33
    32d0:	8a ab       	std	Y+50, r24	; 0x32
    32d2:	8a a9       	ldd	r24, Y+50	; 0x32
    32d4:	9b a9       	ldd	r25, Y+51	; 0x33
    32d6:	01 97       	sbiw	r24, 0x01	; 1
    32d8:	f1 f7       	brne	.-4      	; 0x32d6 <main+0x314>
    32da:	9b ab       	std	Y+51, r25	; 0x33
    32dc:	8a ab       	std	Y+50, r24	; 0x32
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32de:	88 a9       	ldd	r24, Y+48	; 0x30
    32e0:	99 a9       	ldd	r25, Y+49	; 0x31
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	99 ab       	std	Y+49, r25	; 0x31
    32e6:	88 ab       	std	Y+48, r24	; 0x30
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e8:	88 a9       	ldd	r24, Y+48	; 0x30
    32ea:	99 a9       	ldd	r25, Y+49	; 0x31
    32ec:	89 2b       	or	r24, r25
    32ee:	69 f7       	brne	.-38     	; 0x32ca <main+0x308>
    32f0:	14 c0       	rjmp	.+40     	; 0x331a <main+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f2:	6c a5       	ldd	r22, Y+44	; 0x2c
    32f4:	7d a5       	ldd	r23, Y+45	; 0x2d
    32f6:	8e a5       	ldd	r24, Y+46	; 0x2e
    32f8:	9f a5       	ldd	r25, Y+47	; 0x2f
    32fa:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <__fixunssfsi>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	99 ab       	std	Y+49, r25	; 0x31
    3304:	88 ab       	std	Y+48, r24	; 0x30
    3306:	88 a9       	ldd	r24, Y+48	; 0x30
    3308:	99 a9       	ldd	r25, Y+49	; 0x31
    330a:	9d ab       	std	Y+53, r25	; 0x35
    330c:	8c ab       	std	Y+52, r24	; 0x34
    330e:	8c a9       	ldd	r24, Y+52	; 0x34
    3310:	9d a9       	ldd	r25, Y+53	; 0x35
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	f1 f7       	brne	.-4      	; 0x3312 <main+0x350>
    3316:	9d ab       	std	Y+53, r25	; 0x35
    3318:	8c ab       	std	Y+52, r24	; 0x34
		_delay_ms(100);
		
		if((LeftDialADCOld != LeftDialADCScaled) /*|| (RightDialADCOld != RightDialADCScaled)*/)
    331a:	29 a1       	ldd	r18, Y+33	; 0x21
    331c:	3a a1       	ldd	r19, Y+34	; 0x22
    331e:	89 85       	ldd	r24, Y+9	; 0x09
    3320:	9a 85       	ldd	r25, Y+10	; 0x0a
    3322:	28 17       	cp	r18, r24
    3324:	39 07       	cpc	r19, r25
    3326:	21 f0       	breq	.+8      	; 0x3330 <main+0x36e>
		{
			ADC_Change = 1;
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	98 87       	std	Y+8, r25	; 0x08
    332e:	8f 83       	std	Y+7, r24	; 0x07
		}
		
		if(LeftDialADCScaled == 3)
    3330:	89 a1       	ldd	r24, Y+33	; 0x21
    3332:	9a a1       	ldd	r25, Y+34	; 0x22
    3334:	03 97       	sbiw	r24, 0x03	; 3
    3336:	09 f0       	breq	.+2      	; 0x333a <main+0x378>
    3338:	ea c0       	rjmp	.+468    	; 0x350e <main+0x54c>
		{					
			if(ADC_Change == 1)
    333a:	8f 81       	ldd	r24, Y+7	; 0x07
    333c:	98 85       	ldd	r25, Y+8	; 0x08
    333e:	01 97       	sbiw	r24, 0x01	; 1
    3340:	09 f0       	breq	.+2      	; 0x3344 <main+0x382>
    3342:	43 c0       	rjmp	.+134    	; 0x33ca <main+0x408>
			{
				ADC_Change = 0;
    3344:	18 86       	std	Y+8, r1	; 0x08
    3346:	1f 82       	std	Y+7, r1	; 0x07
				if(LeftDialADCScaled > LeftDialADCOld){
    3348:	29 a1       	ldd	r18, Y+33	; 0x21
    334a:	3a a1       	ldd	r19, Y+34	; 0x22
    334c:	89 85       	ldd	r24, Y+9	; 0x09
    334e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3350:	82 17       	cp	r24, r18
    3352:	93 07       	cpc	r25, r19
    3354:	a0 f4       	brcc	.+40     	; 0x337e <main+0x3bc>
					Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x0F, 0xF0);
    3356:	ce 01       	movw	r24, r28
    3358:	8f 56       	subi	r24, 0x6F	; 111
    335a:	9f 4f       	sbci	r25, 0xFF	; 255
    335c:	0f 2e       	mov	r0, r31
    335e:	f0 ef       	ldi	r31, 0xF0	; 240
    3360:	af 2e       	mov	r10, r31
    3362:	f0 2d       	mov	r31, r0
    3364:	0f 2e       	mov	r0, r31
    3366:	ff e0       	ldi	r31, 0x0F	; 15
    3368:	cf 2e       	mov	r12, r31
    336a:	f0 2d       	mov	r31, r0
    336c:	ee 24       	eor	r14, r14
    336e:	e3 94       	inc	r14
    3370:	f1 2c       	mov	r15, r1
    3372:	0f e7       	ldi	r16, 0x7F	; 127
    3374:	21 e1       	ldi	r18, 0x11	; 17
    3376:	40 e6       	ldi	r20, 0x60	; 96
    3378:	6a e3       	ldi	r22, 0x3A	; 58
    337a:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <Show_Bigger_String>
				}
				if(LeftDialADCScaled < LeftDialADCOld){
    337e:	29 a1       	ldd	r18, Y+33	; 0x21
    3380:	3a a1       	ldd	r19, Y+34	; 0x22
    3382:	89 85       	ldd	r24, Y+9	; 0x09
    3384:	9a 85       	ldd	r25, Y+10	; 0x0a
    3386:	28 17       	cp	r18, r24
    3388:	39 07       	cpc	r19, r25
    338a:	a0 f4       	brcc	.+40     	; 0x33b4 <main+0x3f2>
					Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x0F, 0xF0);
    338c:	ce 01       	movw	r24, r28
    338e:	80 57       	subi	r24, 0x70	; 112
    3390:	9f 4f       	sbci	r25, 0xFF	; 255
    3392:	0f 2e       	mov	r0, r31
    3394:	f0 ef       	ldi	r31, 0xF0	; 240
    3396:	af 2e       	mov	r10, r31
    3398:	f0 2d       	mov	r31, r0
    339a:	0f 2e       	mov	r0, r31
    339c:	ff e0       	ldi	r31, 0x0F	; 15
    339e:	cf 2e       	mov	r12, r31
    33a0:	f0 2d       	mov	r31, r0
    33a2:	ee 24       	eor	r14, r14
    33a4:	e3 94       	inc	r14
    33a6:	f1 2c       	mov	r15, r1
    33a8:	0f e7       	ldi	r16, 0x7F	; 127
    33aa:	21 e1       	ldi	r18, 0x11	; 17
    33ac:	45 e1       	ldi	r20, 0x15	; 21
    33ae:	60 e0       	ldi	r22, 0x00	; 0
    33b0:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <Show_Bigger_String>
				}
				LeftDialADCOld = LeftDialADCScaled;
    33b4:	89 a1       	ldd	r24, Y+33	; 0x21
    33b6:	9a a1       	ldd	r25, Y+34	; 0x22
    33b8:	9a 87       	std	Y+10, r25	; 0x0a
    33ba:	89 87       	std	Y+9, r24	; 0x09
				Delay(500);
    33bc:	84 ef       	ldi	r24, 0xF4	; 244
    33be:	91 e0       	ldi	r25, 0x01	; 1
    33c0:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <Delay>
				Fill_RAM(0x00);
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	0e 94 4f 20 	call	0x409e	; 0x409e <Fill_RAM>
			}
			
			if(ThrottleMaxFlag == 1){
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
    33cc:	9a 81       	ldd	r25, Y+2	; 0x02
    33ce:	01 97       	sbiw	r24, 0x01	; 1
    33d0:	11 f4       	brne	.+4      	; 0x33d6 <main+0x414>
				//Show_String(1,&BlankNumber,0x28,0x05);
				ThrottleMaxFlag = 0;
    33d2:	1a 82       	std	Y+2, r1	; 0x02
    33d4:	19 82       	std	Y+1, r1	; 0x01
			}
			if(ThrottlePercentageData == 100){ ThrottleMaxFlag = 1;	}
    33d6:	80 91 02 06 	lds	r24, 0x0602
    33da:	90 91 03 06 	lds	r25, 0x0603
    33de:	84 36       	cpi	r24, 0x64	; 100
    33e0:	91 05       	cpc	r25, r1
    33e2:	21 f4       	brne	.+8      	; 0x33ec <main+0x42a>
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	9a 83       	std	Y+2, r25	; 0x02
    33ea:	89 83       	std	Y+1, r24	; 0x01
			// If throttle is at 10%, when the throttle goes down, a trailing 0 will be left - this needs to be cleared
			if(ThrottlePercentageData < 10){ ThrottleGreaterThan10 = 1;	}
    33ec:	80 91 02 06 	lds	r24, 0x0602
    33f0:	90 91 03 06 	lds	r25, 0x0603
    33f4:	0a 97       	sbiw	r24, 0x0a	; 10
    33f6:	20 f4       	brcc	.+8      	; 0x3400 <main+0x43e>
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	9c 83       	std	Y+4, r25	; 0x04
    33fe:	8b 83       	std	Y+3, r24	; 0x03
			if(ThrottleGreaterThan10 == 1){
    3400:	8b 81       	ldd	r24, Y+3	; 0x03
    3402:	9c 81       	ldd	r25, Y+4	; 0x04
    3404:	01 97       	sbiw	r24, 0x01	; 1
    3406:	11 f4       	brne	.+4      	; 0x340c <main+0x44a>
				//Show_String(1,&BlankNumber,0x28,0x05);
				ThrottleGreaterThan10 = 0;
    3408:	1c 82       	std	Y+4, r1	; 0x04
    340a:	1b 82       	std	Y+3, r1	; 0x03
			}
			itoa(ThrottlePercentageData,TempBuffer,10);
    340c:	80 91 02 06 	lds	r24, 0x0602
    3410:	90 91 03 06 	lds	r25, 0x0603
    3414:	9c 01       	movw	r18, r24
    3416:	ce 01       	movw	r24, r28
    3418:	8e 56       	subi	r24, 0x6E	; 110
    341a:	9f 4f       	sbci	r25, 0xFF	; 255
    341c:	4a e0       	ldi	r20, 0x0A	; 10
    341e:	50 e0       	ldi	r21, 0x00	; 0
    3420:	bc 01       	movw	r22, r24
    3422:	c9 01       	movw	r24, r18
    3424:	0e 94 36 2c 	call	0x586c	; 0x586c <itoa>
			digitLength = (ThrottlePercentageData == 0 ? 1 : (int)(log10(ThrottlePercentageData)+1));
    3428:	80 91 02 06 	lds	r24, 0x0602
    342c:	90 91 03 06 	lds	r25, 0x0603
    3430:	89 2b       	or	r24, r25
    3432:	21 f1       	breq	.+72     	; 0x347c <main+0x4ba>
    3434:	80 91 02 06 	lds	r24, 0x0602
    3438:	90 91 03 06 	lds	r25, 0x0603
    343c:	cc 01       	movw	r24, r24
    343e:	a0 e0       	ldi	r26, 0x00	; 0
    3440:	b0 e0       	ldi	r27, 0x00	; 0
    3442:	bc 01       	movw	r22, r24
    3444:	cd 01       	movw	r24, r26
    3446:	0e 94 21 2a 	call	0x5442	; 0x5442 <__floatunsisf>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	bc 01       	movw	r22, r24
    3450:	cd 01       	movw	r24, r26
    3452:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <log10>
    3456:	dc 01       	movw	r26, r24
    3458:	cb 01       	movw	r24, r22
    345a:	20 e0       	ldi	r18, 0x00	; 0
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	40 e8       	ldi	r20, 0x80	; 128
    3460:	5f e3       	ldi	r21, 0x3F	; 63
    3462:	bc 01       	movw	r22, r24
    3464:	cd 01       	movw	r24, r26
    3466:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <__addsf3>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	bc 01       	movw	r22, r24
    3470:	cd 01       	movw	r24, r26
    3472:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <__fixsfsi>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	02 c0       	rjmp	.+4      	; 0x3480 <main+0x4be>
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	9c 8f       	std	Y+28, r25	; 0x1c
    3482:	8b 8f       	std	Y+27, r24	; 0x1b
			Show_Big_String(&Throttle,0x05,0x64,0x16,0x7F, 12, 0x0F, 0xF0);		
    3484:	ce 01       	movw	r24, r28
    3486:	81 58       	subi	r24, 0x81	; 129
    3488:	9f 4f       	sbci	r25, 0xFF	; 255
    348a:	0f 2e       	mov	r0, r31
    348c:	f0 ef       	ldi	r31, 0xF0	; 240
    348e:	af 2e       	mov	r10, r31
    3490:	f0 2d       	mov	r31, r0
    3492:	0f 2e       	mov	r0, r31
    3494:	ff e0       	ldi	r31, 0x0F	; 15
    3496:	cf 2e       	mov	r12, r31
    3498:	f0 2d       	mov	r31, r0
    349a:	0f 2e       	mov	r0, r31
    349c:	fc e0       	ldi	r31, 0x0C	; 12
    349e:	ef 2e       	mov	r14, r31
    34a0:	f1 2c       	mov	r15, r1
    34a2:	f0 2d       	mov	r31, r0
    34a4:	0f e7       	ldi	r16, 0x7F	; 127
    34a6:	26 e1       	ldi	r18, 0x16	; 22
    34a8:	44 e6       	ldi	r20, 0x64	; 100
    34aa:	65 e0       	ldi	r22, 0x05	; 5
    34ac:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <Show_Big_String>
			Show_String(1,TempBuffer,0x28,0x05);
    34b0:	ce 01       	movw	r24, r28
    34b2:	8e 56       	subi	r24, 0x6E	; 110
    34b4:	9f 4f       	sbci	r25, 0xFF	; 255
    34b6:	25 e0       	ldi	r18, 0x05	; 5
    34b8:	48 e2       	ldi	r20, 0x28	; 40
    34ba:	bc 01       	movw	r22, r24
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <Show_String>
			Show_Big_String(&TempBuffer,0x2D,0x64,0x16,0x7F, digitLength, 0x0F, 0xF0); // Print the current throttle percentage
    34c2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    34c4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    34c6:	ce 01       	movw	r24, r28
    34c8:	8e 56       	subi	r24, 0x6E	; 110
    34ca:	9f 4f       	sbci	r25, 0xFF	; 255
    34cc:	0f 2e       	mov	r0, r31
    34ce:	f0 ef       	ldi	r31, 0xF0	; 240
    34d0:	af 2e       	mov	r10, r31
    34d2:	f0 2d       	mov	r31, r0
    34d4:	0f 2e       	mov	r0, r31
    34d6:	ff e0       	ldi	r31, 0x0F	; 15
    34d8:	cf 2e       	mov	r12, r31
    34da:	f0 2d       	mov	r31, r0
    34dc:	79 01       	movw	r14, r18
    34de:	0f e7       	ldi	r16, 0x7F	; 127
    34e0:	26 e1       	ldi	r18, 0x16	; 22
    34e2:	44 e6       	ldi	r20, 0x64	; 100
    34e4:	6d e2       	ldi	r22, 0x2D	; 45
    34e6:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <Show_Big_String>
			Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x04, 0x40);
    34ea:	ce 01       	movw	r24, r28
    34ec:	8f 56       	subi	r24, 0x6F	; 111
    34ee:	9f 4f       	sbci	r25, 0xFF	; 255
    34f0:	68 94       	set
    34f2:	aa 24       	eor	r10, r10
    34f4:	a6 f8       	bld	r10, 6
    34f6:	68 94       	set
    34f8:	cc 24       	eor	r12, r12
    34fa:	c2 f8       	bld	r12, 2
    34fc:	ee 24       	eor	r14, r14
    34fe:	e3 94       	inc	r14
    3500:	f1 2c       	mov	r15, r1
    3502:	0f e7       	ldi	r16, 0x7F	; 127
    3504:	21 e1       	ldi	r18, 0x11	; 17
    3506:	40 e6       	ldi	r20, 0x60	; 96
    3508:	6a e3       	ldi	r22, 0x3A	; 58
    350a:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <Show_Bigger_String>
		}
		
		if(LeftDialADCScaled == 4)
    350e:	89 a1       	ldd	r24, Y+33	; 0x21
    3510:	9a a1       	ldd	r25, Y+34	; 0x22
    3512:	04 97       	sbiw	r24, 0x04	; 4
    3514:	09 f0       	breq	.+2      	; 0x3518 <main+0x556>
    3516:	0e c1       	rjmp	.+540    	; 0x3734 <main+0x772>
		{
			if(ADC_Change == 1)
    3518:	8f 81       	ldd	r24, Y+7	; 0x07
    351a:	98 85       	ldd	r25, Y+8	; 0x08
    351c:	01 97       	sbiw	r24, 0x01	; 1
    351e:	09 f0       	breq	.+2      	; 0x3522 <main+0x560>
    3520:	43 c0       	rjmp	.+134    	; 0x35a8 <main+0x5e6>
			{
				ADC_Change = 0;
    3522:	18 86       	std	Y+8, r1	; 0x08
    3524:	1f 82       	std	Y+7, r1	; 0x07
				if(LeftDialADCScaled > LeftDialADCOld){
    3526:	29 a1       	ldd	r18, Y+33	; 0x21
    3528:	3a a1       	ldd	r19, Y+34	; 0x22
    352a:	89 85       	ldd	r24, Y+9	; 0x09
    352c:	9a 85       	ldd	r25, Y+10	; 0x0a
    352e:	82 17       	cp	r24, r18
    3530:	93 07       	cpc	r25, r19
    3532:	a0 f4       	brcc	.+40     	; 0x355c <main+0x59a>
					Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x0F, 0xF0);
    3534:	ce 01       	movw	r24, r28
    3536:	8f 56       	subi	r24, 0x6F	; 111
    3538:	9f 4f       	sbci	r25, 0xFF	; 255
    353a:	0f 2e       	mov	r0, r31
    353c:	f0 ef       	ldi	r31, 0xF0	; 240
    353e:	af 2e       	mov	r10, r31
    3540:	f0 2d       	mov	r31, r0
    3542:	0f 2e       	mov	r0, r31
    3544:	ff e0       	ldi	r31, 0x0F	; 15
    3546:	cf 2e       	mov	r12, r31
    3548:	f0 2d       	mov	r31, r0
    354a:	ee 24       	eor	r14, r14
    354c:	e3 94       	inc	r14
    354e:	f1 2c       	mov	r15, r1
    3550:	0f e7       	ldi	r16, 0x7F	; 127
    3552:	21 e1       	ldi	r18, 0x11	; 17
    3554:	40 e6       	ldi	r20, 0x60	; 96
    3556:	6a e3       	ldi	r22, 0x3A	; 58
    3558:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <Show_Bigger_String>
				}
				if(LeftDialADCScaled < LeftDialADCOld){
    355c:	29 a1       	ldd	r18, Y+33	; 0x21
    355e:	3a a1       	ldd	r19, Y+34	; 0x22
    3560:	89 85       	ldd	r24, Y+9	; 0x09
    3562:	9a 85       	ldd	r25, Y+10	; 0x0a
    3564:	28 17       	cp	r18, r24
    3566:	39 07       	cpc	r19, r25
    3568:	a0 f4       	brcc	.+40     	; 0x3592 <main+0x5d0>
					Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x0F, 0xF0);
    356a:	ce 01       	movw	r24, r28
    356c:	80 57       	subi	r24, 0x70	; 112
    356e:	9f 4f       	sbci	r25, 0xFF	; 255
    3570:	0f 2e       	mov	r0, r31
    3572:	f0 ef       	ldi	r31, 0xF0	; 240
    3574:	af 2e       	mov	r10, r31
    3576:	f0 2d       	mov	r31, r0
    3578:	0f 2e       	mov	r0, r31
    357a:	ff e0       	ldi	r31, 0x0F	; 15
    357c:	cf 2e       	mov	r12, r31
    357e:	f0 2d       	mov	r31, r0
    3580:	ee 24       	eor	r14, r14
    3582:	e3 94       	inc	r14
    3584:	f1 2c       	mov	r15, r1
    3586:	0f e7       	ldi	r16, 0x7F	; 127
    3588:	21 e1       	ldi	r18, 0x11	; 17
    358a:	45 e1       	ldi	r20, 0x15	; 21
    358c:	60 e0       	ldi	r22, 0x00	; 0
    358e:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <Show_Bigger_String>
				}
				LeftDialADCOld = LeftDialADCScaled;
    3592:	89 a1       	ldd	r24, Y+33	; 0x21
    3594:	9a a1       	ldd	r25, Y+34	; 0x22
    3596:	9a 87       	std	Y+10, r25	; 0x0a
    3598:	89 87       	std	Y+9, r24	; 0x09
				Delay(500);
    359a:	84 ef       	ldi	r24, 0xF4	; 244
    359c:	91 e0       	ldi	r25, 0x01	; 1
    359e:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <Delay>
				Fill_RAM(0x00);
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	0e 94 4f 20 	call	0x409e	; 0x409e <Fill_RAM>
			}
			
			// If RPM is greater than 100 (or 1000), when the throttle goes down, a trailing 0 will be left
			// This needs to be cleared
			if(RPMData < 99){ RPMGreaterThan100 = 1; }
    35a8:	80 91 04 06 	lds	r24, 0x0604
    35ac:	90 91 05 06 	lds	r25, 0x0605
    35b0:	a0 91 06 06 	lds	r26, 0x0606
    35b4:	b0 91 07 06 	lds	r27, 0x0607
    35b8:	83 36       	cpi	r24, 0x63	; 99
    35ba:	91 05       	cpc	r25, r1
    35bc:	a1 05       	cpc	r26, r1
    35be:	b1 05       	cpc	r27, r1
    35c0:	20 f4       	brcc	.+8      	; 0x35ca <main+0x608>
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	9e 83       	std	Y+6, r25	; 0x06
    35c8:	8d 83       	std	Y+5, r24	; 0x05
			if(RPMData < 999){ RPMGreaterThan100 = 1; }
    35ca:	80 91 04 06 	lds	r24, 0x0604
    35ce:	90 91 05 06 	lds	r25, 0x0605
    35d2:	a0 91 06 06 	lds	r26, 0x0606
    35d6:	b0 91 07 06 	lds	r27, 0x0607
    35da:	87 3e       	cpi	r24, 0xE7	; 231
    35dc:	93 40       	sbci	r25, 0x03	; 3
    35de:	a1 05       	cpc	r26, r1
    35e0:	b1 05       	cpc	r27, r1
    35e2:	20 f4       	brcc	.+8      	; 0x35ec <main+0x62a>
    35e4:	81 e0       	ldi	r24, 0x01	; 1
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	9e 83       	std	Y+6, r25	; 0x06
    35ea:	8d 83       	std	Y+5, r24	; 0x05
			if(RPMGreaterThan100 == 1){
    35ec:	8d 81       	ldd	r24, Y+5	; 0x05
    35ee:	9e 81       	ldd	r25, Y+6	; 0x06
    35f0:	01 97       	sbiw	r24, 0x01	; 1
    35f2:	11 f4       	brne	.+4      	; 0x35f8 <main+0x636>
				//Show_String(1,&BlankNumber,0x28,0x15);
				RPMGreaterThan100 = 0;
    35f4:	1e 82       	std	Y+6, r1	; 0x06
    35f6:	1d 82       	std	Y+5, r1	; 0x05
			}
			itoa(RPMData,TempBuffer,10);
    35f8:	80 91 04 06 	lds	r24, 0x0604
    35fc:	90 91 05 06 	lds	r25, 0x0605
    3600:	a0 91 06 06 	lds	r26, 0x0606
    3604:	b0 91 07 06 	lds	r27, 0x0607
    3608:	9c 01       	movw	r18, r24
    360a:	ce 01       	movw	r24, r28
    360c:	8e 56       	subi	r24, 0x6E	; 110
    360e:	9f 4f       	sbci	r25, 0xFF	; 255
    3610:	4a e0       	ldi	r20, 0x0A	; 10
    3612:	50 e0       	ldi	r21, 0x00	; 0
    3614:	bc 01       	movw	r22, r24
    3616:	c9 01       	movw	r24, r18
    3618:	0e 94 36 2c 	call	0x586c	; 0x586c <itoa>
			digitLength = (RPMData == 0 ? 1 : (int)(log10(RPMData)+1));
    361c:	80 91 04 06 	lds	r24, 0x0604
    3620:	90 91 05 06 	lds	r25, 0x0605
    3624:	a0 91 06 06 	lds	r26, 0x0606
    3628:	b0 91 07 06 	lds	r27, 0x0607
    362c:	89 2b       	or	r24, r25
    362e:	8a 2b       	or	r24, r26
    3630:	8b 2b       	or	r24, r27
    3632:	29 f1       	breq	.+74     	; 0x367e <main+0x6bc>
    3634:	80 91 04 06 	lds	r24, 0x0604
    3638:	90 91 05 06 	lds	r25, 0x0605
    363c:	a0 91 06 06 	lds	r26, 0x0606
    3640:	b0 91 07 06 	lds	r27, 0x0607
    3644:	bc 01       	movw	r22, r24
    3646:	cd 01       	movw	r24, r26
    3648:	0e 94 21 2a 	call	0x5442	; 0x5442 <__floatunsisf>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	bc 01       	movw	r22, r24
    3652:	cd 01       	movw	r24, r26
    3654:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <log10>
    3658:	dc 01       	movw	r26, r24
    365a:	cb 01       	movw	r24, r22
    365c:	20 e0       	ldi	r18, 0x00	; 0
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	40 e8       	ldi	r20, 0x80	; 128
    3662:	5f e3       	ldi	r21, 0x3F	; 63
    3664:	bc 01       	movw	r22, r24
    3666:	cd 01       	movw	r24, r26
    3668:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <__addsf3>
    366c:	dc 01       	movw	r26, r24
    366e:	cb 01       	movw	r24, r22
    3670:	bc 01       	movw	r22, r24
    3672:	cd 01       	movw	r24, r26
    3674:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <__fixsfsi>
    3678:	dc 01       	movw	r26, r24
    367a:	cb 01       	movw	r24, r22
    367c:	02 c0       	rjmp	.+4      	; 0x3682 <main+0x6c0>
    367e:	81 e0       	ldi	r24, 0x01	; 1
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	9c 8f       	std	Y+28, r25	; 0x1c
    3684:	8b 8f       	std	Y+27, r24	; 0x1b
			Show_String(1,TempBuffer,0x28,0x05);
    3686:	ce 01       	movw	r24, r28
    3688:	8e 56       	subi	r24, 0x6E	; 110
    368a:	9f 4f       	sbci	r25, 0xFF	; 255
    368c:	25 e0       	ldi	r18, 0x05	; 5
    368e:	48 e2       	ldi	r20, 0x28	; 40
    3690:	bc 01       	movw	r22, r24
    3692:	81 e0       	ldi	r24, 0x01	; 1
    3694:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <Show_String>
			Show_Big_String(&RPM,0x05,0x64,0x16,0x7F, 5, 0x0F, 0xF0);
    3698:	ce 01       	movw	r24, r28
    369a:	84 59       	subi	r24, 0x94	; 148
    369c:	9f 4f       	sbci	r25, 0xFF	; 255
    369e:	0f 2e       	mov	r0, r31
    36a0:	f0 ef       	ldi	r31, 0xF0	; 240
    36a2:	af 2e       	mov	r10, r31
    36a4:	f0 2d       	mov	r31, r0
    36a6:	0f 2e       	mov	r0, r31
    36a8:	ff e0       	ldi	r31, 0x0F	; 15
    36aa:	cf 2e       	mov	r12, r31
    36ac:	f0 2d       	mov	r31, r0
    36ae:	0f 2e       	mov	r0, r31
    36b0:	f5 e0       	ldi	r31, 0x05	; 5
    36b2:	ef 2e       	mov	r14, r31
    36b4:	f1 2c       	mov	r15, r1
    36b6:	f0 2d       	mov	r31, r0
    36b8:	0f e7       	ldi	r16, 0x7F	; 127
    36ba:	26 e1       	ldi	r18, 0x16	; 22
    36bc:	44 e6       	ldi	r20, 0x64	; 100
    36be:	65 e0       	ldi	r22, 0x05	; 5
    36c0:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <Show_Big_String>
			Show_Big_String(&TempBuffer,0x2D,0x64,0x16,0x7F, digitLength, 0x0F, 0xF0);
    36c4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    36c6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    36c8:	ce 01       	movw	r24, r28
    36ca:	8e 56       	subi	r24, 0x6E	; 110
    36cc:	9f 4f       	sbci	r25, 0xFF	; 255
    36ce:	0f 2e       	mov	r0, r31
    36d0:	f0 ef       	ldi	r31, 0xF0	; 240
    36d2:	af 2e       	mov	r10, r31
    36d4:	f0 2d       	mov	r31, r0
    36d6:	0f 2e       	mov	r0, r31
    36d8:	ff e0       	ldi	r31, 0x0F	; 15
    36da:	cf 2e       	mov	r12, r31
    36dc:	f0 2d       	mov	r31, r0
    36de:	79 01       	movw	r14, r18
    36e0:	0f e7       	ldi	r16, 0x7F	; 127
    36e2:	26 e1       	ldi	r18, 0x16	; 22
    36e4:	44 e6       	ldi	r20, 0x64	; 100
    36e6:	6d e2       	ldi	r22, 0x2D	; 45
    36e8:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <Show_Big_String>
			Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x04, 0x40);
    36ec:	ce 01       	movw	r24, r28
    36ee:	80 57       	subi	r24, 0x70	; 112
    36f0:	9f 4f       	sbci	r25, 0xFF	; 255
    36f2:	68 94       	set
    36f4:	aa 24       	eor	r10, r10
    36f6:	a6 f8       	bld	r10, 6
    36f8:	68 94       	set
    36fa:	cc 24       	eor	r12, r12
    36fc:	c2 f8       	bld	r12, 2
    36fe:	ee 24       	eor	r14, r14
    3700:	e3 94       	inc	r14
    3702:	f1 2c       	mov	r15, r1
    3704:	0f e7       	ldi	r16, 0x7F	; 127
    3706:	21 e1       	ldi	r18, 0x11	; 17
    3708:	45 e1       	ldi	r20, 0x15	; 21
    370a:	60 e0       	ldi	r22, 0x00	; 0
    370c:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <Show_Bigger_String>
			Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x04, 0x40);
    3710:	ce 01       	movw	r24, r28
    3712:	8f 56       	subi	r24, 0x6F	; 111
    3714:	9f 4f       	sbci	r25, 0xFF	; 255
    3716:	68 94       	set
    3718:	aa 24       	eor	r10, r10
    371a:	a6 f8       	bld	r10, 6
    371c:	68 94       	set
    371e:	cc 24       	eor	r12, r12
    3720:	c2 f8       	bld	r12, 2
    3722:	ee 24       	eor	r14, r14
    3724:	e3 94       	inc	r14
    3726:	f1 2c       	mov	r15, r1
    3728:	0f e7       	ldi	r16, 0x7F	; 127
    372a:	21 e1       	ldi	r18, 0x11	; 17
    372c:	40 e6       	ldi	r20, 0x60	; 96
    372e:	6a e3       	ldi	r22, 0x3A	; 58
    3730:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <Show_Bigger_String>
		}
		
		if(LeftDialADCScaled == 5)
    3734:	89 a1       	ldd	r24, Y+33	; 0x21
    3736:	9a a1       	ldd	r25, Y+34	; 0x22
    3738:	05 97       	sbiw	r24, 0x05	; 5
    373a:	09 f0       	breq	.+2      	; 0x373e <main+0x77c>
    373c:	e6 c0       	rjmp	.+460    	; 0x390a <main+0x948>
		{
			if(ADC_Change == 1)
    373e:	8f 81       	ldd	r24, Y+7	; 0x07
    3740:	98 85       	ldd	r25, Y+8	; 0x08
    3742:	01 97       	sbiw	r24, 0x01	; 1
    3744:	09 f0       	breq	.+2      	; 0x3748 <main+0x786>
    3746:	43 c0       	rjmp	.+134    	; 0x37ce <main+0x80c>
			{
				ADC_Change = 0;
    3748:	18 86       	std	Y+8, r1	; 0x08
    374a:	1f 82       	std	Y+7, r1	; 0x07
				if(LeftDialADCScaled > LeftDialADCOld){
    374c:	29 a1       	ldd	r18, Y+33	; 0x21
    374e:	3a a1       	ldd	r19, Y+34	; 0x22
    3750:	89 85       	ldd	r24, Y+9	; 0x09
    3752:	9a 85       	ldd	r25, Y+10	; 0x0a
    3754:	82 17       	cp	r24, r18
    3756:	93 07       	cpc	r25, r19
    3758:	a0 f4       	brcc	.+40     	; 0x3782 <main+0x7c0>
					Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x0F, 0xF0);
    375a:	ce 01       	movw	r24, r28
    375c:	8f 56       	subi	r24, 0x6F	; 111
    375e:	9f 4f       	sbci	r25, 0xFF	; 255
    3760:	0f 2e       	mov	r0, r31
    3762:	f0 ef       	ldi	r31, 0xF0	; 240
    3764:	af 2e       	mov	r10, r31
    3766:	f0 2d       	mov	r31, r0
    3768:	0f 2e       	mov	r0, r31
    376a:	ff e0       	ldi	r31, 0x0F	; 15
    376c:	cf 2e       	mov	r12, r31
    376e:	f0 2d       	mov	r31, r0
    3770:	ee 24       	eor	r14, r14
    3772:	e3 94       	inc	r14
    3774:	f1 2c       	mov	r15, r1
    3776:	0f e7       	ldi	r16, 0x7F	; 127
    3778:	21 e1       	ldi	r18, 0x11	; 17
    377a:	40 e6       	ldi	r20, 0x60	; 96
    377c:	6a e3       	ldi	r22, 0x3A	; 58
    377e:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <Show_Bigger_String>
				}
				if(LeftDialADCScaled < LeftDialADCOld){
    3782:	29 a1       	ldd	r18, Y+33	; 0x21
    3784:	3a a1       	ldd	r19, Y+34	; 0x22
    3786:	89 85       	ldd	r24, Y+9	; 0x09
    3788:	9a 85       	ldd	r25, Y+10	; 0x0a
    378a:	28 17       	cp	r18, r24
    378c:	39 07       	cpc	r19, r25
    378e:	a0 f4       	brcc	.+40     	; 0x37b8 <main+0x7f6>
					Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x0F, 0xF0);
    3790:	ce 01       	movw	r24, r28
    3792:	80 57       	subi	r24, 0x70	; 112
    3794:	9f 4f       	sbci	r25, 0xFF	; 255
    3796:	0f 2e       	mov	r0, r31
    3798:	f0 ef       	ldi	r31, 0xF0	; 240
    379a:	af 2e       	mov	r10, r31
    379c:	f0 2d       	mov	r31, r0
    379e:	0f 2e       	mov	r0, r31
    37a0:	ff e0       	ldi	r31, 0x0F	; 15
    37a2:	cf 2e       	mov	r12, r31
    37a4:	f0 2d       	mov	r31, r0
    37a6:	ee 24       	eor	r14, r14
    37a8:	e3 94       	inc	r14
    37aa:	f1 2c       	mov	r15, r1
    37ac:	0f e7       	ldi	r16, 0x7F	; 127
    37ae:	21 e1       	ldi	r18, 0x11	; 17
    37b0:	45 e1       	ldi	r20, 0x15	; 21
    37b2:	60 e0       	ldi	r22, 0x00	; 0
    37b4:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <Show_Bigger_String>
				}
				LeftDialADCOld = LeftDialADCScaled;
    37b8:	89 a1       	ldd	r24, Y+33	; 0x21
    37ba:	9a a1       	ldd	r25, Y+34	; 0x22
    37bc:	9a 87       	std	Y+10, r25	; 0x0a
    37be:	89 87       	std	Y+9, r24	; 0x09
				Delay(500);
    37c0:	84 ef       	ldi	r24, 0xF4	; 244
    37c2:	91 e0       	ldi	r25, 0x01	; 1
    37c4:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <Delay>
				Fill_RAM(0x00);
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	0e 94 4f 20 	call	0x409e	; 0x409e <Fill_RAM>
			}
			
			itoa(GearboxTempData,TempBuffer,10);
    37ce:	80 91 08 06 	lds	r24, 0x0608
    37d2:	90 91 09 06 	lds	r25, 0x0609
    37d6:	a0 91 0a 06 	lds	r26, 0x060A
    37da:	b0 91 0b 06 	lds	r27, 0x060B
    37de:	9c 01       	movw	r18, r24
    37e0:	ce 01       	movw	r24, r28
    37e2:	8e 56       	subi	r24, 0x6E	; 110
    37e4:	9f 4f       	sbci	r25, 0xFF	; 255
    37e6:	4a e0       	ldi	r20, 0x0A	; 10
    37e8:	50 e0       	ldi	r21, 0x00	; 0
    37ea:	bc 01       	movw	r22, r24
    37ec:	c9 01       	movw	r24, r18
    37ee:	0e 94 36 2c 	call	0x586c	; 0x586c <itoa>
			digitLength = (GearboxTempData == 0 ? 1 : (int)(log10(GearboxTempData)+1));
    37f2:	80 91 08 06 	lds	r24, 0x0608
    37f6:	90 91 09 06 	lds	r25, 0x0609
    37fa:	a0 91 0a 06 	lds	r26, 0x060A
    37fe:	b0 91 0b 06 	lds	r27, 0x060B
    3802:	89 2b       	or	r24, r25
    3804:	8a 2b       	or	r24, r26
    3806:	8b 2b       	or	r24, r27
    3808:	29 f1       	breq	.+74     	; 0x3854 <main+0x892>
    380a:	80 91 08 06 	lds	r24, 0x0608
    380e:	90 91 09 06 	lds	r25, 0x0609
    3812:	a0 91 0a 06 	lds	r26, 0x060A
    3816:	b0 91 0b 06 	lds	r27, 0x060B
    381a:	bc 01       	movw	r22, r24
    381c:	cd 01       	movw	r24, r26
    381e:	0e 94 21 2a 	call	0x5442	; 0x5442 <__floatunsisf>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	bc 01       	movw	r22, r24
    3828:	cd 01       	movw	r24, r26
    382a:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <log10>
    382e:	dc 01       	movw	r26, r24
    3830:	cb 01       	movw	r24, r22
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	40 e8       	ldi	r20, 0x80	; 128
    3838:	5f e3       	ldi	r21, 0x3F	; 63
    383a:	bc 01       	movw	r22, r24
    383c:	cd 01       	movw	r24, r26
    383e:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <__addsf3>
    3842:	dc 01       	movw	r26, r24
    3844:	cb 01       	movw	r24, r22
    3846:	bc 01       	movw	r22, r24
    3848:	cd 01       	movw	r24, r26
    384a:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <__fixsfsi>
    384e:	dc 01       	movw	r26, r24
    3850:	cb 01       	movw	r24, r22
    3852:	02 c0       	rjmp	.+4      	; 0x3858 <main+0x896>
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	9c 8f       	std	Y+28, r25	; 0x1c
    385a:	8b 8f       	std	Y+27, r24	; 0x1b
			Show_String(1,TempBuffer,0x28,0x05);
    385c:	ce 01       	movw	r24, r28
    385e:	8e 56       	subi	r24, 0x6E	; 110
    3860:	9f 4f       	sbci	r25, 0xFF	; 255
    3862:	25 e0       	ldi	r18, 0x05	; 5
    3864:	48 e2       	ldi	r20, 0x28	; 40
    3866:	bc 01       	movw	r22, r24
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <Show_String>
			Show_Big_String(&GearboxTemp,0x05,0x64,0x16,0x7F, 14, 0x0F, 0xF0);
    386e:	ce 01       	movw	r24, r28
    3870:	8f 58       	subi	r24, 0x8F	; 143
    3872:	9f 4f       	sbci	r25, 0xFF	; 255
    3874:	0f 2e       	mov	r0, r31
    3876:	f0 ef       	ldi	r31, 0xF0	; 240
    3878:	af 2e       	mov	r10, r31
    387a:	f0 2d       	mov	r31, r0
    387c:	0f 2e       	mov	r0, r31
    387e:	ff e0       	ldi	r31, 0x0F	; 15
    3880:	cf 2e       	mov	r12, r31
    3882:	f0 2d       	mov	r31, r0
    3884:	0f 2e       	mov	r0, r31
    3886:	fe e0       	ldi	r31, 0x0E	; 14
    3888:	ef 2e       	mov	r14, r31
    388a:	f1 2c       	mov	r15, r1
    388c:	f0 2d       	mov	r31, r0
    388e:	0f e7       	ldi	r16, 0x7F	; 127
    3890:	26 e1       	ldi	r18, 0x16	; 22
    3892:	44 e6       	ldi	r20, 0x64	; 100
    3894:	65 e0       	ldi	r22, 0x05	; 5
    3896:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <Show_Big_String>
			Show_Big_String(&TempBuffer,0x30,0x64,0x16,0x7F, digitLength, 0x0F, 0xF0);
    389a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    389c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    389e:	ce 01       	movw	r24, r28
    38a0:	8e 56       	subi	r24, 0x6E	; 110
    38a2:	9f 4f       	sbci	r25, 0xFF	; 255
    38a4:	0f 2e       	mov	r0, r31
    38a6:	f0 ef       	ldi	r31, 0xF0	; 240
    38a8:	af 2e       	mov	r10, r31
    38aa:	f0 2d       	mov	r31, r0
    38ac:	0f 2e       	mov	r0, r31
    38ae:	ff e0       	ldi	r31, 0x0F	; 15
    38b0:	cf 2e       	mov	r12, r31
    38b2:	f0 2d       	mov	r31, r0
    38b4:	79 01       	movw	r14, r18
    38b6:	0f e7       	ldi	r16, 0x7F	; 127
    38b8:	26 e1       	ldi	r18, 0x16	; 22
    38ba:	44 e6       	ldi	r20, 0x64	; 100
    38bc:	60 e3       	ldi	r22, 0x30	; 48
    38be:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <Show_Big_String>
			Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x04, 0x40);
    38c2:	ce 01       	movw	r24, r28
    38c4:	80 57       	subi	r24, 0x70	; 112
    38c6:	9f 4f       	sbci	r25, 0xFF	; 255
    38c8:	68 94       	set
    38ca:	aa 24       	eor	r10, r10
    38cc:	a6 f8       	bld	r10, 6
    38ce:	68 94       	set
    38d0:	cc 24       	eor	r12, r12
    38d2:	c2 f8       	bld	r12, 2
    38d4:	ee 24       	eor	r14, r14
    38d6:	e3 94       	inc	r14
    38d8:	f1 2c       	mov	r15, r1
    38da:	0f e7       	ldi	r16, 0x7F	; 127
    38dc:	21 e1       	ldi	r18, 0x11	; 17
    38de:	45 e1       	ldi	r20, 0x15	; 21
    38e0:	60 e0       	ldi	r22, 0x00	; 0
    38e2:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <Show_Bigger_String>
			Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x04, 0x40);
    38e6:	ce 01       	movw	r24, r28
    38e8:	8f 56       	subi	r24, 0x6F	; 111
    38ea:	9f 4f       	sbci	r25, 0xFF	; 255
    38ec:	68 94       	set
    38ee:	aa 24       	eor	r10, r10
    38f0:	a6 f8       	bld	r10, 6
    38f2:	68 94       	set
    38f4:	cc 24       	eor	r12, r12
    38f6:	c2 f8       	bld	r12, 2
    38f8:	ee 24       	eor	r14, r14
    38fa:	e3 94       	inc	r14
    38fc:	f1 2c       	mov	r15, r1
    38fe:	0f e7       	ldi	r16, 0x7F	; 127
    3900:	21 e1       	ldi	r18, 0x11	; 17
    3902:	40 e6       	ldi	r20, 0x60	; 96
    3904:	6a e3       	ldi	r22, 0x3A	; 58
    3906:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <Show_Bigger_String>
		}
		
		if(LeftDialADCScaled == 6)
    390a:	89 a1       	ldd	r24, Y+33	; 0x21
    390c:	9a a1       	ldd	r25, Y+34	; 0x22
    390e:	06 97       	sbiw	r24, 0x06	; 6
    3910:	09 f0       	breq	.+2      	; 0x3914 <main+0x952>
    3912:	df c0       	rjmp	.+446    	; 0x3ad2 <main+0xb10>
		{
			if(ADC_Change == 1)
    3914:	8f 81       	ldd	r24, Y+7	; 0x07
    3916:	98 85       	ldd	r25, Y+8	; 0x08
    3918:	01 97       	sbiw	r24, 0x01	; 1
    391a:	09 f0       	breq	.+2      	; 0x391e <main+0x95c>
    391c:	43 c0       	rjmp	.+134    	; 0x39a4 <main+0x9e2>
			{
				ADC_Change = 0;
    391e:	18 86       	std	Y+8, r1	; 0x08
    3920:	1f 82       	std	Y+7, r1	; 0x07
				if(LeftDialADCScaled > LeftDialADCOld){
    3922:	29 a1       	ldd	r18, Y+33	; 0x21
    3924:	3a a1       	ldd	r19, Y+34	; 0x22
    3926:	89 85       	ldd	r24, Y+9	; 0x09
    3928:	9a 85       	ldd	r25, Y+10	; 0x0a
    392a:	82 17       	cp	r24, r18
    392c:	93 07       	cpc	r25, r19
    392e:	a0 f4       	brcc	.+40     	; 0x3958 <main+0x996>
					Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x0F, 0xF0);
    3930:	ce 01       	movw	r24, r28
    3932:	8f 56       	subi	r24, 0x6F	; 111
    3934:	9f 4f       	sbci	r25, 0xFF	; 255
    3936:	0f 2e       	mov	r0, r31
    3938:	f0 ef       	ldi	r31, 0xF0	; 240
    393a:	af 2e       	mov	r10, r31
    393c:	f0 2d       	mov	r31, r0
    393e:	0f 2e       	mov	r0, r31
    3940:	ff e0       	ldi	r31, 0x0F	; 15
    3942:	cf 2e       	mov	r12, r31
    3944:	f0 2d       	mov	r31, r0
    3946:	ee 24       	eor	r14, r14
    3948:	e3 94       	inc	r14
    394a:	f1 2c       	mov	r15, r1
    394c:	0f e7       	ldi	r16, 0x7F	; 127
    394e:	21 e1       	ldi	r18, 0x11	; 17
    3950:	40 e6       	ldi	r20, 0x60	; 96
    3952:	6a e3       	ldi	r22, 0x3A	; 58
    3954:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <Show_Bigger_String>
				}
				if(LeftDialADCScaled < LeftDialADCOld){
    3958:	29 a1       	ldd	r18, Y+33	; 0x21
    395a:	3a a1       	ldd	r19, Y+34	; 0x22
    395c:	89 85       	ldd	r24, Y+9	; 0x09
    395e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3960:	28 17       	cp	r18, r24
    3962:	39 07       	cpc	r19, r25
    3964:	a0 f4       	brcc	.+40     	; 0x398e <main+0x9cc>
					Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x0F, 0xF0);
    3966:	ce 01       	movw	r24, r28
    3968:	80 57       	subi	r24, 0x70	; 112
    396a:	9f 4f       	sbci	r25, 0xFF	; 255
    396c:	0f 2e       	mov	r0, r31
    396e:	f0 ef       	ldi	r31, 0xF0	; 240
    3970:	af 2e       	mov	r10, r31
    3972:	f0 2d       	mov	r31, r0
    3974:	0f 2e       	mov	r0, r31
    3976:	ff e0       	ldi	r31, 0x0F	; 15
    3978:	cf 2e       	mov	r12, r31
    397a:	f0 2d       	mov	r31, r0
    397c:	ee 24       	eor	r14, r14
    397e:	e3 94       	inc	r14
    3980:	f1 2c       	mov	r15, r1
    3982:	0f e7       	ldi	r16, 0x7F	; 127
    3984:	21 e1       	ldi	r18, 0x11	; 17
    3986:	45 e1       	ldi	r20, 0x15	; 21
    3988:	60 e0       	ldi	r22, 0x00	; 0
    398a:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <Show_Bigger_String>
				}
				LeftDialADCOld = LeftDialADCScaled;
    398e:	89 a1       	ldd	r24, Y+33	; 0x21
    3990:	9a a1       	ldd	r25, Y+34	; 0x22
    3992:	9a 87       	std	Y+10, r25	; 0x0a
    3994:	89 87       	std	Y+9, r24	; 0x09
				Delay(500);
    3996:	84 ef       	ldi	r24, 0xF4	; 244
    3998:	91 e0       	ldi	r25, 0x01	; 1
    399a:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <Delay>
				Fill_RAM(0x00);
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	0e 94 4f 20 	call	0x409e	; 0x409e <Fill_RAM>
			}
			
			itoa(VoltageData/1000, TempBuffer, 10);		//display the average cell voltage in Volts instead of millivolts (find the whole volts in the value)
    39a4:	80 91 0c 06 	lds	r24, 0x060C
    39a8:	90 91 0d 06 	lds	r25, 0x060D
    39ac:	a0 91 0e 06 	lds	r26, 0x060E
    39b0:	b0 91 0f 06 	lds	r27, 0x060F
    39b4:	28 ee       	ldi	r18, 0xE8	; 232
    39b6:	33 e0       	ldi	r19, 0x03	; 3
    39b8:	40 e0       	ldi	r20, 0x00	; 0
    39ba:	50 e0       	ldi	r21, 0x00	; 0
    39bc:	bc 01       	movw	r22, r24
    39be:	cd 01       	movw	r24, r26
    39c0:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__udivmodsi4>
    39c4:	da 01       	movw	r26, r20
    39c6:	c9 01       	movw	r24, r18
    39c8:	9c 01       	movw	r18, r24
    39ca:	ce 01       	movw	r24, r28
    39cc:	8e 56       	subi	r24, 0x6E	; 110
    39ce:	9f 4f       	sbci	r25, 0xFF	; 255
    39d0:	4a e0       	ldi	r20, 0x0A	; 10
    39d2:	50 e0       	ldi	r21, 0x00	; 0
    39d4:	bc 01       	movw	r22, r24
    39d6:	c9 01       	movw	r24, r18
    39d8:	0e 94 36 2c 	call	0x586c	; 0x586c <itoa>
			TempBuffer[1] = '.';						//add the decimal point
    39dc:	ce 01       	movw	r24, r28
    39de:	8e 56       	subi	r24, 0x6E	; 110
    39e0:	9f 4f       	sbci	r25, 0xFF	; 255
    39e2:	2e e2       	ldi	r18, 0x2E	; 46
    39e4:	fc 01       	movw	r30, r24
    39e6:	21 83       	std	Z+1, r18	; 0x01
			itoa(VoltageData-((VoltageData/1000)*1000), TempBuffer+2, 10);	//add the remaining millivolts
    39e8:	80 91 0c 06 	lds	r24, 0x060C
    39ec:	90 91 0d 06 	lds	r25, 0x060D
    39f0:	a0 91 0e 06 	lds	r26, 0x060E
    39f4:	b0 91 0f 06 	lds	r27, 0x060F
    39f8:	28 ee       	ldi	r18, 0xE8	; 232
    39fa:	33 e0       	ldi	r19, 0x03	; 3
    39fc:	40 e0       	ldi	r20, 0x00	; 0
    39fe:	50 e0       	ldi	r21, 0x00	; 0
    3a00:	bc 01       	movw	r22, r24
    3a02:	cd 01       	movw	r24, r26
    3a04:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__udivmodsi4>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	9c 01       	movw	r18, r24
    3a0e:	ce 01       	movw	r24, r28
    3a10:	8e 56       	subi	r24, 0x6E	; 110
    3a12:	9f 4f       	sbci	r25, 0xFF	; 255
    3a14:	02 96       	adiw	r24, 0x02	; 2
    3a16:	4a e0       	ldi	r20, 0x0A	; 10
    3a18:	50 e0       	ldi	r21, 0x00	; 0
    3a1a:	bc 01       	movw	r22, r24
    3a1c:	c9 01       	movw	r24, r18
    3a1e:	0e 94 36 2c 	call	0x586c	; 0x586c <itoa>
			Show_String(1,TempBuffer,0x28,0x05);		//display the result.
    3a22:	ce 01       	movw	r24, r28
    3a24:	8e 56       	subi	r24, 0x6E	; 110
    3a26:	9f 4f       	sbci	r25, 0xFF	; 255
    3a28:	25 e0       	ldi	r18, 0x05	; 5
    3a2a:	48 e2       	ldi	r20, 0x28	; 40
    3a2c:	bc 01       	movw	r22, r24
    3a2e:	81 e0       	ldi	r24, 0x01	; 1
    3a30:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <Show_String>
			Show_Big_String(&Voltage,0x05,0x64,0x16,0x7F, 9, 0x0F, 0xF0);
    3a34:	ce 01       	movw	r24, r28
    3a36:	8d 59       	subi	r24, 0x9D	; 157
    3a38:	9f 4f       	sbci	r25, 0xFF	; 255
    3a3a:	0f 2e       	mov	r0, r31
    3a3c:	f0 ef       	ldi	r31, 0xF0	; 240
    3a3e:	af 2e       	mov	r10, r31
    3a40:	f0 2d       	mov	r31, r0
    3a42:	0f 2e       	mov	r0, r31
    3a44:	ff e0       	ldi	r31, 0x0F	; 15
    3a46:	cf 2e       	mov	r12, r31
    3a48:	f0 2d       	mov	r31, r0
    3a4a:	0f 2e       	mov	r0, r31
    3a4c:	f9 e0       	ldi	r31, 0x09	; 9
    3a4e:	ef 2e       	mov	r14, r31
    3a50:	f1 2c       	mov	r15, r1
    3a52:	f0 2d       	mov	r31, r0
    3a54:	0f e7       	ldi	r16, 0x7F	; 127
    3a56:	26 e1       	ldi	r18, 0x16	; 22
    3a58:	44 e6       	ldi	r20, 0x64	; 100
    3a5a:	65 e0       	ldi	r22, 0x05	; 5
    3a5c:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <Show_Big_String>
			Show_Big_String(&TempBuffer,0x2D,0x64,0x16,0x7F, 4, 0x0F, 0xF0);
    3a60:	ce 01       	movw	r24, r28
    3a62:	8e 56       	subi	r24, 0x6E	; 110
    3a64:	9f 4f       	sbci	r25, 0xFF	; 255
    3a66:	0f 2e       	mov	r0, r31
    3a68:	f0 ef       	ldi	r31, 0xF0	; 240
    3a6a:	af 2e       	mov	r10, r31
    3a6c:	f0 2d       	mov	r31, r0
    3a6e:	0f 2e       	mov	r0, r31
    3a70:	ff e0       	ldi	r31, 0x0F	; 15
    3a72:	cf 2e       	mov	r12, r31
    3a74:	f0 2d       	mov	r31, r0
    3a76:	68 94       	set
    3a78:	ee 24       	eor	r14, r14
    3a7a:	e2 f8       	bld	r14, 2
    3a7c:	f1 2c       	mov	r15, r1
    3a7e:	0f e7       	ldi	r16, 0x7F	; 127
    3a80:	26 e1       	ldi	r18, 0x16	; 22
    3a82:	44 e6       	ldi	r20, 0x64	; 100
    3a84:	6d e2       	ldi	r22, 0x2D	; 45
    3a86:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <Show_Big_String>
			Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x04, 0x40);
    3a8a:	ce 01       	movw	r24, r28
    3a8c:	80 57       	subi	r24, 0x70	; 112
    3a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a90:	68 94       	set
    3a92:	aa 24       	eor	r10, r10
    3a94:	a6 f8       	bld	r10, 6
    3a96:	68 94       	set
    3a98:	cc 24       	eor	r12, r12
    3a9a:	c2 f8       	bld	r12, 2
    3a9c:	ee 24       	eor	r14, r14
    3a9e:	e3 94       	inc	r14
    3aa0:	f1 2c       	mov	r15, r1
    3aa2:	0f e7       	ldi	r16, 0x7F	; 127
    3aa4:	21 e1       	ldi	r18, 0x11	; 17
    3aa6:	45 e1       	ldi	r20, 0x15	; 21
    3aa8:	60 e0       	ldi	r22, 0x00	; 0
    3aaa:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <Show_Bigger_String>
			Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x04, 0x40);
    3aae:	ce 01       	movw	r24, r28
    3ab0:	8f 56       	subi	r24, 0x6F	; 111
    3ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ab4:	68 94       	set
    3ab6:	aa 24       	eor	r10, r10
    3ab8:	a6 f8       	bld	r10, 6
    3aba:	68 94       	set
    3abc:	cc 24       	eor	r12, r12
    3abe:	c2 f8       	bld	r12, 2
    3ac0:	ee 24       	eor	r14, r14
    3ac2:	e3 94       	inc	r14
    3ac4:	f1 2c       	mov	r15, r1
    3ac6:	0f e7       	ldi	r16, 0x7F	; 127
    3ac8:	21 e1       	ldi	r18, 0x11	; 17
    3aca:	40 e6       	ldi	r20, 0x60	; 96
    3acc:	6a e3       	ldi	r22, 0x3A	; 58
    3ace:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <Show_Bigger_String>
		}
		
		if(LeftDialADCScaled > 6)
    3ad2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ad4:	9a a1       	ldd	r25, Y+34	; 0x22
    3ad6:	07 97       	sbiw	r24, 0x07	; 7
    3ad8:	0c f4       	brge	.+2      	; 0x3adc <main+0xb1a>
    3ada:	5a c0       	rjmp	.+180    	; 0x3b90 <main+0xbce>
		{
			if(ADC_Change == 1)
    3adc:	8f 81       	ldd	r24, Y+7	; 0x07
    3ade:	98 85       	ldd	r25, Y+8	; 0x08
    3ae0:	01 97       	sbiw	r24, 0x01	; 1
    3ae2:	09 f0       	breq	.+2      	; 0x3ae6 <main+0xb24>
    3ae4:	43 c0       	rjmp	.+134    	; 0x3b6c <main+0xbaa>
			{
				ADC_Change = 0;
    3ae6:	18 86       	std	Y+8, r1	; 0x08
    3ae8:	1f 82       	std	Y+7, r1	; 0x07
				if(LeftDialADCScaled > LeftDialADCOld){
    3aea:	29 a1       	ldd	r18, Y+33	; 0x21
    3aec:	3a a1       	ldd	r19, Y+34	; 0x22
    3aee:	89 85       	ldd	r24, Y+9	; 0x09
    3af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3af2:	82 17       	cp	r24, r18
    3af4:	93 07       	cpc	r25, r19
    3af6:	a0 f4       	brcc	.+40     	; 0x3b20 <main+0xb5e>
					Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x0F, 0xF0);
    3af8:	ce 01       	movw	r24, r28
    3afa:	8f 56       	subi	r24, 0x6F	; 111
    3afc:	9f 4f       	sbci	r25, 0xFF	; 255
    3afe:	0f 2e       	mov	r0, r31
    3b00:	f0 ef       	ldi	r31, 0xF0	; 240
    3b02:	af 2e       	mov	r10, r31
    3b04:	f0 2d       	mov	r31, r0
    3b06:	0f 2e       	mov	r0, r31
    3b08:	ff e0       	ldi	r31, 0x0F	; 15
    3b0a:	cf 2e       	mov	r12, r31
    3b0c:	f0 2d       	mov	r31, r0
    3b0e:	ee 24       	eor	r14, r14
    3b10:	e3 94       	inc	r14
    3b12:	f1 2c       	mov	r15, r1
    3b14:	0f e7       	ldi	r16, 0x7F	; 127
    3b16:	21 e1       	ldi	r18, 0x11	; 17
    3b18:	40 e6       	ldi	r20, 0x60	; 96
    3b1a:	6a e3       	ldi	r22, 0x3A	; 58
    3b1c:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <Show_Bigger_String>
				}
				if(LeftDialADCScaled < LeftDialADCOld){
    3b20:	29 a1       	ldd	r18, Y+33	; 0x21
    3b22:	3a a1       	ldd	r19, Y+34	; 0x22
    3b24:	89 85       	ldd	r24, Y+9	; 0x09
    3b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b28:	28 17       	cp	r18, r24
    3b2a:	39 07       	cpc	r19, r25
    3b2c:	a0 f4       	brcc	.+40     	; 0x3b56 <main+0xb94>
					Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x0F, 0xF0);
    3b2e:	ce 01       	movw	r24, r28
    3b30:	80 57       	subi	r24, 0x70	; 112
    3b32:	9f 4f       	sbci	r25, 0xFF	; 255
    3b34:	0f 2e       	mov	r0, r31
    3b36:	f0 ef       	ldi	r31, 0xF0	; 240
    3b38:	af 2e       	mov	r10, r31
    3b3a:	f0 2d       	mov	r31, r0
    3b3c:	0f 2e       	mov	r0, r31
    3b3e:	ff e0       	ldi	r31, 0x0F	; 15
    3b40:	cf 2e       	mov	r12, r31
    3b42:	f0 2d       	mov	r31, r0
    3b44:	ee 24       	eor	r14, r14
    3b46:	e3 94       	inc	r14
    3b48:	f1 2c       	mov	r15, r1
    3b4a:	0f e7       	ldi	r16, 0x7F	; 127
    3b4c:	21 e1       	ldi	r18, 0x11	; 17
    3b4e:	45 e1       	ldi	r20, 0x15	; 21
    3b50:	60 e0       	ldi	r22, 0x00	; 0
    3b52:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <Show_Bigger_String>
				}
				LeftDialADCOld = LeftDialADCScaled;
    3b56:	89 a1       	ldd	r24, Y+33	; 0x21
    3b58:	9a a1       	ldd	r25, Y+34	; 0x22
    3b5a:	9a 87       	std	Y+10, r25	; 0x0a
    3b5c:	89 87       	std	Y+9, r24	; 0x09
				Delay(500);
    3b5e:	84 ef       	ldi	r24, 0xF4	; 244
    3b60:	91 e0       	ldi	r25, 0x01	; 1
    3b62:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <Delay>
				Fill_RAM(0x00);
    3b66:	80 e0       	ldi	r24, 0x00	; 0
    3b68:	0e 94 4f 20 	call	0x409e	; 0x409e <Fill_RAM>
			}
			Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x04, 0x40);
    3b6c:	ce 01       	movw	r24, r28
    3b6e:	80 57       	subi	r24, 0x70	; 112
    3b70:	9f 4f       	sbci	r25, 0xFF	; 255
    3b72:	68 94       	set
    3b74:	aa 24       	eor	r10, r10
    3b76:	a6 f8       	bld	r10, 6
    3b78:	68 94       	set
    3b7a:	cc 24       	eor	r12, r12
    3b7c:	c2 f8       	bld	r12, 2
    3b7e:	ee 24       	eor	r14, r14
    3b80:	e3 94       	inc	r14
    3b82:	f1 2c       	mov	r15, r1
    3b84:	0f e7       	ldi	r16, 0x7F	; 127
    3b86:	21 e1       	ldi	r18, 0x11	; 17
    3b88:	45 e1       	ldi	r20, 0x15	; 21
    3b8a:	60 e0       	ldi	r22, 0x00	; 0
    3b8c:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <Show_Bigger_String>
		// If throttle is at 100%, when the throttle goes down, a trailing 0 will be left
		// This needs to be cleared 
		
		//_delay_ms(5); 
		
	}	
    3b90:	1c cb       	rjmp	.-2504   	; 0x31ca <main+0x208>

00003b92 <readDials>:

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  Read Dials
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void readDials(void)
{
    3b92:	cf 93       	push	r28
    3b94:	df 93       	push	r29
    3b96:	cd b7       	in	r28, 0x3d	; 61
    3b98:	de b7       	in	r29, 0x3e	; 62
    3b9a:	6d 97       	sbiw	r28, 0x1d	; 29
    3b9c:	0f b6       	in	r0, 0x3f	; 63
    3b9e:	f8 94       	cli
    3ba0:	de bf       	out	0x3e, r29	; 62
    3ba2:	0f be       	out	0x3f, r0	; 63
    3ba4:	cd bf       	out	0x3d, r28	; 61
	uint8_t counter = 0;
    3ba6:	19 82       	std	Y+1, r1	; 0x01
	uint16_t SwitchRight;
	uint16_t SwitchLeft;
	uint16_t SwitchRight2;
	uint16_t SwitchLeft2;
	SwitchRight = ADC_read(2);
    3ba8:	82 e0       	ldi	r24, 0x02	; 2
    3baa:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <ADC_read>
    3bae:	9b 83       	std	Y+3, r25	; 0x03
    3bb0:	8a 83       	std	Y+2, r24	; 0x02
	SwitchLeft = ADC_read(3);
    3bb2:	83 e0       	ldi	r24, 0x03	; 3
    3bb4:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <ADC_read>
    3bb8:	9d 83       	std	Y+5, r25	; 0x05
    3bba:	8c 83       	std	Y+4, r24	; 0x04
		{
			break;
		}
	}*/
	
	int intSwitchLeft = (SwitchLeft >> 2) / 24;
    3bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    3bbe:	9d 81       	ldd	r25, Y+5	; 0x05
    3bc0:	96 95       	lsr	r25
    3bc2:	87 95       	ror	r24
    3bc4:	96 95       	lsr	r25
    3bc6:	87 95       	ror	r24
    3bc8:	9c 01       	movw	r18, r24
    3bca:	ab ea       	ldi	r26, 0xAB	; 171
    3bcc:	ba ea       	ldi	r27, 0xAA	; 170
    3bce:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__umulhisi3>
    3bd2:	92 95       	swap	r25
    3bd4:	82 95       	swap	r24
    3bd6:	8f 70       	andi	r24, 0x0F	; 15
    3bd8:	89 27       	eor	r24, r25
    3bda:	9f 70       	andi	r25, 0x0F	; 15
    3bdc:	89 27       	eor	r24, r25
    3bde:	9f 83       	std	Y+7, r25	; 0x07
    3be0:	8e 83       	std	Y+6, r24	; 0x06
	int intSwitchRight = (SwitchRight >> 2) / 24;
    3be2:	8a 81       	ldd	r24, Y+2	; 0x02
    3be4:	9b 81       	ldd	r25, Y+3	; 0x03
    3be6:	96 95       	lsr	r25
    3be8:	87 95       	ror	r24
    3bea:	96 95       	lsr	r25
    3bec:	87 95       	ror	r24
    3bee:	9c 01       	movw	r18, r24
    3bf0:	ab ea       	ldi	r26, 0xAB	; 171
    3bf2:	ba ea       	ldi	r27, 0xAA	; 170
    3bf4:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__umulhisi3>
    3bf8:	92 95       	swap	r25
    3bfa:	82 95       	swap	r24
    3bfc:	8f 70       	andi	r24, 0x0F	; 15
    3bfe:	89 27       	eor	r24, r25
    3c00:	9f 70       	andi	r25, 0x0F	; 15
    3c02:	89 27       	eor	r24, r25
    3c04:	99 87       	std	Y+9, r25	; 0x09
    3c06:	88 87       	std	Y+8, r24	; 0x08
	unsigned char SwitchLeftBuffer[10];
	unsigned char SwitchRightBuffer[10];
	itoa(intSwitchRight,SwitchRightBuffer,10);
    3c08:	9e 01       	movw	r18, r28
    3c0a:	2c 5e       	subi	r18, 0xEC	; 236
    3c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c0e:	88 85       	ldd	r24, Y+8	; 0x08
    3c10:	99 85       	ldd	r25, Y+9	; 0x09
    3c12:	4a e0       	ldi	r20, 0x0A	; 10
    3c14:	50 e0       	ldi	r21, 0x00	; 0
    3c16:	b9 01       	movw	r22, r18
    3c18:	0e 94 36 2c 	call	0x586c	; 0x586c <itoa>
	itoa(intSwitchLeft,SwitchLeftBuffer,10);
    3c1c:	9e 01       	movw	r18, r28
    3c1e:	26 5f       	subi	r18, 0xF6	; 246
    3c20:	3f 4f       	sbci	r19, 0xFF	; 255
    3c22:	8e 81       	ldd	r24, Y+6	; 0x06
    3c24:	9f 81       	ldd	r25, Y+7	; 0x07
    3c26:	4a e0       	ldi	r20, 0x0A	; 10
    3c28:	50 e0       	ldi	r21, 0x00	; 0
    3c2a:	b9 01       	movw	r22, r18
    3c2c:	0e 94 36 2c 	call	0x586c	; 0x586c <itoa>
	strcat(SwitchLeftBuffer,SwitchRightBuffer);
    3c30:	9e 01       	movw	r18, r28
    3c32:	2c 5e       	subi	r18, 0xEC	; 236
    3c34:	3f 4f       	sbci	r19, 0xFF	; 255
    3c36:	ce 01       	movw	r24, r28
    3c38:	0a 96       	adiw	r24, 0x0a	; 10
    3c3a:	b9 01       	movw	r22, r18
    3c3c:	0e 94 2b 2c 	call	0x5856	; 0x5856 <strcat>
	//Show_String(1,&SwitchLeftBuffer,0x28,0x05);
	CAN_Dial = intSwitchRight | (intSwitchLeft<<4);
    3c40:	8e 81       	ldd	r24, Y+6	; 0x06
    3c42:	9f 81       	ldd	r25, Y+7	; 0x07
    3c44:	82 95       	swap	r24
    3c46:	92 95       	swap	r25
    3c48:	90 7f       	andi	r25, 0xF0	; 240
    3c4a:	98 27       	eor	r25, r24
    3c4c:	80 7f       	andi	r24, 0xF0	; 240
    3c4e:	98 27       	eor	r25, r24
    3c50:	98 2f       	mov	r25, r24
    3c52:	88 85       	ldd	r24, Y+8	; 0x08
    3c54:	89 2b       	or	r24, r25
    3c56:	80 93 10 06 	sts	0x0610, r24
}
    3c5a:	6d 96       	adiw	r28, 0x1d	; 29
    3c5c:	0f b6       	in	r0, 0x3f	; 63
    3c5e:	f8 94       	cli
    3c60:	de bf       	out	0x3e, r29	; 62
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	cd bf       	out	0x3d, r28	; 61
    3c66:	df 91       	pop	r29
    3c68:	cf 91       	pop	r28
    3c6a:	08 95       	ret

00003c6c <uDelay>:
	Write_Data(0x9C);			//   Gray Scale Level 13
	Write_Data(0xA8);			//   Gray Scale Level 14
	Write_Data(0xB4);			//   Gray Scale Level 15

	Write_Command(0x00);			// Enable Gray Scale Table
}
    3c6c:	cf 93       	push	r28
    3c6e:	df 93       	push	r29
    3c70:	00 d0       	rcall	.+0      	; 0x3c72 <uDelay+0x6>
    3c72:	cd b7       	in	r28, 0x3d	; 61
    3c74:	de b7       	in	r29, 0x3e	; 62
    3c76:	9a 83       	std	Y+2, r25	; 0x02
    3c78:	89 83       	std	Y+1, r24	; 0x01
    3c7a:	00 00       	nop
    3c7c:	89 81       	ldd	r24, Y+1	; 0x01
    3c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c80:	9c 01       	movw	r18, r24
    3c82:	21 50       	subi	r18, 0x01	; 1
    3c84:	31 09       	sbc	r19, r1
    3c86:	3a 83       	std	Y+2, r19	; 0x02
    3c88:	29 83       	std	Y+1, r18	; 0x01
    3c8a:	89 2b       	or	r24, r25
    3c8c:	b9 f7       	brne	.-18     	; 0x3c7c <uDelay+0x10>
    3c8e:	0f 90       	pop	r0
    3c90:	0f 90       	pop	r0
    3c92:	df 91       	pop	r29
    3c94:	cf 91       	pop	r28
    3c96:	08 95       	ret

00003c98 <Delay>:
    3c98:	cf 93       	push	r28
    3c9a:	df 93       	push	r29
    3c9c:	00 d0       	rcall	.+0      	; 0x3c9e <Delay+0x6>
    3c9e:	00 d0       	rcall	.+0      	; 0x3ca0 <Delay+0x8>
    3ca0:	cd b7       	in	r28, 0x3d	; 61
    3ca2:	de b7       	in	r29, 0x3e	; 62
    3ca4:	9c 83       	std	Y+4, r25	; 0x04
    3ca6:	8b 83       	std	Y+3, r24	; 0x03
    3ca8:	1a 82       	std	Y+2, r1	; 0x02
    3caa:	19 82       	std	Y+1, r1	; 0x01
    3cac:	09 c0       	rjmp	.+18     	; 0x3cc0 <Delay+0x28>
    3cae:	80 e6       	ldi	r24, 0x60	; 96
    3cb0:	94 e0       	ldi	r25, 0x04	; 4
    3cb2:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <uDelay>
    3cb6:	89 81       	ldd	r24, Y+1	; 0x01
    3cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cba:	01 96       	adiw	r24, 0x01	; 1
    3cbc:	9a 83       	std	Y+2, r25	; 0x02
    3cbe:	89 83       	std	Y+1, r24	; 0x01
    3cc0:	29 81       	ldd	r18, Y+1	; 0x01
    3cc2:	3a 81       	ldd	r19, Y+2	; 0x02
    3cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc8:	28 17       	cp	r18, r24
    3cca:	39 07       	cpc	r19, r25
    3ccc:	80 f3       	brcs	.-32     	; 0x3cae <Delay+0x16>
    3cce:	0f 90       	pop	r0
    3cd0:	0f 90       	pop	r0
    3cd2:	0f 90       	pop	r0
    3cd4:	0f 90       	pop	r0
    3cd6:	df 91       	pop	r29
    3cd8:	cf 91       	pop	r28
    3cda:	08 95       	ret

00003cdc <Write_Command>:
    3cdc:	cf 93       	push	r28
    3cde:	df 93       	push	r29
    3ce0:	1f 92       	push	r1
    3ce2:	cd b7       	in	r28, 0x3d	; 61
    3ce4:	de b7       	in	r29, 0x3e	; 62
    3ce6:	89 83       	std	Y+1, r24	; 0x01
    3ce8:	85 e2       	ldi	r24, 0x25	; 37
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	25 e2       	ldi	r18, 0x25	; 37
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	f9 01       	movw	r30, r18
    3cf2:	20 81       	ld	r18, Z
    3cf4:	2f 7d       	andi	r18, 0xDF	; 223
    3cf6:	fc 01       	movw	r30, r24
    3cf8:	20 83       	st	Z, r18
    3cfa:	8b e2       	ldi	r24, 0x2B	; 43
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	2b e2       	ldi	r18, 0x2B	; 43
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	f9 01       	movw	r30, r18
    3d04:	20 81       	ld	r18, Z
    3d06:	2e 7f       	andi	r18, 0xFE	; 254
    3d08:	fc 01       	movw	r30, r24
    3d0a:	20 83       	st	Z, r18
    3d0c:	89 81       	ldd	r24, Y+1	; 0x01
    3d0e:	88 2f       	mov	r24, r24
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <spi_send_byte>
    3d16:	85 e2       	ldi	r24, 0x25	; 37
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	25 e2       	ldi	r18, 0x25	; 37
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	f9 01       	movw	r30, r18
    3d20:	20 81       	ld	r18, Z
    3d22:	20 62       	ori	r18, 0x20	; 32
    3d24:	fc 01       	movw	r30, r24
    3d26:	20 83       	st	Z, r18
    3d28:	8b e2       	ldi	r24, 0x2B	; 43
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	2b e2       	ldi	r18, 0x2B	; 43
    3d2e:	30 e0       	ldi	r19, 0x00	; 0
    3d30:	f9 01       	movw	r30, r18
    3d32:	20 81       	ld	r18, Z
    3d34:	21 60       	ori	r18, 0x01	; 1
    3d36:	fc 01       	movw	r30, r24
    3d38:	20 83       	st	Z, r18
    3d3a:	0f 90       	pop	r0
    3d3c:	df 91       	pop	r29
    3d3e:	cf 91       	pop	r28
    3d40:	08 95       	ret

00003d42 <Write_Data>:
    3d42:	cf 93       	push	r28
    3d44:	df 93       	push	r29
    3d46:	1f 92       	push	r1
    3d48:	cd b7       	in	r28, 0x3d	; 61
    3d4a:	de b7       	in	r29, 0x3e	; 62
    3d4c:	89 83       	std	Y+1, r24	; 0x01
    3d4e:	8b e2       	ldi	r24, 0x2B	; 43
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	2b e2       	ldi	r18, 0x2B	; 43
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	f9 01       	movw	r30, r18
    3d58:	20 81       	ld	r18, Z
    3d5a:	2e 7f       	andi	r18, 0xFE	; 254
    3d5c:	fc 01       	movw	r30, r24
    3d5e:	20 83       	st	Z, r18
    3d60:	85 e2       	ldi	r24, 0x25	; 37
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	25 e2       	ldi	r18, 0x25	; 37
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	f9 01       	movw	r30, r18
    3d6a:	20 81       	ld	r18, Z
    3d6c:	20 62       	ori	r18, 0x20	; 32
    3d6e:	fc 01       	movw	r30, r24
    3d70:	20 83       	st	Z, r18
    3d72:	89 81       	ldd	r24, Y+1	; 0x01
    3d74:	88 2f       	mov	r24, r24
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <spi_send_byte>
    3d7c:	85 e2       	ldi	r24, 0x25	; 37
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	25 e2       	ldi	r18, 0x25	; 37
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	f9 01       	movw	r30, r18
    3d86:	20 81       	ld	r18, Z
    3d88:	20 62       	ori	r18, 0x20	; 32
    3d8a:	fc 01       	movw	r30, r24
    3d8c:	20 83       	st	Z, r18
    3d8e:	8b e2       	ldi	r24, 0x2B	; 43
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	2b e2       	ldi	r18, 0x2B	; 43
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	f9 01       	movw	r30, r18
    3d98:	20 81       	ld	r18, Z
    3d9a:	21 60       	ori	r18, 0x01	; 1
    3d9c:	fc 01       	movw	r30, r24
    3d9e:	20 83       	st	Z, r18
    3da0:	0f 90       	pop	r0
    3da2:	df 91       	pop	r29
    3da4:	cf 91       	pop	r28
    3da6:	08 95       	ret

00003da8 <Set_Column_Address>:
    3da8:	cf 93       	push	r28
    3daa:	df 93       	push	r29
    3dac:	00 d0       	rcall	.+0      	; 0x3dae <Set_Column_Address+0x6>
    3dae:	cd b7       	in	r28, 0x3d	; 61
    3db0:	de b7       	in	r29, 0x3e	; 62
    3db2:	89 83       	std	Y+1, r24	; 0x01
    3db4:	6a 83       	std	Y+2, r22	; 0x02
    3db6:	85 e1       	ldi	r24, 0x15	; 21
    3db8:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    3dbc:	89 81       	ldd	r24, Y+1	; 0x01
    3dbe:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    3dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc4:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    3dc8:	0f 90       	pop	r0
    3dca:	0f 90       	pop	r0
    3dcc:	df 91       	pop	r29
    3dce:	cf 91       	pop	r28
    3dd0:	08 95       	ret

00003dd2 <Set_Row_Address>:
    3dd2:	cf 93       	push	r28
    3dd4:	df 93       	push	r29
    3dd6:	00 d0       	rcall	.+0      	; 0x3dd8 <Set_Row_Address+0x6>
    3dd8:	cd b7       	in	r28, 0x3d	; 61
    3dda:	de b7       	in	r29, 0x3e	; 62
    3ddc:	89 83       	std	Y+1, r24	; 0x01
    3dde:	6a 83       	std	Y+2, r22	; 0x02
    3de0:	85 e7       	ldi	r24, 0x75	; 117
    3de2:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    3de6:	89 81       	ldd	r24, Y+1	; 0x01
    3de8:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    3dec:	8a 81       	ldd	r24, Y+2	; 0x02
    3dee:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    3df2:	0f 90       	pop	r0
    3df4:	0f 90       	pop	r0
    3df6:	df 91       	pop	r29
    3df8:	cf 91       	pop	r28
    3dfa:	08 95       	ret

00003dfc <Set_Write_RAM>:
    3dfc:	cf 93       	push	r28
    3dfe:	df 93       	push	r29
    3e00:	cd b7       	in	r28, 0x3d	; 61
    3e02:	de b7       	in	r29, 0x3e	; 62
    3e04:	8c e5       	ldi	r24, 0x5C	; 92
    3e06:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    3e0a:	df 91       	pop	r29
    3e0c:	cf 91       	pop	r28
    3e0e:	08 95       	ret

00003e10 <Set_Remap_Format>:
    3e10:	cf 93       	push	r28
    3e12:	df 93       	push	r29
    3e14:	1f 92       	push	r1
    3e16:	cd b7       	in	r28, 0x3d	; 61
    3e18:	de b7       	in	r29, 0x3e	; 62
    3e1a:	89 83       	std	Y+1, r24	; 0x01
    3e1c:	80 ea       	ldi	r24, 0xA0	; 160
    3e1e:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    3e22:	89 81       	ldd	r24, Y+1	; 0x01
    3e24:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    3e28:	81 e1       	ldi	r24, 0x11	; 17
    3e2a:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    3e2e:	0f 90       	pop	r0
    3e30:	df 91       	pop	r29
    3e32:	cf 91       	pop	r28
    3e34:	08 95       	ret

00003e36 <Set_Start_Line>:
    3e36:	cf 93       	push	r28
    3e38:	df 93       	push	r29
    3e3a:	1f 92       	push	r1
    3e3c:	cd b7       	in	r28, 0x3d	; 61
    3e3e:	de b7       	in	r29, 0x3e	; 62
    3e40:	89 83       	std	Y+1, r24	; 0x01
    3e42:	81 ea       	ldi	r24, 0xA1	; 161
    3e44:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    3e48:	89 81       	ldd	r24, Y+1	; 0x01
    3e4a:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    3e4e:	0f 90       	pop	r0
    3e50:	df 91       	pop	r29
    3e52:	cf 91       	pop	r28
    3e54:	08 95       	ret

00003e56 <Set_Display_Offset>:
    3e56:	cf 93       	push	r28
    3e58:	df 93       	push	r29
    3e5a:	1f 92       	push	r1
    3e5c:	cd b7       	in	r28, 0x3d	; 61
    3e5e:	de b7       	in	r29, 0x3e	; 62
    3e60:	89 83       	std	Y+1, r24	; 0x01
    3e62:	82 ea       	ldi	r24, 0xA2	; 162
    3e64:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    3e68:	89 81       	ldd	r24, Y+1	; 0x01
    3e6a:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    3e6e:	0f 90       	pop	r0
    3e70:	df 91       	pop	r29
    3e72:	cf 91       	pop	r28
    3e74:	08 95       	ret

00003e76 <Set_Display_Mode>:
    3e76:	cf 93       	push	r28
    3e78:	df 93       	push	r29
    3e7a:	1f 92       	push	r1
    3e7c:	cd b7       	in	r28, 0x3d	; 61
    3e7e:	de b7       	in	r29, 0x3e	; 62
    3e80:	89 83       	std	Y+1, r24	; 0x01
    3e82:	89 81       	ldd	r24, Y+1	; 0x01
    3e84:	84 6a       	ori	r24, 0xA4	; 164
    3e86:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    3e8a:	0f 90       	pop	r0
    3e8c:	df 91       	pop	r29
    3e8e:	cf 91       	pop	r28
    3e90:	08 95       	ret

00003e92 <Set_Partial_Display>:
    3e92:	cf 93       	push	r28
    3e94:	df 93       	push	r29
    3e96:	00 d0       	rcall	.+0      	; 0x3e98 <Set_Partial_Display+0x6>
    3e98:	1f 92       	push	r1
    3e9a:	cd b7       	in	r28, 0x3d	; 61
    3e9c:	de b7       	in	r29, 0x3e	; 62
    3e9e:	89 83       	std	Y+1, r24	; 0x01
    3ea0:	6a 83       	std	Y+2, r22	; 0x02
    3ea2:	4b 83       	std	Y+3, r20	; 0x03
    3ea4:	89 81       	ldd	r24, Y+1	; 0x01
    3ea6:	88 6a       	ori	r24, 0xA8	; 168
    3ea8:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    3eac:	89 81       	ldd	r24, Y+1	; 0x01
    3eae:	88 23       	and	r24, r24
    3eb0:	31 f4       	brne	.+12     	; 0x3ebe <Set_Partial_Display+0x2c>
    3eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb4:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    3eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3eba:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    3ebe:	0f 90       	pop	r0
    3ec0:	0f 90       	pop	r0
    3ec2:	0f 90       	pop	r0
    3ec4:	df 91       	pop	r29
    3ec6:	cf 91       	pop	r28
    3ec8:	08 95       	ret

00003eca <Set_Function_Selection>:
    3eca:	cf 93       	push	r28
    3ecc:	df 93       	push	r29
    3ece:	1f 92       	push	r1
    3ed0:	cd b7       	in	r28, 0x3d	; 61
    3ed2:	de b7       	in	r29, 0x3e	; 62
    3ed4:	89 83       	std	Y+1, r24	; 0x01
    3ed6:	8b ea       	ldi	r24, 0xAB	; 171
    3ed8:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    3edc:	89 81       	ldd	r24, Y+1	; 0x01
    3ede:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    3ee2:	0f 90       	pop	r0
    3ee4:	df 91       	pop	r29
    3ee6:	cf 91       	pop	r28
    3ee8:	08 95       	ret

00003eea <Set_Display_On_Off>:
    3eea:	cf 93       	push	r28
    3eec:	df 93       	push	r29
    3eee:	1f 92       	push	r1
    3ef0:	cd b7       	in	r28, 0x3d	; 61
    3ef2:	de b7       	in	r29, 0x3e	; 62
    3ef4:	89 83       	std	Y+1, r24	; 0x01
    3ef6:	89 81       	ldd	r24, Y+1	; 0x01
    3ef8:	8e 6a       	ori	r24, 0xAE	; 174
    3efa:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    3efe:	0f 90       	pop	r0
    3f00:	df 91       	pop	r29
    3f02:	cf 91       	pop	r28
    3f04:	08 95       	ret

00003f06 <Set_Phase_Length>:
    3f06:	cf 93       	push	r28
    3f08:	df 93       	push	r29
    3f0a:	1f 92       	push	r1
    3f0c:	cd b7       	in	r28, 0x3d	; 61
    3f0e:	de b7       	in	r29, 0x3e	; 62
    3f10:	89 83       	std	Y+1, r24	; 0x01
    3f12:	81 eb       	ldi	r24, 0xB1	; 177
    3f14:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    3f18:	89 81       	ldd	r24, Y+1	; 0x01
    3f1a:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    3f1e:	0f 90       	pop	r0
    3f20:	df 91       	pop	r29
    3f22:	cf 91       	pop	r28
    3f24:	08 95       	ret

00003f26 <Set_Display_Clock>:
    3f26:	cf 93       	push	r28
    3f28:	df 93       	push	r29
    3f2a:	1f 92       	push	r1
    3f2c:	cd b7       	in	r28, 0x3d	; 61
    3f2e:	de b7       	in	r29, 0x3e	; 62
    3f30:	89 83       	std	Y+1, r24	; 0x01
    3f32:	83 eb       	ldi	r24, 0xB3	; 179
    3f34:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    3f38:	89 81       	ldd	r24, Y+1	; 0x01
    3f3a:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    3f3e:	0f 90       	pop	r0
    3f40:	df 91       	pop	r29
    3f42:	cf 91       	pop	r28
    3f44:	08 95       	ret

00003f46 <Set_Display_Enhancement_A>:
    3f46:	cf 93       	push	r28
    3f48:	df 93       	push	r29
    3f4a:	00 d0       	rcall	.+0      	; 0x3f4c <Set_Display_Enhancement_A+0x6>
    3f4c:	cd b7       	in	r28, 0x3d	; 61
    3f4e:	de b7       	in	r29, 0x3e	; 62
    3f50:	89 83       	std	Y+1, r24	; 0x01
    3f52:	6a 83       	std	Y+2, r22	; 0x02
    3f54:	84 eb       	ldi	r24, 0xB4	; 180
    3f56:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    3f5a:	89 81       	ldd	r24, Y+1	; 0x01
    3f5c:	80 6a       	ori	r24, 0xA0	; 160
    3f5e:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    3f62:	8a 81       	ldd	r24, Y+2	; 0x02
    3f64:	85 60       	ori	r24, 0x05	; 5
    3f66:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    3f6a:	0f 90       	pop	r0
    3f6c:	0f 90       	pop	r0
    3f6e:	df 91       	pop	r29
    3f70:	cf 91       	pop	r28
    3f72:	08 95       	ret

00003f74 <Set_GPIO>:
    3f74:	cf 93       	push	r28
    3f76:	df 93       	push	r29
    3f78:	1f 92       	push	r1
    3f7a:	cd b7       	in	r28, 0x3d	; 61
    3f7c:	de b7       	in	r29, 0x3e	; 62
    3f7e:	89 83       	std	Y+1, r24	; 0x01
    3f80:	85 eb       	ldi	r24, 0xB5	; 181
    3f82:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    3f86:	89 81       	ldd	r24, Y+1	; 0x01
    3f88:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    3f8c:	0f 90       	pop	r0
    3f8e:	df 91       	pop	r29
    3f90:	cf 91       	pop	r28
    3f92:	08 95       	ret

00003f94 <Set_Precharge_Period>:
    3f94:	cf 93       	push	r28
    3f96:	df 93       	push	r29
    3f98:	1f 92       	push	r1
    3f9a:	cd b7       	in	r28, 0x3d	; 61
    3f9c:	de b7       	in	r29, 0x3e	; 62
    3f9e:	89 83       	std	Y+1, r24	; 0x01
    3fa0:	86 eb       	ldi	r24, 0xB6	; 182
    3fa2:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    3fa6:	89 81       	ldd	r24, Y+1	; 0x01
    3fa8:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    3fac:	0f 90       	pop	r0
    3fae:	df 91       	pop	r29
    3fb0:	cf 91       	pop	r28
    3fb2:	08 95       	ret

00003fb4 <Set_Precharge_Voltage>:
    3fb4:	cf 93       	push	r28
    3fb6:	df 93       	push	r29
    3fb8:	1f 92       	push	r1
    3fba:	cd b7       	in	r28, 0x3d	; 61
    3fbc:	de b7       	in	r29, 0x3e	; 62
    3fbe:	89 83       	std	Y+1, r24	; 0x01
    3fc0:	8b eb       	ldi	r24, 0xBB	; 187
    3fc2:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    3fc6:	89 81       	ldd	r24, Y+1	; 0x01
    3fc8:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    3fcc:	0f 90       	pop	r0
    3fce:	df 91       	pop	r29
    3fd0:	cf 91       	pop	r28
    3fd2:	08 95       	ret

00003fd4 <Set_VCOMH>:
    3fd4:	cf 93       	push	r28
    3fd6:	df 93       	push	r29
    3fd8:	1f 92       	push	r1
    3fda:	cd b7       	in	r28, 0x3d	; 61
    3fdc:	de b7       	in	r29, 0x3e	; 62
    3fde:	89 83       	std	Y+1, r24	; 0x01
    3fe0:	8e eb       	ldi	r24, 0xBE	; 190
    3fe2:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    3fe6:	89 81       	ldd	r24, Y+1	; 0x01
    3fe8:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    3fec:	0f 90       	pop	r0
    3fee:	df 91       	pop	r29
    3ff0:	cf 91       	pop	r28
    3ff2:	08 95       	ret

00003ff4 <Set_Contrast_Current>:
    3ff4:	cf 93       	push	r28
    3ff6:	df 93       	push	r29
    3ff8:	1f 92       	push	r1
    3ffa:	cd b7       	in	r28, 0x3d	; 61
    3ffc:	de b7       	in	r29, 0x3e	; 62
    3ffe:	89 83       	std	Y+1, r24	; 0x01
    4000:	81 ec       	ldi	r24, 0xC1	; 193
    4002:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    4006:	89 81       	ldd	r24, Y+1	; 0x01
    4008:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    400c:	0f 90       	pop	r0
    400e:	df 91       	pop	r29
    4010:	cf 91       	pop	r28
    4012:	08 95       	ret

00004014 <Set_Master_Current>:
    4014:	cf 93       	push	r28
    4016:	df 93       	push	r29
    4018:	1f 92       	push	r1
    401a:	cd b7       	in	r28, 0x3d	; 61
    401c:	de b7       	in	r29, 0x3e	; 62
    401e:	89 83       	std	Y+1, r24	; 0x01
    4020:	87 ec       	ldi	r24, 0xC7	; 199
    4022:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    4026:	89 81       	ldd	r24, Y+1	; 0x01
    4028:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    402c:	0f 90       	pop	r0
    402e:	df 91       	pop	r29
    4030:	cf 91       	pop	r28
    4032:	08 95       	ret

00004034 <Set_Multiplex_Ratio>:
    4034:	cf 93       	push	r28
    4036:	df 93       	push	r29
    4038:	1f 92       	push	r1
    403a:	cd b7       	in	r28, 0x3d	; 61
    403c:	de b7       	in	r29, 0x3e	; 62
    403e:	89 83       	std	Y+1, r24	; 0x01
    4040:	8a ec       	ldi	r24, 0xCA	; 202
    4042:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    4046:	89 81       	ldd	r24, Y+1	; 0x01
    4048:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    404c:	0f 90       	pop	r0
    404e:	df 91       	pop	r29
    4050:	cf 91       	pop	r28
    4052:	08 95       	ret

00004054 <Set_Display_Enhancement_B>:
    4054:	cf 93       	push	r28
    4056:	df 93       	push	r29
    4058:	1f 92       	push	r1
    405a:	cd b7       	in	r28, 0x3d	; 61
    405c:	de b7       	in	r29, 0x3e	; 62
    405e:	89 83       	std	Y+1, r24	; 0x01
    4060:	81 ed       	ldi	r24, 0xD1	; 209
    4062:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    4066:	89 81       	ldd	r24, Y+1	; 0x01
    4068:	82 68       	ori	r24, 0x82	; 130
    406a:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    406e:	80 e2       	ldi	r24, 0x20	; 32
    4070:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    4074:	0f 90       	pop	r0
    4076:	df 91       	pop	r29
    4078:	cf 91       	pop	r28
    407a:	08 95       	ret

0000407c <Set_Command_Lock>:
    407c:	cf 93       	push	r28
    407e:	df 93       	push	r29
    4080:	1f 92       	push	r1
    4082:	cd b7       	in	r28, 0x3d	; 61
    4084:	de b7       	in	r29, 0x3e	; 62
    4086:	89 83       	std	Y+1, r24	; 0x01
    4088:	8d ef       	ldi	r24, 0xFD	; 253
    408a:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
    408e:	89 81       	ldd	r24, Y+1	; 0x01
    4090:	82 61       	ori	r24, 0x12	; 18
    4092:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    4096:	0f 90       	pop	r0
    4098:	df 91       	pop	r29
    409a:	cf 91       	pop	r28
    409c:	08 95       	ret

0000409e <Fill_RAM>:
    409e:	cf 93       	push	r28
    40a0:	df 93       	push	r29
    40a2:	00 d0       	rcall	.+0      	; 0x40a4 <Fill_RAM+0x6>
    40a4:	1f 92       	push	r1
    40a6:	cd b7       	in	r28, 0x3d	; 61
    40a8:	de b7       	in	r29, 0x3e	; 62
    40aa:	8b 83       	std	Y+3, r24	; 0x03
    40ac:	67 e7       	ldi	r22, 0x77	; 119
    40ae:	80 e0       	ldi	r24, 0x00	; 0
    40b0:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <Set_Column_Address>
    40b4:	6f e7       	ldi	r22, 0x7F	; 127
    40b6:	80 e0       	ldi	r24, 0x00	; 0
    40b8:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <Set_Row_Address>
    40bc:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <Set_Write_RAM>
    40c0:	19 82       	std	Y+1, r1	; 0x01
    40c2:	0e c0       	rjmp	.+28     	; 0x40e0 <Fill_RAM+0x42>
    40c4:	1a 82       	std	Y+2, r1	; 0x02
    40c6:	06 c0       	rjmp	.+12     	; 0x40d4 <Fill_RAM+0x36>
    40c8:	8b 81       	ldd	r24, Y+3	; 0x03
    40ca:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    40ce:	8a 81       	ldd	r24, Y+2	; 0x02
    40d0:	8f 5f       	subi	r24, 0xFF	; 255
    40d2:	8a 83       	std	Y+2, r24	; 0x02
    40d4:	8a 81       	ldd	r24, Y+2	; 0x02
    40d6:	88 37       	cpi	r24, 0x78	; 120
    40d8:	b8 f3       	brcs	.-18     	; 0x40c8 <Fill_RAM+0x2a>
    40da:	89 81       	ldd	r24, Y+1	; 0x01
    40dc:	8f 5f       	subi	r24, 0xFF	; 255
    40de:	89 83       	std	Y+1, r24	; 0x01
    40e0:	89 81       	ldd	r24, Y+1	; 0x01
    40e2:	88 23       	and	r24, r24
    40e4:	7c f7       	brge	.-34     	; 0x40c4 <Fill_RAM+0x26>
    40e6:	0f 90       	pop	r0
    40e8:	0f 90       	pop	r0
    40ea:	0f 90       	pop	r0
    40ec:	df 91       	pop	r29
    40ee:	cf 91       	pop	r28
    40f0:	08 95       	ret

000040f2 <Show_Font57>:
    40f2:	cf 93       	push	r28
    40f4:	df 93       	push	r29
    40f6:	cd b7       	in	r28, 0x3d	; 61
    40f8:	de b7       	in	r29, 0x3e	; 62
    40fa:	2d 97       	sbiw	r28, 0x0d	; 13
    40fc:	0f b6       	in	r0, 0x3f	; 63
    40fe:	f8 94       	cli
    4100:	de bf       	out	0x3e, r29	; 62
    4102:	0f be       	out	0x3f, r0	; 63
    4104:	cd bf       	out	0x3d, r28	; 61
    4106:	8a 87       	std	Y+10, r24	; 0x0a
    4108:	6b 87       	std	Y+11, r22	; 0x0b
    410a:	4c 87       	std	Y+12, r20	; 0x0c
    410c:	2d 87       	std	Y+13, r18	; 0x0d
    410e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4110:	80 32       	cpi	r24, 0x20	; 32
    4112:	19 f4       	brne	.+6      	; 0x411a <Show_Font57+0x28>
    4114:	80 e6       	ldi	r24, 0x60	; 96
    4116:	8b 87       	std	Y+11, r24	; 0x0b
    4118:	03 c0       	rjmp	.+6      	; 0x4120 <Show_Font57+0x2e>
    411a:	8b 85       	ldd	r24, Y+11	; 0x0b
    411c:	80 52       	subi	r24, 0x20	; 32
    411e:	8b 87       	std	Y+11, r24	; 0x0b
    4120:	8d 85       	ldd	r24, Y+13	; 0x0d
    4122:	80 5f       	subi	r24, 0xF0	; 240
    4124:	8f 83       	std	Y+7, r24	; 0x07
    4126:	8a 85       	ldd	r24, Y+10	; 0x0a
    4128:	88 2f       	mov	r24, r24
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	01 97       	sbiw	r24, 0x01	; 1
    412e:	91 f4       	brne	.+36     	; 0x4154 <Show_Font57+0x62>
    4130:	8b 85       	ldd	r24, Y+11	; 0x0b
    4132:	88 2f       	mov	r24, r24
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	9c 01       	movw	r18, r24
    4138:	21 50       	subi	r18, 0x01	; 1
    413a:	31 09       	sbc	r19, r1
    413c:	c9 01       	movw	r24, r18
    413e:	88 0f       	add	r24, r24
    4140:	99 1f       	adc	r25, r25
    4142:	88 0f       	add	r24, r24
    4144:	99 1f       	adc	r25, r25
    4146:	82 0f       	add	r24, r18
    4148:	93 1f       	adc	r25, r19
    414a:	80 50       	subi	r24, 0x00	; 0
    414c:	9f 4f       	sbci	r25, 0xFF	; 255
    414e:	9a 83       	std	Y+2, r25	; 0x02
    4150:	89 83       	std	Y+1, r24	; 0x01
    4152:	00 00       	nop
    4154:	85 e1       	ldi	r24, 0x15	; 21
    4156:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <Set_Remap_Format>
    415a:	1b 82       	std	Y+3, r1	; 0x03
    415c:	0d c3       	rjmp	.+1562   	; 0x4778 <Show_Font57+0x686>
    415e:	89 81       	ldd	r24, Y+1	; 0x01
    4160:	9a 81       	ldd	r25, Y+2	; 0x02
    4162:	fc 01       	movw	r30, r24
    4164:	80 81       	ld	r24, Z
    4166:	88 87       	std	Y+8, r24	; 0x08
    4168:	89 81       	ldd	r24, Y+1	; 0x01
    416a:	9a 81       	ldd	r25, Y+2	; 0x02
    416c:	01 96       	adiw	r24, 0x01	; 1
    416e:	9a 83       	std	Y+2, r25	; 0x02
    4170:	89 83       	std	Y+1, r24	; 0x01
    4172:	8b 81       	ldd	r24, Y+3	; 0x03
    4174:	81 30       	cpi	r24, 0x01	; 1
    4176:	21 f4       	brne	.+8      	; 0x4180 <Show_Font57+0x8e>
    4178:	1c 82       	std	Y+4, r1	; 0x04
    417a:	1d 82       	std	Y+5, r1	; 0x05
    417c:	1e 82       	std	Y+6, r1	; 0x06
    417e:	1e c0       	rjmp	.+60     	; 0x41bc <Show_Font57+0xca>
    4180:	89 81       	ldd	r24, Y+1	; 0x01
    4182:	9a 81       	ldd	r25, Y+2	; 0x02
    4184:	fc 01       	movw	r30, r24
    4186:	80 81       	ld	r24, Z
    4188:	8c 83       	std	Y+4, r24	; 0x04
    418a:	89 81       	ldd	r24, Y+1	; 0x01
    418c:	9a 81       	ldd	r25, Y+2	; 0x02
    418e:	01 96       	adiw	r24, 0x01	; 1
    4190:	9a 83       	std	Y+2, r25	; 0x02
    4192:	89 83       	std	Y+1, r24	; 0x01
    4194:	89 81       	ldd	r24, Y+1	; 0x01
    4196:	9a 81       	ldd	r25, Y+2	; 0x02
    4198:	fc 01       	movw	r30, r24
    419a:	80 81       	ld	r24, Z
    419c:	8d 83       	std	Y+5, r24	; 0x05
    419e:	89 81       	ldd	r24, Y+1	; 0x01
    41a0:	9a 81       	ldd	r25, Y+2	; 0x02
    41a2:	01 96       	adiw	r24, 0x01	; 1
    41a4:	9a 83       	std	Y+2, r25	; 0x02
    41a6:	89 83       	std	Y+1, r24	; 0x01
    41a8:	89 81       	ldd	r24, Y+1	; 0x01
    41aa:	9a 81       	ldd	r25, Y+2	; 0x02
    41ac:	fc 01       	movw	r30, r24
    41ae:	80 81       	ld	r24, Z
    41b0:	8e 83       	std	Y+6, r24	; 0x06
    41b2:	89 81       	ldd	r24, Y+1	; 0x01
    41b4:	9a 81       	ldd	r25, Y+2	; 0x02
    41b6:	01 96       	adiw	r24, 0x01	; 1
    41b8:	9a 83       	std	Y+2, r25	; 0x02
    41ba:	89 83       	std	Y+1, r24	; 0x01
    41bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    41be:	9c e1       	ldi	r25, 0x1C	; 28
    41c0:	98 0f       	add	r25, r24
    41c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    41c4:	84 5e       	subi	r24, 0xE4	; 228
    41c6:	69 2f       	mov	r22, r25
    41c8:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <Set_Column_Address>
    41cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    41ce:	89 5f       	subi	r24, 0xF9	; 249
    41d0:	68 2f       	mov	r22, r24
    41d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    41d4:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <Set_Row_Address>
    41d8:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <Set_Write_RAM>
    41dc:	88 85       	ldd	r24, Y+8	; 0x08
    41de:	88 2f       	mov	r24, r24
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	81 70       	andi	r24, 0x01	; 1
    41e4:	99 27       	eor	r25, r25
    41e6:	82 95       	swap	r24
    41e8:	92 95       	swap	r25
    41ea:	90 7f       	andi	r25, 0xF0	; 240
    41ec:	98 27       	eor	r25, r24
    41ee:	80 7f       	andi	r24, 0xF0	; 240
    41f0:	98 27       	eor	r25, r24
    41f2:	98 2f       	mov	r25, r24
    41f4:	8c 81       	ldd	r24, Y+4	; 0x04
    41f6:	81 70       	andi	r24, 0x01	; 1
    41f8:	89 2b       	or	r24, r25
    41fa:	89 87       	std	Y+9, r24	; 0x09
    41fc:	89 85       	ldd	r24, Y+9	; 0x09
    41fe:	88 2f       	mov	r24, r24
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	88 0f       	add	r24, r24
    4204:	99 1f       	adc	r25, r25
    4206:	98 2f       	mov	r25, r24
    4208:	89 85       	ldd	r24, Y+9	; 0x09
    420a:	29 2f       	mov	r18, r25
    420c:	28 2b       	or	r18, r24
    420e:	89 85       	ldd	r24, Y+9	; 0x09
    4210:	88 2f       	mov	r24, r24
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	88 0f       	add	r24, r24
    4216:	99 1f       	adc	r25, r25
    4218:	88 0f       	add	r24, r24
    421a:	99 1f       	adc	r25, r25
    421c:	28 2b       	or	r18, r24
    421e:	89 85       	ldd	r24, Y+9	; 0x09
    4220:	88 2f       	mov	r24, r24
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	88 0f       	add	r24, r24
    4226:	99 1f       	adc	r25, r25
    4228:	88 0f       	add	r24, r24
    422a:	99 1f       	adc	r25, r25
    422c:	88 0f       	add	r24, r24
    422e:	99 1f       	adc	r25, r25
    4230:	82 2b       	or	r24, r18
    4232:	89 87       	std	Y+9, r24	; 0x09
    4234:	89 85       	ldd	r24, Y+9	; 0x09
    4236:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    423a:	8d 81       	ldd	r24, Y+5	; 0x05
    423c:	88 2f       	mov	r24, r24
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	81 70       	andi	r24, 0x01	; 1
    4242:	99 27       	eor	r25, r25
    4244:	82 95       	swap	r24
    4246:	92 95       	swap	r25
    4248:	90 7f       	andi	r25, 0xF0	; 240
    424a:	98 27       	eor	r25, r24
    424c:	80 7f       	andi	r24, 0xF0	; 240
    424e:	98 27       	eor	r25, r24
    4250:	98 2f       	mov	r25, r24
    4252:	8e 81       	ldd	r24, Y+6	; 0x06
    4254:	81 70       	andi	r24, 0x01	; 1
    4256:	89 2b       	or	r24, r25
    4258:	89 87       	std	Y+9, r24	; 0x09
    425a:	89 85       	ldd	r24, Y+9	; 0x09
    425c:	88 2f       	mov	r24, r24
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	88 0f       	add	r24, r24
    4262:	99 1f       	adc	r25, r25
    4264:	98 2f       	mov	r25, r24
    4266:	89 85       	ldd	r24, Y+9	; 0x09
    4268:	29 2f       	mov	r18, r25
    426a:	28 2b       	or	r18, r24
    426c:	89 85       	ldd	r24, Y+9	; 0x09
    426e:	88 2f       	mov	r24, r24
    4270:	90 e0       	ldi	r25, 0x00	; 0
    4272:	88 0f       	add	r24, r24
    4274:	99 1f       	adc	r25, r25
    4276:	88 0f       	add	r24, r24
    4278:	99 1f       	adc	r25, r25
    427a:	28 2b       	or	r18, r24
    427c:	89 85       	ldd	r24, Y+9	; 0x09
    427e:	88 2f       	mov	r24, r24
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	88 0f       	add	r24, r24
    4284:	99 1f       	adc	r25, r25
    4286:	88 0f       	add	r24, r24
    4288:	99 1f       	adc	r25, r25
    428a:	88 0f       	add	r24, r24
    428c:	99 1f       	adc	r25, r25
    428e:	82 2b       	or	r24, r18
    4290:	89 87       	std	Y+9, r24	; 0x09
    4292:	89 85       	ldd	r24, Y+9	; 0x09
    4294:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    4298:	88 85       	ldd	r24, Y+8	; 0x08
    429a:	88 2f       	mov	r24, r24
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	82 70       	andi	r24, 0x02	; 2
    42a0:	99 27       	eor	r25, r25
    42a2:	88 0f       	add	r24, r24
    42a4:	99 1f       	adc	r25, r25
    42a6:	88 0f       	add	r24, r24
    42a8:	99 1f       	adc	r25, r25
    42aa:	88 0f       	add	r24, r24
    42ac:	99 1f       	adc	r25, r25
    42ae:	28 2f       	mov	r18, r24
    42b0:	8c 81       	ldd	r24, Y+4	; 0x04
    42b2:	88 2f       	mov	r24, r24
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	82 70       	andi	r24, 0x02	; 2
    42b8:	99 27       	eor	r25, r25
    42ba:	95 95       	asr	r25
    42bc:	87 95       	ror	r24
    42be:	82 2b       	or	r24, r18
    42c0:	89 87       	std	Y+9, r24	; 0x09
    42c2:	89 85       	ldd	r24, Y+9	; 0x09
    42c4:	88 2f       	mov	r24, r24
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	88 0f       	add	r24, r24
    42ca:	99 1f       	adc	r25, r25
    42cc:	98 2f       	mov	r25, r24
    42ce:	89 85       	ldd	r24, Y+9	; 0x09
    42d0:	29 2f       	mov	r18, r25
    42d2:	28 2b       	or	r18, r24
    42d4:	89 85       	ldd	r24, Y+9	; 0x09
    42d6:	88 2f       	mov	r24, r24
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	88 0f       	add	r24, r24
    42dc:	99 1f       	adc	r25, r25
    42de:	88 0f       	add	r24, r24
    42e0:	99 1f       	adc	r25, r25
    42e2:	28 2b       	or	r18, r24
    42e4:	89 85       	ldd	r24, Y+9	; 0x09
    42e6:	88 2f       	mov	r24, r24
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	88 0f       	add	r24, r24
    42ec:	99 1f       	adc	r25, r25
    42ee:	88 0f       	add	r24, r24
    42f0:	99 1f       	adc	r25, r25
    42f2:	88 0f       	add	r24, r24
    42f4:	99 1f       	adc	r25, r25
    42f6:	82 2b       	or	r24, r18
    42f8:	89 87       	std	Y+9, r24	; 0x09
    42fa:	89 85       	ldd	r24, Y+9	; 0x09
    42fc:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    4300:	8d 81       	ldd	r24, Y+5	; 0x05
    4302:	88 2f       	mov	r24, r24
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	82 70       	andi	r24, 0x02	; 2
    4308:	99 27       	eor	r25, r25
    430a:	88 0f       	add	r24, r24
    430c:	99 1f       	adc	r25, r25
    430e:	88 0f       	add	r24, r24
    4310:	99 1f       	adc	r25, r25
    4312:	88 0f       	add	r24, r24
    4314:	99 1f       	adc	r25, r25
    4316:	28 2f       	mov	r18, r24
    4318:	8e 81       	ldd	r24, Y+6	; 0x06
    431a:	88 2f       	mov	r24, r24
    431c:	90 e0       	ldi	r25, 0x00	; 0
    431e:	82 70       	andi	r24, 0x02	; 2
    4320:	99 27       	eor	r25, r25
    4322:	95 95       	asr	r25
    4324:	87 95       	ror	r24
    4326:	82 2b       	or	r24, r18
    4328:	89 87       	std	Y+9, r24	; 0x09
    432a:	89 85       	ldd	r24, Y+9	; 0x09
    432c:	88 2f       	mov	r24, r24
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	88 0f       	add	r24, r24
    4332:	99 1f       	adc	r25, r25
    4334:	98 2f       	mov	r25, r24
    4336:	89 85       	ldd	r24, Y+9	; 0x09
    4338:	29 2f       	mov	r18, r25
    433a:	28 2b       	or	r18, r24
    433c:	89 85       	ldd	r24, Y+9	; 0x09
    433e:	88 2f       	mov	r24, r24
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	88 0f       	add	r24, r24
    4344:	99 1f       	adc	r25, r25
    4346:	88 0f       	add	r24, r24
    4348:	99 1f       	adc	r25, r25
    434a:	28 2b       	or	r18, r24
    434c:	89 85       	ldd	r24, Y+9	; 0x09
    434e:	88 2f       	mov	r24, r24
    4350:	90 e0       	ldi	r25, 0x00	; 0
    4352:	88 0f       	add	r24, r24
    4354:	99 1f       	adc	r25, r25
    4356:	88 0f       	add	r24, r24
    4358:	99 1f       	adc	r25, r25
    435a:	88 0f       	add	r24, r24
    435c:	99 1f       	adc	r25, r25
    435e:	82 2b       	or	r24, r18
    4360:	89 87       	std	Y+9, r24	; 0x09
    4362:	89 85       	ldd	r24, Y+9	; 0x09
    4364:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    4368:	88 85       	ldd	r24, Y+8	; 0x08
    436a:	88 2f       	mov	r24, r24
    436c:	90 e0       	ldi	r25, 0x00	; 0
    436e:	84 70       	andi	r24, 0x04	; 4
    4370:	99 27       	eor	r25, r25
    4372:	88 0f       	add	r24, r24
    4374:	99 1f       	adc	r25, r25
    4376:	88 0f       	add	r24, r24
    4378:	99 1f       	adc	r25, r25
    437a:	28 2f       	mov	r18, r24
    437c:	8c 81       	ldd	r24, Y+4	; 0x04
    437e:	88 2f       	mov	r24, r24
    4380:	90 e0       	ldi	r25, 0x00	; 0
    4382:	84 70       	andi	r24, 0x04	; 4
    4384:	99 27       	eor	r25, r25
    4386:	95 95       	asr	r25
    4388:	87 95       	ror	r24
    438a:	95 95       	asr	r25
    438c:	87 95       	ror	r24
    438e:	82 2b       	or	r24, r18
    4390:	89 87       	std	Y+9, r24	; 0x09
    4392:	89 85       	ldd	r24, Y+9	; 0x09
    4394:	88 2f       	mov	r24, r24
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	88 0f       	add	r24, r24
    439a:	99 1f       	adc	r25, r25
    439c:	98 2f       	mov	r25, r24
    439e:	89 85       	ldd	r24, Y+9	; 0x09
    43a0:	29 2f       	mov	r18, r25
    43a2:	28 2b       	or	r18, r24
    43a4:	89 85       	ldd	r24, Y+9	; 0x09
    43a6:	88 2f       	mov	r24, r24
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	88 0f       	add	r24, r24
    43ac:	99 1f       	adc	r25, r25
    43ae:	88 0f       	add	r24, r24
    43b0:	99 1f       	adc	r25, r25
    43b2:	28 2b       	or	r18, r24
    43b4:	89 85       	ldd	r24, Y+9	; 0x09
    43b6:	88 2f       	mov	r24, r24
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	88 0f       	add	r24, r24
    43bc:	99 1f       	adc	r25, r25
    43be:	88 0f       	add	r24, r24
    43c0:	99 1f       	adc	r25, r25
    43c2:	88 0f       	add	r24, r24
    43c4:	99 1f       	adc	r25, r25
    43c6:	82 2b       	or	r24, r18
    43c8:	89 87       	std	Y+9, r24	; 0x09
    43ca:	89 85       	ldd	r24, Y+9	; 0x09
    43cc:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    43d0:	8d 81       	ldd	r24, Y+5	; 0x05
    43d2:	88 2f       	mov	r24, r24
    43d4:	90 e0       	ldi	r25, 0x00	; 0
    43d6:	84 70       	andi	r24, 0x04	; 4
    43d8:	99 27       	eor	r25, r25
    43da:	88 0f       	add	r24, r24
    43dc:	99 1f       	adc	r25, r25
    43de:	88 0f       	add	r24, r24
    43e0:	99 1f       	adc	r25, r25
    43e2:	28 2f       	mov	r18, r24
    43e4:	8e 81       	ldd	r24, Y+6	; 0x06
    43e6:	88 2f       	mov	r24, r24
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	84 70       	andi	r24, 0x04	; 4
    43ec:	99 27       	eor	r25, r25
    43ee:	95 95       	asr	r25
    43f0:	87 95       	ror	r24
    43f2:	95 95       	asr	r25
    43f4:	87 95       	ror	r24
    43f6:	82 2b       	or	r24, r18
    43f8:	89 87       	std	Y+9, r24	; 0x09
    43fa:	89 85       	ldd	r24, Y+9	; 0x09
    43fc:	88 2f       	mov	r24, r24
    43fe:	90 e0       	ldi	r25, 0x00	; 0
    4400:	88 0f       	add	r24, r24
    4402:	99 1f       	adc	r25, r25
    4404:	98 2f       	mov	r25, r24
    4406:	89 85       	ldd	r24, Y+9	; 0x09
    4408:	29 2f       	mov	r18, r25
    440a:	28 2b       	or	r18, r24
    440c:	89 85       	ldd	r24, Y+9	; 0x09
    440e:	88 2f       	mov	r24, r24
    4410:	90 e0       	ldi	r25, 0x00	; 0
    4412:	88 0f       	add	r24, r24
    4414:	99 1f       	adc	r25, r25
    4416:	88 0f       	add	r24, r24
    4418:	99 1f       	adc	r25, r25
    441a:	28 2b       	or	r18, r24
    441c:	89 85       	ldd	r24, Y+9	; 0x09
    441e:	88 2f       	mov	r24, r24
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	88 0f       	add	r24, r24
    4424:	99 1f       	adc	r25, r25
    4426:	88 0f       	add	r24, r24
    4428:	99 1f       	adc	r25, r25
    442a:	88 0f       	add	r24, r24
    442c:	99 1f       	adc	r25, r25
    442e:	82 2b       	or	r24, r18
    4430:	89 87       	std	Y+9, r24	; 0x09
    4432:	89 85       	ldd	r24, Y+9	; 0x09
    4434:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    4438:	88 85       	ldd	r24, Y+8	; 0x08
    443a:	88 2f       	mov	r24, r24
    443c:	90 e0       	ldi	r25, 0x00	; 0
    443e:	88 70       	andi	r24, 0x08	; 8
    4440:	99 27       	eor	r25, r25
    4442:	88 0f       	add	r24, r24
    4444:	99 1f       	adc	r25, r25
    4446:	28 2f       	mov	r18, r24
    4448:	8c 81       	ldd	r24, Y+4	; 0x04
    444a:	88 2f       	mov	r24, r24
    444c:	90 e0       	ldi	r25, 0x00	; 0
    444e:	88 70       	andi	r24, 0x08	; 8
    4450:	99 27       	eor	r25, r25
    4452:	95 95       	asr	r25
    4454:	87 95       	ror	r24
    4456:	95 95       	asr	r25
    4458:	87 95       	ror	r24
    445a:	95 95       	asr	r25
    445c:	87 95       	ror	r24
    445e:	82 2b       	or	r24, r18
    4460:	89 87       	std	Y+9, r24	; 0x09
    4462:	89 85       	ldd	r24, Y+9	; 0x09
    4464:	88 2f       	mov	r24, r24
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	88 0f       	add	r24, r24
    446a:	99 1f       	adc	r25, r25
    446c:	98 2f       	mov	r25, r24
    446e:	89 85       	ldd	r24, Y+9	; 0x09
    4470:	29 2f       	mov	r18, r25
    4472:	28 2b       	or	r18, r24
    4474:	89 85       	ldd	r24, Y+9	; 0x09
    4476:	88 2f       	mov	r24, r24
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	88 0f       	add	r24, r24
    447c:	99 1f       	adc	r25, r25
    447e:	88 0f       	add	r24, r24
    4480:	99 1f       	adc	r25, r25
    4482:	28 2b       	or	r18, r24
    4484:	89 85       	ldd	r24, Y+9	; 0x09
    4486:	88 2f       	mov	r24, r24
    4488:	90 e0       	ldi	r25, 0x00	; 0
    448a:	88 0f       	add	r24, r24
    448c:	99 1f       	adc	r25, r25
    448e:	88 0f       	add	r24, r24
    4490:	99 1f       	adc	r25, r25
    4492:	88 0f       	add	r24, r24
    4494:	99 1f       	adc	r25, r25
    4496:	82 2b       	or	r24, r18
    4498:	89 87       	std	Y+9, r24	; 0x09
    449a:	89 85       	ldd	r24, Y+9	; 0x09
    449c:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    44a0:	8d 81       	ldd	r24, Y+5	; 0x05
    44a2:	88 2f       	mov	r24, r24
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	88 70       	andi	r24, 0x08	; 8
    44a8:	99 27       	eor	r25, r25
    44aa:	88 0f       	add	r24, r24
    44ac:	99 1f       	adc	r25, r25
    44ae:	28 2f       	mov	r18, r24
    44b0:	8e 81       	ldd	r24, Y+6	; 0x06
    44b2:	88 2f       	mov	r24, r24
    44b4:	90 e0       	ldi	r25, 0x00	; 0
    44b6:	88 70       	andi	r24, 0x08	; 8
    44b8:	99 27       	eor	r25, r25
    44ba:	95 95       	asr	r25
    44bc:	87 95       	ror	r24
    44be:	95 95       	asr	r25
    44c0:	87 95       	ror	r24
    44c2:	95 95       	asr	r25
    44c4:	87 95       	ror	r24
    44c6:	82 2b       	or	r24, r18
    44c8:	89 87       	std	Y+9, r24	; 0x09
    44ca:	89 85       	ldd	r24, Y+9	; 0x09
    44cc:	88 2f       	mov	r24, r24
    44ce:	90 e0       	ldi	r25, 0x00	; 0
    44d0:	88 0f       	add	r24, r24
    44d2:	99 1f       	adc	r25, r25
    44d4:	98 2f       	mov	r25, r24
    44d6:	89 85       	ldd	r24, Y+9	; 0x09
    44d8:	29 2f       	mov	r18, r25
    44da:	28 2b       	or	r18, r24
    44dc:	89 85       	ldd	r24, Y+9	; 0x09
    44de:	88 2f       	mov	r24, r24
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	88 0f       	add	r24, r24
    44e4:	99 1f       	adc	r25, r25
    44e6:	88 0f       	add	r24, r24
    44e8:	99 1f       	adc	r25, r25
    44ea:	28 2b       	or	r18, r24
    44ec:	89 85       	ldd	r24, Y+9	; 0x09
    44ee:	88 2f       	mov	r24, r24
    44f0:	90 e0       	ldi	r25, 0x00	; 0
    44f2:	88 0f       	add	r24, r24
    44f4:	99 1f       	adc	r25, r25
    44f6:	88 0f       	add	r24, r24
    44f8:	99 1f       	adc	r25, r25
    44fa:	88 0f       	add	r24, r24
    44fc:	99 1f       	adc	r25, r25
    44fe:	82 2b       	or	r24, r18
    4500:	89 87       	std	Y+9, r24	; 0x09
    4502:	89 85       	ldd	r24, Y+9	; 0x09
    4504:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    4508:	88 85       	ldd	r24, Y+8	; 0x08
    450a:	88 2f       	mov	r24, r24
    450c:	90 e0       	ldi	r25, 0x00	; 0
    450e:	80 71       	andi	r24, 0x10	; 16
    4510:	99 27       	eor	r25, r25
    4512:	88 0f       	add	r24, r24
    4514:	99 1f       	adc	r25, r25
    4516:	88 0f       	add	r24, r24
    4518:	99 1f       	adc	r25, r25
    451a:	88 0f       	add	r24, r24
    451c:	99 1f       	adc	r25, r25
    451e:	28 2f       	mov	r18, r24
    4520:	8c 81       	ldd	r24, Y+4	; 0x04
    4522:	88 2f       	mov	r24, r24
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	80 71       	andi	r24, 0x10	; 16
    4528:	99 27       	eor	r25, r25
    452a:	95 95       	asr	r25
    452c:	87 95       	ror	r24
    452e:	82 2b       	or	r24, r18
    4530:	89 87       	std	Y+9, r24	; 0x09
    4532:	89 85       	ldd	r24, Y+9	; 0x09
    4534:	98 2f       	mov	r25, r24
    4536:	96 95       	lsr	r25
    4538:	89 85       	ldd	r24, Y+9	; 0x09
    453a:	98 2b       	or	r25, r24
    453c:	89 85       	ldd	r24, Y+9	; 0x09
    453e:	86 95       	lsr	r24
    4540:	86 95       	lsr	r24
    4542:	98 2b       	or	r25, r24
    4544:	89 85       	ldd	r24, Y+9	; 0x09
    4546:	86 95       	lsr	r24
    4548:	86 95       	lsr	r24
    454a:	86 95       	lsr	r24
    454c:	89 2b       	or	r24, r25
    454e:	89 87       	std	Y+9, r24	; 0x09
    4550:	89 85       	ldd	r24, Y+9	; 0x09
    4552:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    4556:	8d 81       	ldd	r24, Y+5	; 0x05
    4558:	88 2f       	mov	r24, r24
    455a:	90 e0       	ldi	r25, 0x00	; 0
    455c:	80 71       	andi	r24, 0x10	; 16
    455e:	99 27       	eor	r25, r25
    4560:	88 0f       	add	r24, r24
    4562:	99 1f       	adc	r25, r25
    4564:	88 0f       	add	r24, r24
    4566:	99 1f       	adc	r25, r25
    4568:	88 0f       	add	r24, r24
    456a:	99 1f       	adc	r25, r25
    456c:	28 2f       	mov	r18, r24
    456e:	8e 81       	ldd	r24, Y+6	; 0x06
    4570:	88 2f       	mov	r24, r24
    4572:	90 e0       	ldi	r25, 0x00	; 0
    4574:	80 71       	andi	r24, 0x10	; 16
    4576:	99 27       	eor	r25, r25
    4578:	95 95       	asr	r25
    457a:	87 95       	ror	r24
    457c:	82 2b       	or	r24, r18
    457e:	89 87       	std	Y+9, r24	; 0x09
    4580:	89 85       	ldd	r24, Y+9	; 0x09
    4582:	98 2f       	mov	r25, r24
    4584:	96 95       	lsr	r25
    4586:	89 85       	ldd	r24, Y+9	; 0x09
    4588:	98 2b       	or	r25, r24
    458a:	89 85       	ldd	r24, Y+9	; 0x09
    458c:	86 95       	lsr	r24
    458e:	86 95       	lsr	r24
    4590:	98 2b       	or	r25, r24
    4592:	89 85       	ldd	r24, Y+9	; 0x09
    4594:	86 95       	lsr	r24
    4596:	86 95       	lsr	r24
    4598:	86 95       	lsr	r24
    459a:	89 2b       	or	r24, r25
    459c:	89 87       	std	Y+9, r24	; 0x09
    459e:	89 85       	ldd	r24, Y+9	; 0x09
    45a0:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    45a4:	88 85       	ldd	r24, Y+8	; 0x08
    45a6:	88 2f       	mov	r24, r24
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	80 72       	andi	r24, 0x20	; 32
    45ac:	99 27       	eor	r25, r25
    45ae:	88 0f       	add	r24, r24
    45b0:	99 1f       	adc	r25, r25
    45b2:	88 0f       	add	r24, r24
    45b4:	99 1f       	adc	r25, r25
    45b6:	28 2f       	mov	r18, r24
    45b8:	8c 81       	ldd	r24, Y+4	; 0x04
    45ba:	88 2f       	mov	r24, r24
    45bc:	90 e0       	ldi	r25, 0x00	; 0
    45be:	80 72       	andi	r24, 0x20	; 32
    45c0:	99 27       	eor	r25, r25
    45c2:	95 95       	asr	r25
    45c4:	87 95       	ror	r24
    45c6:	95 95       	asr	r25
    45c8:	87 95       	ror	r24
    45ca:	82 2b       	or	r24, r18
    45cc:	89 87       	std	Y+9, r24	; 0x09
    45ce:	89 85       	ldd	r24, Y+9	; 0x09
    45d0:	98 2f       	mov	r25, r24
    45d2:	96 95       	lsr	r25
    45d4:	89 85       	ldd	r24, Y+9	; 0x09
    45d6:	98 2b       	or	r25, r24
    45d8:	89 85       	ldd	r24, Y+9	; 0x09
    45da:	86 95       	lsr	r24
    45dc:	86 95       	lsr	r24
    45de:	98 2b       	or	r25, r24
    45e0:	89 85       	ldd	r24, Y+9	; 0x09
    45e2:	86 95       	lsr	r24
    45e4:	86 95       	lsr	r24
    45e6:	86 95       	lsr	r24
    45e8:	89 2b       	or	r24, r25
    45ea:	89 87       	std	Y+9, r24	; 0x09
    45ec:	89 85       	ldd	r24, Y+9	; 0x09
    45ee:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    45f2:	8d 81       	ldd	r24, Y+5	; 0x05
    45f4:	88 2f       	mov	r24, r24
    45f6:	90 e0       	ldi	r25, 0x00	; 0
    45f8:	80 72       	andi	r24, 0x20	; 32
    45fa:	99 27       	eor	r25, r25
    45fc:	88 0f       	add	r24, r24
    45fe:	99 1f       	adc	r25, r25
    4600:	88 0f       	add	r24, r24
    4602:	99 1f       	adc	r25, r25
    4604:	28 2f       	mov	r18, r24
    4606:	8e 81       	ldd	r24, Y+6	; 0x06
    4608:	88 2f       	mov	r24, r24
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	80 72       	andi	r24, 0x20	; 32
    460e:	99 27       	eor	r25, r25
    4610:	95 95       	asr	r25
    4612:	87 95       	ror	r24
    4614:	95 95       	asr	r25
    4616:	87 95       	ror	r24
    4618:	82 2b       	or	r24, r18
    461a:	89 87       	std	Y+9, r24	; 0x09
    461c:	89 85       	ldd	r24, Y+9	; 0x09
    461e:	98 2f       	mov	r25, r24
    4620:	96 95       	lsr	r25
    4622:	89 85       	ldd	r24, Y+9	; 0x09
    4624:	98 2b       	or	r25, r24
    4626:	89 85       	ldd	r24, Y+9	; 0x09
    4628:	86 95       	lsr	r24
    462a:	86 95       	lsr	r24
    462c:	98 2b       	or	r25, r24
    462e:	89 85       	ldd	r24, Y+9	; 0x09
    4630:	86 95       	lsr	r24
    4632:	86 95       	lsr	r24
    4634:	86 95       	lsr	r24
    4636:	89 2b       	or	r24, r25
    4638:	89 87       	std	Y+9, r24	; 0x09
    463a:	89 85       	ldd	r24, Y+9	; 0x09
    463c:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    4640:	88 85       	ldd	r24, Y+8	; 0x08
    4642:	88 2f       	mov	r24, r24
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	80 74       	andi	r24, 0x40	; 64
    4648:	99 27       	eor	r25, r25
    464a:	88 0f       	add	r24, r24
    464c:	99 1f       	adc	r25, r25
    464e:	28 2f       	mov	r18, r24
    4650:	8c 81       	ldd	r24, Y+4	; 0x04
    4652:	88 2f       	mov	r24, r24
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	80 74       	andi	r24, 0x40	; 64
    4658:	99 27       	eor	r25, r25
    465a:	95 95       	asr	r25
    465c:	87 95       	ror	r24
    465e:	95 95       	asr	r25
    4660:	87 95       	ror	r24
    4662:	95 95       	asr	r25
    4664:	87 95       	ror	r24
    4666:	82 2b       	or	r24, r18
    4668:	89 87       	std	Y+9, r24	; 0x09
    466a:	89 85       	ldd	r24, Y+9	; 0x09
    466c:	98 2f       	mov	r25, r24
    466e:	96 95       	lsr	r25
    4670:	89 85       	ldd	r24, Y+9	; 0x09
    4672:	98 2b       	or	r25, r24
    4674:	89 85       	ldd	r24, Y+9	; 0x09
    4676:	86 95       	lsr	r24
    4678:	86 95       	lsr	r24
    467a:	98 2b       	or	r25, r24
    467c:	89 85       	ldd	r24, Y+9	; 0x09
    467e:	86 95       	lsr	r24
    4680:	86 95       	lsr	r24
    4682:	86 95       	lsr	r24
    4684:	89 2b       	or	r24, r25
    4686:	89 87       	std	Y+9, r24	; 0x09
    4688:	89 85       	ldd	r24, Y+9	; 0x09
    468a:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    468e:	8d 81       	ldd	r24, Y+5	; 0x05
    4690:	88 2f       	mov	r24, r24
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	80 74       	andi	r24, 0x40	; 64
    4696:	99 27       	eor	r25, r25
    4698:	88 0f       	add	r24, r24
    469a:	99 1f       	adc	r25, r25
    469c:	28 2f       	mov	r18, r24
    469e:	8e 81       	ldd	r24, Y+6	; 0x06
    46a0:	88 2f       	mov	r24, r24
    46a2:	90 e0       	ldi	r25, 0x00	; 0
    46a4:	80 74       	andi	r24, 0x40	; 64
    46a6:	99 27       	eor	r25, r25
    46a8:	95 95       	asr	r25
    46aa:	87 95       	ror	r24
    46ac:	95 95       	asr	r25
    46ae:	87 95       	ror	r24
    46b0:	95 95       	asr	r25
    46b2:	87 95       	ror	r24
    46b4:	82 2b       	or	r24, r18
    46b6:	89 87       	std	Y+9, r24	; 0x09
    46b8:	89 85       	ldd	r24, Y+9	; 0x09
    46ba:	98 2f       	mov	r25, r24
    46bc:	96 95       	lsr	r25
    46be:	89 85       	ldd	r24, Y+9	; 0x09
    46c0:	98 2b       	or	r25, r24
    46c2:	89 85       	ldd	r24, Y+9	; 0x09
    46c4:	86 95       	lsr	r24
    46c6:	86 95       	lsr	r24
    46c8:	98 2b       	or	r25, r24
    46ca:	89 85       	ldd	r24, Y+9	; 0x09
    46cc:	86 95       	lsr	r24
    46ce:	86 95       	lsr	r24
    46d0:	86 95       	lsr	r24
    46d2:	89 2b       	or	r24, r25
    46d4:	89 87       	std	Y+9, r24	; 0x09
    46d6:	89 85       	ldd	r24, Y+9	; 0x09
    46d8:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    46dc:	88 85       	ldd	r24, Y+8	; 0x08
    46de:	28 2f       	mov	r18, r24
    46e0:	20 78       	andi	r18, 0x80	; 128
    46e2:	8c 81       	ldd	r24, Y+4	; 0x04
    46e4:	88 2f       	mov	r24, r24
    46e6:	90 e0       	ldi	r25, 0x00	; 0
    46e8:	80 78       	andi	r24, 0x80	; 128
    46ea:	99 27       	eor	r25, r25
    46ec:	95 95       	asr	r25
    46ee:	87 95       	ror	r24
    46f0:	95 95       	asr	r25
    46f2:	87 95       	ror	r24
    46f4:	95 95       	asr	r25
    46f6:	87 95       	ror	r24
    46f8:	95 95       	asr	r25
    46fa:	87 95       	ror	r24
    46fc:	82 2b       	or	r24, r18
    46fe:	89 87       	std	Y+9, r24	; 0x09
    4700:	89 85       	ldd	r24, Y+9	; 0x09
    4702:	98 2f       	mov	r25, r24
    4704:	96 95       	lsr	r25
    4706:	89 85       	ldd	r24, Y+9	; 0x09
    4708:	98 2b       	or	r25, r24
    470a:	89 85       	ldd	r24, Y+9	; 0x09
    470c:	86 95       	lsr	r24
    470e:	86 95       	lsr	r24
    4710:	98 2b       	or	r25, r24
    4712:	89 85       	ldd	r24, Y+9	; 0x09
    4714:	86 95       	lsr	r24
    4716:	86 95       	lsr	r24
    4718:	86 95       	lsr	r24
    471a:	89 2b       	or	r24, r25
    471c:	89 87       	std	Y+9, r24	; 0x09
    471e:	89 85       	ldd	r24, Y+9	; 0x09
    4720:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    4724:	8d 81       	ldd	r24, Y+5	; 0x05
    4726:	28 2f       	mov	r18, r24
    4728:	20 78       	andi	r18, 0x80	; 128
    472a:	8e 81       	ldd	r24, Y+6	; 0x06
    472c:	88 2f       	mov	r24, r24
    472e:	90 e0       	ldi	r25, 0x00	; 0
    4730:	80 78       	andi	r24, 0x80	; 128
    4732:	99 27       	eor	r25, r25
    4734:	95 95       	asr	r25
    4736:	87 95       	ror	r24
    4738:	95 95       	asr	r25
    473a:	87 95       	ror	r24
    473c:	95 95       	asr	r25
    473e:	87 95       	ror	r24
    4740:	95 95       	asr	r25
    4742:	87 95       	ror	r24
    4744:	82 2b       	or	r24, r18
    4746:	89 87       	std	Y+9, r24	; 0x09
    4748:	89 85       	ldd	r24, Y+9	; 0x09
    474a:	98 2f       	mov	r25, r24
    474c:	96 95       	lsr	r25
    474e:	89 85       	ldd	r24, Y+9	; 0x09
    4750:	98 2b       	or	r25, r24
    4752:	89 85       	ldd	r24, Y+9	; 0x09
    4754:	86 95       	lsr	r24
    4756:	86 95       	lsr	r24
    4758:	98 2b       	or	r25, r24
    475a:	89 85       	ldd	r24, Y+9	; 0x09
    475c:	86 95       	lsr	r24
    475e:	86 95       	lsr	r24
    4760:	86 95       	lsr	r24
    4762:	89 2b       	or	r24, r25
    4764:	89 87       	std	Y+9, r24	; 0x09
    4766:	89 85       	ldd	r24, Y+9	; 0x09
    4768:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    476c:	8c 85       	ldd	r24, Y+12	; 0x0c
    476e:	8f 5f       	subi	r24, 0xFF	; 255
    4770:	8c 87       	std	Y+12, r24	; 0x0c
    4772:	8b 81       	ldd	r24, Y+3	; 0x03
    4774:	8f 5f       	subi	r24, 0xFF	; 255
    4776:	8b 83       	std	Y+3, r24	; 0x03
    4778:	8b 81       	ldd	r24, Y+3	; 0x03
    477a:	82 30       	cpi	r24, 0x02	; 2
    477c:	08 f4       	brcc	.+2      	; 0x4780 <Show_Font57+0x68e>
    477e:	ef cc       	rjmp	.-1570   	; 0x415e <Show_Font57+0x6c>
    4780:	84 e1       	ldi	r24, 0x14	; 20
    4782:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <Set_Remap_Format>
    4786:	2d 96       	adiw	r28, 0x0d	; 13
    4788:	0f b6       	in	r0, 0x3f	; 63
    478a:	f8 94       	cli
    478c:	de bf       	out	0x3e, r29	; 62
    478e:	0f be       	out	0x3f, r0	; 63
    4790:	cd bf       	out	0x3d, r28	; 61
    4792:	df 91       	pop	r29
    4794:	cf 91       	pop	r28
    4796:	08 95       	ret

00004798 <Show_Bigger_Char>:
    4798:	cf 92       	push	r12
    479a:	ef 92       	push	r14
    479c:	0f 93       	push	r16
    479e:	cf 93       	push	r28
    47a0:	df 93       	push	r29
    47a2:	cd b7       	in	r28, 0x3d	; 61
    47a4:	de b7       	in	r29, 0x3e	; 62
    47a6:	a0 97       	sbiw	r28, 0x20	; 32
    47a8:	0f b6       	in	r0, 0x3f	; 63
    47aa:	f8 94       	cli
    47ac:	de bf       	out	0x3e, r29	; 62
    47ae:	0f be       	out	0x3f, r0	; 63
    47b0:	cd bf       	out	0x3d, r28	; 61
    47b2:	8a 8f       	std	Y+26, r24	; 0x1a
    47b4:	6b 8f       	std	Y+27, r22	; 0x1b
    47b6:	4c 8f       	std	Y+28, r20	; 0x1c
    47b8:	2d 8f       	std	Y+29, r18	; 0x1d
    47ba:	0e 8f       	std	Y+30, r16	; 0x1e
    47bc:	ef 8e       	std	Y+31, r14	; 0x1f
    47be:	c8 a2       	std	Y+32, r12	; 0x20
    47c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    47c2:	9c e1       	ldi	r25, 0x1C	; 28
    47c4:	98 0f       	add	r25, r24
    47c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47c8:	84 5e       	subi	r24, 0xE4	; 228
    47ca:	69 2f       	mov	r22, r25
    47cc:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <Set_Column_Address>
    47d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47d2:	87 5e       	subi	r24, 0xE7	; 231
    47d4:	68 2f       	mov	r22, r24
    47d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47d8:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <Set_Row_Address>
    47dc:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <Set_Write_RAM>
    47e0:	1f 82       	std	Y+7, r1	; 0x07
    47e2:	1e 82       	std	Y+6, r1	; 0x06
    47e4:	1a 82       	std	Y+2, r1	; 0x02
    47e6:	19 82       	std	Y+1, r1	; 0x01
    47e8:	1a 82       	std	Y+2, r1	; 0x02
    47ea:	19 82       	std	Y+1, r1	; 0x01
    47ec:	a7 c1       	rjmp	.+846    	; 0x4b3c <Show_Bigger_Char+0x3a4>
    47ee:	1c 82       	std	Y+4, r1	; 0x04
    47f0:	1b 82       	std	Y+3, r1	; 0x03
    47f2:	86 c1       	rjmp	.+780    	; 0x4b00 <Show_Bigger_Char+0x368>
    47f4:	1d 82       	std	Y+5, r1	; 0x05
    47f6:	8b 81       	ldd	r24, Y+3	; 0x03
    47f8:	9c 81       	ldd	r25, Y+4	; 0x04
    47fa:	04 97       	sbiw	r24, 0x04	; 4
    47fc:	0c f0       	brlt	.+2      	; 0x4800 <Show_Bigger_Char+0x68>
    47fe:	78 c0       	rjmp	.+240    	; 0x48f0 <Show_Bigger_Char+0x158>
    4800:	23 e0       	ldi	r18, 0x03	; 3
    4802:	30 e0       	ldi	r19, 0x00	; 0
    4804:	8b 81       	ldd	r24, Y+3	; 0x03
    4806:	9c 81       	ldd	r25, Y+4	; 0x04
    4808:	a9 01       	movw	r20, r18
    480a:	48 1b       	sub	r20, r24
    480c:	59 0b       	sbc	r21, r25
    480e:	ca 01       	movw	r24, r20
    4810:	88 0f       	add	r24, r24
    4812:	99 1f       	adc	r25, r25
    4814:	9c 01       	movw	r18, r24
    4816:	2f 5f       	subi	r18, 0xFF	; 255
    4818:	3f 4f       	sbci	r19, 0xFF	; 255
    481a:	81 e0       	ldi	r24, 0x01	; 1
    481c:	90 e0       	ldi	r25, 0x00	; 0
    481e:	fc 01       	movw	r30, r24
    4820:	02 c0       	rjmp	.+4      	; 0x4826 <Show_Bigger_Char+0x8e>
    4822:	ee 0f       	add	r30, r30
    4824:	ff 1f       	adc	r31, r31
    4826:	2a 95       	dec	r18
    4828:	e2 f7       	brpl	.-8      	; 0x4822 <Show_Bigger_Char+0x8a>
    482a:	9f 01       	movw	r18, r30
    482c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    482e:	88 2f       	mov	r24, r24
    4830:	90 e0       	ldi	r25, 0x00	; 0
    4832:	bc 01       	movw	r22, r24
    4834:	60 52       	subi	r22, 0x20	; 32
    4836:	71 09       	sbc	r23, r1
    4838:	89 81       	ldd	r24, Y+1	; 0x01
    483a:	9a 81       	ldd	r25, Y+2	; 0x02
    483c:	88 0f       	add	r24, r24
    483e:	99 1f       	adc	r25, r25
    4840:	e2 e3       	ldi	r30, 0x32	; 50
    4842:	e6 9f       	mul	r30, r22
    4844:	a0 01       	movw	r20, r0
    4846:	e7 9f       	mul	r30, r23
    4848:	50 0d       	add	r21, r0
    484a:	11 24       	eor	r1, r1
    484c:	84 0f       	add	r24, r20
    484e:	95 1f       	adc	r25, r21
    4850:	8c 58       	subi	r24, 0x8C	; 140
    4852:	9a 4e       	sbci	r25, 0xEA	; 234
    4854:	99 87       	std	Y+9, r25	; 0x09
    4856:	88 87       	std	Y+8, r24	; 0x08
    4858:	88 85       	ldd	r24, Y+8	; 0x08
    485a:	99 85       	ldd	r25, Y+9	; 0x09
    485c:	fc 01       	movw	r30, r24
    485e:	84 91       	lpm	r24, Z
    4860:	8a 87       	std	Y+10, r24	; 0x0a
    4862:	8a 85       	ldd	r24, Y+10	; 0x0a
    4864:	88 2f       	mov	r24, r24
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	82 23       	and	r24, r18
    486a:	93 23       	and	r25, r19
    486c:	18 16       	cp	r1, r24
    486e:	19 06       	cpc	r1, r25
    4870:	24 f4       	brge	.+8      	; 0x487a <Show_Bigger_Char+0xe2>
    4872:	9d 81       	ldd	r25, Y+5	; 0x05
    4874:	88 a1       	ldd	r24, Y+32	; 0x20
    4876:	89 0f       	add	r24, r25
    4878:	8d 83       	std	Y+5, r24	; 0x05
    487a:	23 e0       	ldi	r18, 0x03	; 3
    487c:	30 e0       	ldi	r19, 0x00	; 0
    487e:	8b 81       	ldd	r24, Y+3	; 0x03
    4880:	9c 81       	ldd	r25, Y+4	; 0x04
    4882:	a9 01       	movw	r20, r18
    4884:	48 1b       	sub	r20, r24
    4886:	59 0b       	sbc	r21, r25
    4888:	ca 01       	movw	r24, r20
    488a:	9c 01       	movw	r18, r24
    488c:	22 0f       	add	r18, r18
    488e:	33 1f       	adc	r19, r19
    4890:	81 e0       	ldi	r24, 0x01	; 1
    4892:	90 e0       	ldi	r25, 0x00	; 0
    4894:	fc 01       	movw	r30, r24
    4896:	02 c0       	rjmp	.+4      	; 0x489c <Show_Bigger_Char+0x104>
    4898:	ee 0f       	add	r30, r30
    489a:	ff 1f       	adc	r31, r31
    489c:	2a 95       	dec	r18
    489e:	e2 f7       	brpl	.-8      	; 0x4898 <Show_Bigger_Char+0x100>
    48a0:	9f 01       	movw	r18, r30
    48a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    48a4:	88 2f       	mov	r24, r24
    48a6:	90 e0       	ldi	r25, 0x00	; 0
    48a8:	bc 01       	movw	r22, r24
    48aa:	60 52       	subi	r22, 0x20	; 32
    48ac:	71 09       	sbc	r23, r1
    48ae:	89 81       	ldd	r24, Y+1	; 0x01
    48b0:	9a 81       	ldd	r25, Y+2	; 0x02
    48b2:	88 0f       	add	r24, r24
    48b4:	99 1f       	adc	r25, r25
    48b6:	e2 e3       	ldi	r30, 0x32	; 50
    48b8:	e6 9f       	mul	r30, r22
    48ba:	a0 01       	movw	r20, r0
    48bc:	e7 9f       	mul	r30, r23
    48be:	50 0d       	add	r21, r0
    48c0:	11 24       	eor	r1, r1
    48c2:	84 0f       	add	r24, r20
    48c4:	95 1f       	adc	r25, r21
    48c6:	8c 58       	subi	r24, 0x8C	; 140
    48c8:	9a 4e       	sbci	r25, 0xEA	; 234
    48ca:	9c 87       	std	Y+12, r25	; 0x0c
    48cc:	8b 87       	std	Y+11, r24	; 0x0b
    48ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    48d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    48d2:	fc 01       	movw	r30, r24
    48d4:	84 91       	lpm	r24, Z
    48d6:	8d 87       	std	Y+13, r24	; 0x0d
    48d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    48da:	88 2f       	mov	r24, r24
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	82 23       	and	r24, r18
    48e0:	93 23       	and	r25, r19
    48e2:	18 16       	cp	r1, r24
    48e4:	19 06       	cpc	r1, r25
    48e6:	24 f4       	brge	.+8      	; 0x48f0 <Show_Bigger_Char+0x158>
    48e8:	9d 81       	ldd	r25, Y+5	; 0x05
    48ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    48ec:	89 0f       	add	r24, r25
    48ee:	8d 83       	std	Y+5, r24	; 0x05
    48f0:	8b 81       	ldd	r24, Y+3	; 0x03
    48f2:	9c 81       	ldd	r25, Y+4	; 0x04
    48f4:	04 97       	sbiw	r24, 0x04	; 4
    48f6:	0c f4       	brge	.+2      	; 0x48fa <Show_Bigger_Char+0x162>
    48f8:	81 c0       	rjmp	.+258    	; 0x49fc <Show_Bigger_Char+0x264>
    48fa:	8b 81       	ldd	r24, Y+3	; 0x03
    48fc:	9c 81       	ldd	r25, Y+4	; 0x04
    48fe:	08 97       	sbiw	r24, 0x08	; 8
    4900:	0c f0       	brlt	.+2      	; 0x4904 <Show_Bigger_Char+0x16c>
    4902:	7c c0       	rjmp	.+248    	; 0x49fc <Show_Bigger_Char+0x264>
    4904:	27 e0       	ldi	r18, 0x07	; 7
    4906:	30 e0       	ldi	r19, 0x00	; 0
    4908:	8b 81       	ldd	r24, Y+3	; 0x03
    490a:	9c 81       	ldd	r25, Y+4	; 0x04
    490c:	a9 01       	movw	r20, r18
    490e:	48 1b       	sub	r20, r24
    4910:	59 0b       	sbc	r21, r25
    4912:	ca 01       	movw	r24, r20
    4914:	88 0f       	add	r24, r24
    4916:	99 1f       	adc	r25, r25
    4918:	9c 01       	movw	r18, r24
    491a:	2f 5f       	subi	r18, 0xFF	; 255
    491c:	3f 4f       	sbci	r19, 0xFF	; 255
    491e:	81 e0       	ldi	r24, 0x01	; 1
    4920:	90 e0       	ldi	r25, 0x00	; 0
    4922:	fc 01       	movw	r30, r24
    4924:	02 c0       	rjmp	.+4      	; 0x492a <Show_Bigger_Char+0x192>
    4926:	ee 0f       	add	r30, r30
    4928:	ff 1f       	adc	r31, r31
    492a:	2a 95       	dec	r18
    492c:	e2 f7       	brpl	.-8      	; 0x4926 <Show_Bigger_Char+0x18e>
    492e:	9f 01       	movw	r18, r30
    4930:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4932:	88 2f       	mov	r24, r24
    4934:	90 e0       	ldi	r25, 0x00	; 0
    4936:	bc 01       	movw	r22, r24
    4938:	60 52       	subi	r22, 0x20	; 32
    493a:	71 09       	sbc	r23, r1
    493c:	89 81       	ldd	r24, Y+1	; 0x01
    493e:	9a 81       	ldd	r25, Y+2	; 0x02
    4940:	88 0f       	add	r24, r24
    4942:	99 1f       	adc	r25, r25
    4944:	01 96       	adiw	r24, 0x01	; 1
    4946:	e2 e3       	ldi	r30, 0x32	; 50
    4948:	e6 9f       	mul	r30, r22
    494a:	a0 01       	movw	r20, r0
    494c:	e7 9f       	mul	r30, r23
    494e:	50 0d       	add	r21, r0
    4950:	11 24       	eor	r1, r1
    4952:	84 0f       	add	r24, r20
    4954:	95 1f       	adc	r25, r21
    4956:	8c 58       	subi	r24, 0x8C	; 140
    4958:	9a 4e       	sbci	r25, 0xEA	; 234
    495a:	9f 87       	std	Y+15, r25	; 0x0f
    495c:	8e 87       	std	Y+14, r24	; 0x0e
    495e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4960:	9f 85       	ldd	r25, Y+15	; 0x0f
    4962:	fc 01       	movw	r30, r24
    4964:	84 91       	lpm	r24, Z
    4966:	88 8b       	std	Y+16, r24	; 0x10
    4968:	88 89       	ldd	r24, Y+16	; 0x10
    496a:	88 2f       	mov	r24, r24
    496c:	90 e0       	ldi	r25, 0x00	; 0
    496e:	82 23       	and	r24, r18
    4970:	93 23       	and	r25, r19
    4972:	18 16       	cp	r1, r24
    4974:	19 06       	cpc	r1, r25
    4976:	24 f4       	brge	.+8      	; 0x4980 <Show_Bigger_Char+0x1e8>
    4978:	9d 81       	ldd	r25, Y+5	; 0x05
    497a:	88 a1       	ldd	r24, Y+32	; 0x20
    497c:	89 0f       	add	r24, r25
    497e:	8d 83       	std	Y+5, r24	; 0x05
    4980:	27 e0       	ldi	r18, 0x07	; 7
    4982:	30 e0       	ldi	r19, 0x00	; 0
    4984:	8b 81       	ldd	r24, Y+3	; 0x03
    4986:	9c 81       	ldd	r25, Y+4	; 0x04
    4988:	a9 01       	movw	r20, r18
    498a:	48 1b       	sub	r20, r24
    498c:	59 0b       	sbc	r21, r25
    498e:	ca 01       	movw	r24, r20
    4990:	9c 01       	movw	r18, r24
    4992:	22 0f       	add	r18, r18
    4994:	33 1f       	adc	r19, r19
    4996:	81 e0       	ldi	r24, 0x01	; 1
    4998:	90 e0       	ldi	r25, 0x00	; 0
    499a:	fc 01       	movw	r30, r24
    499c:	02 c0       	rjmp	.+4      	; 0x49a2 <Show_Bigger_Char+0x20a>
    499e:	ee 0f       	add	r30, r30
    49a0:	ff 1f       	adc	r31, r31
    49a2:	2a 95       	dec	r18
    49a4:	e2 f7       	brpl	.-8      	; 0x499e <Show_Bigger_Char+0x206>
    49a6:	9f 01       	movw	r18, r30
    49a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    49aa:	88 2f       	mov	r24, r24
    49ac:	90 e0       	ldi	r25, 0x00	; 0
    49ae:	bc 01       	movw	r22, r24
    49b0:	60 52       	subi	r22, 0x20	; 32
    49b2:	71 09       	sbc	r23, r1
    49b4:	89 81       	ldd	r24, Y+1	; 0x01
    49b6:	9a 81       	ldd	r25, Y+2	; 0x02
    49b8:	88 0f       	add	r24, r24
    49ba:	99 1f       	adc	r25, r25
    49bc:	01 96       	adiw	r24, 0x01	; 1
    49be:	e2 e3       	ldi	r30, 0x32	; 50
    49c0:	e6 9f       	mul	r30, r22
    49c2:	a0 01       	movw	r20, r0
    49c4:	e7 9f       	mul	r30, r23
    49c6:	50 0d       	add	r21, r0
    49c8:	11 24       	eor	r1, r1
    49ca:	84 0f       	add	r24, r20
    49cc:	95 1f       	adc	r25, r21
    49ce:	8c 58       	subi	r24, 0x8C	; 140
    49d0:	9a 4e       	sbci	r25, 0xEA	; 234
    49d2:	9a 8b       	std	Y+18, r25	; 0x12
    49d4:	89 8b       	std	Y+17, r24	; 0x11
    49d6:	89 89       	ldd	r24, Y+17	; 0x11
    49d8:	9a 89       	ldd	r25, Y+18	; 0x12
    49da:	fc 01       	movw	r30, r24
    49dc:	84 91       	lpm	r24, Z
    49de:	8b 8b       	std	Y+19, r24	; 0x13
    49e0:	8b 89       	ldd	r24, Y+19	; 0x13
    49e2:	88 2f       	mov	r24, r24
    49e4:	90 e0       	ldi	r25, 0x00	; 0
    49e6:	82 23       	and	r24, r18
    49e8:	93 23       	and	r25, r19
    49ea:	18 16       	cp	r1, r24
    49ec:	19 06       	cpc	r1, r25
    49ee:	2c f4       	brge	.+10     	; 0x49fa <Show_Bigger_Char+0x262>
    49f0:	9d 81       	ldd	r25, Y+5	; 0x05
    49f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    49f4:	89 0f       	add	r24, r25
    49f6:	8d 83       	std	Y+5, r24	; 0x05
    49f8:	7b c0       	rjmp	.+246    	; 0x4af0 <Show_Bigger_Char+0x358>
    49fa:	7a c0       	rjmp	.+244    	; 0x4af0 <Show_Bigger_Char+0x358>
    49fc:	28 e0       	ldi	r18, 0x08	; 8
    49fe:	30 e0       	ldi	r19, 0x00	; 0
    4a00:	8b 81       	ldd	r24, Y+3	; 0x03
    4a02:	9c 81       	ldd	r25, Y+4	; 0x04
    4a04:	a9 01       	movw	r20, r18
    4a06:	48 1b       	sub	r20, r24
    4a08:	59 0b       	sbc	r21, r25
    4a0a:	ca 01       	movw	r24, r20
    4a0c:	88 0f       	add	r24, r24
    4a0e:	99 1f       	adc	r25, r25
    4a10:	9c 01       	movw	r18, r24
    4a12:	2f 5f       	subi	r18, 0xFF	; 255
    4a14:	3f 4f       	sbci	r19, 0xFF	; 255
    4a16:	81 e0       	ldi	r24, 0x01	; 1
    4a18:	90 e0       	ldi	r25, 0x00	; 0
    4a1a:	fc 01       	movw	r30, r24
    4a1c:	02 c0       	rjmp	.+4      	; 0x4a22 <Show_Bigger_Char+0x28a>
    4a1e:	ee 0f       	add	r30, r30
    4a20:	ff 1f       	adc	r31, r31
    4a22:	2a 95       	dec	r18
    4a24:	e2 f7       	brpl	.-8      	; 0x4a1e <Show_Bigger_Char+0x286>
    4a26:	9f 01       	movw	r18, r30
    4a28:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4a2a:	88 2f       	mov	r24, r24
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	bc 01       	movw	r22, r24
    4a30:	60 52       	subi	r22, 0x20	; 32
    4a32:	71 09       	sbc	r23, r1
    4a34:	89 81       	ldd	r24, Y+1	; 0x01
    4a36:	9a 81       	ldd	r25, Y+2	; 0x02
    4a38:	88 0f       	add	r24, r24
    4a3a:	99 1f       	adc	r25, r25
    4a3c:	01 96       	adiw	r24, 0x01	; 1
    4a3e:	e2 e3       	ldi	r30, 0x32	; 50
    4a40:	e6 9f       	mul	r30, r22
    4a42:	a0 01       	movw	r20, r0
    4a44:	e7 9f       	mul	r30, r23
    4a46:	50 0d       	add	r21, r0
    4a48:	11 24       	eor	r1, r1
    4a4a:	84 0f       	add	r24, r20
    4a4c:	95 1f       	adc	r25, r21
    4a4e:	8c 58       	subi	r24, 0x8C	; 140
    4a50:	9a 4e       	sbci	r25, 0xEA	; 234
    4a52:	9d 8b       	std	Y+21, r25	; 0x15
    4a54:	8c 8b       	std	Y+20, r24	; 0x14
    4a56:	8c 89       	ldd	r24, Y+20	; 0x14
    4a58:	9d 89       	ldd	r25, Y+21	; 0x15
    4a5a:	fc 01       	movw	r30, r24
    4a5c:	84 91       	lpm	r24, Z
    4a5e:	8e 8b       	std	Y+22, r24	; 0x16
    4a60:	8e 89       	ldd	r24, Y+22	; 0x16
    4a62:	88 2f       	mov	r24, r24
    4a64:	90 e0       	ldi	r25, 0x00	; 0
    4a66:	82 23       	and	r24, r18
    4a68:	93 23       	and	r25, r19
    4a6a:	18 16       	cp	r1, r24
    4a6c:	19 06       	cpc	r1, r25
    4a6e:	24 f4       	brge	.+8      	; 0x4a78 <Show_Bigger_Char+0x2e0>
    4a70:	9d 81       	ldd	r25, Y+5	; 0x05
    4a72:	88 a1       	ldd	r24, Y+32	; 0x20
    4a74:	89 0f       	add	r24, r25
    4a76:	8d 83       	std	Y+5, r24	; 0x05
    4a78:	28 e0       	ldi	r18, 0x08	; 8
    4a7a:	30 e0       	ldi	r19, 0x00	; 0
    4a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a80:	a9 01       	movw	r20, r18
    4a82:	48 1b       	sub	r20, r24
    4a84:	59 0b       	sbc	r21, r25
    4a86:	ca 01       	movw	r24, r20
    4a88:	9c 01       	movw	r18, r24
    4a8a:	22 0f       	add	r18, r18
    4a8c:	33 1f       	adc	r19, r19
    4a8e:	81 e0       	ldi	r24, 0x01	; 1
    4a90:	90 e0       	ldi	r25, 0x00	; 0
    4a92:	fc 01       	movw	r30, r24
    4a94:	02 c0       	rjmp	.+4      	; 0x4a9a <Show_Bigger_Char+0x302>
    4a96:	ee 0f       	add	r30, r30
    4a98:	ff 1f       	adc	r31, r31
    4a9a:	2a 95       	dec	r18
    4a9c:	e2 f7       	brpl	.-8      	; 0x4a96 <Show_Bigger_Char+0x2fe>
    4a9e:	9f 01       	movw	r18, r30
    4aa0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4aa2:	88 2f       	mov	r24, r24
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	bc 01       	movw	r22, r24
    4aa8:	60 52       	subi	r22, 0x20	; 32
    4aaa:	71 09       	sbc	r23, r1
    4aac:	89 81       	ldd	r24, Y+1	; 0x01
    4aae:	9a 81       	ldd	r25, Y+2	; 0x02
    4ab0:	88 0f       	add	r24, r24
    4ab2:	99 1f       	adc	r25, r25
    4ab4:	01 96       	adiw	r24, 0x01	; 1
    4ab6:	e2 e3       	ldi	r30, 0x32	; 50
    4ab8:	e6 9f       	mul	r30, r22
    4aba:	a0 01       	movw	r20, r0
    4abc:	e7 9f       	mul	r30, r23
    4abe:	50 0d       	add	r21, r0
    4ac0:	11 24       	eor	r1, r1
    4ac2:	84 0f       	add	r24, r20
    4ac4:	95 1f       	adc	r25, r21
    4ac6:	8c 58       	subi	r24, 0x8C	; 140
    4ac8:	9a 4e       	sbci	r25, 0xEA	; 234
    4aca:	98 8f       	std	Y+24, r25	; 0x18
    4acc:	8f 8b       	std	Y+23, r24	; 0x17
    4ace:	8f 89       	ldd	r24, Y+23	; 0x17
    4ad0:	98 8d       	ldd	r25, Y+24	; 0x18
    4ad2:	fc 01       	movw	r30, r24
    4ad4:	84 91       	lpm	r24, Z
    4ad6:	89 8f       	std	Y+25, r24	; 0x19
    4ad8:	89 8d       	ldd	r24, Y+25	; 0x19
    4ada:	88 2f       	mov	r24, r24
    4adc:	90 e0       	ldi	r25, 0x00	; 0
    4ade:	82 23       	and	r24, r18
    4ae0:	93 23       	and	r25, r19
    4ae2:	18 16       	cp	r1, r24
    4ae4:	19 06       	cpc	r1, r25
    4ae6:	24 f4       	brge	.+8      	; 0x4af0 <Show_Bigger_Char+0x358>
    4ae8:	9d 81       	ldd	r25, Y+5	; 0x05
    4aea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4aec:	89 0f       	add	r24, r25
    4aee:	8d 83       	std	Y+5, r24	; 0x05
    4af0:	8d 81       	ldd	r24, Y+5	; 0x05
    4af2:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    4af6:	8b 81       	ldd	r24, Y+3	; 0x03
    4af8:	9c 81       	ldd	r25, Y+4	; 0x04
    4afa:	01 96       	adiw	r24, 0x01	; 1
    4afc:	9c 83       	std	Y+4, r25	; 0x04
    4afe:	8b 83       	std	Y+3, r24	; 0x03
    4b00:	8b 81       	ldd	r24, Y+3	; 0x03
    4b02:	9c 81       	ldd	r25, Y+4	; 0x04
    4b04:	08 97       	sbiw	r24, 0x08	; 8
    4b06:	0c f4       	brge	.+2      	; 0x4b0a <Show_Bigger_Char+0x372>
    4b08:	75 ce       	rjmp	.-790    	; 0x47f4 <Show_Bigger_Char+0x5c>
    4b0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4b0c:	9c e1       	ldi	r25, 0x1C	; 28
    4b0e:	98 0f       	add	r25, r24
    4b10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b12:	84 5e       	subi	r24, 0xE4	; 228
    4b14:	69 2f       	mov	r22, r25
    4b16:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <Set_Column_Address>
    4b1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b1c:	2e e1       	ldi	r18, 0x1E	; 30
    4b1e:	28 0f       	add	r18, r24
    4b20:	99 81       	ldd	r25, Y+1	; 0x01
    4b22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b24:	89 0f       	add	r24, r25
    4b26:	8f 5f       	subi	r24, 0xFF	; 255
    4b28:	62 2f       	mov	r22, r18
    4b2a:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <Set_Row_Address>
    4b2e:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <Set_Write_RAM>
    4b32:	89 81       	ldd	r24, Y+1	; 0x01
    4b34:	9a 81       	ldd	r25, Y+2	; 0x02
    4b36:	01 96       	adiw	r24, 0x01	; 1
    4b38:	9a 83       	std	Y+2, r25	; 0x02
    4b3a:	89 83       	std	Y+1, r24	; 0x01
    4b3c:	89 81       	ldd	r24, Y+1	; 0x01
    4b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b40:	49 97       	sbiw	r24, 0x19	; 25
    4b42:	0c f4       	brge	.+2      	; 0x4b46 <Show_Bigger_Char+0x3ae>
    4b44:	54 ce       	rjmp	.-856    	; 0x47ee <Show_Bigger_Char+0x56>
    4b46:	a0 96       	adiw	r28, 0x20	; 32
    4b48:	0f b6       	in	r0, 0x3f	; 63
    4b4a:	f8 94       	cli
    4b4c:	de bf       	out	0x3e, r29	; 62
    4b4e:	0f be       	out	0x3f, r0	; 63
    4b50:	cd bf       	out	0x3d, r28	; 61
    4b52:	df 91       	pop	r29
    4b54:	cf 91       	pop	r28
    4b56:	0f 91       	pop	r16
    4b58:	ef 90       	pop	r14
    4b5a:	cf 90       	pop	r12
    4b5c:	08 95       	ret

00004b5e <Show_Big_Char>:
    4b5e:	cf 92       	push	r12
    4b60:	ef 92       	push	r14
    4b62:	0f 93       	push	r16
    4b64:	cf 93       	push	r28
    4b66:	df 93       	push	r29
    4b68:	cd b7       	in	r28, 0x3d	; 61
    4b6a:	de b7       	in	r29, 0x3e	; 62
    4b6c:	6a 97       	sbiw	r28, 0x1a	; 26
    4b6e:	0f b6       	in	r0, 0x3f	; 63
    4b70:	f8 94       	cli
    4b72:	de bf       	out	0x3e, r29	; 62
    4b74:	0f be       	out	0x3f, r0	; 63
    4b76:	cd bf       	out	0x3d, r28	; 61
    4b78:	8c 8b       	std	Y+20, r24	; 0x14
    4b7a:	6d 8b       	std	Y+21, r22	; 0x15
    4b7c:	4e 8b       	std	Y+22, r20	; 0x16
    4b7e:	2f 8b       	std	Y+23, r18	; 0x17
    4b80:	08 8f       	std	Y+24, r16	; 0x18
    4b82:	e9 8e       	std	Y+25, r14	; 0x19
    4b84:	ca 8e       	std	Y+26, r12	; 0x1a
    4b86:	8e 89       	ldd	r24, Y+22	; 0x16
    4b88:	9c e1       	ldi	r25, 0x1C	; 28
    4b8a:	98 0f       	add	r25, r24
    4b8c:	8d 89       	ldd	r24, Y+21	; 0x15
    4b8e:	84 5e       	subi	r24, 0xE4	; 228
    4b90:	69 2f       	mov	r22, r25
    4b92:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <Set_Column_Address>
    4b96:	8f 89       	ldd	r24, Y+23	; 0x17
    4b98:	8f 5e       	subi	r24, 0xEF	; 239
    4b9a:	68 2f       	mov	r22, r24
    4b9c:	8f 89       	ldd	r24, Y+23	; 0x17
    4b9e:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <Set_Row_Address>
    4ba2:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <Set_Write_RAM>
    4ba6:	1f 82       	std	Y+7, r1	; 0x07
    4ba8:	1e 82       	std	Y+6, r1	; 0x06
    4baa:	1a 82       	std	Y+2, r1	; 0x02
    4bac:	19 82       	std	Y+1, r1	; 0x01
    4bae:	1a 82       	std	Y+2, r1	; 0x02
    4bb0:	19 82       	std	Y+1, r1	; 0x01
    4bb2:	23 c1       	rjmp	.+582    	; 0x4dfa <Show_Big_Char+0x29c>
    4bb4:	1c 82       	std	Y+4, r1	; 0x04
    4bb6:	1b 82       	std	Y+3, r1	; 0x03
    4bb8:	02 c1       	rjmp	.+516    	; 0x4dbe <Show_Big_Char+0x260>
    4bba:	1d 82       	std	Y+5, r1	; 0x05
    4bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    4bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    4bc0:	04 97       	sbiw	r24, 0x04	; 4
    4bc2:	0c f0       	brlt	.+2      	; 0x4bc6 <Show_Big_Char+0x68>
    4bc4:	7a c0       	rjmp	.+244    	; 0x4cba <Show_Big_Char+0x15c>
    4bc6:	23 e0       	ldi	r18, 0x03	; 3
    4bc8:	30 e0       	ldi	r19, 0x00	; 0
    4bca:	8b 81       	ldd	r24, Y+3	; 0x03
    4bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    4bce:	a9 01       	movw	r20, r18
    4bd0:	48 1b       	sub	r20, r24
    4bd2:	59 0b       	sbc	r21, r25
    4bd4:	ca 01       	movw	r24, r20
    4bd6:	88 0f       	add	r24, r24
    4bd8:	99 1f       	adc	r25, r25
    4bda:	9c 01       	movw	r18, r24
    4bdc:	2f 5f       	subi	r18, 0xFF	; 255
    4bde:	3f 4f       	sbci	r19, 0xFF	; 255
    4be0:	81 e0       	ldi	r24, 0x01	; 1
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	fc 01       	movw	r30, r24
    4be6:	02 c0       	rjmp	.+4      	; 0x4bec <Show_Big_Char+0x8e>
    4be8:	ee 0f       	add	r30, r30
    4bea:	ff 1f       	adc	r31, r31
    4bec:	2a 95       	dec	r18
    4bee:	e2 f7       	brpl	.-8      	; 0x4be8 <Show_Big_Char+0x8a>
    4bf0:	9f 01       	movw	r18, r30
    4bf2:	8c 89       	ldd	r24, Y+20	; 0x14
    4bf4:	88 2f       	mov	r24, r24
    4bf6:	90 e0       	ldi	r25, 0x00	; 0
    4bf8:	bc 01       	movw	r22, r24
    4bfa:	60 52       	subi	r22, 0x20	; 32
    4bfc:	71 09       	sbc	r23, r1
    4bfe:	89 81       	ldd	r24, Y+1	; 0x01
    4c00:	9a 81       	ldd	r25, Y+2	; 0x02
    4c02:	88 0f       	add	r24, r24
    4c04:	99 1f       	adc	r25, r25
    4c06:	e6 e2       	ldi	r30, 0x26	; 38
    4c08:	e6 9f       	mul	r30, r22
    4c0a:	a0 01       	movw	r20, r0
    4c0c:	e7 9f       	mul	r30, r23
    4c0e:	50 0d       	add	r21, r0
    4c10:	11 24       	eor	r1, r1
    4c12:	84 0f       	add	r24, r20
    4c14:	95 1f       	adc	r25, r21
    4c16:	8a 52       	subi	r24, 0x2A	; 42
    4c18:	97 4f       	sbci	r25, 0xF7	; 247
    4c1a:	99 87       	std	Y+9, r25	; 0x09
    4c1c:	88 87       	std	Y+8, r24	; 0x08
    4c1e:	88 85       	ldd	r24, Y+8	; 0x08
    4c20:	99 85       	ldd	r25, Y+9	; 0x09
    4c22:	fc 01       	movw	r30, r24
    4c24:	84 91       	lpm	r24, Z
    4c26:	8a 87       	std	Y+10, r24	; 0x0a
    4c28:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c2a:	88 2f       	mov	r24, r24
    4c2c:	90 e0       	ldi	r25, 0x00	; 0
    4c2e:	82 23       	and	r24, r18
    4c30:	93 23       	and	r25, r19
    4c32:	18 16       	cp	r1, r24
    4c34:	19 06       	cpc	r1, r25
    4c36:	24 f4       	brge	.+8      	; 0x4c40 <Show_Big_Char+0xe2>
    4c38:	9d 81       	ldd	r25, Y+5	; 0x05
    4c3a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4c3c:	89 0f       	add	r24, r25
    4c3e:	8d 83       	std	Y+5, r24	; 0x05
    4c40:	23 e0       	ldi	r18, 0x03	; 3
    4c42:	30 e0       	ldi	r19, 0x00	; 0
    4c44:	8b 81       	ldd	r24, Y+3	; 0x03
    4c46:	9c 81       	ldd	r25, Y+4	; 0x04
    4c48:	a9 01       	movw	r20, r18
    4c4a:	48 1b       	sub	r20, r24
    4c4c:	59 0b       	sbc	r21, r25
    4c4e:	ca 01       	movw	r24, r20
    4c50:	9c 01       	movw	r18, r24
    4c52:	22 0f       	add	r18, r18
    4c54:	33 1f       	adc	r19, r19
    4c56:	81 e0       	ldi	r24, 0x01	; 1
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	fc 01       	movw	r30, r24
    4c5c:	02 c0       	rjmp	.+4      	; 0x4c62 <Show_Big_Char+0x104>
    4c5e:	ee 0f       	add	r30, r30
    4c60:	ff 1f       	adc	r31, r31
    4c62:	2a 95       	dec	r18
    4c64:	e2 f7       	brpl	.-8      	; 0x4c5e <Show_Big_Char+0x100>
    4c66:	9f 01       	movw	r18, r30
    4c68:	8c 89       	ldd	r24, Y+20	; 0x14
    4c6a:	88 2f       	mov	r24, r24
    4c6c:	90 e0       	ldi	r25, 0x00	; 0
    4c6e:	bc 01       	movw	r22, r24
    4c70:	60 52       	subi	r22, 0x20	; 32
    4c72:	71 09       	sbc	r23, r1
    4c74:	89 81       	ldd	r24, Y+1	; 0x01
    4c76:	9a 81       	ldd	r25, Y+2	; 0x02
    4c78:	88 0f       	add	r24, r24
    4c7a:	99 1f       	adc	r25, r25
    4c7c:	e6 e2       	ldi	r30, 0x26	; 38
    4c7e:	e6 9f       	mul	r30, r22
    4c80:	a0 01       	movw	r20, r0
    4c82:	e7 9f       	mul	r30, r23
    4c84:	50 0d       	add	r21, r0
    4c86:	11 24       	eor	r1, r1
    4c88:	84 0f       	add	r24, r20
    4c8a:	95 1f       	adc	r25, r21
    4c8c:	8a 52       	subi	r24, 0x2A	; 42
    4c8e:	97 4f       	sbci	r25, 0xF7	; 247
    4c90:	9c 87       	std	Y+12, r25	; 0x0c
    4c92:	8b 87       	std	Y+11, r24	; 0x0b
    4c94:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c96:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c98:	fc 01       	movw	r30, r24
    4c9a:	84 91       	lpm	r24, Z
    4c9c:	8d 87       	std	Y+13, r24	; 0x0d
    4c9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ca0:	88 2f       	mov	r24, r24
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	82 23       	and	r24, r18
    4ca6:	93 23       	and	r25, r19
    4ca8:	18 16       	cp	r1, r24
    4caa:	19 06       	cpc	r1, r25
    4cac:	0c f0       	brlt	.+2      	; 0x4cb0 <Show_Big_Char+0x152>
    4cae:	7f c0       	rjmp	.+254    	; 0x4dae <Show_Big_Char+0x250>
    4cb0:	9d 81       	ldd	r25, Y+5	; 0x05
    4cb2:	89 8d       	ldd	r24, Y+25	; 0x19
    4cb4:	89 0f       	add	r24, r25
    4cb6:	8d 83       	std	Y+5, r24	; 0x05
    4cb8:	7a c0       	rjmp	.+244    	; 0x4dae <Show_Big_Char+0x250>
    4cba:	27 e0       	ldi	r18, 0x07	; 7
    4cbc:	30 e0       	ldi	r19, 0x00	; 0
    4cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    4cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    4cc2:	a9 01       	movw	r20, r18
    4cc4:	48 1b       	sub	r20, r24
    4cc6:	59 0b       	sbc	r21, r25
    4cc8:	ca 01       	movw	r24, r20
    4cca:	88 0f       	add	r24, r24
    4ccc:	99 1f       	adc	r25, r25
    4cce:	9c 01       	movw	r18, r24
    4cd0:	2f 5f       	subi	r18, 0xFF	; 255
    4cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    4cd4:	81 e0       	ldi	r24, 0x01	; 1
    4cd6:	90 e0       	ldi	r25, 0x00	; 0
    4cd8:	fc 01       	movw	r30, r24
    4cda:	02 c0       	rjmp	.+4      	; 0x4ce0 <Show_Big_Char+0x182>
    4cdc:	ee 0f       	add	r30, r30
    4cde:	ff 1f       	adc	r31, r31
    4ce0:	2a 95       	dec	r18
    4ce2:	e2 f7       	brpl	.-8      	; 0x4cdc <Show_Big_Char+0x17e>
    4ce4:	9f 01       	movw	r18, r30
    4ce6:	8c 89       	ldd	r24, Y+20	; 0x14
    4ce8:	88 2f       	mov	r24, r24
    4cea:	90 e0       	ldi	r25, 0x00	; 0
    4cec:	bc 01       	movw	r22, r24
    4cee:	60 52       	subi	r22, 0x20	; 32
    4cf0:	71 09       	sbc	r23, r1
    4cf2:	89 81       	ldd	r24, Y+1	; 0x01
    4cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    4cf6:	88 0f       	add	r24, r24
    4cf8:	99 1f       	adc	r25, r25
    4cfa:	01 96       	adiw	r24, 0x01	; 1
    4cfc:	e6 e2       	ldi	r30, 0x26	; 38
    4cfe:	e6 9f       	mul	r30, r22
    4d00:	a0 01       	movw	r20, r0
    4d02:	e7 9f       	mul	r30, r23
    4d04:	50 0d       	add	r21, r0
    4d06:	11 24       	eor	r1, r1
    4d08:	84 0f       	add	r24, r20
    4d0a:	95 1f       	adc	r25, r21
    4d0c:	8a 52       	subi	r24, 0x2A	; 42
    4d0e:	97 4f       	sbci	r25, 0xF7	; 247
    4d10:	9f 87       	std	Y+15, r25	; 0x0f
    4d12:	8e 87       	std	Y+14, r24	; 0x0e
    4d14:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d16:	9f 85       	ldd	r25, Y+15	; 0x0f
    4d18:	fc 01       	movw	r30, r24
    4d1a:	84 91       	lpm	r24, Z
    4d1c:	88 8b       	std	Y+16, r24	; 0x10
    4d1e:	88 89       	ldd	r24, Y+16	; 0x10
    4d20:	88 2f       	mov	r24, r24
    4d22:	90 e0       	ldi	r25, 0x00	; 0
    4d24:	82 23       	and	r24, r18
    4d26:	93 23       	and	r25, r19
    4d28:	18 16       	cp	r1, r24
    4d2a:	19 06       	cpc	r1, r25
    4d2c:	24 f4       	brge	.+8      	; 0x4d36 <Show_Big_Char+0x1d8>
    4d2e:	9d 81       	ldd	r25, Y+5	; 0x05
    4d30:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4d32:	89 0f       	add	r24, r25
    4d34:	8d 83       	std	Y+5, r24	; 0x05
    4d36:	27 e0       	ldi	r18, 0x07	; 7
    4d38:	30 e0       	ldi	r19, 0x00	; 0
    4d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    4d3e:	a9 01       	movw	r20, r18
    4d40:	48 1b       	sub	r20, r24
    4d42:	59 0b       	sbc	r21, r25
    4d44:	ca 01       	movw	r24, r20
    4d46:	9c 01       	movw	r18, r24
    4d48:	22 0f       	add	r18, r18
    4d4a:	33 1f       	adc	r19, r19
    4d4c:	81 e0       	ldi	r24, 0x01	; 1
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
    4d50:	fc 01       	movw	r30, r24
    4d52:	02 c0       	rjmp	.+4      	; 0x4d58 <Show_Big_Char+0x1fa>
    4d54:	ee 0f       	add	r30, r30
    4d56:	ff 1f       	adc	r31, r31
    4d58:	2a 95       	dec	r18
    4d5a:	e2 f7       	brpl	.-8      	; 0x4d54 <Show_Big_Char+0x1f6>
    4d5c:	9f 01       	movw	r18, r30
    4d5e:	8c 89       	ldd	r24, Y+20	; 0x14
    4d60:	88 2f       	mov	r24, r24
    4d62:	90 e0       	ldi	r25, 0x00	; 0
    4d64:	bc 01       	movw	r22, r24
    4d66:	60 52       	subi	r22, 0x20	; 32
    4d68:	71 09       	sbc	r23, r1
    4d6a:	89 81       	ldd	r24, Y+1	; 0x01
    4d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d6e:	88 0f       	add	r24, r24
    4d70:	99 1f       	adc	r25, r25
    4d72:	01 96       	adiw	r24, 0x01	; 1
    4d74:	e6 e2       	ldi	r30, 0x26	; 38
    4d76:	e6 9f       	mul	r30, r22
    4d78:	a0 01       	movw	r20, r0
    4d7a:	e7 9f       	mul	r30, r23
    4d7c:	50 0d       	add	r21, r0
    4d7e:	11 24       	eor	r1, r1
    4d80:	84 0f       	add	r24, r20
    4d82:	95 1f       	adc	r25, r21
    4d84:	8a 52       	subi	r24, 0x2A	; 42
    4d86:	97 4f       	sbci	r25, 0xF7	; 247
    4d88:	9a 8b       	std	Y+18, r25	; 0x12
    4d8a:	89 8b       	std	Y+17, r24	; 0x11
    4d8c:	89 89       	ldd	r24, Y+17	; 0x11
    4d8e:	9a 89       	ldd	r25, Y+18	; 0x12
    4d90:	fc 01       	movw	r30, r24
    4d92:	84 91       	lpm	r24, Z
    4d94:	8b 8b       	std	Y+19, r24	; 0x13
    4d96:	8b 89       	ldd	r24, Y+19	; 0x13
    4d98:	88 2f       	mov	r24, r24
    4d9a:	90 e0       	ldi	r25, 0x00	; 0
    4d9c:	82 23       	and	r24, r18
    4d9e:	93 23       	and	r25, r19
    4da0:	18 16       	cp	r1, r24
    4da2:	19 06       	cpc	r1, r25
    4da4:	24 f4       	brge	.+8      	; 0x4dae <Show_Big_Char+0x250>
    4da6:	9d 81       	ldd	r25, Y+5	; 0x05
    4da8:	89 8d       	ldd	r24, Y+25	; 0x19
    4daa:	89 0f       	add	r24, r25
    4dac:	8d 83       	std	Y+5, r24	; 0x05
    4dae:	8d 81       	ldd	r24, Y+5	; 0x05
    4db0:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    4db4:	8b 81       	ldd	r24, Y+3	; 0x03
    4db6:	9c 81       	ldd	r25, Y+4	; 0x04
    4db8:	01 96       	adiw	r24, 0x01	; 1
    4dba:	9c 83       	std	Y+4, r25	; 0x04
    4dbc:	8b 83       	std	Y+3, r24	; 0x03
    4dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    4dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    4dc2:	07 97       	sbiw	r24, 0x07	; 7
    4dc4:	0c f4       	brge	.+2      	; 0x4dc8 <Show_Big_Char+0x26a>
    4dc6:	f9 ce       	rjmp	.-526    	; 0x4bba <Show_Big_Char+0x5c>
    4dc8:	8e 89       	ldd	r24, Y+22	; 0x16
    4dca:	9c e1       	ldi	r25, 0x1C	; 28
    4dcc:	98 0f       	add	r25, r24
    4dce:	8d 89       	ldd	r24, Y+21	; 0x15
    4dd0:	84 5e       	subi	r24, 0xE4	; 228
    4dd2:	69 2f       	mov	r22, r25
    4dd4:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <Set_Column_Address>
    4dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    4dda:	21 e1       	ldi	r18, 0x11	; 17
    4ddc:	28 0f       	add	r18, r24
    4dde:	99 81       	ldd	r25, Y+1	; 0x01
    4de0:	8f 89       	ldd	r24, Y+23	; 0x17
    4de2:	89 0f       	add	r24, r25
    4de4:	8f 5f       	subi	r24, 0xFF	; 255
    4de6:	62 2f       	mov	r22, r18
    4de8:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <Set_Row_Address>
    4dec:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <Set_Write_RAM>
    4df0:	89 81       	ldd	r24, Y+1	; 0x01
    4df2:	9a 81       	ldd	r25, Y+2	; 0x02
    4df4:	01 96       	adiw	r24, 0x01	; 1
    4df6:	9a 83       	std	Y+2, r25	; 0x02
    4df8:	89 83       	std	Y+1, r24	; 0x01
    4dfa:	89 81       	ldd	r24, Y+1	; 0x01
    4dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    4dfe:	41 97       	sbiw	r24, 0x11	; 17
    4e00:	0c f4       	brge	.+2      	; 0x4e04 <Show_Big_Char+0x2a6>
    4e02:	d8 ce       	rjmp	.-592    	; 0x4bb4 <Show_Big_Char+0x56>
    4e04:	6a 96       	adiw	r28, 0x1a	; 26
    4e06:	0f b6       	in	r0, 0x3f	; 63
    4e08:	f8 94       	cli
    4e0a:	de bf       	out	0x3e, r29	; 62
    4e0c:	0f be       	out	0x3f, r0	; 63
    4e0e:	cd bf       	out	0x3d, r28	; 61
    4e10:	df 91       	pop	r29
    4e12:	cf 91       	pop	r28
    4e14:	0f 91       	pop	r16
    4e16:	ef 90       	pop	r14
    4e18:	cf 90       	pop	r12
    4e1a:	08 95       	ret

00004e1c <Show_String>:
    4e1c:	cf 93       	push	r28
    4e1e:	df 93       	push	r29
    4e20:	cd b7       	in	r28, 0x3d	; 61
    4e22:	de b7       	in	r29, 0x3e	; 62
    4e24:	27 97       	sbiw	r28, 0x07	; 7
    4e26:	0f b6       	in	r0, 0x3f	; 63
    4e28:	f8 94       	cli
    4e2a:	de bf       	out	0x3e, r29	; 62
    4e2c:	0f be       	out	0x3f, r0	; 63
    4e2e:	cd bf       	out	0x3d, r28	; 61
    4e30:	8b 83       	std	Y+3, r24	; 0x03
    4e32:	7d 83       	std	Y+5, r23	; 0x05
    4e34:	6c 83       	std	Y+4, r22	; 0x04
    4e36:	4e 83       	std	Y+6, r20	; 0x06
    4e38:	2f 83       	std	Y+7, r18	; 0x07
    4e3a:	8c 81       	ldd	r24, Y+4	; 0x04
    4e3c:	9d 81       	ldd	r25, Y+5	; 0x05
    4e3e:	9a 83       	std	Y+2, r25	; 0x02
    4e40:	89 83       	std	Y+1, r24	; 0x01
    4e42:	2f 81       	ldd	r18, Y+7	; 0x07
    4e44:	4e 81       	ldd	r20, Y+6	; 0x06
    4e46:	60 e6       	ldi	r22, 0x60	; 96
    4e48:	81 e0       	ldi	r24, 0x01	; 1
    4e4a:	0e 94 79 20 	call	0x40f2	; 0x40f2 <Show_Font57>
    4e4e:	89 81       	ldd	r24, Y+1	; 0x01
    4e50:	9a 81       	ldd	r25, Y+2	; 0x02
    4e52:	fc 01       	movw	r30, r24
    4e54:	80 81       	ld	r24, Z
    4e56:	2f 81       	ldd	r18, Y+7	; 0x07
    4e58:	4e 81       	ldd	r20, Y+6	; 0x06
    4e5a:	68 2f       	mov	r22, r24
    4e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e5e:	0e 94 79 20 	call	0x40f2	; 0x40f2 <Show_Font57>
    4e62:	89 81       	ldd	r24, Y+1	; 0x01
    4e64:	9a 81       	ldd	r25, Y+2	; 0x02
    4e66:	01 96       	adiw	r24, 0x01	; 1
    4e68:	9a 83       	std	Y+2, r25	; 0x02
    4e6a:	89 83       	std	Y+1, r24	; 0x01
    4e6c:	8e 81       	ldd	r24, Y+6	; 0x06
    4e6e:	8e 5f       	subi	r24, 0xFE	; 254
    4e70:	8e 83       	std	Y+6, r24	; 0x06
    4e72:	89 81       	ldd	r24, Y+1	; 0x01
    4e74:	9a 81       	ldd	r25, Y+2	; 0x02
    4e76:	fc 01       	movw	r30, r24
    4e78:	80 81       	ld	r24, Z
    4e7a:	88 23       	and	r24, r24
    4e7c:	09 f4       	brne	.+2      	; 0x4e80 <Show_String+0x64>
    4e7e:	01 c0       	rjmp	.+2      	; 0x4e82 <Show_String+0x66>
    4e80:	e6 cf       	rjmp	.-52     	; 0x4e4e <Show_String+0x32>
    4e82:	27 96       	adiw	r28, 0x07	; 7
    4e84:	0f b6       	in	r0, 0x3f	; 63
    4e86:	f8 94       	cli
    4e88:	de bf       	out	0x3e, r29	; 62
    4e8a:	0f be       	out	0x3f, r0	; 63
    4e8c:	cd bf       	out	0x3d, r28	; 61
    4e8e:	df 91       	pop	r29
    4e90:	cf 91       	pop	r28
    4e92:	08 95       	ret

00004e94 <Show_Bigger_String>:
    4e94:	af 92       	push	r10
    4e96:	cf 92       	push	r12
    4e98:	ef 92       	push	r14
    4e9a:	ff 92       	push	r15
    4e9c:	0f 93       	push	r16
    4e9e:	cf 93       	push	r28
    4ea0:	df 93       	push	r29
    4ea2:	cd b7       	in	r28, 0x3d	; 61
    4ea4:	de b7       	in	r29, 0x3e	; 62
    4ea6:	2c 97       	sbiw	r28, 0x0c	; 12
    4ea8:	0f b6       	in	r0, 0x3f	; 63
    4eaa:	f8 94       	cli
    4eac:	de bf       	out	0x3e, r29	; 62
    4eae:	0f be       	out	0x3f, r0	; 63
    4eb0:	cd bf       	out	0x3d, r28	; 61
    4eb2:	9c 83       	std	Y+4, r25	; 0x04
    4eb4:	8b 83       	std	Y+3, r24	; 0x03
    4eb6:	6d 83       	std	Y+5, r22	; 0x05
    4eb8:	4e 83       	std	Y+6, r20	; 0x06
    4eba:	2f 83       	std	Y+7, r18	; 0x07
    4ebc:	08 87       	std	Y+8, r16	; 0x08
    4ebe:	fa 86       	std	Y+10, r15	; 0x0a
    4ec0:	e9 86       	std	Y+9, r14	; 0x09
    4ec2:	cb 86       	std	Y+11, r12	; 0x0b
    4ec4:	ac 86       	std	Y+12, r10	; 0x0c
    4ec6:	1a 82       	std	Y+2, r1	; 0x02
    4ec8:	19 82       	std	Y+1, r1	; 0x01
    4eca:	1c c0       	rjmp	.+56     	; 0x4f04 <Show_Bigger_String+0x70>
    4ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    4ece:	9c 81       	ldd	r25, Y+4	; 0x04
    4ed0:	fc 01       	movw	r30, r24
    4ed2:	80 81       	ld	r24, Z
    4ed4:	cc 84       	ldd	r12, Y+12	; 0x0c
    4ed6:	eb 84       	ldd	r14, Y+11	; 0x0b
    4ed8:	08 85       	ldd	r16, Y+8	; 0x08
    4eda:	2f 81       	ldd	r18, Y+7	; 0x07
    4edc:	4e 81       	ldd	r20, Y+6	; 0x06
    4ede:	6d 81       	ldd	r22, Y+5	; 0x05
    4ee0:	0e 94 cc 23 	call	0x4798	; 0x4798 <Show_Bigger_Char>
    4ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    4ee8:	01 96       	adiw	r24, 0x01	; 1
    4eea:	9c 83       	std	Y+4, r25	; 0x04
    4eec:	8b 83       	std	Y+3, r24	; 0x03
    4eee:	8d 81       	ldd	r24, Y+5	; 0x05
    4ef0:	8c 5f       	subi	r24, 0xFC	; 252
    4ef2:	8d 83       	std	Y+5, r24	; 0x05
    4ef4:	8e 81       	ldd	r24, Y+6	; 0x06
    4ef6:	8c 5f       	subi	r24, 0xFC	; 252
    4ef8:	8e 83       	std	Y+6, r24	; 0x06
    4efa:	89 81       	ldd	r24, Y+1	; 0x01
    4efc:	9a 81       	ldd	r25, Y+2	; 0x02
    4efe:	01 96       	adiw	r24, 0x01	; 1
    4f00:	9a 83       	std	Y+2, r25	; 0x02
    4f02:	89 83       	std	Y+1, r24	; 0x01
    4f04:	29 81       	ldd	r18, Y+1	; 0x01
    4f06:	3a 81       	ldd	r19, Y+2	; 0x02
    4f08:	89 85       	ldd	r24, Y+9	; 0x09
    4f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f0c:	28 17       	cp	r18, r24
    4f0e:	39 07       	cpc	r19, r25
    4f10:	e8 f2       	brcs	.-70     	; 0x4ecc <Show_Bigger_String+0x38>
    4f12:	2c 96       	adiw	r28, 0x0c	; 12
    4f14:	0f b6       	in	r0, 0x3f	; 63
    4f16:	f8 94       	cli
    4f18:	de bf       	out	0x3e, r29	; 62
    4f1a:	0f be       	out	0x3f, r0	; 63
    4f1c:	cd bf       	out	0x3d, r28	; 61
    4f1e:	df 91       	pop	r29
    4f20:	cf 91       	pop	r28
    4f22:	0f 91       	pop	r16
    4f24:	ff 90       	pop	r15
    4f26:	ef 90       	pop	r14
    4f28:	cf 90       	pop	r12
    4f2a:	af 90       	pop	r10
    4f2c:	08 95       	ret

00004f2e <Show_Big_String>:
    4f2e:	af 92       	push	r10
    4f30:	cf 92       	push	r12
    4f32:	ef 92       	push	r14
    4f34:	ff 92       	push	r15
    4f36:	0f 93       	push	r16
    4f38:	cf 93       	push	r28
    4f3a:	df 93       	push	r29
    4f3c:	cd b7       	in	r28, 0x3d	; 61
    4f3e:	de b7       	in	r29, 0x3e	; 62
    4f40:	2c 97       	sbiw	r28, 0x0c	; 12
    4f42:	0f b6       	in	r0, 0x3f	; 63
    4f44:	f8 94       	cli
    4f46:	de bf       	out	0x3e, r29	; 62
    4f48:	0f be       	out	0x3f, r0	; 63
    4f4a:	cd bf       	out	0x3d, r28	; 61
    4f4c:	9c 83       	std	Y+4, r25	; 0x04
    4f4e:	8b 83       	std	Y+3, r24	; 0x03
    4f50:	6d 83       	std	Y+5, r22	; 0x05
    4f52:	4e 83       	std	Y+6, r20	; 0x06
    4f54:	2f 83       	std	Y+7, r18	; 0x07
    4f56:	08 87       	std	Y+8, r16	; 0x08
    4f58:	fa 86       	std	Y+10, r15	; 0x0a
    4f5a:	e9 86       	std	Y+9, r14	; 0x09
    4f5c:	cb 86       	std	Y+11, r12	; 0x0b
    4f5e:	ac 86       	std	Y+12, r10	; 0x0c
    4f60:	1a 82       	std	Y+2, r1	; 0x02
    4f62:	19 82       	std	Y+1, r1	; 0x01
    4f64:	1c c0       	rjmp	.+56     	; 0x4f9e <Show_Big_String+0x70>
    4f66:	8b 81       	ldd	r24, Y+3	; 0x03
    4f68:	9c 81       	ldd	r25, Y+4	; 0x04
    4f6a:	fc 01       	movw	r30, r24
    4f6c:	80 81       	ld	r24, Z
    4f6e:	cc 84       	ldd	r12, Y+12	; 0x0c
    4f70:	eb 84       	ldd	r14, Y+11	; 0x0b
    4f72:	08 85       	ldd	r16, Y+8	; 0x08
    4f74:	2f 81       	ldd	r18, Y+7	; 0x07
    4f76:	4e 81       	ldd	r20, Y+6	; 0x06
    4f78:	6d 81       	ldd	r22, Y+5	; 0x05
    4f7a:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <Show_Big_Char>
    4f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f80:	9c 81       	ldd	r25, Y+4	; 0x04
    4f82:	01 96       	adiw	r24, 0x01	; 1
    4f84:	9c 83       	std	Y+4, r25	; 0x04
    4f86:	8b 83       	std	Y+3, r24	; 0x03
    4f88:	8d 81       	ldd	r24, Y+5	; 0x05
    4f8a:	8d 5f       	subi	r24, 0xFD	; 253
    4f8c:	8d 83       	std	Y+5, r24	; 0x05
    4f8e:	8e 81       	ldd	r24, Y+6	; 0x06
    4f90:	8d 5f       	subi	r24, 0xFD	; 253
    4f92:	8e 83       	std	Y+6, r24	; 0x06
    4f94:	89 81       	ldd	r24, Y+1	; 0x01
    4f96:	9a 81       	ldd	r25, Y+2	; 0x02
    4f98:	01 96       	adiw	r24, 0x01	; 1
    4f9a:	9a 83       	std	Y+2, r25	; 0x02
    4f9c:	89 83       	std	Y+1, r24	; 0x01
    4f9e:	29 81       	ldd	r18, Y+1	; 0x01
    4fa0:	3a 81       	ldd	r19, Y+2	; 0x02
    4fa2:	89 85       	ldd	r24, Y+9	; 0x09
    4fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fa6:	28 17       	cp	r18, r24
    4fa8:	39 07       	cpc	r19, r25
    4faa:	e8 f2       	brcs	.-70     	; 0x4f66 <Show_Big_String+0x38>
    4fac:	2c 96       	adiw	r28, 0x0c	; 12
    4fae:	0f b6       	in	r0, 0x3f	; 63
    4fb0:	f8 94       	cli
    4fb2:	de bf       	out	0x3e, r29	; 62
    4fb4:	0f be       	out	0x3f, r0	; 63
    4fb6:	cd bf       	out	0x3d, r28	; 61
    4fb8:	df 91       	pop	r29
    4fba:	cf 91       	pop	r28
    4fbc:	0f 91       	pop	r16
    4fbe:	ff 90       	pop	r15
    4fc0:	ef 90       	pop	r14
    4fc2:	cf 90       	pop	r12
    4fc4:	af 90       	pop	r10
    4fc6:	08 95       	ret

00004fc8 <Data_processing>:
    4fc8:	cf 93       	push	r28
    4fca:	df 93       	push	r29
    4fcc:	cd b7       	in	r28, 0x3d	; 61
    4fce:	de b7       	in	r29, 0x3e	; 62
    4fd0:	65 97       	sbiw	r28, 0x15	; 21
    4fd2:	0f b6       	in	r0, 0x3f	; 63
    4fd4:	f8 94       	cli
    4fd6:	de bf       	out	0x3e, r29	; 62
    4fd8:	0f be       	out	0x3f, r0	; 63
    4fda:	cd bf       	out	0x3d, r28	; 61
    4fdc:	8d 8b       	std	Y+21, r24	; 0x15
    4fde:	8d 89       	ldd	r24, Y+21	; 0x15
    4fe0:	80 78       	andi	r24, 0x80	; 128
    4fe2:	89 83       	std	Y+1, r24	; 0x01
    4fe4:	8d 89       	ldd	r24, Y+21	; 0x15
    4fe6:	88 2f       	mov	r24, r24
    4fe8:	90 e0       	ldi	r25, 0x00	; 0
    4fea:	80 74       	andi	r24, 0x40	; 64
    4fec:	99 27       	eor	r25, r25
    4fee:	95 95       	asr	r25
    4ff0:	87 95       	ror	r24
    4ff2:	95 95       	asr	r25
    4ff4:	87 95       	ror	r24
    4ff6:	95 95       	asr	r25
    4ff8:	87 95       	ror	r24
    4ffa:	8a 83       	std	Y+2, r24	; 0x02
    4ffc:	8d 89       	ldd	r24, Y+21	; 0x15
    4ffe:	80 72       	andi	r24, 0x20	; 32
    5000:	88 0f       	add	r24, r24
    5002:	88 0f       	add	r24, r24
    5004:	8b 83       	std	Y+3, r24	; 0x03
    5006:	8d 89       	ldd	r24, Y+21	; 0x15
    5008:	88 2f       	mov	r24, r24
    500a:	90 e0       	ldi	r25, 0x00	; 0
    500c:	80 71       	andi	r24, 0x10	; 16
    500e:	99 27       	eor	r25, r25
    5010:	95 95       	asr	r25
    5012:	87 95       	ror	r24
    5014:	8c 83       	std	Y+4, r24	; 0x04
    5016:	8d 89       	ldd	r24, Y+21	; 0x15
    5018:	88 70       	andi	r24, 0x08	; 8
    501a:	82 95       	swap	r24
    501c:	80 7f       	andi	r24, 0xF0	; 240
    501e:	8d 83       	std	Y+5, r24	; 0x05
    5020:	8d 89       	ldd	r24, Y+21	; 0x15
    5022:	84 70       	andi	r24, 0x04	; 4
    5024:	88 0f       	add	r24, r24
    5026:	8e 83       	std	Y+6, r24	; 0x06
    5028:	8d 89       	ldd	r24, Y+21	; 0x15
    502a:	82 70       	andi	r24, 0x02	; 2
    502c:	82 95       	swap	r24
    502e:	88 0f       	add	r24, r24
    5030:	88 0f       	add	r24, r24
    5032:	80 7c       	andi	r24, 0xC0	; 192
    5034:	8f 83       	std	Y+7, r24	; 0x07
    5036:	8d 89       	ldd	r24, Y+21	; 0x15
    5038:	81 70       	andi	r24, 0x01	; 1
    503a:	88 0f       	add	r24, r24
    503c:	88 0f       	add	r24, r24
    503e:	88 0f       	add	r24, r24
    5040:	88 87       	std	Y+8, r24	; 0x08
    5042:	89 81       	ldd	r24, Y+1	; 0x01
    5044:	98 2f       	mov	r25, r24
    5046:	96 95       	lsr	r25
    5048:	89 81       	ldd	r24, Y+1	; 0x01
    504a:	98 2b       	or	r25, r24
    504c:	89 81       	ldd	r24, Y+1	; 0x01
    504e:	86 95       	lsr	r24
    5050:	86 95       	lsr	r24
    5052:	98 2b       	or	r25, r24
    5054:	89 81       	ldd	r24, Y+1	; 0x01
    5056:	86 95       	lsr	r24
    5058:	86 95       	lsr	r24
    505a:	86 95       	lsr	r24
    505c:	89 2b       	or	r24, r25
    505e:	89 87       	std	Y+9, r24	; 0x09
    5060:	8a 81       	ldd	r24, Y+2	; 0x02
    5062:	98 2f       	mov	r25, r24
    5064:	96 95       	lsr	r25
    5066:	8a 81       	ldd	r24, Y+2	; 0x02
    5068:	98 2b       	or	r25, r24
    506a:	8a 81       	ldd	r24, Y+2	; 0x02
    506c:	86 95       	lsr	r24
    506e:	86 95       	lsr	r24
    5070:	98 2b       	or	r25, r24
    5072:	8a 81       	ldd	r24, Y+2	; 0x02
    5074:	86 95       	lsr	r24
    5076:	86 95       	lsr	r24
    5078:	86 95       	lsr	r24
    507a:	89 2b       	or	r24, r25
    507c:	8a 87       	std	Y+10, r24	; 0x0a
    507e:	8b 81       	ldd	r24, Y+3	; 0x03
    5080:	98 2f       	mov	r25, r24
    5082:	96 95       	lsr	r25
    5084:	8b 81       	ldd	r24, Y+3	; 0x03
    5086:	98 2b       	or	r25, r24
    5088:	8b 81       	ldd	r24, Y+3	; 0x03
    508a:	86 95       	lsr	r24
    508c:	86 95       	lsr	r24
    508e:	98 2b       	or	r25, r24
    5090:	8b 81       	ldd	r24, Y+3	; 0x03
    5092:	86 95       	lsr	r24
    5094:	86 95       	lsr	r24
    5096:	86 95       	lsr	r24
    5098:	89 2b       	or	r24, r25
    509a:	8b 87       	std	Y+11, r24	; 0x0b
    509c:	8c 81       	ldd	r24, Y+4	; 0x04
    509e:	98 2f       	mov	r25, r24
    50a0:	96 95       	lsr	r25
    50a2:	8c 81       	ldd	r24, Y+4	; 0x04
    50a4:	98 2b       	or	r25, r24
    50a6:	8c 81       	ldd	r24, Y+4	; 0x04
    50a8:	86 95       	lsr	r24
    50aa:	86 95       	lsr	r24
    50ac:	98 2b       	or	r25, r24
    50ae:	8c 81       	ldd	r24, Y+4	; 0x04
    50b0:	86 95       	lsr	r24
    50b2:	86 95       	lsr	r24
    50b4:	86 95       	lsr	r24
    50b6:	89 2b       	or	r24, r25
    50b8:	8c 87       	std	Y+12, r24	; 0x0c
    50ba:	8d 81       	ldd	r24, Y+5	; 0x05
    50bc:	98 2f       	mov	r25, r24
    50be:	96 95       	lsr	r25
    50c0:	8d 81       	ldd	r24, Y+5	; 0x05
    50c2:	98 2b       	or	r25, r24
    50c4:	8d 81       	ldd	r24, Y+5	; 0x05
    50c6:	86 95       	lsr	r24
    50c8:	86 95       	lsr	r24
    50ca:	98 2b       	or	r25, r24
    50cc:	8d 81       	ldd	r24, Y+5	; 0x05
    50ce:	86 95       	lsr	r24
    50d0:	86 95       	lsr	r24
    50d2:	86 95       	lsr	r24
    50d4:	89 2b       	or	r24, r25
    50d6:	8d 87       	std	Y+13, r24	; 0x0d
    50d8:	8e 81       	ldd	r24, Y+6	; 0x06
    50da:	98 2f       	mov	r25, r24
    50dc:	96 95       	lsr	r25
    50de:	8e 81       	ldd	r24, Y+6	; 0x06
    50e0:	98 2b       	or	r25, r24
    50e2:	8e 81       	ldd	r24, Y+6	; 0x06
    50e4:	86 95       	lsr	r24
    50e6:	86 95       	lsr	r24
    50e8:	98 2b       	or	r25, r24
    50ea:	8e 81       	ldd	r24, Y+6	; 0x06
    50ec:	86 95       	lsr	r24
    50ee:	86 95       	lsr	r24
    50f0:	86 95       	lsr	r24
    50f2:	89 2b       	or	r24, r25
    50f4:	8e 87       	std	Y+14, r24	; 0x0e
    50f6:	8f 81       	ldd	r24, Y+7	; 0x07
    50f8:	98 2f       	mov	r25, r24
    50fa:	96 95       	lsr	r25
    50fc:	8f 81       	ldd	r24, Y+7	; 0x07
    50fe:	98 2b       	or	r25, r24
    5100:	8f 81       	ldd	r24, Y+7	; 0x07
    5102:	86 95       	lsr	r24
    5104:	86 95       	lsr	r24
    5106:	98 2b       	or	r25, r24
    5108:	8f 81       	ldd	r24, Y+7	; 0x07
    510a:	86 95       	lsr	r24
    510c:	86 95       	lsr	r24
    510e:	86 95       	lsr	r24
    5110:	89 2b       	or	r24, r25
    5112:	8f 87       	std	Y+15, r24	; 0x0f
    5114:	88 85       	ldd	r24, Y+8	; 0x08
    5116:	98 2f       	mov	r25, r24
    5118:	96 95       	lsr	r25
    511a:	88 85       	ldd	r24, Y+8	; 0x08
    511c:	98 2b       	or	r25, r24
    511e:	88 85       	ldd	r24, Y+8	; 0x08
    5120:	86 95       	lsr	r24
    5122:	86 95       	lsr	r24
    5124:	98 2b       	or	r25, r24
    5126:	88 85       	ldd	r24, Y+8	; 0x08
    5128:	86 95       	lsr	r24
    512a:	86 95       	lsr	r24
    512c:	86 95       	lsr	r24
    512e:	89 2b       	or	r24, r25
    5130:	88 8b       	std	Y+16, r24	; 0x10
    5132:	99 85       	ldd	r25, Y+9	; 0x09
    5134:	8a 85       	ldd	r24, Y+10	; 0x0a
    5136:	89 2b       	or	r24, r25
    5138:	89 8b       	std	Y+17, r24	; 0x11
    513a:	9b 85       	ldd	r25, Y+11	; 0x0b
    513c:	8c 85       	ldd	r24, Y+12	; 0x0c
    513e:	89 2b       	or	r24, r25
    5140:	8a 8b       	std	Y+18, r24	; 0x12
    5142:	9d 85       	ldd	r25, Y+13	; 0x0d
    5144:	8e 85       	ldd	r24, Y+14	; 0x0e
    5146:	89 2b       	or	r24, r25
    5148:	8b 8b       	std	Y+19, r24	; 0x13
    514a:	9f 85       	ldd	r25, Y+15	; 0x0f
    514c:	88 89       	ldd	r24, Y+16	; 0x10
    514e:	89 2b       	or	r24, r25
    5150:	8c 8b       	std	Y+20, r24	; 0x14
    5152:	89 89       	ldd	r24, Y+17	; 0x11
    5154:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    5158:	8a 89       	ldd	r24, Y+18	; 0x12
    515a:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    515e:	8b 89       	ldd	r24, Y+19	; 0x13
    5160:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    5164:	8c 89       	ldd	r24, Y+20	; 0x14
    5166:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <Write_Data>
    516a:	65 96       	adiw	r28, 0x15	; 21
    516c:	0f b6       	in	r0, 0x3f	; 63
    516e:	f8 94       	cli
    5170:	de bf       	out	0x3e, r29	; 62
    5172:	0f be       	out	0x3f, r0	; 63
    5174:	cd bf       	out	0x3d, r28	; 61
    5176:	df 91       	pop	r29
    5178:	cf 91       	pop	r28
    517a:	08 95       	ret

0000517c <Display_Picture>:
    517c:	cf 93       	push	r28
    517e:	df 93       	push	r29
    5180:	cd b7       	in	r28, 0x3d	; 61
    5182:	de b7       	in	r29, 0x3e	; 62
    5184:	27 97       	sbiw	r28, 0x07	; 7
    5186:	0f b6       	in	r0, 0x3f	; 63
    5188:	f8 94       	cli
    518a:	de bf       	out	0x3e, r29	; 62
    518c:	0f be       	out	0x3f, r0	; 63
    518e:	cd bf       	out	0x3d, r28	; 61
    5190:	9f 83       	std	Y+7, r25	; 0x07
    5192:	8e 83       	std	Y+6, r24	; 0x06
    5194:	63 e9       	ldi	r22, 0x93	; 147
    5196:	8c e1       	ldi	r24, 0x1C	; 28
    5198:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <Set_Column_Address>
    519c:	6f e7       	ldi	r22, 0x7F	; 127
    519e:	80 e0       	ldi	r24, 0x00	; 0
    51a0:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <Set_Row_Address>
    51a4:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <Set_Write_RAM>
    51a8:	19 82       	std	Y+1, r1	; 0x01
    51aa:	2b c0       	rjmp	.+86     	; 0x5202 <Display_Picture+0x86>
    51ac:	1a 82       	std	Y+2, r1	; 0x02
    51ae:	23 c0       	rjmp	.+70     	; 0x51f6 <Display_Picture+0x7a>
    51b0:	89 81       	ldd	r24, Y+1	; 0x01
    51b2:	88 2f       	mov	r24, r24
    51b4:	90 e0       	ldi	r25, 0x00	; 0
    51b6:	9c 01       	movw	r18, r24
    51b8:	22 0f       	add	r18, r18
    51ba:	33 1f       	adc	r19, r19
    51bc:	22 95       	swap	r18
    51be:	32 95       	swap	r19
    51c0:	30 7f       	andi	r19, 0xF0	; 240
    51c2:	32 27       	eor	r19, r18
    51c4:	20 7f       	andi	r18, 0xF0	; 240
    51c6:	32 27       	eor	r19, r18
    51c8:	8a 81       	ldd	r24, Y+2	; 0x02
    51ca:	88 2f       	mov	r24, r24
    51cc:	90 e0       	ldi	r25, 0x00	; 0
    51ce:	82 0f       	add	r24, r18
    51d0:	93 1f       	adc	r25, r19
    51d2:	9c 01       	movw	r18, r24
    51d4:	8e 81       	ldd	r24, Y+6	; 0x06
    51d6:	9f 81       	ldd	r25, Y+7	; 0x07
    51d8:	82 0f       	add	r24, r18
    51da:	93 1f       	adc	r25, r19
    51dc:	9c 83       	std	Y+4, r25	; 0x04
    51de:	8b 83       	std	Y+3, r24	; 0x03
    51e0:	8b 81       	ldd	r24, Y+3	; 0x03
    51e2:	9c 81       	ldd	r25, Y+4	; 0x04
    51e4:	fc 01       	movw	r30, r24
    51e6:	84 91       	lpm	r24, Z
    51e8:	8d 83       	std	Y+5, r24	; 0x05
    51ea:	8d 81       	ldd	r24, Y+5	; 0x05
    51ec:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <Data_processing>
    51f0:	8a 81       	ldd	r24, Y+2	; 0x02
    51f2:	8f 5f       	subi	r24, 0xFF	; 255
    51f4:	8a 83       	std	Y+2, r24	; 0x02
    51f6:	8a 81       	ldd	r24, Y+2	; 0x02
    51f8:	8c 33       	cpi	r24, 0x3C	; 60
    51fa:	d0 f2       	brcs	.-76     	; 0x51b0 <Display_Picture+0x34>
    51fc:	89 81       	ldd	r24, Y+1	; 0x01
    51fe:	8f 5f       	subi	r24, 0xFF	; 255
    5200:	89 83       	std	Y+1, r24	; 0x01
    5202:	89 81       	ldd	r24, Y+1	; 0x01
    5204:	80 34       	cpi	r24, 0x40	; 64
    5206:	90 f2       	brcs	.-92     	; 0x51ac <Display_Picture+0x30>
    5208:	00 00       	nop
    520a:	27 96       	adiw	r28, 0x07	; 7
    520c:	0f b6       	in	r0, 0x3f	; 63
    520e:	f8 94       	cli
    5210:	de bf       	out	0x3e, r29	; 62
    5212:	0f be       	out	0x3f, r0	; 63
    5214:	cd bf       	out	0x3d, r28	; 61
    5216:	df 91       	pop	r29
    5218:	cf 91       	pop	r28
    521a:	08 95       	ret

0000521c <Set_Linear_Gray_Scale_Table>:


void Set_Linear_Gray_Scale_Table()
{
    521c:	cf 93       	push	r28
    521e:	df 93       	push	r29
    5220:	cd b7       	in	r28, 0x3d	; 61
    5222:	de b7       	in	r29, 0x3e	; 62
	Write_Command(0xB9);			// Set Default Linear Gray Scale Table
    5224:	89 eb       	ldi	r24, 0xB9	; 185
    5226:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <Write_Command>
}
    522a:	df 91       	pop	r29
    522c:	cf 91       	pop	r28
    522e:	08 95       	ret

00005230 <OLED_Init>:

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  Initialization
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void OLED_Init()
{
    5230:	cf 93       	push	r28
    5232:	df 93       	push	r29
    5234:	cd b7       	in	r28, 0x3d	; 61
    5236:	de b7       	in	r29, 0x3e	; 62
	
	
	unsigned char i;

	RESET_low;
    5238:	85 e2       	ldi	r24, 0x25	; 37
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	25 e2       	ldi	r18, 0x25	; 37
    523e:	30 e0       	ldi	r19, 0x00	; 0
    5240:	f9 01       	movw	r30, r18
    5242:	20 81       	ld	r18, Z
    5244:	2f 7b       	andi	r18, 0xBF	; 191
    5246:	fc 01       	movw	r30, r24
    5248:	20 83       	st	Z, r18
	Delay(10);
    524a:	8a e0       	ldi	r24, 0x0A	; 10
    524c:	90 e0       	ldi	r25, 0x00	; 0
    524e:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <Delay>
	
	RESET_high;
    5252:	85 e2       	ldi	r24, 0x25	; 37
    5254:	90 e0       	ldi	r25, 0x00	; 0
    5256:	25 e2       	ldi	r18, 0x25	; 37
    5258:	30 e0       	ldi	r19, 0x00	; 0
    525a:	f9 01       	movw	r30, r18
    525c:	20 81       	ld	r18, Z
    525e:	20 64       	ori	r18, 0x40	; 64
    5260:	fc 01       	movw	r30, r24
    5262:	20 83       	st	Z, r18


	Set_Command_Lock(0x12);			// Unlock Basic Commands (0x12/0x16)
    5264:	82 e1       	ldi	r24, 0x12	; 18
    5266:	0e 94 3e 20 	call	0x407c	; 0x407c <Set_Command_Lock>
	Set_Display_On_Off(0x00);		// Display Off (0x00/0x01)
    526a:	80 e0       	ldi	r24, 0x00	; 0
    526c:	0e 94 75 1f 	call	0x3eea	; 0x3eea <Set_Display_On_Off>
	Set_Display_Clock(0x91);		// Set Clock as 80 Frames/Sec
    5270:	81 e9       	ldi	r24, 0x91	; 145
    5272:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <Set_Display_Clock>
	Set_Multiplex_Ratio(0x3F);		// 1/64 Duty (0x0F~0x3F)
    5276:	8f e3       	ldi	r24, 0x3F	; 63
    5278:	0e 94 1a 20 	call	0x4034	; 0x4034 <Set_Multiplex_Ratio>
	Set_Display_Offset(0x00);		// Shift Mapping RAM Counter (0x00~0x3F)
    527c:	80 e0       	ldi	r24, 0x00	; 0
    527e:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <Set_Display_Offset>
	Set_Start_Line(0x00);			// Set Mapping RAM Display Start Line (0x00~0x7F)
    5282:	80 e0       	ldi	r24, 0x00	; 0
    5284:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <Set_Start_Line>
	Set_Remap_Format(0x14);			// Set Horizontal Address Increment
    5288:	84 e1       	ldi	r24, 0x14	; 20
    528a:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <Set_Remap_Format>
	//     Column Address 0 Mapped to SEG0
	//     Disable Nibble Remap
	//     Scan from COM[N-1] to COM0
	//     Disable COM Split Odd Even
	//     Enable Dual COM Line Mode
	Set_GPIO(0x00);				// Disable GPIO Pins Input
    528e:	80 e0       	ldi	r24, 0x00	; 0
    5290:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <Set_GPIO>
	Set_Function_Selection(0x01);		// Enable Internal VDD Regulator
    5294:	81 e0       	ldi	r24, 0x01	; 1
    5296:	0e 94 65 1f 	call	0x3eca	; 0x3eca <Set_Function_Selection>
	Set_Display_Enhancement_A(0xA0,0xFD);	// Enable External VSL
    529a:	6d ef       	ldi	r22, 0xFD	; 253
    529c:	80 ea       	ldi	r24, 0xA0	; 160
    529e:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <Set_Display_Enhancement_A>
	// Set Low Gray Scale Enhancement
	Set_Contrast_Current(0x7F);		// Set Segment Output Current
    52a2:	8f e7       	ldi	r24, 0x7F	; 127
    52a4:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <Set_Contrast_Current>
	Set_Master_Current(Brightness);		// Set Scale Factor of Segment Output Current Control
    52a8:	8f e0       	ldi	r24, 0x0F	; 15
    52aa:	0e 94 0a 20 	call	0x4014	; 0x4014 <Set_Master_Current>
	//Set_Gray_Scale_Table();			// Set Pulse Width for Gray Scale Table
	Set_Linear_Gray_Scale_Table();
    52ae:	0e 94 0e 29 	call	0x521c	; 0x521c <Set_Linear_Gray_Scale_Table>
	Set_Phase_Length(0xE2);			// Set Phase 1 as 5 Clocks & Phase 2 as 14 Clocks
    52b2:	82 ee       	ldi	r24, 0xE2	; 226
    52b4:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <Set_Phase_Length>
	Set_Display_Enhancement_B(0x20);	// Enhance Driving Scheme Capability (0x00/0x20)
    52b8:	80 e2       	ldi	r24, 0x20	; 32
    52ba:	0e 94 2a 20 	call	0x4054	; 0x4054 <Set_Display_Enhancement_B>
	Set_Precharge_Voltage(0x1F);		// Set Pre-Charge Voltage Level as 0.60*VCC
    52be:	8f e1       	ldi	r24, 0x1F	; 31
    52c0:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <Set_Precharge_Voltage>
	Set_Precharge_Period(0x08);		// Set Second Pre-Charge Period as 8 Clocks
    52c4:	88 e0       	ldi	r24, 0x08	; 8
    52c6:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <Set_Precharge_Period>
	Set_VCOMH(0x07);			// Set Common Pins Deselect Voltage Level as 0.86*VCC
    52ca:	87 e0       	ldi	r24, 0x07	; 7
    52cc:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <Set_VCOMH>
	Set_Display_Mode(0x02);			// Normal Display Mode (0x00/0x01/0x02/0x03)
    52d0:	82 e0       	ldi	r24, 0x02	; 2
    52d2:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <Set_Display_Mode>
	Set_Partial_Display(0x01,0x00,0x00);	// Disable Partial Display
    52d6:	40 e0       	ldi	r20, 0x00	; 0
    52d8:	60 e0       	ldi	r22, 0x00	; 0
    52da:	81 e0       	ldi	r24, 0x01	; 1
    52dc:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <Set_Partial_Display>

	Fill_RAM(0x00);				// Clear Screen
    52e0:	80 e0       	ldi	r24, 0x00	; 0
    52e2:	0e 94 4f 20 	call	0x409e	; 0x409e <Fill_RAM>

	Set_Display_On_Off(0x01);		// Display On (0x00/0x01)
    52e6:	81 e0       	ldi	r24, 0x01	; 1
    52e8:	0e 94 75 1f 	call	0x3eea	; 0x3eea <Set_Display_On_Off>
	
	
    52ec:	df 91       	pop	r29
    52ee:	cf 91       	pop	r28
    52f0:	08 95       	ret

000052f2 <__subsf3>:
    52f2:	50 58       	subi	r21, 0x80	; 128

000052f4 <__addsf3>:
    52f4:	bb 27       	eor	r27, r27
    52f6:	aa 27       	eor	r26, r26
    52f8:	0e 94 91 29 	call	0x5322	; 0x5322 <__addsf3x>
    52fc:	0c 94 99 2a 	jmp	0x5532	; 0x5532 <__fp_round>
    5300:	0e 94 8b 2a 	call	0x5516	; 0x5516 <__fp_pscA>
    5304:	38 f0       	brcs	.+14     	; 0x5314 <__addsf3+0x20>
    5306:	0e 94 92 2a 	call	0x5524	; 0x5524 <__fp_pscB>
    530a:	20 f0       	brcs	.+8      	; 0x5314 <__addsf3+0x20>
    530c:	39 f4       	brne	.+14     	; 0x531c <__addsf3+0x28>
    530e:	9f 3f       	cpi	r25, 0xFF	; 255
    5310:	19 f4       	brne	.+6      	; 0x5318 <__addsf3+0x24>
    5312:	26 f4       	brtc	.+8      	; 0x531c <__addsf3+0x28>
    5314:	0c 94 88 2a 	jmp	0x5510	; 0x5510 <__fp_nan>
    5318:	0e f4       	brtc	.+2      	; 0x531c <__addsf3+0x28>
    531a:	e0 95       	com	r30
    531c:	e7 fb       	bst	r30, 7
    531e:	0c 94 82 2a 	jmp	0x5504	; 0x5504 <__fp_inf>

00005322 <__addsf3x>:
    5322:	e9 2f       	mov	r30, r25
    5324:	0e 94 aa 2a 	call	0x5554	; 0x5554 <__fp_split3>
    5328:	58 f3       	brcs	.-42     	; 0x5300 <__addsf3+0xc>
    532a:	ba 17       	cp	r27, r26
    532c:	62 07       	cpc	r22, r18
    532e:	73 07       	cpc	r23, r19
    5330:	84 07       	cpc	r24, r20
    5332:	95 07       	cpc	r25, r21
    5334:	20 f0       	brcs	.+8      	; 0x533e <__addsf3x+0x1c>
    5336:	79 f4       	brne	.+30     	; 0x5356 <__addsf3x+0x34>
    5338:	a6 f5       	brtc	.+104    	; 0x53a2 <__addsf3x+0x80>
    533a:	0c 94 cc 2a 	jmp	0x5598	; 0x5598 <__fp_zero>
    533e:	0e f4       	brtc	.+2      	; 0x5342 <__addsf3x+0x20>
    5340:	e0 95       	com	r30
    5342:	0b 2e       	mov	r0, r27
    5344:	ba 2f       	mov	r27, r26
    5346:	a0 2d       	mov	r26, r0
    5348:	0b 01       	movw	r0, r22
    534a:	b9 01       	movw	r22, r18
    534c:	90 01       	movw	r18, r0
    534e:	0c 01       	movw	r0, r24
    5350:	ca 01       	movw	r24, r20
    5352:	a0 01       	movw	r20, r0
    5354:	11 24       	eor	r1, r1
    5356:	ff 27       	eor	r31, r31
    5358:	59 1b       	sub	r21, r25
    535a:	99 f0       	breq	.+38     	; 0x5382 <__addsf3x+0x60>
    535c:	59 3f       	cpi	r21, 0xF9	; 249
    535e:	50 f4       	brcc	.+20     	; 0x5374 <__addsf3x+0x52>
    5360:	50 3e       	cpi	r21, 0xE0	; 224
    5362:	68 f1       	brcs	.+90     	; 0x53be <__addsf3x+0x9c>
    5364:	1a 16       	cp	r1, r26
    5366:	f0 40       	sbci	r31, 0x00	; 0
    5368:	a2 2f       	mov	r26, r18
    536a:	23 2f       	mov	r18, r19
    536c:	34 2f       	mov	r19, r20
    536e:	44 27       	eor	r20, r20
    5370:	58 5f       	subi	r21, 0xF8	; 248
    5372:	f3 cf       	rjmp	.-26     	; 0x535a <__addsf3x+0x38>
    5374:	46 95       	lsr	r20
    5376:	37 95       	ror	r19
    5378:	27 95       	ror	r18
    537a:	a7 95       	ror	r26
    537c:	f0 40       	sbci	r31, 0x00	; 0
    537e:	53 95       	inc	r21
    5380:	c9 f7       	brne	.-14     	; 0x5374 <__addsf3x+0x52>
    5382:	7e f4       	brtc	.+30     	; 0x53a2 <__addsf3x+0x80>
    5384:	1f 16       	cp	r1, r31
    5386:	ba 0b       	sbc	r27, r26
    5388:	62 0b       	sbc	r22, r18
    538a:	73 0b       	sbc	r23, r19
    538c:	84 0b       	sbc	r24, r20
    538e:	ba f0       	brmi	.+46     	; 0x53be <__addsf3x+0x9c>
    5390:	91 50       	subi	r25, 0x01	; 1
    5392:	a1 f0       	breq	.+40     	; 0x53bc <__addsf3x+0x9a>
    5394:	ff 0f       	add	r31, r31
    5396:	bb 1f       	adc	r27, r27
    5398:	66 1f       	adc	r22, r22
    539a:	77 1f       	adc	r23, r23
    539c:	88 1f       	adc	r24, r24
    539e:	c2 f7       	brpl	.-16     	; 0x5390 <__addsf3x+0x6e>
    53a0:	0e c0       	rjmp	.+28     	; 0x53be <__addsf3x+0x9c>
    53a2:	ba 0f       	add	r27, r26
    53a4:	62 1f       	adc	r22, r18
    53a6:	73 1f       	adc	r23, r19
    53a8:	84 1f       	adc	r24, r20
    53aa:	48 f4       	brcc	.+18     	; 0x53be <__addsf3x+0x9c>
    53ac:	87 95       	ror	r24
    53ae:	77 95       	ror	r23
    53b0:	67 95       	ror	r22
    53b2:	b7 95       	ror	r27
    53b4:	f7 95       	ror	r31
    53b6:	9e 3f       	cpi	r25, 0xFE	; 254
    53b8:	08 f0       	brcs	.+2      	; 0x53bc <__addsf3x+0x9a>
    53ba:	b0 cf       	rjmp	.-160    	; 0x531c <__addsf3+0x28>
    53bc:	93 95       	inc	r25
    53be:	88 0f       	add	r24, r24
    53c0:	08 f0       	brcs	.+2      	; 0x53c4 <__addsf3x+0xa2>
    53c2:	99 27       	eor	r25, r25
    53c4:	ee 0f       	add	r30, r30
    53c6:	97 95       	ror	r25
    53c8:	87 95       	ror	r24
    53ca:	08 95       	ret

000053cc <__cmpsf2>:
    53cc:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <__fp_cmp>
    53d0:	08 f4       	brcc	.+2      	; 0x53d4 <__cmpsf2+0x8>
    53d2:	81 e0       	ldi	r24, 0x01	; 1
    53d4:	08 95       	ret

000053d6 <__fixsfsi>:
    53d6:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <__fixunssfsi>
    53da:	68 94       	set
    53dc:	b1 11       	cpse	r27, r1
    53de:	0c 94 cd 2a 	jmp	0x559a	; 0x559a <__fp_szero>
    53e2:	08 95       	ret

000053e4 <__fixunssfsi>:
    53e4:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__fp_splitA>
    53e8:	88 f0       	brcs	.+34     	; 0x540c <__fixunssfsi+0x28>
    53ea:	9f 57       	subi	r25, 0x7F	; 127
    53ec:	98 f0       	brcs	.+38     	; 0x5414 <__fixunssfsi+0x30>
    53ee:	b9 2f       	mov	r27, r25
    53f0:	99 27       	eor	r25, r25
    53f2:	b7 51       	subi	r27, 0x17	; 23
    53f4:	b0 f0       	brcs	.+44     	; 0x5422 <__fixunssfsi+0x3e>
    53f6:	e1 f0       	breq	.+56     	; 0x5430 <__fixunssfsi+0x4c>
    53f8:	66 0f       	add	r22, r22
    53fa:	77 1f       	adc	r23, r23
    53fc:	88 1f       	adc	r24, r24
    53fe:	99 1f       	adc	r25, r25
    5400:	1a f0       	brmi	.+6      	; 0x5408 <__fixunssfsi+0x24>
    5402:	ba 95       	dec	r27
    5404:	c9 f7       	brne	.-14     	; 0x53f8 <__fixunssfsi+0x14>
    5406:	14 c0       	rjmp	.+40     	; 0x5430 <__fixunssfsi+0x4c>
    5408:	b1 30       	cpi	r27, 0x01	; 1
    540a:	91 f0       	breq	.+36     	; 0x5430 <__fixunssfsi+0x4c>
    540c:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__fp_zero>
    5410:	b1 e0       	ldi	r27, 0x01	; 1
    5412:	08 95       	ret
    5414:	0c 94 cc 2a 	jmp	0x5598	; 0x5598 <__fp_zero>
    5418:	67 2f       	mov	r22, r23
    541a:	78 2f       	mov	r23, r24
    541c:	88 27       	eor	r24, r24
    541e:	b8 5f       	subi	r27, 0xF8	; 248
    5420:	39 f0       	breq	.+14     	; 0x5430 <__fixunssfsi+0x4c>
    5422:	b9 3f       	cpi	r27, 0xF9	; 249
    5424:	cc f3       	brlt	.-14     	; 0x5418 <__fixunssfsi+0x34>
    5426:	86 95       	lsr	r24
    5428:	77 95       	ror	r23
    542a:	67 95       	ror	r22
    542c:	b3 95       	inc	r27
    542e:	d9 f7       	brne	.-10     	; 0x5426 <__fixunssfsi+0x42>
    5430:	3e f4       	brtc	.+14     	; 0x5440 <__fixunssfsi+0x5c>
    5432:	90 95       	com	r25
    5434:	80 95       	com	r24
    5436:	70 95       	com	r23
    5438:	61 95       	neg	r22
    543a:	7f 4f       	sbci	r23, 0xFF	; 255
    543c:	8f 4f       	sbci	r24, 0xFF	; 255
    543e:	9f 4f       	sbci	r25, 0xFF	; 255
    5440:	08 95       	ret

00005442 <__floatunsisf>:
    5442:	e8 94       	clt
    5444:	09 c0       	rjmp	.+18     	; 0x5458 <__floatsisf+0x12>

00005446 <__floatsisf>:
    5446:	97 fb       	bst	r25, 7
    5448:	3e f4       	brtc	.+14     	; 0x5458 <__floatsisf+0x12>
    544a:	90 95       	com	r25
    544c:	80 95       	com	r24
    544e:	70 95       	com	r23
    5450:	61 95       	neg	r22
    5452:	7f 4f       	sbci	r23, 0xFF	; 255
    5454:	8f 4f       	sbci	r24, 0xFF	; 255
    5456:	9f 4f       	sbci	r25, 0xFF	; 255
    5458:	99 23       	and	r25, r25
    545a:	a9 f0       	breq	.+42     	; 0x5486 <__floatsisf+0x40>
    545c:	f9 2f       	mov	r31, r25
    545e:	96 e9       	ldi	r25, 0x96	; 150
    5460:	bb 27       	eor	r27, r27
    5462:	93 95       	inc	r25
    5464:	f6 95       	lsr	r31
    5466:	87 95       	ror	r24
    5468:	77 95       	ror	r23
    546a:	67 95       	ror	r22
    546c:	b7 95       	ror	r27
    546e:	f1 11       	cpse	r31, r1
    5470:	f8 cf       	rjmp	.-16     	; 0x5462 <__floatsisf+0x1c>
    5472:	fa f4       	brpl	.+62     	; 0x54b2 <__floatsisf+0x6c>
    5474:	bb 0f       	add	r27, r27
    5476:	11 f4       	brne	.+4      	; 0x547c <__floatsisf+0x36>
    5478:	60 ff       	sbrs	r22, 0
    547a:	1b c0       	rjmp	.+54     	; 0x54b2 <__floatsisf+0x6c>
    547c:	6f 5f       	subi	r22, 0xFF	; 255
    547e:	7f 4f       	sbci	r23, 0xFF	; 255
    5480:	8f 4f       	sbci	r24, 0xFF	; 255
    5482:	9f 4f       	sbci	r25, 0xFF	; 255
    5484:	16 c0       	rjmp	.+44     	; 0x54b2 <__floatsisf+0x6c>
    5486:	88 23       	and	r24, r24
    5488:	11 f0       	breq	.+4      	; 0x548e <__floatsisf+0x48>
    548a:	96 e9       	ldi	r25, 0x96	; 150
    548c:	11 c0       	rjmp	.+34     	; 0x54b0 <__floatsisf+0x6a>
    548e:	77 23       	and	r23, r23
    5490:	21 f0       	breq	.+8      	; 0x549a <__floatsisf+0x54>
    5492:	9e e8       	ldi	r25, 0x8E	; 142
    5494:	87 2f       	mov	r24, r23
    5496:	76 2f       	mov	r23, r22
    5498:	05 c0       	rjmp	.+10     	; 0x54a4 <__floatsisf+0x5e>
    549a:	66 23       	and	r22, r22
    549c:	71 f0       	breq	.+28     	; 0x54ba <__floatsisf+0x74>
    549e:	96 e8       	ldi	r25, 0x86	; 134
    54a0:	86 2f       	mov	r24, r22
    54a2:	70 e0       	ldi	r23, 0x00	; 0
    54a4:	60 e0       	ldi	r22, 0x00	; 0
    54a6:	2a f0       	brmi	.+10     	; 0x54b2 <__floatsisf+0x6c>
    54a8:	9a 95       	dec	r25
    54aa:	66 0f       	add	r22, r22
    54ac:	77 1f       	adc	r23, r23
    54ae:	88 1f       	adc	r24, r24
    54b0:	da f7       	brpl	.-10     	; 0x54a8 <__floatsisf+0x62>
    54b2:	88 0f       	add	r24, r24
    54b4:	96 95       	lsr	r25
    54b6:	87 95       	ror	r24
    54b8:	97 f9       	bld	r25, 7
    54ba:	08 95       	ret

000054bc <__fp_cmp>:
    54bc:	99 0f       	add	r25, r25
    54be:	00 08       	sbc	r0, r0
    54c0:	55 0f       	add	r21, r21
    54c2:	aa 0b       	sbc	r26, r26
    54c4:	e0 e8       	ldi	r30, 0x80	; 128
    54c6:	fe ef       	ldi	r31, 0xFE	; 254
    54c8:	16 16       	cp	r1, r22
    54ca:	17 06       	cpc	r1, r23
    54cc:	e8 07       	cpc	r30, r24
    54ce:	f9 07       	cpc	r31, r25
    54d0:	c0 f0       	brcs	.+48     	; 0x5502 <__fp_cmp+0x46>
    54d2:	12 16       	cp	r1, r18
    54d4:	13 06       	cpc	r1, r19
    54d6:	e4 07       	cpc	r30, r20
    54d8:	f5 07       	cpc	r31, r21
    54da:	98 f0       	brcs	.+38     	; 0x5502 <__fp_cmp+0x46>
    54dc:	62 1b       	sub	r22, r18
    54de:	73 0b       	sbc	r23, r19
    54e0:	84 0b       	sbc	r24, r20
    54e2:	95 0b       	sbc	r25, r21
    54e4:	39 f4       	brne	.+14     	; 0x54f4 <__fp_cmp+0x38>
    54e6:	0a 26       	eor	r0, r26
    54e8:	61 f0       	breq	.+24     	; 0x5502 <__fp_cmp+0x46>
    54ea:	23 2b       	or	r18, r19
    54ec:	24 2b       	or	r18, r20
    54ee:	25 2b       	or	r18, r21
    54f0:	21 f4       	brne	.+8      	; 0x54fa <__fp_cmp+0x3e>
    54f2:	08 95       	ret
    54f4:	0a 26       	eor	r0, r26
    54f6:	09 f4       	brne	.+2      	; 0x54fa <__fp_cmp+0x3e>
    54f8:	a1 40       	sbci	r26, 0x01	; 1
    54fa:	a6 95       	lsr	r26
    54fc:	8f ef       	ldi	r24, 0xFF	; 255
    54fe:	81 1d       	adc	r24, r1
    5500:	81 1d       	adc	r24, r1
    5502:	08 95       	ret

00005504 <__fp_inf>:
    5504:	97 f9       	bld	r25, 7
    5506:	9f 67       	ori	r25, 0x7F	; 127
    5508:	80 e8       	ldi	r24, 0x80	; 128
    550a:	70 e0       	ldi	r23, 0x00	; 0
    550c:	60 e0       	ldi	r22, 0x00	; 0
    550e:	08 95       	ret

00005510 <__fp_nan>:
    5510:	9f ef       	ldi	r25, 0xFF	; 255
    5512:	80 ec       	ldi	r24, 0xC0	; 192
    5514:	08 95       	ret

00005516 <__fp_pscA>:
    5516:	00 24       	eor	r0, r0
    5518:	0a 94       	dec	r0
    551a:	16 16       	cp	r1, r22
    551c:	17 06       	cpc	r1, r23
    551e:	18 06       	cpc	r1, r24
    5520:	09 06       	cpc	r0, r25
    5522:	08 95       	ret

00005524 <__fp_pscB>:
    5524:	00 24       	eor	r0, r0
    5526:	0a 94       	dec	r0
    5528:	12 16       	cp	r1, r18
    552a:	13 06       	cpc	r1, r19
    552c:	14 06       	cpc	r1, r20
    552e:	05 06       	cpc	r0, r21
    5530:	08 95       	ret

00005532 <__fp_round>:
    5532:	09 2e       	mov	r0, r25
    5534:	03 94       	inc	r0
    5536:	00 0c       	add	r0, r0
    5538:	11 f4       	brne	.+4      	; 0x553e <__fp_round+0xc>
    553a:	88 23       	and	r24, r24
    553c:	52 f0       	brmi	.+20     	; 0x5552 <__fp_round+0x20>
    553e:	bb 0f       	add	r27, r27
    5540:	40 f4       	brcc	.+16     	; 0x5552 <__fp_round+0x20>
    5542:	bf 2b       	or	r27, r31
    5544:	11 f4       	brne	.+4      	; 0x554a <__fp_round+0x18>
    5546:	60 ff       	sbrs	r22, 0
    5548:	04 c0       	rjmp	.+8      	; 0x5552 <__fp_round+0x20>
    554a:	6f 5f       	subi	r22, 0xFF	; 255
    554c:	7f 4f       	sbci	r23, 0xFF	; 255
    554e:	8f 4f       	sbci	r24, 0xFF	; 255
    5550:	9f 4f       	sbci	r25, 0xFF	; 255
    5552:	08 95       	ret

00005554 <__fp_split3>:
    5554:	57 fd       	sbrc	r21, 7
    5556:	90 58       	subi	r25, 0x80	; 128
    5558:	44 0f       	add	r20, r20
    555a:	55 1f       	adc	r21, r21
    555c:	59 f0       	breq	.+22     	; 0x5574 <__fp_splitA+0x10>
    555e:	5f 3f       	cpi	r21, 0xFF	; 255
    5560:	71 f0       	breq	.+28     	; 0x557e <__fp_splitA+0x1a>
    5562:	47 95       	ror	r20

00005564 <__fp_splitA>:
    5564:	88 0f       	add	r24, r24
    5566:	97 fb       	bst	r25, 7
    5568:	99 1f       	adc	r25, r25
    556a:	61 f0       	breq	.+24     	; 0x5584 <__fp_splitA+0x20>
    556c:	9f 3f       	cpi	r25, 0xFF	; 255
    556e:	79 f0       	breq	.+30     	; 0x558e <__fp_splitA+0x2a>
    5570:	87 95       	ror	r24
    5572:	08 95       	ret
    5574:	12 16       	cp	r1, r18
    5576:	13 06       	cpc	r1, r19
    5578:	14 06       	cpc	r1, r20
    557a:	55 1f       	adc	r21, r21
    557c:	f2 cf       	rjmp	.-28     	; 0x5562 <__fp_split3+0xe>
    557e:	46 95       	lsr	r20
    5580:	f1 df       	rcall	.-30     	; 0x5564 <__fp_splitA>
    5582:	08 c0       	rjmp	.+16     	; 0x5594 <__fp_splitA+0x30>
    5584:	16 16       	cp	r1, r22
    5586:	17 06       	cpc	r1, r23
    5588:	18 06       	cpc	r1, r24
    558a:	99 1f       	adc	r25, r25
    558c:	f1 cf       	rjmp	.-30     	; 0x5570 <__fp_splitA+0xc>
    558e:	86 95       	lsr	r24
    5590:	71 05       	cpc	r23, r1
    5592:	61 05       	cpc	r22, r1
    5594:	08 94       	sec
    5596:	08 95       	ret

00005598 <__fp_zero>:
    5598:	e8 94       	clt

0000559a <__fp_szero>:
    559a:	bb 27       	eor	r27, r27
    559c:	66 27       	eor	r22, r22
    559e:	77 27       	eor	r23, r23
    55a0:	cb 01       	movw	r24, r22
    55a2:	97 f9       	bld	r25, 7
    55a4:	08 95       	ret

000055a6 <__gesf2>:
    55a6:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <__fp_cmp>
    55aa:	08 f4       	brcc	.+2      	; 0x55ae <__gesf2+0x8>
    55ac:	8f ef       	ldi	r24, 0xFF	; 255
    55ae:	08 95       	ret

000055b0 <log10>:
    55b0:	0e 94 e8 2a 	call	0x55d0	; 0x55d0 <log>
    55b4:	29 ed       	ldi	r18, 0xD9	; 217
    55b6:	3b e5       	ldi	r19, 0x5B	; 91
    55b8:	4e ed       	ldi	r20, 0xDE	; 222
    55ba:	5e e3       	ldi	r21, 0x3E	; 62
    55bc:	0c 94 30 2b 	jmp	0x5660	; 0x5660 <__mulsf3>
    55c0:	16 f0       	brts	.+4      	; 0x55c6 <log10+0x16>
    55c2:	0c 94 9d 2b 	jmp	0x573a	; 0x573a <__fp_mpack>
    55c6:	0c 94 88 2a 	jmp	0x5510	; 0x5510 <__fp_nan>
    55ca:	68 94       	set
    55cc:	0c 94 82 2a 	jmp	0x5504	; 0x5504 <__fp_inf>

000055d0 <log>:
    55d0:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__fp_splitA>
    55d4:	a8 f3       	brcs	.-22     	; 0x55c0 <log10+0x10>
    55d6:	99 23       	and	r25, r25
    55d8:	c1 f3       	breq	.-16     	; 0x55ca <log10+0x1a>
    55da:	ae f3       	brts	.-22     	; 0x55c6 <log10+0x16>
    55dc:	df 93       	push	r29
    55de:	cf 93       	push	r28
    55e0:	1f 93       	push	r17
    55e2:	0f 93       	push	r16
    55e4:	ff 92       	push	r15
    55e6:	c9 2f       	mov	r28, r25
    55e8:	dd 27       	eor	r29, r29
    55ea:	88 23       	and	r24, r24
    55ec:	2a f0       	brmi	.+10     	; 0x55f8 <log+0x28>
    55ee:	21 97       	sbiw	r28, 0x01	; 1
    55f0:	66 0f       	add	r22, r22
    55f2:	77 1f       	adc	r23, r23
    55f4:	88 1f       	adc	r24, r24
    55f6:	da f7       	brpl	.-10     	; 0x55ee <log+0x1e>
    55f8:	20 e0       	ldi	r18, 0x00	; 0
    55fa:	30 e0       	ldi	r19, 0x00	; 0
    55fc:	40 e8       	ldi	r20, 0x80	; 128
    55fe:	5f eb       	ldi	r21, 0xBF	; 191
    5600:	9f e3       	ldi	r25, 0x3F	; 63
    5602:	88 39       	cpi	r24, 0x98	; 152
    5604:	20 f0       	brcs	.+8      	; 0x560e <log+0x3e>
    5606:	80 3e       	cpi	r24, 0xE0	; 224
    5608:	38 f0       	brcs	.+14     	; 0x5618 <log+0x48>
    560a:	21 96       	adiw	r28, 0x01	; 1
    560c:	8f 77       	andi	r24, 0x7F	; 127
    560e:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <__addsf3>
    5612:	ec e7       	ldi	r30, 0x7C	; 124
    5614:	f0 e0       	ldi	r31, 0x00	; 0
    5616:	04 c0       	rjmp	.+8      	; 0x5620 <log+0x50>
    5618:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <__addsf3>
    561c:	e9 ea       	ldi	r30, 0xA9	; 169
    561e:	f0 e0       	ldi	r31, 0x00	; 0
    5620:	0e 94 ab 2b 	call	0x5756	; 0x5756 <__fp_powser>
    5624:	8b 01       	movw	r16, r22
    5626:	be 01       	movw	r22, r28
    5628:	ec 01       	movw	r28, r24
    562a:	fb 2e       	mov	r15, r27
    562c:	6f 57       	subi	r22, 0x7F	; 127
    562e:	71 09       	sbc	r23, r1
    5630:	75 95       	asr	r23
    5632:	77 1f       	adc	r23, r23
    5634:	88 0b       	sbc	r24, r24
    5636:	99 0b       	sbc	r25, r25
    5638:	0e 94 23 2a 	call	0x5446	; 0x5446 <__floatsisf>
    563c:	28 e1       	ldi	r18, 0x18	; 24
    563e:	32 e7       	ldi	r19, 0x72	; 114
    5640:	41 e3       	ldi	r20, 0x31	; 49
    5642:	5f e3       	ldi	r21, 0x3F	; 63
    5644:	0e 94 43 2b 	call	0x5686	; 0x5686 <__mulsf3x>
    5648:	af 2d       	mov	r26, r15
    564a:	98 01       	movw	r18, r16
    564c:	ae 01       	movw	r20, r28
    564e:	ff 90       	pop	r15
    5650:	0f 91       	pop	r16
    5652:	1f 91       	pop	r17
    5654:	cf 91       	pop	r28
    5656:	df 91       	pop	r29
    5658:	0e 94 91 29 	call	0x5322	; 0x5322 <__addsf3x>
    565c:	0c 94 99 2a 	jmp	0x5532	; 0x5532 <__fp_round>

00005660 <__mulsf3>:
    5660:	0e 94 43 2b 	call	0x5686	; 0x5686 <__mulsf3x>
    5664:	0c 94 99 2a 	jmp	0x5532	; 0x5532 <__fp_round>
    5668:	0e 94 8b 2a 	call	0x5516	; 0x5516 <__fp_pscA>
    566c:	38 f0       	brcs	.+14     	; 0x567c <__mulsf3+0x1c>
    566e:	0e 94 92 2a 	call	0x5524	; 0x5524 <__fp_pscB>
    5672:	20 f0       	brcs	.+8      	; 0x567c <__mulsf3+0x1c>
    5674:	95 23       	and	r25, r21
    5676:	11 f0       	breq	.+4      	; 0x567c <__mulsf3+0x1c>
    5678:	0c 94 82 2a 	jmp	0x5504	; 0x5504 <__fp_inf>
    567c:	0c 94 88 2a 	jmp	0x5510	; 0x5510 <__fp_nan>
    5680:	11 24       	eor	r1, r1
    5682:	0c 94 cd 2a 	jmp	0x559a	; 0x559a <__fp_szero>

00005686 <__mulsf3x>:
    5686:	0e 94 aa 2a 	call	0x5554	; 0x5554 <__fp_split3>
    568a:	70 f3       	brcs	.-36     	; 0x5668 <__mulsf3+0x8>

0000568c <__mulsf3_pse>:
    568c:	95 9f       	mul	r25, r21
    568e:	c1 f3       	breq	.-16     	; 0x5680 <__mulsf3+0x20>
    5690:	95 0f       	add	r25, r21
    5692:	50 e0       	ldi	r21, 0x00	; 0
    5694:	55 1f       	adc	r21, r21
    5696:	62 9f       	mul	r22, r18
    5698:	f0 01       	movw	r30, r0
    569a:	72 9f       	mul	r23, r18
    569c:	bb 27       	eor	r27, r27
    569e:	f0 0d       	add	r31, r0
    56a0:	b1 1d       	adc	r27, r1
    56a2:	63 9f       	mul	r22, r19
    56a4:	aa 27       	eor	r26, r26
    56a6:	f0 0d       	add	r31, r0
    56a8:	b1 1d       	adc	r27, r1
    56aa:	aa 1f       	adc	r26, r26
    56ac:	64 9f       	mul	r22, r20
    56ae:	66 27       	eor	r22, r22
    56b0:	b0 0d       	add	r27, r0
    56b2:	a1 1d       	adc	r26, r1
    56b4:	66 1f       	adc	r22, r22
    56b6:	82 9f       	mul	r24, r18
    56b8:	22 27       	eor	r18, r18
    56ba:	b0 0d       	add	r27, r0
    56bc:	a1 1d       	adc	r26, r1
    56be:	62 1f       	adc	r22, r18
    56c0:	73 9f       	mul	r23, r19
    56c2:	b0 0d       	add	r27, r0
    56c4:	a1 1d       	adc	r26, r1
    56c6:	62 1f       	adc	r22, r18
    56c8:	83 9f       	mul	r24, r19
    56ca:	a0 0d       	add	r26, r0
    56cc:	61 1d       	adc	r22, r1
    56ce:	22 1f       	adc	r18, r18
    56d0:	74 9f       	mul	r23, r20
    56d2:	33 27       	eor	r19, r19
    56d4:	a0 0d       	add	r26, r0
    56d6:	61 1d       	adc	r22, r1
    56d8:	23 1f       	adc	r18, r19
    56da:	84 9f       	mul	r24, r20
    56dc:	60 0d       	add	r22, r0
    56de:	21 1d       	adc	r18, r1
    56e0:	82 2f       	mov	r24, r18
    56e2:	76 2f       	mov	r23, r22
    56e4:	6a 2f       	mov	r22, r26
    56e6:	11 24       	eor	r1, r1
    56e8:	9f 57       	subi	r25, 0x7F	; 127
    56ea:	50 40       	sbci	r21, 0x00	; 0
    56ec:	9a f0       	brmi	.+38     	; 0x5714 <__mulsf3_pse+0x88>
    56ee:	f1 f0       	breq	.+60     	; 0x572c <__mulsf3_pse+0xa0>
    56f0:	88 23       	and	r24, r24
    56f2:	4a f0       	brmi	.+18     	; 0x5706 <__mulsf3_pse+0x7a>
    56f4:	ee 0f       	add	r30, r30
    56f6:	ff 1f       	adc	r31, r31
    56f8:	bb 1f       	adc	r27, r27
    56fa:	66 1f       	adc	r22, r22
    56fc:	77 1f       	adc	r23, r23
    56fe:	88 1f       	adc	r24, r24
    5700:	91 50       	subi	r25, 0x01	; 1
    5702:	50 40       	sbci	r21, 0x00	; 0
    5704:	a9 f7       	brne	.-22     	; 0x56f0 <__mulsf3_pse+0x64>
    5706:	9e 3f       	cpi	r25, 0xFE	; 254
    5708:	51 05       	cpc	r21, r1
    570a:	80 f0       	brcs	.+32     	; 0x572c <__mulsf3_pse+0xa0>
    570c:	0c 94 82 2a 	jmp	0x5504	; 0x5504 <__fp_inf>
    5710:	0c 94 cd 2a 	jmp	0x559a	; 0x559a <__fp_szero>
    5714:	5f 3f       	cpi	r21, 0xFF	; 255
    5716:	e4 f3       	brlt	.-8      	; 0x5710 <__mulsf3_pse+0x84>
    5718:	98 3e       	cpi	r25, 0xE8	; 232
    571a:	d4 f3       	brlt	.-12     	; 0x5710 <__mulsf3_pse+0x84>
    571c:	86 95       	lsr	r24
    571e:	77 95       	ror	r23
    5720:	67 95       	ror	r22
    5722:	b7 95       	ror	r27
    5724:	f7 95       	ror	r31
    5726:	e7 95       	ror	r30
    5728:	9f 5f       	subi	r25, 0xFF	; 255
    572a:	c1 f7       	brne	.-16     	; 0x571c <__mulsf3_pse+0x90>
    572c:	fe 2b       	or	r31, r30
    572e:	88 0f       	add	r24, r24
    5730:	91 1d       	adc	r25, r1
    5732:	96 95       	lsr	r25
    5734:	87 95       	ror	r24
    5736:	97 f9       	bld	r25, 7
    5738:	08 95       	ret

0000573a <__fp_mpack>:
    573a:	9f 3f       	cpi	r25, 0xFF	; 255
    573c:	31 f0       	breq	.+12     	; 0x574a <__fp_mpack_finite+0xc>

0000573e <__fp_mpack_finite>:
    573e:	91 50       	subi	r25, 0x01	; 1
    5740:	20 f4       	brcc	.+8      	; 0x574a <__fp_mpack_finite+0xc>
    5742:	87 95       	ror	r24
    5744:	77 95       	ror	r23
    5746:	67 95       	ror	r22
    5748:	b7 95       	ror	r27
    574a:	88 0f       	add	r24, r24
    574c:	91 1d       	adc	r25, r1
    574e:	96 95       	lsr	r25
    5750:	87 95       	ror	r24
    5752:	97 f9       	bld	r25, 7
    5754:	08 95       	ret

00005756 <__fp_powser>:
    5756:	df 93       	push	r29
    5758:	cf 93       	push	r28
    575a:	1f 93       	push	r17
    575c:	0f 93       	push	r16
    575e:	ff 92       	push	r15
    5760:	ef 92       	push	r14
    5762:	df 92       	push	r13
    5764:	7b 01       	movw	r14, r22
    5766:	8c 01       	movw	r16, r24
    5768:	68 94       	set
    576a:	06 c0       	rjmp	.+12     	; 0x5778 <__fp_powser+0x22>
    576c:	da 2e       	mov	r13, r26
    576e:	ef 01       	movw	r28, r30
    5770:	0e 94 43 2b 	call	0x5686	; 0x5686 <__mulsf3x>
    5774:	fe 01       	movw	r30, r28
    5776:	e8 94       	clt
    5778:	a5 91       	lpm	r26, Z+
    577a:	25 91       	lpm	r18, Z+
    577c:	35 91       	lpm	r19, Z+
    577e:	45 91       	lpm	r20, Z+
    5780:	55 91       	lpm	r21, Z+
    5782:	a6 f3       	brts	.-24     	; 0x576c <__fp_powser+0x16>
    5784:	ef 01       	movw	r28, r30
    5786:	0e 94 91 29 	call	0x5322	; 0x5322 <__addsf3x>
    578a:	fe 01       	movw	r30, r28
    578c:	97 01       	movw	r18, r14
    578e:	a8 01       	movw	r20, r16
    5790:	da 94       	dec	r13
    5792:	69 f7       	brne	.-38     	; 0x576e <__fp_powser+0x18>
    5794:	df 90       	pop	r13
    5796:	ef 90       	pop	r14
    5798:	ff 90       	pop	r15
    579a:	0f 91       	pop	r16
    579c:	1f 91       	pop	r17
    579e:	cf 91       	pop	r28
    57a0:	df 91       	pop	r29
    57a2:	08 95       	ret

000057a4 <__udivmodhi4>:
    57a4:	aa 1b       	sub	r26, r26
    57a6:	bb 1b       	sub	r27, r27
    57a8:	51 e1       	ldi	r21, 0x11	; 17
    57aa:	07 c0       	rjmp	.+14     	; 0x57ba <__udivmodhi4_ep>

000057ac <__udivmodhi4_loop>:
    57ac:	aa 1f       	adc	r26, r26
    57ae:	bb 1f       	adc	r27, r27
    57b0:	a6 17       	cp	r26, r22
    57b2:	b7 07       	cpc	r27, r23
    57b4:	10 f0       	brcs	.+4      	; 0x57ba <__udivmodhi4_ep>
    57b6:	a6 1b       	sub	r26, r22
    57b8:	b7 0b       	sbc	r27, r23

000057ba <__udivmodhi4_ep>:
    57ba:	88 1f       	adc	r24, r24
    57bc:	99 1f       	adc	r25, r25
    57be:	5a 95       	dec	r21
    57c0:	a9 f7       	brne	.-22     	; 0x57ac <__udivmodhi4_loop>
    57c2:	80 95       	com	r24
    57c4:	90 95       	com	r25
    57c6:	bc 01       	movw	r22, r24
    57c8:	cd 01       	movw	r24, r26
    57ca:	08 95       	ret

000057cc <__divmodhi4>:
    57cc:	97 fb       	bst	r25, 7
    57ce:	07 2e       	mov	r0, r23
    57d0:	16 f4       	brtc	.+4      	; 0x57d6 <__divmodhi4+0xa>
    57d2:	00 94       	com	r0
    57d4:	07 d0       	rcall	.+14     	; 0x57e4 <__divmodhi4_neg1>
    57d6:	77 fd       	sbrc	r23, 7
    57d8:	09 d0       	rcall	.+18     	; 0x57ec <__divmodhi4_neg2>
    57da:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <__udivmodhi4>
    57de:	07 fc       	sbrc	r0, 7
    57e0:	05 d0       	rcall	.+10     	; 0x57ec <__divmodhi4_neg2>
    57e2:	3e f4       	brtc	.+14     	; 0x57f2 <__divmodhi4_exit>

000057e4 <__divmodhi4_neg1>:
    57e4:	90 95       	com	r25
    57e6:	81 95       	neg	r24
    57e8:	9f 4f       	sbci	r25, 0xFF	; 255
    57ea:	08 95       	ret

000057ec <__divmodhi4_neg2>:
    57ec:	70 95       	com	r23
    57ee:	61 95       	neg	r22
    57f0:	7f 4f       	sbci	r23, 0xFF	; 255

000057f2 <__divmodhi4_exit>:
    57f2:	08 95       	ret

000057f4 <__udivmodsi4>:
    57f4:	a1 e2       	ldi	r26, 0x21	; 33
    57f6:	1a 2e       	mov	r1, r26
    57f8:	aa 1b       	sub	r26, r26
    57fa:	bb 1b       	sub	r27, r27
    57fc:	fd 01       	movw	r30, r26
    57fe:	0d c0       	rjmp	.+26     	; 0x581a <__udivmodsi4_ep>

00005800 <__udivmodsi4_loop>:
    5800:	aa 1f       	adc	r26, r26
    5802:	bb 1f       	adc	r27, r27
    5804:	ee 1f       	adc	r30, r30
    5806:	ff 1f       	adc	r31, r31
    5808:	a2 17       	cp	r26, r18
    580a:	b3 07       	cpc	r27, r19
    580c:	e4 07       	cpc	r30, r20
    580e:	f5 07       	cpc	r31, r21
    5810:	20 f0       	brcs	.+8      	; 0x581a <__udivmodsi4_ep>
    5812:	a2 1b       	sub	r26, r18
    5814:	b3 0b       	sbc	r27, r19
    5816:	e4 0b       	sbc	r30, r20
    5818:	f5 0b       	sbc	r31, r21

0000581a <__udivmodsi4_ep>:
    581a:	66 1f       	adc	r22, r22
    581c:	77 1f       	adc	r23, r23
    581e:	88 1f       	adc	r24, r24
    5820:	99 1f       	adc	r25, r25
    5822:	1a 94       	dec	r1
    5824:	69 f7       	brne	.-38     	; 0x5800 <__udivmodsi4_loop>
    5826:	60 95       	com	r22
    5828:	70 95       	com	r23
    582a:	80 95       	com	r24
    582c:	90 95       	com	r25
    582e:	9b 01       	movw	r18, r22
    5830:	ac 01       	movw	r20, r24
    5832:	bd 01       	movw	r22, r26
    5834:	cf 01       	movw	r24, r30
    5836:	08 95       	ret

00005838 <__umulhisi3>:
    5838:	a2 9f       	mul	r26, r18
    583a:	b0 01       	movw	r22, r0
    583c:	b3 9f       	mul	r27, r19
    583e:	c0 01       	movw	r24, r0
    5840:	a3 9f       	mul	r26, r19
    5842:	70 0d       	add	r23, r0
    5844:	81 1d       	adc	r24, r1
    5846:	11 24       	eor	r1, r1
    5848:	91 1d       	adc	r25, r1
    584a:	b2 9f       	mul	r27, r18
    584c:	70 0d       	add	r23, r0
    584e:	81 1d       	adc	r24, r1
    5850:	11 24       	eor	r1, r1
    5852:	91 1d       	adc	r25, r1
    5854:	08 95       	ret

00005856 <strcat>:
    5856:	fb 01       	movw	r30, r22
    5858:	dc 01       	movw	r26, r24
    585a:	0d 90       	ld	r0, X+
    585c:	00 20       	and	r0, r0
    585e:	e9 f7       	brne	.-6      	; 0x585a <strcat+0x4>
    5860:	11 97       	sbiw	r26, 0x01	; 1
    5862:	01 90       	ld	r0, Z+
    5864:	0d 92       	st	X+, r0
    5866:	00 20       	and	r0, r0
    5868:	e1 f7       	brne	.-8      	; 0x5862 <strcat+0xc>
    586a:	08 95       	ret

0000586c <itoa>:
    586c:	45 32       	cpi	r20, 0x25	; 37
    586e:	51 05       	cpc	r21, r1
    5870:	20 f4       	brcc	.+8      	; 0x587a <itoa+0xe>
    5872:	42 30       	cpi	r20, 0x02	; 2
    5874:	10 f0       	brcs	.+4      	; 0x587a <itoa+0xe>
    5876:	0c 94 41 2c 	jmp	0x5882	; 0x5882 <__itoa_ncheck>
    587a:	fb 01       	movw	r30, r22
    587c:	10 82       	st	Z, r1
    587e:	cb 01       	movw	r24, r22
    5880:	08 95       	ret

00005882 <__itoa_ncheck>:
    5882:	bb 27       	eor	r27, r27
    5884:	4a 30       	cpi	r20, 0x0A	; 10
    5886:	31 f4       	brne	.+12     	; 0x5894 <__itoa_ncheck+0x12>
    5888:	99 23       	and	r25, r25
    588a:	22 f4       	brpl	.+8      	; 0x5894 <__itoa_ncheck+0x12>
    588c:	bd e2       	ldi	r27, 0x2D	; 45
    588e:	90 95       	com	r25
    5890:	81 95       	neg	r24
    5892:	9f 4f       	sbci	r25, 0xFF	; 255
    5894:	0c 94 4d 2c 	jmp	0x589a	; 0x589a <__utoa_common>

00005898 <__utoa_ncheck>:
    5898:	bb 27       	eor	r27, r27

0000589a <__utoa_common>:
    589a:	fb 01       	movw	r30, r22
    589c:	55 27       	eor	r21, r21
    589e:	aa 27       	eor	r26, r26
    58a0:	88 0f       	add	r24, r24
    58a2:	99 1f       	adc	r25, r25
    58a4:	aa 1f       	adc	r26, r26
    58a6:	a4 17       	cp	r26, r20
    58a8:	10 f0       	brcs	.+4      	; 0x58ae <__utoa_common+0x14>
    58aa:	a4 1b       	sub	r26, r20
    58ac:	83 95       	inc	r24
    58ae:	50 51       	subi	r21, 0x10	; 16
    58b0:	b9 f7       	brne	.-18     	; 0x58a0 <__utoa_common+0x6>
    58b2:	a0 5d       	subi	r26, 0xD0	; 208
    58b4:	aa 33       	cpi	r26, 0x3A	; 58
    58b6:	08 f0       	brcs	.+2      	; 0x58ba <__utoa_common+0x20>
    58b8:	a9 5d       	subi	r26, 0xD9	; 217
    58ba:	a1 93       	st	Z+, r26
    58bc:	00 97       	sbiw	r24, 0x00	; 0
    58be:	79 f7       	brne	.-34     	; 0x589e <__utoa_common+0x4>
    58c0:	b1 11       	cpse	r27, r1
    58c2:	b1 93       	st	Z+, r27
    58c4:	11 92       	st	Z+, r1
    58c6:	cb 01       	movw	r24, r22
    58c8:	0c 94 66 2c 	jmp	0x58cc	; 0x58cc <strrev>

000058cc <strrev>:
    58cc:	dc 01       	movw	r26, r24
    58ce:	fc 01       	movw	r30, r24
    58d0:	67 2f       	mov	r22, r23
    58d2:	71 91       	ld	r23, Z+
    58d4:	77 23       	and	r23, r23
    58d6:	e1 f7       	brne	.-8      	; 0x58d0 <strrev+0x4>
    58d8:	32 97       	sbiw	r30, 0x02	; 2
    58da:	04 c0       	rjmp	.+8      	; 0x58e4 <strrev+0x18>
    58dc:	7c 91       	ld	r23, X
    58de:	6d 93       	st	X+, r22
    58e0:	70 83       	st	Z, r23
    58e2:	62 91       	ld	r22, -Z
    58e4:	ae 17       	cp	r26, r30
    58e6:	bf 07       	cpc	r27, r31
    58e8:	c8 f3       	brcs	.-14     	; 0x58dc <strrev+0x10>
    58ea:	08 95       	ret

000058ec <_exit>:
    58ec:	f8 94       	cli

000058ee <__stop_program>:
    58ee:	ff cf       	rjmp	.-2      	; 0x58ee <__stop_program>
