
SteeringWheelTest1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000da  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008b3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000008e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000169  00000000  00000000  00000902  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ea  00000000  00000000  00000a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000019d  00000000  00000000  00000b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000116  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000e2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <main>:
	RESET - PB6
	
	*/
	
	//set directions
	DDRB |= 0b11111111;
  94:	84 b1       	in	r24, 0x04	; 4
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0b11100000;
  9a:	87 b1       	in	r24, 0x07	; 7
  9c:	80 6e       	ori	r24, 0xE0	; 224
  9e:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b10000001;
  a0:	8a b1       	in	r24, 0x0a	; 10
  a2:	81 68       	ori	r24, 0x81	; 129
  a4:	8a b9       	out	0x0a, r24	; 10
	
	//clear ports
	PORTB = 0;
  a6:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;
  a8:	18 b8       	out	0x08, r1	; 8
	PORTD = 0b00000001;
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	8b b9       	out	0x0b, r24	; 11
	
	//clear the reset
	PORTB |= 0b01000000;
  ae:	2e 9a       	sbi	0x05, 6	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	83 ed       	ldi	r24, 0xD3	; 211
  b2:	90 e3       	ldi	r25, 0x30	; 48
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x20>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x26>
  ba:	00 00       	nop
	
	_delay_ms(50);
	PORTD &= ~ 0b00000001;
  bc:	58 98       	cbi	0x0b, 0	; 11
	
	//set data to A5h (for all pixels on)
	PORTB |= 0b10001010;
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	8a 68       	ori	r24, 0x8A	; 138
  c2:	85 b9       	out	0x05, r24	; 5
	PORTC |= 0b00100000;
  c4:	45 9a       	sbi	0x08, 5	; 8
  c6:	8f e4       	ldi	r24, 0x4F	; 79
  c8:	93 ec       	ldi	r25, 0xC3	; 195
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x36>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x3c>
  d0:	00 00       	nop
	
	_delay_ms(200);
	
	//set the write pin high
	PORTC |= 0b10000000;
  d2:	47 9a       	sbi	0x08, 7	; 8
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <main+0x40>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
