
QUTMS_SteeringWheel_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001108  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000be6  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b4  00000000  00000000  000020b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00002668  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000615  00000000  00000000  000026fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001dd  00000000  00000000  00002d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002eee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 3b 01 	call	0x276	; 0x276 <main>
  8c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <OLED_DataBus>:
#include "OLED_v0_1.h"

void OLED_DataBus(uint8_t data)
{
	uint8_t TempByte = (((data&1)>>0)<<OLED_D0) | (((data&2)>>1)<<OLED_D1) | (((data&4)>>2)<<OLED_D2) | (((data&16)>>4)<<OLED_D4) | (((data&128)>>7)<<OLED_D7);
	PORTB = PORTB&OLED_PBMASK;
  94:	95 b1       	in	r25, 0x05	; 5
  96:	90 77       	andi	r25, 0x70	; 112
  98:	95 b9       	out	0x05, r25	; 5
	PORTB |= TempByte;
  9a:	95 b1       	in	r25, 0x05	; 5
  9c:	81 fb       	bst	r24, 1
  9e:	77 27       	eor	r23, r23
  a0:	70 f9       	bld	r23, 0
  a2:	68 2f       	mov	r22, r24
  a4:	66 1f       	adc	r22, r22
  a6:	66 27       	eor	r22, r22
  a8:	66 1f       	adc	r22, r22
  aa:	66 0f       	add	r22, r22
  ac:	66 0f       	add	r22, r22
  ae:	66 0f       	add	r22, r22
  b0:	e6 2f       	mov	r30, r22
  b2:	e7 2b       	or	r30, r23
  b4:	20 e8       	ldi	r18, 0x80	; 128
  b6:	82 9f       	mul	r24, r18
  b8:	b0 01       	movw	r22, r0
  ba:	11 24       	eor	r1, r1
  bc:	6e 2b       	or	r22, r30
  be:	82 fb       	bst	r24, 2
  c0:	44 27       	eor	r20, r20
  c2:	40 f9       	bld	r20, 0
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	44 0f       	add	r20, r20
  c8:	55 1f       	adc	r21, r21
  ca:	46 2b       	or	r20, r22
  cc:	84 fb       	bst	r24, 4
  ce:	22 27       	eor	r18, r18
  d0:	20 f9       	bld	r18, 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	24 2b       	or	r18, r20
  de:	29 2b       	or	r18, r25
  e0:	25 b9       	out	0x05, r18	; 5
	
	TempByte = (((data&8)>>3)<<OLED_D3);
	PORTD = PORTD&OLED_PDMASK;
  e2:	5f 98       	cbi	0x0b, 7	; 11
	PORTD |= TempByte;
  e4:	2b b1       	in	r18, 0x0b	; 11
  e6:	83 fb       	bst	r24, 3
  e8:	99 27       	eor	r25, r25
  ea:	90 f9       	bld	r25, 0
  ec:	97 95       	ror	r25
  ee:	99 27       	eor	r25, r25
  f0:	97 95       	ror	r25
  f2:	92 2b       	or	r25, r18
  f4:	9b b9       	out	0x0b, r25	; 11
	
	TempByte = (((data&32)>>5)<<OLED_D5) | (data&64<<OLED_D6);
	PORTC = PORTC&OLED_PCMASK;
  f6:	98 b1       	in	r25, 0x08	; 8
  f8:	9f 79       	andi	r25, 0x9F	; 159
  fa:	98 b9       	out	0x08, r25	; 8
	PORTC |= TempByte;
  fc:	98 b1       	in	r25, 0x08	; 8
  fe:	80 72       	andi	r24, 0x20	; 32
 100:	89 2b       	or	r24, r25
 102:	88 b9       	out	0x08, r24	; 8
 104:	08 95       	ret

00000106 <OLED_WriteInstruction>:
}

void OLED_WriteInstruction(uint8_t instruction)
{
	PORTB &= ~(1<<OLED_DC);
 106:	2d 98       	cbi	0x05, 5	; 5
	PORTB &= ~(1<<OLED_RESET);
 108:	2e 98       	cbi	0x05, 6	; 5
	PORTD &= ~(1<<OLED_CS);
 10a:	58 98       	cbi	0x0b, 0	; 11
	PORTC &=~ (1<<OLED_WR);
 10c:	47 98       	cbi	0x08, 7	; 8
	OLED_DataBus(instruction);
 10e:	0e 94 4a 00 	call	0x94	; 0x94 <OLED_DataBus>
	PORTC |= (1<<OLED_WR);
 112:	47 9a       	sbi	0x08, 7	; 8
	PORTD |= (1<<OLED_CS);
 114:	58 9a       	sbi	0x0b, 0	; 11
 116:	08 95       	ret

00000118 <OLED_WriteData>:
}

void OLED_WriteData(uint8_t data)
{
	
	PORTB |= (1<<OLED_RESET);
 118:	2e 9a       	sbi	0x05, 6	; 5
	PORTD &= ~(1<<OLED_CS);
 11a:	58 98       	cbi	0x0b, 0	; 11
	PORTC &=~ (1<<OLED_WR);
 11c:	47 98       	cbi	0x08, 7	; 8
	OLED_DataBus(data);
 11e:	0e 94 4a 00 	call	0x94	; 0x94 <OLED_DataBus>
	PORTC |= (1<<OLED_WR);
 122:	47 9a       	sbi	0x08, 7	; 8
	PORTD |= (1<<OLED_CS);
 124:	58 9a       	sbi	0x0b, 0	; 11
 126:	08 95       	ret

00000128 <OLED_ClearRam>:
	
	return;
}
void OLED_ClearRam()
{	
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
	uint8_t x,y;
	OLED_WriteInstruction(0x15);
 12c:	85 e1       	ldi	r24, 0x15	; 21
 12e:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
	OLED_WriteData(0x00);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
	OLED_WriteData(0x77);
 138:	87 e7       	ldi	r24, 0x77	; 119
 13a:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
	OLED_WriteInstruction(0x75);
 13e:	85 e7       	ldi	r24, 0x75	; 117
 140:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
	OLED_WriteData(0x00);
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
	OLED_WriteData(0x7f);
 14a:	8f e7       	ldi	r24, 0x7F	; 127
 14c:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
	OLED_WriteInstruction(0x5C);
 150:	8c e5       	ldi	r24, 0x5C	; 92
 152:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
 156:	d0 e0       	ldi	r29, 0x00	; 0
 158:	08 c0       	rjmp	.+16     	; 0x16a <OLED_ClearRam+0x42>
	for(y=0;y<128;y++)
	{ for(x=0;x<120;x++)
		{   
			OLED_WriteData(0x00);
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
 160:	c1 50       	subi	r28, 0x01	; 1
	OLED_WriteInstruction(0x75);
	OLED_WriteData(0x00);
	OLED_WriteData(0x7f);
	OLED_WriteInstruction(0x5C);
	for(y=0;y<128;y++)
	{ for(x=0;x<120;x++)
 162:	d9 f7       	brne	.-10     	; 0x15a <OLED_ClearRam+0x32>
	OLED_WriteData(0x77);
	OLED_WriteInstruction(0x75);
	OLED_WriteData(0x00);
	OLED_WriteData(0x7f);
	OLED_WriteInstruction(0x5C);
	for(y=0;y<128;y++)
 164:	df 5f       	subi	r29, 0xFF	; 255
 166:	d0 38       	cpi	r29, 0x80	; 128
 168:	11 f0       	breq	.+4      	; 0x16e <OLED_ClearRam+0x46>
	PORTD |= (1<<OLED_CS);
	
	return;
}
void OLED_ClearRam()
{	
 16a:	c8 e7       	ldi	r28, 0x78	; 120
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <OLED_ClearRam+0x32>
	{ for(x=0;x<120;x++)
		{   
			OLED_WriteData(0x00);
		}
	}
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <OLED_Initialise>:

void OLED_Initialise()
{
	
		OLED_RESETP |= (1<<OLED_RESET);
 174:	2e 9a       	sbi	0x05, 6	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	83 ef       	ldi	r24, 0xF3	; 243
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <OLED_Initialise+0x6>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <OLED_Initialise+0xc>
 180:	00 00       	nop
		_delay_us(2000);
		OLED_RESETP &= ~(1<<OLED_RESET);
 182:	2e 98       	cbi	0x05, 6	; 5
 184:	83 ef       	ldi	r24, 0xF3	; 243
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <OLED_Initialise+0x14>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <OLED_Initialise+0x1a>
 18e:	00 00       	nop
		_delay_us(2000);
		OLED_RESETP |= (1<<OLED_RESET);
 190:	2e 9a       	sbi	0x05, 6	; 5
		OLED_WriteInstruction(0xFD); //Set Command Lock
 192:	8d ef       	ldi	r24, 0xFD	; 253
 194:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>

		
		OLED_WriteInstruction(0xFD); /*SET COMMAND LOCK*/
 198:	8d ef       	ldi	r24, 0xFD	; 253
 19a:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
		OLED_WriteData(0x12); /* UNLOCK */
 19e:	82 e1       	ldi	r24, 0x12	; 18
 1a0:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
		OLED_WriteInstruction(0xAE); /*DISPLAY OFF*/
 1a4:	8e ea       	ldi	r24, 0xAE	; 174
 1a6:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
		OLED_WriteInstruction(0xB3);/*DISPLAYDIVIDE CLOCKRADIO/OSCILLATAR FREQUANCY*/
 1aa:	83 eb       	ldi	r24, 0xB3	; 179
 1ac:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
		OLED_WriteData(0x91); OLED_WriteInstruction(0xCA); /*multiplex ratio*/
 1b0:	81 e9       	ldi	r24, 0x91	; 145
 1b2:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
 1b6:	8a ec       	ldi	r24, 0xCA	; 202
 1b8:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
		OLED_WriteData(0x3F); /*duty = 1/64*/
 1bc:	8f e3       	ldi	r24, 0x3F	; 63
 1be:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
		OLED_WriteInstruction(0xA2); /*set offset*/
 1c2:	82 ea       	ldi	r24, 0xA2	; 162
 1c4:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
		OLED_WriteData(0x00);
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
		OLED_WriteInstruction(0xA1); /*start line*/
 1ce:	81 ea       	ldi	r24, 0xA1	; 161
 1d0:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
		OLED_WriteData(0x00);
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
		OLED_WriteInstruction(0xA0); /*set remap*/
 1da:	80 ea       	ldi	r24, 0xA0	; 160
 1dc:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
		OLED_WriteData(0x14);
 1e0:	84 e1       	ldi	r24, 0x14	; 20
 1e2:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
		OLED_WriteData(0x11);
 1e6:	81 e1       	ldi	r24, 0x11	; 17
 1e8:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
		/*OLED_WriteInstruction(0xB5); //GPIO OLED_WriteInstruction(0x00); */
		OLED_WriteInstruction(0xAB); /*funtion selection*/
 1ec:	8b ea       	ldi	r24, 0xAB	; 171
 1ee:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
		OLED_WriteData(0x01); /* selection external vdd */
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
		OLED_WriteInstruction(0xB4); /* */
 1f8:	84 eb       	ldi	r24, 0xB4	; 180
 1fa:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
		OLED_WriteData(0xA0);
 1fe:	80 ea       	ldi	r24, 0xA0	; 160
 200:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
		OLED_WriteData(0xfd);
 204:	8d ef       	ldi	r24, 0xFD	; 253
 206:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
		OLED_WriteInstruction(0xC1); /*set contrast current */
 20a:	81 ec       	ldi	r24, 0xC1	; 193
 20c:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
		OLED_WriteData(OLED_CONTRAST);
 210:	80 ea       	ldi	r24, 0xA0	; 160
 212:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
		OLED_WriteInstruction(0xC7); /*master contrast current control*/
 216:	87 ec       	ldi	r24, 0xC7	; 199
 218:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
		OLED_WriteData(0x0f);
 21c:	8f e0       	ldi	r24, 0x0F	; 15
 21e:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
		/*OLED_WriteInstruction(0xB9); GRAY TABLE*/
		OLED_WriteInstruction(0xB1); /*SET PHASE LENGTH*/
 222:	81 eb       	ldi	r24, 0xB1	; 177
 224:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
		OLED_WriteData(0xE2);
 228:	82 ee       	ldi	r24, 0xE2	; 226
 22a:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
		OLED_WriteInstruction(0xD1); /**/
 22e:	81 ed       	ldi	r24, 0xD1	; 209
 230:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
		OLED_WriteData(0x82);
 234:	82 e8       	ldi	r24, 0x82	; 130
 236:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
		OLED_WriteData(0x20);
 23a:	80 e2       	ldi	r24, 0x20	; 32
 23c:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
		OLED_WriteInstruction(0xBB); /*SET PRE-CHANGE VOLTAGE*/
 240:	8b eb       	ldi	r24, 0xBB	; 187
 242:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
		OLED_WriteData(0x1F);
 246:	8f e1       	ldi	r24, 0x1F	; 31
 248:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
		OLED_WriteInstruction(0xB6); /*SET SECOND PRE-CHARGE PERIOD*/
 24c:	86 eb       	ldi	r24, 0xB6	; 182
 24e:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
		OLED_WriteData(0x08);
 252:	88 e0       	ldi	r24, 0x08	; 8
 254:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
		OLED_WriteInstruction(0xBE); /* SET VCOMH */
 258:	8e eb       	ldi	r24, 0xBE	; 190
 25a:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
		OLED_WriteData(0x07);
 25e:	87 e0       	ldi	r24, 0x07	; 7
 260:	0e 94 8c 00 	call	0x118	; 0x118 <OLED_WriteData>
		OLED_WriteInstruction(0xA6); /*normal display*/
 264:	86 ea       	ldi	r24, 0xA6	; 166
 266:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
		OLED_ClearRam();
 26a:	0e 94 94 00 	call	0x128	; 0x128 <OLED_ClearRam>
		OLED_WriteInstruction(0xA5); /*display ON*/
 26e:	85 ea       	ldi	r24, 0xA5	; 165
 270:	0e 94 83 00 	call	0x106	; 0x106 <OLED_WriteInstruction>
 274:	08 95       	ret

00000276 <main>:
 */ 
#include "QUTMS_SteeringWheel_v0_1.h"

int main(void)
{
	DDRB = 0b11111111;
 276:	8f ef       	ldi	r24, 0xFF	; 255
 278:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11100000;
 27a:	80 ee       	ldi	r24, 0xE0	; 224
 27c:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b10000001;
 27e:	81 e8       	ldi	r24, 0x81	; 129
 280:	8a b9       	out	0x0a, r24	; 10
	
    while(1)
    {
		OLED_Initialise();
 282:	0e 94 ba 00 	call	0x174	; 0x174 <OLED_Initialise>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 286:	2f e9       	ldi	r18, 0x9F	; 159
 288:	86 e8       	ldi	r24, 0x86	; 134
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0x16>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x20>
 296:	00 00       	nop
 298:	f4 cf       	rjmp	.-24     	; 0x282 <main+0xc>

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
