
QUTMS_SteeringWheel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004d8  00800100  000045e0  00004674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000045e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  008005d8  008005d8  00004b4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004b4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004b7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00004bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004e81  00000000  00000000  00004e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011b7  00000000  00000000  00009cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fea  00000000  00000000  0000ae7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a84  00000000  00000000  0000ce68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d6d  00000000  00000000  0000d8ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004ad0  00000000  00000000  0000e659  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  00013129  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 07 13 	jmp	0x260e	; 0x260e <__ctors_end>
       4:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
       8:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
       c:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      10:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      14:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      18:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      1c:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      20:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      24:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      28:	0c 94 26 13 	jmp	0x264c	; 0x264c <__vector_10>
      2c:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      30:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      34:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      38:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      3c:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      40:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      44:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      48:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__vector_18>
      4c:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      50:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      54:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      58:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      5c:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      60:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      64:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      68:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      6c:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      70:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      74:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      78:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__bad_interrupt>
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <Motorsport>:
	...
     21e:	00 00 03 f8 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     23e:	00 00 1f fe 00 fc 03 f7 ff ff 3f c0 1f e0 1f f0     ..........?.....
	...
     25e:	00 00 7f ff 80 fc 07 e7 ff fe 3f c0 3f e0 1f e0     ..........?.?...
	...
     27e:	00 00 ff ff c1 f8 07 e7 ff fe 3f c0 3f c0 1f e0     ..........?.?...
	...
     29e:	00 01 ff ff c1 f8 07 ef ff fe 7f 80 3f c0 3f e0     ............?.?.
	...
     2be:	00 07 ff ff e1 f8 0f cf ff fc 7f 80 3f c0 3f c0     ............?.?.
	...
     2de:	00 07 fc 7f e3 f0 0f c0 3f 00 7f 80 7f 80 3f c0     ........?.....?.
	...
     2fe:	00 0f f0 1f e3 f0 0f c0 3f 00 ff 00 7f 80 7f c0     ........?.......
	...
     31e:	00 1f c0 0f e3 f0 1f 80 7e 00 ff 00 7f 80 7f 80     ........~.......
	...
     33e:	00 3f 80 0f e7 e0 1f 80 7e 00 00 ff 00 7f 80 00     .?......~.......
	...
     35e:	00 3f 80 0f e7 e0 1f 80 7e 00 00 ff 00 ff 00 00     .?......~.......
	...
     37e:	00 7f 00 0f e7 e0 3f 00 fc 00 01 ff 00 ff 00 00     ......?.........
	...
     39e:	00 7f 00 0f cf c0 3f 00 fc 00 01 fe 00 ff 00 00     ......?.........
	...
     3be:	00 7e 00 0f cf c0 3f 00 fc 00 01 fe 01 fe 00 00     .~....?.........
	...
     3de:	00 7e 01 ff cf c0 7e 01 f8 00 03 fe 01 fe 00 00     .~....~.........
	...
     3fe:	00 fe 03 ff 9f 80 7e 01 f8 00 03 fc 01 fe 00 00     ......~.........
	...
     41e:	00 fe 03 ff 9f 80 7e 01 f8 00 03 fc 03 fc 00 00     ......~.........
	...
     43e:	00 fe 01 ff 1f 80 fc 03 f0 07 f8 03 fc 03 fc 00     ................
	...
     45e:	00 ff 01 ff 1f 80 fc 03 f0 07 f8 07 fc 03 fc 00     ................
	...
     47e:	00 ff 83 fe 3f 81 f8 03 f0 0f f8 07 f8 03 fc 00     ....?...........
	...
     49e:	00 7f ff fc 3f ff f8 07 f0 0f f0 07 f8 07 f8 00     ....?...........
	...
     4be:	00 7f ff fc 1f ff f0 07 e0 0f f0 0f f8 07 f8 00     ................
	...
     4de:	00 3f ff fc 1f ff e0 07 e0 1f f0 0f f0 07 f8 00     .?..............
	...
     4fe:	00 3f ff fe 0f ff c0 0f e0 1f e0 0f f0 0f f8 00     .?..............
	...
     51e:	00 0f ff fe 07 ff 00 0f c0 1f e0 1f f0 0f f0 00     ................
	...
     53e:	00 03 f8 7e 01 f8 00 0f c0 1f c0 1f e0 0f f0 00     ...~............
	...
     59e:	07 ff ff ff ff ff ff ff ff ff ff ff ff ff e0 00     ................
	...
     5be:	0f ff ff ff ff ff ff ff ff ff ff ff ff ff e0 00     ................
	...
     5de:	0f ff ff ff ff ff ff ff ff ff ff ff ff ff c0 00     ................
	...
     5fe:	0e fd f0 3c 07 81 f0 3e 0f 81 f0 3e 07 81 c0 00     ...<...>...>....
	...
     61e:	1c 79 e0 1c 07 01 e0 3c 07 01 e0 3c 07 01 c0 00     .y.....<...<....
	...
     63e:	1c 61 c7 1f 3e 38 e7 38 cf 39 c7 1c 67 cf 80 00     .a..>8.8.9..g...
	...
     65e:	1c 03 cf 1e 3c 79 e7 38 3f 31 8f 1c e7 cf 80 00     ....<y.8?1......
	...
     67e:	38 03 8f 1e 7c f9 c0 7c 1e 03 9f 38 0f 8f 80 00     8...|..|...8....
	...
     69e:	39 03 8f 3e 7c f1 c0 ff 8e 07 9e 38 1f 9f 00 00     9..>|......8....
	...
     6be:	39 e7 8c 3c 7c 63 cc f3 9c 1f 8c 79 9f 9f 00 00     9..<|c.....y....
	...
     6de:	71 e7 80 7c fc 07 8c f0 1c 7f 80 f1 9f 1f 00 00     q..|............
	...
     6fe:	73 c7 c1 fc fe 0f 9c 78 3c ff c1 f3 8f 3e 00 00     s......x<....>..
	...
     71e:	7f ff ff ff ff ff ff ff ff ff ff ff ff fe 00 00     ................
	...
     73e:	ff ff ff ff ff ff ff ff ff ff ff ff ff fe 00 00     ................
	...

000008d6 <BiggerText>:
	...
     90a:	03 80 03 80 03 80 03 80 03 80 03 80 03 80 03 80     ................
     91a:	03 80 03 80 03 80 03 80 03 80 03 80 00 00 00 00     ................
     92a:	03 80 03 80 03 80 00 00 00 00 00 00 00 00 00 00     ................
     93a:	00 00 1c e0 1c e0 1c e0 1c e0 1c e0 1c e0 00 00     ................
	...
     972:	06 38 06 38 06 38 06 38 3f fe 3f fe 0e 70 0e 70     .8.8.8.8?.?..p.p
     982:	0c 70 0c 70 7f fc 7f fc 0c 70 1c e0 1c e0 1c e0     .p.p.....p......
     992:	1c e0 00 00 00 00 00 00 00 00 00 00 00 60 00 c0     .............`..
     9a2:	00 c0 07 f0 0f f8 1c c8 38 c0 38 c0 38 80 1f 80     ........8.8.8...
     9b2:	0f 80 07 e0 01 f8 01 bc 01 9c 03 1c 03 1c 23 38     ..............#8
     9c2:	3f f8 1f e0 03 00 03 00 06 00 00 00 00 00 00 00     ?...............
     9d2:	3c 0c 7e 18 e7 38 e7 30 e7 60 e7 60 7e c0 3d 80     <.~..8.0.`.`~.=.
     9e2:	01 80 03 00 07 00 06 78 0c fc 1d ce 19 ce 31 ce     .......x......1.
     9f2:	31 ce 60 fc c0 78 00 00 00 00 00 00 00 00 00 00     1.`..x..........
     a02:	00 00 07 c0 1f e0 3c f0 38 70 38 70 38 70 38 e0     ......<.8p8p8p8.
     a12:	1d c0 1f 80 1e 00 3f 1c 3b 9c 71 dc 71 d8 70 f8     ......?.;.q.q.p.
     a22:	70 70 78 f8 3f fc 0f 8e 00 00 00 00 00 00 00 00     ppx.?...........
     a32:	00 00 00 00 03 80 03 80 03 80 03 80 03 80 03 80     ................
	...
     a66:	00 40 00 e0 01 c0 03 80 03 00 07 00 0e 00 0e 00     .@..............
     a76:	0e 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00     ................
     a86:	0e 00 0e 00 0e 00 07 00 07 00 03 80 01 c0 00 e0     ................
     a96:	00 40 04 00 0e 00 07 00 03 80 01 c0 01 c0 00 e0     .@..............
     aa6:	00 e0 00 e0 00 70 00 70 00 70 00 70 00 70 00 70     .....p.p.p.p.p.p
     ab6:	00 70 00 e0 00 e0 00 e0 01 c0 01 80 03 80 07 00     .p..............
     ac6:	0e 00 04 00 00 00 01 80 01 80 09 90 1d b8 07 e0     ................
     ad6:	01 80 07 e0 1d b8 01 90 01 80 01 80 00 00 00 00     ................
	...
     b0a:	03 80 03 80 03 80 03 80 03 80 7f fc 7f fc 03 80     ................
     b1a:	03 80 03 80 03 80 03 80 00 00 00 00 00 00 00 00     ................
	...
     b4e:	07 00 07 80 07 80 03 80 03 80 03 80 07 00 1e 00     ................
     b5e:	1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     b76:	00 00 1f e0 1f e0 00 00 00 00 00 00 00 00 00 00     ................
	...
     bb2:	03 00 07 80 07 80 03 00 00 00 00 00 00 00 00 00     ................
     bc2:	00 00 00 00 00 18 00 38 00 30 00 30 00 60 00 60     .......8.0.0.`.`
     bd2:	00 e0 00 c0 00 c0 01 80 01 80 03 00 03 00 07 00     ................
     be2:	06 00 06 00 0c 00 0c 00 1c 00 18 00 18 00 30 00     ..............0.
	...
     bfa:	00 00 07 c0 1f f0 1c 78 38 38 38 38 70 3c 70 7c     .......x8888p<p|
     c0a:	71 dc 73 9c 77 1c 7c 1c 78 1c 38 38 38 38 3c 70     q.s.w.|.x.8888<p
     c1a:	1f f0 07 c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
     c2a:	00 00 00 00 01 c0 07 c0 1d c0 39 c0 11 c0 01 c0     ..........9.....
     c3a:	01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
     c4a:	01 c0 1f f8 1f f8 00 00 00 00 00 00 00 00 00 00     ................
     c5a:	00 00 00 00 00 00 0f 80 1f e0 38 e0 10 70 00 70     ..........8..p.p
     c6a:	00 70 00 70 00 e0 00 e0 01 c0 03 80 07 00 0e 00     .p.p............
     c7a:	1c 00 18 00 3f f8 3f f8 00 00 00 00 00 00 00 00     ....?.?.........
	...
     c92:	1f 80 3f e0 20 f0 00 70 00 70 00 70 00 e0 0f c0     ..?. ..p.p.p....
     ca2:	0f e0 00 f0 00 38 00 38 00 38 00 38 00 f0 3f e0     .....8.8.8.8..?.
     cb2:	3f 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
     cc2:	00 00 00 78 00 f8 01 f8 03 b8 03 38 06 38 0e 38     ...x.......8.8.8
     cd2:	0c 38 18 38 30 38 70 38 7f fe 7f fe 00 38 00 38     .8.808p8.....8.8
     ce2:	00 38 00 38 00 00 00 00 00 00 00 00 00 00 00 00     .8.8............
     cf2:	00 00 00 00 3f f0 3f f0 38 00 38 00 38 00 38 00     ....?.?.8.8.8.8.
     d02:	38 00 3f c0 3f f0 00 f8 00 38 00 38 00 38 00 78     8.?.?....8.8.8.x
     d12:	00 f0 3f e0 3f 80 00 00 00 00 00 00 00 00 00 00     ..?.?...........
     d22:	00 00 00 00 00 00 01 f8 07 f8 0f 00 1e 00 1c 00     ................
     d32:	18 00 38 00 3b f0 3f f8 3c 3c 38 1c 38 1c 38 1c     ..8.;.?.<<8.8.8.
     d42:	1c 1c 1c 38 0f f0 07 e0 00 00 00 00 00 00 00 00     ...8............
	...
     d5a:	3f fc 3f fc 00 1c 00 18 00 38 00 30 00 70 00 60     ?.?......8.0.p.`
     d6a:	00 e0 00 c0 01 c0 01 80 03 80 03 00 07 00 06 00     ................
     d7a:	0e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     d8a:	00 00 07 e0 1f f8 3c 3c 38 1c 38 1c 3c 1c 1e 78     ......<<8.8.<..x
     d9a:	0f e0 07 f0 1e 78 1c 3c 38 1c 38 1c 38 1c 3c 3c     .....x.<8.8.8.<<
     daa:	1f f8 07 e0 00 00 00 00 00 00 00 00 00 00 00 00     ................
     dba:	00 00 00 00 07 c0 1f f0 3c 78 78 38 70 1c 70 1c     ........<xx8p.p.
     dca:	70 1c 70 1c 38 3c 3f fc 0f dc 00 18 00 38 00 70     p.p.8<?......8.p
     dda:	00 f0 3f c0 3f 00 00 00 00 00 00 00 00 00 00 00     ..?.?...........
	...
     df6:	00 00 03 00 07 80 07 80 03 00 00 00 00 00 00 00     ................
     e06:	00 00 00 00 03 00 07 80 07 80 03 00 00 00 00 00     ................
	...
     e2a:	01 80 03 c0 03 c0 01 80 00 00 00 00 00 00 00 00     ................
     e3a:	00 00 03 80 03 c0 03 c0 01 c0 01 c0 01 c0 03 80     ................
     e4a:	0f 00 0e 00 00 00 00 00 00 00 00 00 00 00 00 20     ............... 
     e5a:	00 70 00 e0 01 c0 07 00 0e 00 1c 00 38 00 1c 00     .p..........8...
     e6a:	0e 00 07 80 01 c0 00 e0 00 70 00 20 00 00 00 00     .........p. ....
	...
     e92:	3f f8 3f f8 00 00 00 00 00 00 3f f8 3f f8 00 00     ?.?.......?.?...
	...
     eba:	00 00 08 00 1c 00 0e 00 07 00 03 c0 00 e0 00 70     ...............p
     eca:	00 38 00 70 00 e0 01 c0 07 00 0e 00 1c 00 08 00     .8.p............
	...
     ee6:	0f 00 0f c0 01 e0 00 70 00 38 00 38 00 38 00 38     .......p.8.8.8.8
     ef6:	00 78 03 f0 03 e0 03 80 03 80 03 80 00 00 00 00     .x..............
     f06:	07 00 07 00 07 00 00 00 00 00 00 00 00 00 00 00     ................
     f16:	00 00 03 e0 07 f8 0e 18 18 0c 38 0c 30 06 60 06     ..........8.0.`.
     f26:	61 f6 63 f6 c7 36 c6 76 ce 66 ce 66 ce 66 ce 66     a.c..6.v.f.f.f.f
     f36:	ce ec cf bc c7 38 e0 00 60 00 70 00 38 20 1f e0     .....8..`.p.8 ..
     f46:	0f c0 00 00 00 00 00 00 03 80 02 c0 06 c0 06 c0     ................
     f56:	06 e0 0c 60 0c 60 0c 70 18 30 18 30 18 30 3f f8     ...`.`.p.0.0.0?.
     f66:	3f f8 30 18 70 1c 60 0c 60 0c 00 00 00 00 00 00     ?.0.p.`.`.......
	...
     f7e:	00 00 3f e0 3f f0 38 78 38 38 38 38 38 38 38 70     ..?.?.8x8888888p
     f8e:	3f e0 3f f0 38 38 38 1c 38 1c 38 1c 38 1c 38 38     ?.?.888.8.8.8.88
     f9e:	3f f0 3f c0 00 00 00 00 00 00 00 00 00 00 00 00     ?.?.............
     fae:	00 00 00 00 03 f0 0f f8 1e 08 3c 00 38 00 70 00     ..........<.8.p.
     fbe:	70 00 70 00 70 00 70 00 70 00 70 00 38 00 38 00     p.p.p.p.p.p.8.8.
     fce:	1e 08 0f f8 07 f0 00 00 00 00 00 00 00 00 00 00     ................
     fde:	00 00 00 00 00 00 7f 80 7f e0 70 70 70 38 70 38     ..........ppp8p8
     fee:	70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 38     p.p.p.p.p.p.p.p8
     ffe:	70 38 70 f0 7f e0 7f 80 00 00 00 00 00 00 00 00     p8p.............
	...
    1016:	1f f8 1f f8 1c 00 1c 00 1c 00 1c 00 1c 00 1f f8     ................
    1026:	1f f8 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1f f8     ................
    1036:	1f f8 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1046:	00 00 1f f8 1f f8 1c 00 1c 00 1c 00 1c 00 1c 00     ................
    1056:	1f f8 1f f8 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00     ................
    1066:	1c 00 1c 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1076:	00 00 00 00 03 f8 0f fc 1e 04 3c 00 38 00 78 00     ..........<.8.x.
    1086:	70 00 70 fc 70 fc 70 1c 70 1c 70 1c 38 1c 38 1c     p.p.p.p.p.p.8.8.
    1096:	1e 1c 0f fc 03 f0 00 00 00 00 00 00 00 00 00 00     ................
    10a6:	00 00 00 00 00 00 70 38 70 38 70 38 70 38 70 38     ......p8p8p8p8p8
    10b6:	70 38 70 38 7f f8 7f f8 70 38 70 38 70 38 70 38     p8p8....p8p8p8p8
    10c6:	70 38 70 38 70 38 70 38 00 00 00 00 00 00 00 00     p8p8p8p8........
	...
    10de:	3f f8 3f f8 03 80 03 80 03 80 03 80 03 80 03 80     ?.?.............
    10ee:	03 80 03 80 03 80 03 80 03 80 03 80 03 80 3f f8     ..............?.
    10fe:	3f f8 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
    110e:	00 00 3f f0 3f f0 00 70 00 70 00 70 00 70 00 70     ..?.?..p.p.p.p.p
    111e:	00 70 00 70 00 70 00 70 00 70 00 70 00 70 20 e0     .p.p.p.p.p.p.p .
    112e:	3f c0 1f 80 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
    113e:	00 00 00 00 38 18 38 38 38 70 38 e0 38 c0 39 80     ....8.888p8.8.9.
    114e:	3b 80 3b 00 3e 00 3b 00 3b 80 39 c0 38 c0 38 e0     ;.;.>.;.;.9.8.8.
    115e:	38 70 38 38 38 1c 00 00 00 00 00 00 00 00 00 00     8p888...........
    116e:	00 00 00 00 00 00 1c 00 1c 00 1c 00 1c 00 1c 00     ................
    117e:	1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00     ................
    118e:	1c 00 1c 00 1f f8 1f f8 00 00 00 00 00 00 00 00     ................
	...
    11a6:	38 38 38 38 38 38 3c 78 3c 78 34 58 36 d8 36 98     888888<x<x4X6.6.
    11b6:	32 98 33 98 30 18 30 18 30 18 30 18 30 18 30 18     2.3.0.0.0.0.0.0.
    11c6:	30 18 00 00 00 00 00 00 00 00 00 00 00 00 00 00     0...............
    11d6:	00 00 3c 38 3c 38 3c 38 3e 38 3a 38 3a 38 3b 38     ..<8<8<8>8:8:8;8
    11e6:	39 38 39 38 39 b8 39 b8 38 b8 38 f8 38 f8 38 78     98989.9.8.8.8.8x
    11f6:	38 78 38 78 00 00 00 00 00 00 00 00 00 00 00 00     8x8x............
    1206:	00 00 00 00 07 c0 0f f0 1c 78 38 38 38 3c 70 1c     .........x888<p.
    1216:	70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 78 38 38 38     p.p.p.p.p.p.x888
    1226:	3c 70 1f e0 07 c0 00 00 00 00 00 00 00 00 00 00     <p..............
    1236:	00 00 00 00 00 00 3f e0 3f f0 38 78 38 1c 38 1c     ......?.?.8x8.8.
    1246:	38 1c 38 1c 38 3c 38 78 3f f0 3f c0 38 00 38 00     8.8.8<8x?.?.8.8.
    1256:	38 00 38 00 38 00 38 00 00 00 00 00 00 00 00 00     8.8.8.8.........
	...
    126e:	07 e0 0f f8 1c 3c 38 1c 38 1c 70 0e 70 0e 70 0e     .....<8.8.p.p.p.
    127e:	70 0e 70 0e 70 0e 70 0e 78 1c 38 1c 3c 38 1f f0     p.p.p.p.x.8.<8..
    128e:	07 e0 01 c0 01 c0 00 e2 00 ff 00 3e 00 00 00 00     ...........>....
    129e:	00 00 3f c0 3f f0 38 78 38 38 38 38 38 38 38 38     ..?.?.8x88888888
    12ae:	38 70 3f e0 3f c0 38 e0 38 70 38 70 38 38 38 38     8p?.?.8.8p8p8888
    12be:	38 18 38 1c 00 00 00 00 00 00 00 00 00 00 00 00     8.8.............
    12ce:	00 00 00 00 07 f0 0f f8 1c 08 38 00 38 00 38 00     ..........8.8.8.
    12de:	1e 00 1f 80 07 e0 00 f8 00 3c 00 1c 00 1c 00 1c     .........<......
    12ee:	20 38 3f f0 1f e0 00 00 00 00 00 00 00 00 00 00      8?.............
    12fe:	00 00 00 00 00 00 7f fc 7f fc 03 80 03 80 03 80     ................
    130e:	03 80 03 80 03 80 03 80 03 80 03 80 03 80 03 80     ................
    131e:	03 80 03 80 03 80 03 80 00 00 00 00 00 00 00 00     ................
	...
    1336:	70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c     p.p.p.p.p.p.p.p.
    1346:	70 1c 70 1c 70 1c 70 1c 70 1c 70 3c 38 38 1f f0     p.p.p.p.p.p<88..
    1356:	0f c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1366:	00 00 60 0c 70 0c 70 1c 30 18 30 18 38 38 18 30     ..`.p.p.0.0.88.0
    1376:	18 30 1c 70 1c 60 0c 60 0e e0 0e c0 06 c0 06 c0     .0.p.`.`........
    1386:	07 80 03 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1396:	00 00 00 00 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c     ....p.p.p.p.p.p.
    13a6:	71 9c 73 9c 73 9c 72 9c 76 dc 36 d8 34 58 3c 78     q.s.s.r.v.6.4X<x
    13b6:	3c 78 38 38 38 38 00 00 00 00 00 00 00 00 00 00     <x8888..........
    13c6:	00 00 00 00 00 00 70 1c 38 38 18 30 1c 70 0e e0     ......p.88.0.p..
    13d6:	07 c0 07 c0 03 80 03 80 07 c0 0e e0 0e e0 1c 70     ...............p
    13e6:	38 38 38 38 70 1c e0 0e 00 00 00 00 00 00 00 00     8888p...........
	...
    13fe:	e0 0e 70 1c 70 1c 38 38 38 38 1c 70 0c 60 0e e0     ..p.p.8888.p.`..
    140e:	06 c0 07 c0 03 80 03 80 03 80 03 80 03 80 03 80     ................
    141e:	03 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    142e:	00 00 7f f8 7f f8 00 30 00 60 00 e0 00 c0 01 c0     .......0.`......
    143e:	01 80 03 00 07 00 06 00 0c 00 1c 00 18 00 30 00     ..............0.
    144e:	7f fc 7f fc 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    146a:	07 e0 1f f8 10 3c 00 1c 00 1c 07 fc 1f fc 3c 1c     .....<........<.
    147a:	38 1c 38 1c 3c 7c 1f fc 0f 9c 00 00 00 00 00 00     8.8.<|..........
    148a:	00 00 00 00 00 00 38 00 38 00 38 00 38 00 38 00     ......8.8.8.8.8.
    149a:	38 00 39 e0 3b f8 3e 38 3c 1c 38 1c 38 1c 38 1c     8.9.;.>8<.8.8.8.
    14aa:	38 1c 38 1c 38 38 38 78 3f f0 1f c0 00 00 00 00     8.8.888x?.......
	...
    14ce:	03 e0 0f f0 1e 10 1c 00 38 00 38 00 38 00 38 00     ........8.8.8.8.
    14de:	38 00 3c 00 1e 10 0f f0 07 e0 00 00 00 00 00 00     8.<.............
    14ee:	00 00 00 00 00 00 00 38 00 38 00 38 00 38 00 38     .......8.8.8.8.8
    14fe:	00 38 07 f8 1f f8 3c 38 38 38 70 38 70 38 70 38     .8....<888p8p8p8
    150e:	70 38 70 38 70 78 38 f8 3f b8 0f 38 00 00 00 00     p8p8px8.?..8....
	...
    1532:	03 e0 0f f0 1c 38 18 1c 38 1c 3f fc 3f fc 38 00     .....8..8.?.?.8.
    1542:	38 00 3c 00 1e 08 0f f8 07 f0 00 00 00 00 00 00     8.<.............
    1552:	00 00 00 00 00 00 00 fc 03 fc 03 80 07 00 07 00     ................
    1562:	07 00 07 00 7f f8 7f f8 07 00 07 00 07 00 07 00     ................
    1572:	07 00 07 00 07 00 07 00 07 00 07 00 00 00 00 00     ................
	...
    1596:	07 fc 1f fc 3c 78 38 38 38 38 38 38 3c 78 1f f0     ....<x888888<x..
    15a6:	3f c0 38 00 38 00 3f f0 1f fc 70 1c 70 1c 78 3c     ?.8.8.?...p.p.x<
    15b6:	3f f8 1f e0 00 00 38 00 38 00 38 00 38 00 38 00     ?.....8.8.8.8.8.
    15c6:	38 00 39 e0 3b f0 3e 78 3c 38 38 38 38 38 38 38     8.9.;.>x<8888888
    15d6:	38 38 38 38 38 38 38 38 38 38 38 38 00 00 00 00     888888888888....
	...
    15ee:	00 00 01 80 03 c0 01 80 00 00 00 00 3f c0 3f c0     ............?.?.
    15fe:	01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
    160e:	01 c0 3f f8 3f f8 00 00 00 00 00 00 00 00 00 00     ..?.?...........
    161e:	00 00 00 00 00 c0 01 e0 00 c0 00 00 00 00 3f e0     ..............?.
    162e:	3f e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0     ?...............
    163e:	00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 41 c0 7f 80     ............A...
    164e:	3f 00 00 00 38 00 38 00 38 00 38 00 38 00 38 00     ?...8.8.8.8.8.8.
    165e:	38 38 38 70 38 e0 39 c0 3b 80 3f 00 3b 80 3b 80     888p8.9.;.?.;.;.
    166e:	39 c0 38 e0 38 e0 38 70 38 38 00 00 00 00 00 00     9.8.8.8p88......
    167e:	00 00 00 00 00 00 3f c0 3f c0 01 c0 01 c0 01 c0     ......?.?.......
    168e:	01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
    169e:	01 c0 01 c0 01 c0 01 c0 3f f8 3f f8 00 00 00 00     ........?.?.....
	...
    16c2:	77 38 7f 7c 7b dc 73 9c 73 9c 73 9c 73 9c 73 9c     w8.|{.s.s.s.s.s.
    16d2:	73 9c 73 9c 73 9c 73 9c 73 9c 00 00 00 00 00 00     s.s.s.s.s.......
	...
    16f2:	00 00 39 e0 3f f0 3e 78 3c 38 38 38 38 38 38 38     ..9.?.>x<8888888
    1702:	38 38 38 38 38 38 38 38 38 38 38 38 00 00 00 00     888888888888....
	...
    1726:	07 e0 1f f0 3c 78 38 3c 70 1c 70 1c 70 1c 70 1c     ....<x8<p.p.p.p.
    1736:	70 1c 38 38 3c 78 1f f0 0f c0 00 00 00 00 00 00     p.88<x..........
	...
    1756:	00 00 39 e0 3f f8 3e 38 3c 1c 38 1c 38 1c 38 1c     ..9.?.>8<.8.8.8.
    1766:	38 1c 38 1c 38 38 38 78 3f f0 3f c0 38 00 38 00     8.8.888x?.?.8.8.
    1776:	38 00 38 00 38 00 00 00 00 00 00 00 00 00 00 00     8.8.8...........
    1786:	00 00 00 00 07 f8 1f f8 3c 38 38 38 70 38 70 38     ........<888p8p8
    1796:	70 38 70 38 70 38 70 78 38 f8 3f b8 0f 38 00 38     p8p8p8px8.?..8.8
    17a6:	00 38 00 38 00 38 00 38 00 00 00 00 00 00 00 00     .8.8.8.8........
    17b6:	00 00 00 00 00 00 1c f8 1d fc 1f 1e 1e 0e 1c 0e     ................
    17c6:	1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00     ................
	...
    17ee:	07 e0 1f f0 3c 10 38 00 3c 00 1f 00 0f e0 01 f0     ....<.8.<.......
    17fe:	00 38 00 38 20 78 3f f0 1f c0 00 00 00 00 00 00     .8.8 x?.........
	...
    1816:	00 00 07 00 07 00 07 00 07 00 7f f8 7f f8 07 00     ................
    1826:	07 00 07 00 07 00 07 00 07 00 07 00 07 00 07 80     ................
    1836:	03 f8 01 f8 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1852:	38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38     8888888888888888
    1862:	38 38 38 78 3c f8 1f f8 0f 38 00 00 00 00 00 00     888x<....8......
	...
    1882:	00 00 60 18 70 18 30 38 30 30 38 30 18 60 1c 60     ..`.p.080080.`.`
    1892:	0c 60 0c c0 06 c0 06 c0 07 80 03 80 00 00 00 00     .`..............
	...
    18b6:	60 0c 60 0c 60 0c 61 8c 63 8c 73 8c 32 cc 32 cc     `.`.`.a.c.s.2.2.
    18c6:	36 6c 34 68 34 68 1c 38 1c 38 00 00 00 00 00 00     6l4h4h.8.8......
	...
    18e6:	00 00 70 1c 38 38 1c 70 0c 60 0e e0 07 c0 03 80     ..p.88.p.`......
    18f6:	07 c0 06 e0 0c 60 1c 70 38 38 70 1c 00 00 00 00     .....`.p88p.....
	...
    191a:	60 18 70 38 30 38 38 30 38 30 18 60 1c 60 0c 60     `.p8088080.`.`.`
    192a:	0e c0 06 c0 06 80 03 80 03 80 03 00 07 00 0e 00     ................
    193a:	fc 00 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    194a:	00 00 3f f0 3f f0 00 60 00 c0 01 c0 01 80 03 00     ..?.?..`........
    195a:	06 00 0e 00 0c 00 18 00 3f f0 3f f0 00 00 00 00     ........?.?.....
    196a:	00 00 00 00 00 00                                   ......

00001970 <BigText>:
	...
    1998:	0c 00 0c 00 0c 00 0c 00 0c 00 0c 00 0c 00 0c 00     ................
    19a8:	0c 00 0c 00 00 00 0e 00 0e 00 0e 00 00 00 00 00     ................
    19b8:	00 00 00 00 00 00 19 80 19 80 19 80 19 80 19 80     ................
	...
    19e4:	00 00 13 00 13 00 13 00 ff c0 ff c0 13 00 36 00     ..............6.
    19f4:	ff 80 ff 80 36 00 36 00 36 00 36 00 00 00 00 00     ....6.6.6.6.....
    1a04:	00 00 00 00 02 00 02 00 1f 80 3f 80 66 00 66 00     ..........?.f.f.
    1a14:	74 00 3c 00 1f 00 07 80 0c c0 0c c0 4d c0 7f 80     t.<.........M...
    1a24:	3f 00 08 00 08 00 00 00 00 00 00 00 78 40 fc c0     ?...........x@..
    1a34:	cd 80 cd 00 ff 00 7e 00 04 00 0c 00 0b c0 17 e0     ......~.........
    1a44:	36 60 26 60 67 e0 c3 c0 00 00 00 00 00 00 00 00     6`&`g...........
    1a54:	00 00 0f 00 3f 80 31 80 31 80 33 80 1f 00 1c 00     ....?.1.1.3.....
    1a64:	3c 60 66 60 63 e0 61 c0 71 c0 3f e0 1f 70 00 00     <`f`c.a.q.?..p..
	...
    1a7c:	0c 00 0c 00 0c 00 0c 00 0c 00 00 00 00 00 00 00     ................
	...
    1aa0:	01 00 03 80 03 00 06 00 0c 00 0c 00 18 00 18 00     ................
    1ab0:	18 00 18 00 18 00 18 00 18 00 0c 00 0c 00 06 00     ................
    1ac0:	07 00 03 80 01 00 10 00 38 00 18 00 0c 00 06 00     ........8.......
    1ad0:	06 00 03 00 03 00 03 00 03 00 03 00 03 00 03 00     ................
    1ae0:	06 00 06 00 0c 00 18 00 38 00 10 00 00 00 04 00     ........8.......
    1af0:	24 80 35 80 0e 00 0e 00 37 80 24 80 04 00 00 00     $.5.....7.$.....
	...
    1b18:	00 00 06 00 06 00 06 00 06 00 7f e0 7f e0 06 00     ................
    1b28:	06 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b50:	0c 00 0e 00 06 00 06 00 3c 00 38 00 00 00 00 00     ........<.8.....
	...
    1b6c:	00 00 1f 80 1f 80 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b9c:	0e 00 0e 00 0e 00 00 00 00 00 00 00 00 00 00 00     ................
    1bac:	00 80 01 80 01 80 03 00 03 00 02 00 06 00 04 00     ................
    1bbc:	0c 00 08 00 18 00 18 00 10 00 30 00 20 00 60 00     ..........0. .`.
	...
    1bd4:	0f 00 1f c0 30 c0 70 e0 60 e0 63 e0 6f 60 7c 60     ....0.p.`.c.o`|`
    1be4:	70 60 70 e0 30 c0 3f 80 0f 00 00 00 00 00 00 00     p`p.0.?.........
    1bf4:	00 00 00 00 00 00 06 00 1e 00 36 00 26 00 06 00     ..........6.&...
    1c04:	06 00 06 00 06 00 06 00 06 00 06 00 3f c0 3f c0     ............?.?.
	...
    1c20:	3c 00 7e 00 43 00 03 00 03 00 03 00 06 00 0c 00     <.~.C...........
    1c30:	18 00 30 00 20 00 7f 80 7f 80 00 00 00 00 00 00     ..0. ...........
    1c40:	00 00 00 00 00 00 1e 00 3f 80 21 80 01 80 01 80     ........?.!.....
    1c50:	0f 00 0f 80 01 c0 00 c0 00 c0 01 c0 3f 80 3e 00     ............?.>.
	...
    1c6c:	07 00 0f 00 0b 00 1b 00 33 00 23 00 63 00 c3 00     ........3.#.c...
    1c7c:	ff c0 ff c0 03 00 03 00 03 00 00 00 00 00 00 00     ................
    1c8c:	00 00 00 00 00 00 3f 80 3f 80 30 00 30 00 30 00     ......?.?.0.0.0.
    1c9c:	3f 00 3f 80 01 c0 00 c0 00 c0 01 c0 3f 80 3e 00     ?.?.........?.>.
	...
    1cb8:	07 80 1f 80 38 00 30 00 60 00 6f 00 7f 80 71 c0     ....8.0.`.o...q.
    1cc8:	60 c0 60 c0 31 c0 3f 80 1f 00 00 00 00 00 00 00     `.`.1.?.........
    1cd8:	00 00 00 00 00 00 7f c0 7f c0 00 c0 01 80 01 80     ................
    1ce8:	03 00 03 00 06 00 06 00 0c 00 0c 00 18 00 18 00     ................
	...
    1d04:	1f 00 3f c0 60 c0 60 c0 71 80 1f 00 1f 00 33 80     ..?.`.`.q.....3.
    1d14:	60 c0 60 c0 60 c0 3f 80 1f 00 00 00 00 00 00 00     `.`.`.?.........
    1d24:	00 00 00 00 00 00 1f 00 3f 80 71 80 60 c0 60 c0     ........?.q.`.`.
    1d34:	71 c0 3f c0 1e c0 00 c0 01 80 03 80 3f 00 3c 00     q.?.........?.<.
	...
    1d54:	00 00 0e 00 0e 00 0e 00 00 00 00 00 00 00 00 00     ................
    1d64:	0e 00 0e 00 0e 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d7c:	0e 00 0e 00 0e 00 00 00 00 00 00 00 00 00 0c 00     ................
    1d8c:	0e 00 06 00 06 00 3c 00 38 00 00 00 00 00 00 00     ......<.8.......
    1d9c:	00 00 00 00 01 00 03 00 06 00 0c 00 30 00 60 00     ............0.`.
    1dac:	30 00 0c 00 06 00 03 00 01 00 00 00 00 00 00 00     0...............
	...
    1dcc:	7f 80 7f 80 00 00 00 00 7f 80 7f 80 00 00 00 00     ................
	...
    1dec:	10 00 18 00 0c 00 06 00 01 80 00 c0 01 80 06 00     ................
    1dfc:	0c 00 18 00 10 00 00 00 00 00 00 00 00 00 00 00     ................
    1e0c:	1c 00 1f 00 03 00 01 80 01 80 01 80 0f 80 0f 00     ................
    1e1c:	0c 00 0c 00 00 00 0e 00 0e 00 0e 00 00 00 00 00     ................
    1e2c:	00 00 00 00 00 00 0f 00 11 80 20 80 60 40 40 40     .......... .`@@@
    1e3c:	4f 40 9f 40 9b 40 b3 40 b3 40 b3 40 bf 80 9d 80     O@.@.@.@.@.@....
    1e4c:	80 00 c0 00 40 00 61 00 3e 00 00 00 00 00 0e 00     ....@.a.>.......
    1e5c:	0a 00 0a 00 1b 00 1b 00 11 00 31 80 31 80 3f 80     ..........1.1.?.
    1e6c:	3f 80 60 c0 60 c0 40 c0 00 00 00 00 00 00 00 00     ?.`.`.@.........
    1e7c:	00 00 00 00 3f 80 3f e0 30 60 30 60 30 e0 3f 80     ....?.?.0`0`0.?.
    1e8c:	3f c0 30 e0 30 60 30 60 30 e0 3f c0 3f 00 00 00     ?.0.0`0`0.?.?...
	...
    1ea4:	00 00 0f 80 1f c0 38 40 30 00 60 00 60 00 60 00     ......8@0.`.`.`.
    1eb4:	60 00 60 00 70 00 38 40 1f c0 0f 80 00 00 00 00     `.`.p.8@........
	...
    1ecc:	7e 00 7f 80 61 80 61 c0 60 c0 60 c0 60 c0 60 c0     ~...a.a.`.`.`.`.
    1edc:	60 c0 61 c0 63 80 7f 00 7e 00 00 00 00 00 00 00     `.a.c...~.......
    1eec:	00 00 00 00 00 00 3f 80 3f 80 30 00 30 00 30 00     ......?.?.0.0.0.
    1efc:	3f 80 3f 80 30 00 30 00 30 00 30 00 3f 80 3f 80     ?.?.0.0.0.0.?.?.
	...
    1f18:	3f 80 3f 80 30 00 30 00 30 00 3f 80 3f 80 30 00     ?.?.0.0.0.?.?.0.
    1f28:	30 00 30 00 30 00 30 00 30 00 00 00 00 00 00 00     0.0.0.0.0.......
    1f38:	00 00 00 00 00 00 07 c0 1f e0 38 20 30 00 60 00     ..........8 0.`.
    1f48:	63 e0 63 e0 60 60 60 60 70 60 38 60 1f e0 0f c0     c.c.````p`8`....
	...
    1f64:	60 c0 60 c0 60 c0 60 c0 60 c0 7f c0 7f c0 60 c0     `.`.`.`.`.....`.
    1f74:	60 c0 60 c0 60 c0 60 c0 60 c0 00 00 00 00 00 00     `.`.`.`.`.......
    1f84:	00 00 00 00 00 00 3f c0 3f c0 06 00 06 00 06 00     ......?.?.......
    1f94:	06 00 06 00 06 00 06 00 06 00 06 00 3f c0 3f c0     ............?.?.
	...
    1fb0:	3f 80 3f 80 01 80 01 80 01 80 01 80 01 80 01 80     ?.?.............
    1fc0:	01 80 01 80 23 80 3f 00 1e 00 00 00 00 00 00 00     ....#.?.........
    1fd0:	00 00 00 00 00 00 30 c0 31 80 33 00 33 00 36 00     ......0.1.3.3.6.
    1fe0:	34 00 3c 00 34 00 36 00 33 00 33 00 31 80 30 c0     4.<.4.6.3.3.1.0.
	...
    1ffc:	30 00 30 00 30 00 30 00 30 00 30 00 30 00 30 00     0.0.0.0.0.0.0.0.
    200c:	30 00 30 00 30 00 3f 80 3f 80 00 00 00 00 00 00     0.0.0.?.?.......
    201c:	00 00 00 00 00 00 60 c0 71 c0 71 c0 71 c0 7b c0     ......`.q.q.q.{.
    202c:	6a c0 6a c0 6e c0 64 c0 60 c0 60 c0 60 c0 60 c0     j.j.n.d.`.`.`.`.
	...
    2048:	70 c0 70 c0 78 c0 68 c0 68 c0 6c c0 64 c0 66 c0     p.p.x.h.h.l.d.f.
    2058:	62 c0 62 c0 63 c0 61 c0 61 c0 00 00 00 00 00 00     b.b.c.a.a.......
    2068:	00 00 00 00 00 00 0f 00 3f 80 31 80 70 c0 60 c0     ........?.1.p.`.
    2078:	60 c0 60 c0 60 c0 60 c0 61 c0 31 80 3f 80 1e 00     `.`.`.`.a.1.?...
	...
    2094:	3f 80 3f c0 30 e0 30 60 30 60 30 e0 3f c0 3f 00     ?.?.0.0`0`0.?.?.
    20a4:	30 00 30 00 30 00 30 00 30 00 00 00 00 00 00 00     0.0.0.0.0.......
    20b4:	00 00 00 00 00 00 0f 00 1f c0 30 c0 70 e0 60 60     ..........0.p.``
    20c4:	60 60 60 60 60 60 60 60 70 e0 30 c0 3f 80 1f 00     ````````p.0.?...
    20d4:	06 00 07 10 03 f0 01 e0 00 00 00 00 3f 00 3f 80     ............?.?.
    20e4:	31 c0 30 c0 30 c0 31 c0 3f 80 3e 00 33 80 31 80     1.0.0.1.?.>.3.1.
    20f4:	30 c0 30 c0 30 60 00 00 00 00 00 00 00 00 00 00     0.0.0`..........
    2104:	00 00 1f 00 3f 80 60 80 60 00 70 00 3c 00 1f 00     ....?.`.`.p.<...
    2114:	03 80 00 c0 00 c0 41 c0 7f 80 3f 00 00 00 00 00     ......A...?.....
	...
    212c:	7f e0 7f e0 06 00 06 00 06 00 06 00 06 00 06 00     ................
    213c:	06 00 06 00 06 00 06 00 06 00 00 00 00 00 00 00     ................
    214c:	00 00 00 00 00 00 60 c0 60 c0 60 c0 60 c0 60 c0     ......`.`.`.`.`.
    215c:	60 c0 60 c0 60 c0 60 c0 60 c0 71 c0 3f 80 1f 00     `.`.`.`.`.q.?...
	...
    2178:	c0 40 c0 c0 c0 c0 60 80 61 80 21 80 31 80 31 00     .@....`.a.!.1.1.
    2188:	1b 00 1b 00 1a 00 0e 00 0e 00 00 00 00 00 00 00     ................
    2198:	00 00 00 00 00 00 40 40 40 40 40 40 40 40 44 40     ......@@@@@@@@D@
    21a8:	4e 40 4a 40 4a 40 5b 40 51 40 51 c0 71 c0 60 c0     N@J@J@[@Q@Q.q.`.
	...
    21c4:	60 c0 31 80 3b 00 1b 00 0e 00 0e 00 0e 00 1f 00     `.1.;...........
    21d4:	1b 00 31 80 31 80 60 c0 c0 e0 00 00 00 00 00 00     ..1.1.`.........
    21e4:	00 00 00 00 00 00 c0 30 60 60 30 c0 30 c0 19 80     .......0``0.0...
    21f4:	1d 80 0f 00 06 00 06 00 06 00 06 00 06 00 06 00     ................
	...
    2210:	7f c0 7f c0 00 80 01 00 03 00 06 00 04 00 0c 00     ................
    2220:	18 00 10 00 30 00 7f c0 7f c0 00 00 00 00 00 00     ....0...........
	...
    223c:	1f 00 3f 80 21 80 01 80 1f 80 7f 80 61 80 63 80     ..?.!.......a.c.
    224c:	7f 80 3d 80 00 00 00 00 00 00 00 00 00 00 30 00     ..=...........0.
    225c:	30 00 30 00 30 00 37 80 3f c0 38 e0 30 60 30 60     0.0.0.7.?.8.0`0`
    226c:	30 60 30 60 30 c0 3f c0 1f 00 00 00 00 00 00 00     0`0`0.?.........
	...
    2288:	07 80 1f c0 18 40 30 00 30 00 30 00 30 00 38 40     .....@0.0.0.0.8@
    2298:	1f c0 0f 80 00 00 00 00 00 00 00 00 00 00 00 c0     ................
    22a8:	00 c0 00 c0 00 c0 0f c0 3f c0 30 c0 60 c0 60 c0     ........?.0.`.`.
    22b8:	60 c0 60 c0 73 c0 3f c0 1e c0 00 00 00 00 00 00     `.`.s.?.........
	...
    22d4:	1f 00 3f 80 31 c0 60 c0 7f c0 7f c0 60 00 70 00     ..?.1.`.....`.p.
    22e4:	3f 80 1f 80 00 00 00 00 00 00 00 00 00 00 03 c0     ?...............
    22f4:	07 c0 0c 00 0c 00 0c 00 7f 80 7f 80 0c 00 0c 00     ................
    2304:	0c 00 0c 00 0c 00 0c 00 0c 00 00 00 00 00 00 00     ................
	...
    2320:	0f c0 1f c0 31 80 31 80 31 80 1f 00 3e 00 60 00     ....1.1.1...>.`.
    2330:	7f 80 3f c0 60 c0 60 c0 7f 80 3f 00 00 00 30 00     ..?.`.`...?...0.
    2340:	30 00 30 00 30 00 37 80 3f c0 38 c0 30 c0 30 c0     0.0.0.7.?.8.0.0.
    2350:	30 c0 30 c0 30 c0 30 c0 30 c0 00 00 00 00 00 00     0.0.0.0.0.......
    2360:	00 00 0e 00 0e 00 0e 00 00 00 00 00 3e 00 3e 00     ............>.>.
    2370:	06 00 06 00 06 00 06 00 06 00 06 00 3f c0 3f c0     ............?.?.
	...
    2388:	03 80 03 80 03 80 00 00 00 00 3f 80 3f 80 01 80     ..........?.?...
    2398:	01 80 01 80 01 80 01 80 01 80 01 80 01 80 01 80     ................
    23a8:	21 80 3f 00 1e 00 00 00 30 00 30 00 30 00 30 00     !.?.....0.0.0.0.
    23b8:	30 c0 31 80 33 00 36 00 3c 00 36 00 36 00 33 00     0.1.3.6.<.6.6.3.
    23c8:	31 80 30 c0 00 00 00 00 00 00 00 00 00 00 3e 00     1.0...........>.
    23d8:	3e 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00     >...............
    23e8:	06 00 06 00 06 00 3f c0 3f c0 00 00 00 00 00 00     ......?.?.......
	...
    2404:	6c c0 7f e0 77 60 66 60 66 60 66 60 66 60 66 60     l...w`f`f`f`f`f`
    2414:	66 60 66 60 00 00 00 00 00 00 00 00 00 00 00 00     f`f`............
    2424:	00 00 00 00 00 00 37 80 3f c0 38 c0 30 c0 30 c0     ......7.?.8.0.0.
    2434:	30 c0 30 c0 30 c0 30 c0 30 c0 00 00 00 00 00 00     0.0.0.0.0.......
	...
    2450:	1f 00 3f 80 31 c0 60 c0 60 c0 60 c0 60 c0 71 80     ..?.1.`.`.`.`.q.
    2460:	3f 80 1f 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
    2470:	00 00 00 00 00 00 37 00 3f 80 39 c0 30 c0 30 c0     ......7.?.9.0.0.
    2480:	30 c0 30 c0 31 c0 3f 80 3f 00 30 00 30 00 30 00     0.0.1.?.?.0.0.0.
    2490:	30 00 00 00 00 00 00 00 00 00 00 00 0f c0 3f c0     0.............?.
    24a0:	30 c0 60 c0 60 c0 60 c0 60 c0 73 c0 3f c0 1e c0     0.`.`.`.`.s.?...
    24b0:	00 c0 00 c0 00 c0 00 c0 00 00 00 00 00 00 00 00     ................
    24c0:	00 00 37 80 3f c0 38 c0 30 c0 30 00 30 00 30 00     ..7.?.8.0.0.0.0.
    24d0:	30 00 30 00 30 00 00 00 00 00 00 00 00 00 00 00     0.0.0...........
	...
    24e8:	0f 00 3f 80 30 80 30 00 1e 00 07 80 00 c0 20 c0     ..?.0.0....... .
    24f8:	3f c0 1f 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
    2508:	0c 00 0c 00 0c 00 7f c0 7f c0 0c 00 0c 00 0c 00     ................
    2518:	0c 00 0c 00 0c 00 0f c0 07 c0 00 00 00 00 00 00     ................
	...
    2534:	30 c0 30 c0 30 c0 30 c0 30 c0 30 c0 30 c0 31 c0     0.0.0.0.0.0.0.1.
    2544:	3f c0 1e c0 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
    2554:	00 00 00 00 00 00 60 c0 60 c0 60 80 31 80 31 80     ......`.`.`.1.1.
    2564:	11 00 1b 00 1a 00 0a 00 0e 00 00 00 00 00 00 00     ................
	...
    2580:	40 40 40 40 64 40 66 40 6a 40 6a 40 2b 40 29 40     @@@@d@f@j@j@+@)@
    2590:	39 c0 31 c0 00 00 00 00 00 00 00 00 00 00 00 00     9.1.............
    25a0:	00 00 00 00 00 00 60 c0 31 80 1b 00 1b 00 0e 00     ......`.1.......
    25b0:	0e 00 1b 00 1b 00 31 80 61 c0 00 00 00 00 00 00     ......1.a.......
	...
    25cc:	60 c0 60 c0 60 80 31 80 31 00 11 00 1b 00 1a 00     `.`.`.1.1.......
    25dc:	0e 00 0c 00 0c 00 18 00 f8 00 f0 00 00 00 00 00     ................
    25ec:	00 00 00 00 00 00 3f c0 3f c0 00 80 01 00 02 00     ......?.?.......
    25fc:	04 00 08 00 18 00 3f c0 3f c0 00 00 00 00 00 00     ......?.?.......
	...

0000260e <__ctors_end>:
    260e:	11 24       	eor	r1, r1
    2610:	1f be       	out	0x3f, r1	; 63
    2612:	cf ef       	ldi	r28, 0xFF	; 255
    2614:	d0 e1       	ldi	r29, 0x10	; 16
    2616:	de bf       	out	0x3e, r29	; 62
    2618:	cd bf       	out	0x3d, r28	; 61

0000261a <__do_copy_data>:
    261a:	15 e0       	ldi	r17, 0x05	; 5
    261c:	a0 e0       	ldi	r26, 0x00	; 0
    261e:	b1 e0       	ldi	r27, 0x01	; 1
    2620:	e0 ee       	ldi	r30, 0xE0	; 224
    2622:	f5 e4       	ldi	r31, 0x45	; 69
    2624:	02 c0       	rjmp	.+4      	; 0x262a <__do_copy_data+0x10>
    2626:	05 90       	lpm	r0, Z+
    2628:	0d 92       	st	X+, r0
    262a:	a8 3d       	cpi	r26, 0xD8	; 216
    262c:	b1 07       	cpc	r27, r17
    262e:	d9 f7       	brne	.-10     	; 0x2626 <__do_copy_data+0xc>

00002630 <__do_clear_bss>:
    2630:	25 e0       	ldi	r18, 0x05	; 5
    2632:	a8 ed       	ldi	r26, 0xD8	; 216
    2634:	b5 e0       	ldi	r27, 0x05	; 5
    2636:	01 c0       	rjmp	.+2      	; 0x263a <.do_clear_bss_start>

00002638 <.do_clear_bss_loop>:
    2638:	1d 92       	st	X+, r1

0000263a <.do_clear_bss_start>:
    263a:	a7 3e       	cpi	r26, 0xE7	; 231
    263c:	b2 07       	cpc	r27, r18
    263e:	e1 f7       	brne	.-8      	; 0x2638 <.do_clear_bss_loop>
    2640:	0e 94 64 14 	call	0x28c8	; 0x28c8 <main>
    2644:	0c 94 ee 22 	jmp	0x45dc	; 0x45dc <_exit>

00002648 <__bad_interrupt>:
    2648:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000264c <__vector_10>:
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  ISR
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

ISR(INT3_vect)
{
    264c:	1f 92       	push	r1
    264e:	0f 92       	push	r0
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	0f 92       	push	r0
    2654:	11 24       	eor	r1, r1
    2656:	8f 93       	push	r24
	SMCR = (0<<SM2)|(0<<SM1)|(1<<SM0)|(0<<SE);		//disable the mode, and disable the enable bit.
    2658:	82 e0       	ldi	r24, 0x02	; 2
    265a:	83 bf       	out	0x33, r24	; 51
}
    265c:	8f 91       	pop	r24
    265e:	0f 90       	pop	r0
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	0f 90       	pop	r0
    2664:	1f 90       	pop	r1
    2666:	18 95       	reti

00002668 <__vector_18>:

ISR(CAN_INT_vect)
{
    2668:	1f 92       	push	r1
    266a:	0f 92       	push	r0
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	0f 92       	push	r0
    2670:	11 24       	eor	r1, r1
    2672:	ef 92       	push	r14
    2674:	ff 92       	push	r15
    2676:	0f 93       	push	r16
    2678:	1f 93       	push	r17
    267a:	2f 93       	push	r18
    267c:	3f 93       	push	r19
    267e:	4f 93       	push	r20
    2680:	5f 93       	push	r21
    2682:	6f 93       	push	r22
    2684:	7f 93       	push	r23
    2686:	8f 93       	push	r24
    2688:	9f 93       	push	r25
    268a:	af 93       	push	r26
    268c:	bf 93       	push	r27
    268e:	ef 93       	push	r30
    2690:	ff 93       	push	r31
	//uint8_t authority;
	//int8_t mob;
	if((CANSIT2 & (1 << SIT5)))	//we received a CAN message on mob 5, which is set up to receive exclusively from the AMU.
    2692:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2696:	85 ff       	sbrs	r24, 5
    2698:	83 c0       	rjmp	.+262    	; 0x27a0 <__vector_18+0x138>
	{
		
		CANPAGE = (5 << 4);			//set the canpage to the receiver MOB
    269a:	80 e5       	ldi	r24, 0x50	; 80
    269c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		ThrottlePercentageData = CANMSG << 8;
    26a0:	ea ef       	ldi	r30, 0xFA	; 250
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	98 2f       	mov	r25, r24
    26aa:	88 27       	eor	r24, r24
    26ac:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <ThrottlePercentageData+0x1>
    26b0:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <ThrottlePercentageData>
		ThrottlePercentageData += CANMSG;
    26b4:	20 81       	ld	r18, Z
		ThrottlePercentageData = ThrottlePercentageData * 100 /511; // Scale to percentage
    26b6:	ac 01       	movw	r20, r24
    26b8:	42 0f       	add	r20, r18
    26ba:	51 1d       	adc	r21, r1
    26bc:	9a 01       	movw	r18, r20
    26be:	44 e6       	ldi	r20, 0x64	; 100
    26c0:	42 9f       	mul	r20, r18
    26c2:	c0 01       	movw	r24, r0
    26c4:	43 9f       	mul	r20, r19
    26c6:	90 0d       	add	r25, r0
    26c8:	11 24       	eor	r1, r1
    26ca:	6f ef       	ldi	r22, 0xFF	; 255
    26cc:	71 e0       	ldi	r23, 0x01	; 1
    26ce:	0e 94 55 22 	call	0x44aa	; 0x44aa <__udivmodhi4>
    26d2:	70 93 e6 05 	sts	0x05E6, r23	; 0x8005e6 <ThrottlePercentageData+0x1>
    26d6:	60 93 e5 05 	sts	0x05E5, r22	; 0x8005e5 <ThrottlePercentageData>
		RPMData = CANMSG << 8;
    26da:	80 81       	ld	r24, Z
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	98 2f       	mov	r25, r24
    26e0:	88 27       	eor	r24, r24
    26e2:	09 2e       	mov	r0, r25
    26e4:	00 0c       	add	r0, r0
    26e6:	aa 0b       	sbc	r26, r26
    26e8:	bb 0b       	sbc	r27, r27
    26ea:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <RPMData>
    26ee:	90 93 e2 05 	sts	0x05E2, r25	; 0x8005e2 <RPMData+0x1>
    26f2:	a0 93 e3 05 	sts	0x05E3, r26	; 0x8005e3 <RPMData+0x2>
    26f6:	b0 93 e4 05 	sts	0x05E4, r27	; 0x8005e4 <RPMData+0x3>
		RPMData += CANMSG;
    26fa:	20 81       	ld	r18, Z
    26fc:	82 0f       	add	r24, r18
    26fe:	91 1d       	adc	r25, r1
    2700:	a1 1d       	adc	r26, r1
    2702:	b1 1d       	adc	r27, r1
    2704:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <RPMData>
    2708:	90 93 e2 05 	sts	0x05E2, r25	; 0x8005e2 <RPMData+0x1>
    270c:	a0 93 e3 05 	sts	0x05E3, r26	; 0x8005e3 <RPMData+0x2>
    2710:	b0 93 e4 05 	sts	0x05E4, r27	; 0x8005e4 <RPMData+0x3>
		GearboxTempData = CANMSG << 8;
    2714:	80 81       	ld	r24, Z
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	98 2f       	mov	r25, r24
    271a:	88 27       	eor	r24, r24
    271c:	09 2e       	mov	r0, r25
    271e:	00 0c       	add	r0, r0
    2720:	aa 0b       	sbc	r26, r26
    2722:	bb 0b       	sbc	r27, r27
    2724:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <GearboxTempData>
    2728:	90 93 de 05 	sts	0x05DE, r25	; 0x8005de <GearboxTempData+0x1>
    272c:	a0 93 df 05 	sts	0x05DF, r26	; 0x8005df <GearboxTempData+0x2>
    2730:	b0 93 e0 05 	sts	0x05E0, r27	; 0x8005e0 <GearboxTempData+0x3>
		GearboxTempData += CANMSG;
    2734:	20 81       	ld	r18, Z
    2736:	82 0f       	add	r24, r18
    2738:	91 1d       	adc	r25, r1
    273a:	a1 1d       	adc	r26, r1
    273c:	b1 1d       	adc	r27, r1
    273e:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <GearboxTempData>
    2742:	90 93 de 05 	sts	0x05DE, r25	; 0x8005de <GearboxTempData+0x1>
    2746:	a0 93 df 05 	sts	0x05DF, r26	; 0x8005df <GearboxTempData+0x2>
    274a:	b0 93 e0 05 	sts	0x05E0, r27	; 0x8005e0 <GearboxTempData+0x3>
		VoltageData = CANMSG << 8;
    274e:	80 81       	ld	r24, Z
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	98 2f       	mov	r25, r24
    2754:	88 27       	eor	r24, r24
    2756:	09 2e       	mov	r0, r25
    2758:	00 0c       	add	r0, r0
    275a:	aa 0b       	sbc	r26, r26
    275c:	bb 0b       	sbc	r27, r27
    275e:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <VoltageData>
    2762:	90 93 da 05 	sts	0x05DA, r25	; 0x8005da <VoltageData+0x1>
    2766:	a0 93 db 05 	sts	0x05DB, r26	; 0x8005db <VoltageData+0x2>
    276a:	b0 93 dc 05 	sts	0x05DC, r27	; 0x8005dc <VoltageData+0x3>
		VoltageData += CANMSG;
    276e:	20 81       	ld	r18, Z
    2770:	82 0f       	add	r24, r18
    2772:	91 1d       	adc	r25, r1
    2774:	a1 1d       	adc	r26, r1
    2776:	b1 1d       	adc	r27, r1
    2778:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <VoltageData>
    277c:	90 93 da 05 	sts	0x05DA, r25	; 0x8005da <VoltageData+0x1>
    2780:	a0 93 db 05 	sts	0x05DB, r26	; 0x8005db <VoltageData+0x2>
    2784:	b0 93 dc 05 	sts	0x05DC, r27	; 0x8005dc <VoltageData+0x3>

		CAN_RXInit(5,8,0x400000, 0x400000);
    2788:	e1 2c       	mov	r14, r1
    278a:	f1 2c       	mov	r15, r1
    278c:	00 e4       	ldi	r16, 0x40	; 64
    278e:	10 e0       	ldi	r17, 0x00	; 0
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e4       	ldi	r20, 0x40	; 64
    2796:	50 e0       	ldi	r21, 0x00	; 0
    2798:	68 e0       	ldi	r22, 0x08	; 8
    279a:	85 e0       	ldi	r24, 0x05	; 5
    279c:	0e 94 7e 18 	call	0x30fc	; 0x30fc <CAN_RXInit>
	}
	
	CANPAGE = (5 << 4);			//set the canpage to the receiver MOB
    27a0:	ad ee       	ldi	r26, 0xED	; 237
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	80 e5       	ldi	r24, 0x50	; 80
    27a6:	8c 93       	st	X, r24
	CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
    27a8:	ee ee       	ldi	r30, 0xEE	; 238
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	8f 7d       	andi	r24, 0xDF	; 223
    27b0:	80 83       	st	Z, r24
	CANPAGE = (4 << 4);
    27b2:	80 e4       	ldi	r24, 0x40	; 64
    27b4:	8c 93       	st	X, r24
	CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
    27b6:	80 81       	ld	r24, Z
    27b8:	8f 7d       	andi	r24, 0xDF	; 223
    27ba:	80 83       	st	Z, r24
}
    27bc:	ff 91       	pop	r31
    27be:	ef 91       	pop	r30
    27c0:	bf 91       	pop	r27
    27c2:	af 91       	pop	r26
    27c4:	9f 91       	pop	r25
    27c6:	8f 91       	pop	r24
    27c8:	7f 91       	pop	r23
    27ca:	6f 91       	pop	r22
    27cc:	5f 91       	pop	r21
    27ce:	4f 91       	pop	r20
    27d0:	3f 91       	pop	r19
    27d2:	2f 91       	pop	r18
    27d4:	1f 91       	pop	r17
    27d6:	0f 91       	pop	r16
    27d8:	ff 90       	pop	r15
    27da:	ef 90       	pop	r14
    27dc:	0f 90       	pop	r0
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	0f 90       	pop	r0
    27e2:	1f 90       	pop	r1
    27e4:	18 95       	reti

000027e6 <spi_init>:
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  SPI Functions
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void spi_init()
{
	MCUCR &= ~(1<<SPIPS);		//make sure we are getting spi not on the _A spi pins.
    27e6:	85 b7       	in	r24, 0x35	; 53
    27e8:	8f 77       	andi	r24, 0x7F	; 127
    27ea:	85 bf       	out	0x35, r24	; 53
	SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR0)|(0<<SPR1);  //set interrupt, enable SPI, MSB mode, set as master, low is idle, read on leading edge, Set to speed(fosc/4) SPR0=1, SPR1=0
    27ec:	80 e5       	ldi	r24, 0x50	; 80
    27ee:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X);	//set whether we want 2x speed or not (1=2x speed).
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	8d bd       	out	0x2d, r24	; 45
	SPDR = 0x00;		//ensure data register has nothing in it
    27f4:	1e bc       	out	0x2e, r1	; 46
    27f6:	08 95       	ret

000027f8 <spi_send_byte>:
}

uint8_t spi_send_byte(uint8_t c)
{
	SPDR = c;					//write data to the transmission register. Writing to this initiates transmission.
    27f8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    27fa:	0d b4       	in	r0, 0x2d	; 45
    27fc:	07 fe       	sbrs	r0, 7
    27fe:	fd cf       	rjmp	.-6      	; 0x27fa <spi_send_byte+0x2>
	return SPDR;				//return any data that was shifted into this register upon transmission.
    2800:	8e b5       	in	r24, 0x2e	; 46
}
    2802:	08 95       	ret

00002804 <readDials>:

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  Read Dials
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void readDials(void)
{
    2804:	ef 92       	push	r14
    2806:	ff 92       	push	r15
    2808:	0f 93       	push	r16
    280a:	1f 93       	push	r17
    280c:	cf 93       	push	r28
    280e:	df 93       	push	r29
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
    2814:	64 97       	sbiw	r28, 0x14	; 20
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	de bf       	out	0x3e, r29	; 62
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	cd bf       	out	0x3d, r28	; 61
	uint8_t counter = 0;
	uint16_t SwitchRight;
	uint16_t SwitchLeft;
	uint16_t SwitchRight2;
	uint16_t SwitchLeft2;
	SwitchRight = ADC_read(2);
    2820:	82 e0       	ldi	r24, 0x02	; 2
    2822:	0e 94 0c 18 	call	0x3018	; 0x3018 <ADC_read>
    2826:	8c 01       	movw	r16, r24
	SwitchLeft = ADC_read(3);
    2828:	83 e0       	ldi	r24, 0x03	; 3
    282a:	0e 94 0c 18 	call	0x3018	; 0x3018 <ADC_read>
		{
			break;
		}
	}*/
	
	int intSwitchLeft = (SwitchLeft >> 2) / 24;
    282e:	9c 01       	movw	r18, r24
    2830:	36 95       	lsr	r19
    2832:	27 95       	ror	r18
    2834:	36 95       	lsr	r19
    2836:	27 95       	ror	r18
    2838:	ab ea       	ldi	r26, 0xAB	; 171
    283a:	ba ea       	ldi	r27, 0xAA	; 170
    283c:	0e 94 9f 22 	call	0x453e	; 0x453e <__umulhisi3>
    2840:	7c 01       	movw	r14, r24
    2842:	f6 94       	lsr	r15
    2844:	e7 94       	ror	r14
    2846:	f6 94       	lsr	r15
    2848:	e7 94       	ror	r14
    284a:	f6 94       	lsr	r15
    284c:	e7 94       	ror	r14
    284e:	f6 94       	lsr	r15
    2850:	e7 94       	ror	r14
	int intSwitchRight = (SwitchRight >> 2) / 24;
    2852:	98 01       	movw	r18, r16
    2854:	36 95       	lsr	r19
    2856:	27 95       	ror	r18
    2858:	36 95       	lsr	r19
    285a:	27 95       	ror	r18
    285c:	0e 94 9f 22 	call	0x453e	; 0x453e <__umulhisi3>
    2860:	8c 01       	movw	r16, r24
    2862:	12 95       	swap	r17
    2864:	02 95       	swap	r16
    2866:	0f 70       	andi	r16, 0x0F	; 15
    2868:	01 27       	eor	r16, r17
    286a:	1f 70       	andi	r17, 0x0F	; 15
    286c:	01 27       	eor	r16, r17
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    286e:	4a e0       	ldi	r20, 0x0A	; 10
    2870:	be 01       	movw	r22, r28
    2872:	65 5f       	subi	r22, 0xF5	; 245
    2874:	7f 4f       	sbci	r23, 0xFF	; 255
    2876:	c8 01       	movw	r24, r16
    2878:	0e 94 b9 22 	call	0x4572	; 0x4572 <__itoa_ncheck>
    287c:	4a e0       	ldi	r20, 0x0A	; 10
    287e:	be 01       	movw	r22, r28
    2880:	6f 5f       	subi	r22, 0xFF	; 255
    2882:	7f 4f       	sbci	r23, 0xFF	; 255
    2884:	c7 01       	movw	r24, r14
    2886:	0e 94 b9 22 	call	0x4572	; 0x4572 <__itoa_ncheck>
	unsigned char SwitchLeftBuffer[10];
	unsigned char SwitchRightBuffer[10];
	itoa(intSwitchRight,SwitchRightBuffer,10);
	itoa(intSwitchLeft,SwitchLeftBuffer,10);
	strcat(SwitchLeftBuffer,SwitchRightBuffer);
    288a:	be 01       	movw	r22, r28
    288c:	65 5f       	subi	r22, 0xF5	; 245
    288e:	7f 4f       	sbci	r23, 0xFF	; 255
    2890:	ce 01       	movw	r24, r28
    2892:	01 96       	adiw	r24, 0x01	; 1
    2894:	0e 94 ae 22 	call	0x455c	; 0x455c <strcat>
	//Show_String(1,&SwitchLeftBuffer,0x28,0x05);
	CAN_Dial = intSwitchRight | (intSwitchLeft<<4);
    2898:	ee 0c       	add	r14, r14
    289a:	ff 1c       	adc	r15, r15
    289c:	ee 0c       	add	r14, r14
    289e:	ff 1c       	adc	r15, r15
    28a0:	ee 0c       	add	r14, r14
    28a2:	ff 1c       	adc	r15, r15
    28a4:	ee 0c       	add	r14, r14
    28a6:	ff 1c       	adc	r15, r15
    28a8:	0e 29       	or	r16, r14
    28aa:	00 93 d8 05 	sts	0x05D8, r16	; 0x8005d8 <__data_end>
}
    28ae:	64 96       	adiw	r28, 0x14	; 20
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	1f 91       	pop	r17
    28c0:	0f 91       	pop	r16
    28c2:	ff 90       	pop	r15
    28c4:	ef 90       	pop	r14
    28c6:	08 95       	ret

000028c8 <main>:

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  Main Program
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
int main()
{
    28c8:	cf 93       	push	r28
    28ca:	df 93       	push	r29
    28cc:	cd b7       	in	r28, 0x3d	; 61
    28ce:	de b7       	in	r29, 0x3e	; 62
    28d0:	e9 97       	sbiw	r28, 0x39	; 57
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0b11100011;	//b7 - SCK; b1 - MOSI
    28dc:	83 ee       	ldi	r24, 0xE3	; 227
    28de:	84 b9       	out	0x04, r24	; 4
	//DDRC &= ~(1 << PINC0);
	DDRD = 0b00001001;	//b3 - SS pin
    28e0:	89 e0       	ldi	r24, 0x09	; 9
    28e2:	8a b9       	out	0x0a, r24	; 10
	SPI_clock_high;
    28e4:	2f 9a       	sbi	0x05, 7	; 5
	
	CAN_init();		// Initialise CAN
    28e6:	0e 94 28 18 	call	0x3050	; 0x3050 <CAN_init>
	CAN_RXInit(5,8,0x400000, 0x400000);
    28ea:	e1 2c       	mov	r14, r1
    28ec:	f1 2c       	mov	r15, r1
    28ee:	00 e4       	ldi	r16, 0x40	; 64
    28f0:	10 e0       	ldi	r17, 0x00	; 0
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e4       	ldi	r20, 0x40	; 64
    28f8:	50 e0       	ldi	r21, 0x00	; 0
    28fa:	68 e0       	ldi	r22, 0x08	; 8
    28fc:	85 e0       	ldi	r24, 0x05	; 5
    28fe:	0e 94 7e 18 	call	0x30fc	; 0x30fc <CAN_RXInit>
	ADC_init();		// Initialise ADC
    2902:	0e 94 01 18 	call	0x3002	; 0x3002 <ADC_init>
	spi_init();		// Initialise SPI (OLED screen communication)
    2906:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <spi_init>
	OLED_Init();	// Initialise the OLED screen
    290a:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <OLED_Init>
	sei();
    290e:	78 94       	sei
	
	Fill_RAM(0x00);			// Clear Screen
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <Fill_RAM>
	
	Display_Picture(Motorsport);
    2916:	86 ed       	ldi	r24, 0xD6	; 214
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <Display_Picture>
	Delay(3000);
    291e:	88 eb       	ldi	r24, 0xB8	; 184
    2920:	9b e0       	ldi	r25, 0x0B	; 11
    2922:	0e 94 74 19 	call	0x32e8	; 0x32e8 <Delay>

	Fill_RAM(0x00);			// Clear Screen
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <Fill_RAM>
	unsigned char SkidPad[]= {'S','K','I','D','P','A','D'};
	unsigned char AutoCross[]= {'A','U','T','O','C','R','O','S','S'};
	unsigned char Endurance[]= {'E','N','D','U','R','A','N,','C','E'};
	unsigned char SelectionRight[]= {'>','>','>','>'};
	unsigned char SelectionLeft[]= {'<','<','<','<'};
	unsigned char Voltage[]= {'V','O','L','T','A','G','E',' ',':'};
    292c:	89 e0       	ldi	r24, 0x09	; 9
    292e:	e0 eb       	ldi	r30, 0xB0	; 176
    2930:	f5 e0       	ldi	r31, 0x05	; 5
    2932:	de 01       	movw	r26, r28
    2934:	11 96       	adiw	r26, 0x01	; 1
    2936:	01 90       	ld	r0, Z+
    2938:	0d 92       	st	X+, r0
    293a:	8a 95       	dec	r24
    293c:	e1 f7       	brne	.-8      	; 0x2936 <main+0x6e>
	unsigned char RPM[] = {'R','P','M',' ',':'};
    293e:	85 e0       	ldi	r24, 0x05	; 5
    2940:	e9 eb       	ldi	r30, 0xB9	; 185
    2942:	f5 e0       	ldi	r31, 0x05	; 5
    2944:	de 01       	movw	r26, r28
    2946:	1a 96       	adiw	r26, 0x0a	; 10
    2948:	01 90       	ld	r0, Z+
    294a:	0d 92       	st	X+, r0
    294c:	8a 95       	dec	r24
    294e:	e1 f7       	brne	.-8      	; 0x2948 <main+0x80>
	unsigned char GearboxTemp[] = {'G','E','A','R','B','O','X',' ','T','E','M','P',' ',':'};
    2950:	8e e0       	ldi	r24, 0x0E	; 14
    2952:	ee eb       	ldi	r30, 0xBE	; 190
    2954:	f5 e0       	ldi	r31, 0x05	; 5
    2956:	de 01       	movw	r26, r28
    2958:	1f 96       	adiw	r26, 0x0f	; 15
    295a:	01 90       	ld	r0, Z+
    295c:	0d 92       	st	X+, r0
    295e:	8a 95       	dec	r24
    2960:	e1 f7       	brne	.-8      	; 0x295a <main+0x92>
	unsigned char Throttle[]= {'T','H','R','O','T','T','L','E',' ','%',' ',':'};
    2962:	8c e0       	ldi	r24, 0x0C	; 12
    2964:	ec ec       	ldi	r30, 0xCC	; 204
    2966:	f5 e0       	ldi	r31, 0x05	; 5
    2968:	de 01       	movw	r26, r28
    296a:	5d 96       	adiw	r26, 0x1d	; 29
    296c:	01 90       	ld	r0, Z+
    296e:	0d 92       	st	X+, r0
    2970:	8a 95       	dec	r24
    2972:	e1 f7       	brne	.-8      	; 0x296c <main+0xa4>
	unsigned char BlankNumber[] = {' ',' ',' ',' ',' '};
	unsigned char LeftArrow[]= {'<'};
    2974:	8c e3       	ldi	r24, 0x3C	; 60
    2976:	89 a7       	std	Y+41, r24	; 0x29
	unsigned char RightArrow[]= {'>'};
    2978:	8e e3       	ldi	r24, 0x3E	; 62
    297a:	8a a7       	std	Y+42, r24	; 0x2a
	int ScreenFlag = 0;
	int ADC_Change = 1;
	int ADC_Previous = 0;
	int digitLength = 0;
	uint16_t LeftDialADC;
	uint16_t LeftDialADCOld = 0;
    297c:	61 2c       	mov	r6, r1
    297e:	71 2c       	mov	r7, r1
	unsigned int GearboxTempCount = 0;
	unsigned int GearboxTempMaxFlag = 0;
	unsigned int RPMCounter = 0;
	unsigned int BootFlag = 0;
	int ScreenFlag = 0;
	int ADC_Change = 1;
    2980:	22 24       	eor	r2, r2
    2982:	23 94       	inc	r2
    2984:	31 2c       	mov	r3, r1
	unsigned char BlankNumber[] = {' ',' ',' ',' ',' '};
	unsigned char LeftArrow[]= {'<'};
	unsigned char RightArrow[]= {'>'};
	unsigned char TempBuffer[10];
	unsigned int RPMMaxFlag = 0;
	unsigned int ThrottleMaxFlag = 0;
    2986:	19 ae       	std	Y+57, r1	; 0x39
    2988:	18 ae       	std	Y+56, r1	; 0x38
		CAN_TXMOB(0, 1, &CAN_Dial, 0x400001,0);
		_delay_ms(100);
		
		if((LeftDialADCOld != LeftDialADCScaled) /*|| (RightDialADCOld != RightDialADCScaled)*/)
		{
			ADC_Change = 1;
    298a:	bb 24       	eor	r11, r11
    298c:	b3 94       	inc	r11
    298e:	d1 2c       	mov	r13, r1
	int RightDialADCScaled;
	uint8_t mob;
	
	while(1)
	{	
		readDials();
    2990:	0e 94 02 14 	call	0x2804	; 0x2804 <readDials>
		LeftDialADC = ADC_read(3); // 3 = LEFT DIAL
    2994:	83 e0       	ldi	r24, 0x03	; 3
    2996:	0e 94 0c 18 	call	0x3018	; 0x3018 <ADC_read>
		LeftDialADCScaled = (int)(LeftDialADC >> 2) / 24; // Scale values from 1 to 8 - need to verify with new PCB since dials are playing up
    299a:	96 95       	lsr	r25
    299c:	87 95       	ror	r24
    299e:	96 95       	lsr	r25
    29a0:	87 95       	ror	r24
    29a2:	68 e1       	ldi	r22, 0x18	; 24
    29a4:	70 e0       	ldi	r23, 0x00	; 0
    29a6:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__divmodhi4>
    29aa:	56 2e       	mov	r5, r22
    29ac:	47 2e       	mov	r4, r23
    29ae:	86 2e       	mov	r8, r22
    29b0:	97 2e       	mov	r9, r23
		RightDialADC = ADC_read(2); // 2 = RIGHT DIAL
    29b2:	82 e0       	ldi	r24, 0x02	; 2
    29b4:	0e 94 0c 18 	call	0x3018	; 0x3018 <ADC_read>
		RightDialADCScaled = (int)(RightDialADC >> 2) / 24; // Scale values from 1 to 8 - need to verify with new PCB since dials are playing up
		mob = CAN_findFreeTXMOB();
    29b8:	0e 94 4b 19 	call	0x3296	; 0x3296 <CAN_findFreeTXMOB>
		//if(mob > 0)
		CAN_TXMOB(0, 1, &CAN_Dial, 0x400001,0);
    29bc:	e1 2c       	mov	r14, r1
    29be:	01 e0       	ldi	r16, 0x01	; 1
    29c0:	10 e0       	ldi	r17, 0x00	; 0
    29c2:	20 e4       	ldi	r18, 0x40	; 64
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	48 ed       	ldi	r20, 0xD8	; 216
    29c8:	55 e0       	ldi	r21, 0x05	; 5
    29ca:	61 e0       	ldi	r22, 0x01	; 1
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	0e 94 e6 18 	call	0x31cc	; 0x31cc <CAN_TXMOB>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    29d2:	2f ef       	ldi	r18, 0xFF	; 255
    29d4:	81 ee       	ldi	r24, 0xE1	; 225
    29d6:	94 e0       	ldi	r25, 0x04	; 4
    29d8:	21 50       	subi	r18, 0x01	; 1
    29da:	80 40       	sbci	r24, 0x00	; 0
    29dc:	90 40       	sbci	r25, 0x00	; 0
    29de:	e1 f7       	brne	.-8      	; 0x29d8 <main+0x110>
    29e0:	00 c0       	rjmp	.+0      	; 0x29e2 <main+0x11a>
    29e2:	00 00       	nop
		_delay_ms(100);
		
		if((LeftDialADCOld != LeftDialADCScaled) /*|| (RightDialADCOld != RightDialADCScaled)*/)
    29e4:	5d aa       	std	Y+53, r5	; 0x35
    29e6:	4e aa       	std	Y+54, r4	; 0x36
    29e8:	68 14       	cp	r6, r8
    29ea:	79 04       	cpc	r7, r9
    29ec:	09 f0       	breq	.+2      	; 0x29f0 <main+0x128>
    29ee:	fc c2       	rjmp	.+1528   	; 0x2fe8 <main+0x720>
		{
			ADC_Change = 1;
		}
		
		if(LeftDialADCScaled == 3)
    29f0:	e3 e0       	ldi	r30, 0x03	; 3
    29f2:	8e 16       	cp	r8, r30
    29f4:	91 04       	cpc	r9, r1
    29f6:	09 f0       	breq	.+2      	; 0x29fa <main+0x132>
    29f8:	a3 c0       	rjmp	.+326    	; 0x2b40 <main+0x278>
		{					
			if(ADC_Change == 1)
    29fa:	f1 e0       	ldi	r31, 0x01	; 1
    29fc:	2f 16       	cp	r2, r31
    29fe:	31 04       	cpc	r3, r1
    2a00:	d1 f5       	brne	.+116    	; 0x2a76 <main+0x1ae>
    2a02:	17 c0       	rjmp	.+46     	; 0x2a32 <main+0x16a>
			{
				ADC_Change = 0;
				if(LeftDialADCScaled > LeftDialADCOld){
    2a04:	8d a9       	ldd	r24, Y+53	; 0x35
    2a06:	9e a9       	ldd	r25, Y+54	; 0x36
    2a08:	68 16       	cp	r6, r24
    2a0a:	79 06       	cpc	r7, r25
    2a0c:	90 f4       	brcc	.+36     	; 0x2a32 <main+0x16a>
					Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x0F, 0xF0);
    2a0e:	0f 2e       	mov	r0, r31
    2a10:	f0 ef       	ldi	r31, 0xF0	; 240
    2a12:	af 2e       	mov	r10, r31
    2a14:	f0 2d       	mov	r31, r0
    2a16:	0f 2e       	mov	r0, r31
    2a18:	ff e0       	ldi	r31, 0x0F	; 15
    2a1a:	cf 2e       	mov	r12, r31
    2a1c:	f0 2d       	mov	r31, r0
    2a1e:	eb 2c       	mov	r14, r11
    2a20:	fd 2c       	mov	r15, r13
    2a22:	0f e7       	ldi	r16, 0x7F	; 127
    2a24:	21 e1       	ldi	r18, 0x11	; 17
    2a26:	40 e6       	ldi	r20, 0x60	; 96
    2a28:	6a e3       	ldi	r22, 0x3A	; 58
    2a2a:	ce 01       	movw	r24, r28
    2a2c:	8a 96       	adiw	r24, 0x2a	; 42
    2a2e:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <Show_Bigger_String>
				}
				if(LeftDialADCScaled < LeftDialADCOld){
    2a32:	ed a9       	ldd	r30, Y+53	; 0x35
    2a34:	fe a9       	ldd	r31, Y+54	; 0x36
    2a36:	e6 15       	cp	r30, r6
    2a38:	f7 05       	cpc	r31, r7
    2a3a:	90 f4       	brcc	.+36     	; 0x2a60 <main+0x198>
					Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x0F, 0xF0);
    2a3c:	0f 2e       	mov	r0, r31
    2a3e:	f0 ef       	ldi	r31, 0xF0	; 240
    2a40:	af 2e       	mov	r10, r31
    2a42:	f0 2d       	mov	r31, r0
    2a44:	0f 2e       	mov	r0, r31
    2a46:	ff e0       	ldi	r31, 0x0F	; 15
    2a48:	cf 2e       	mov	r12, r31
    2a4a:	f0 2d       	mov	r31, r0
    2a4c:	eb 2c       	mov	r14, r11
    2a4e:	fd 2c       	mov	r15, r13
    2a50:	0f e7       	ldi	r16, 0x7F	; 127
    2a52:	21 e1       	ldi	r18, 0x11	; 17
    2a54:	45 e1       	ldi	r20, 0x15	; 21
    2a56:	60 e0       	ldi	r22, 0x00	; 0
    2a58:	ce 01       	movw	r24, r28
    2a5a:	89 96       	adiw	r24, 0x29	; 41
    2a5c:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <Show_Bigger_String>
				}
				LeftDialADCOld = LeftDialADCScaled;
				Delay(500);
    2a60:	84 ef       	ldi	r24, 0xF4	; 244
    2a62:	91 e0       	ldi	r25, 0x01	; 1
    2a64:	0e 94 74 19 	call	0x32e8	; 0x32e8 <Delay>
				Fill_RAM(0x00);
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <Fill_RAM>
					Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x0F, 0xF0);
				}
				if(LeftDialADCScaled < LeftDialADCOld){
					Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x0F, 0xF0);
				}
				LeftDialADCOld = LeftDialADCScaled;
    2a6e:	65 2c       	mov	r6, r5
    2a70:	74 2c       	mov	r7, r4
		
		if(LeftDialADCScaled == 3)
		{					
			if(ADC_Change == 1)
			{
				ADC_Change = 0;
    2a72:	21 2c       	mov	r2, r1
    2a74:	31 2c       	mov	r3, r1
				LeftDialADCOld = LeftDialADCScaled;
				Delay(500);
				Fill_RAM(0x00);
			}
			
			if(ThrottleMaxFlag == 1){
    2a76:	88 ad       	ldd	r24, Y+56	; 0x38
    2a78:	99 ad       	ldd	r25, Y+57	; 0x39
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	11 f4       	brne	.+4      	; 0x2a82 <main+0x1ba>
				//Show_String(1,&BlankNumber,0x28,0x05);
				ThrottleMaxFlag = 0;
    2a7e:	18 ae       	std	Y+56, r1	; 0x38
    2a80:	19 ae       	std	Y+57, r1	; 0x39
			}
			if(ThrottlePercentageData == 100){ ThrottleMaxFlag = 1;	}
    2a82:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <ThrottlePercentageData>
    2a86:	90 91 e6 05 	lds	r25, 0x05E6	; 0x8005e6 <ThrottlePercentageData+0x1>
    2a8a:	84 36       	cpi	r24, 0x64	; 100
    2a8c:	91 05       	cpc	r25, r1
    2a8e:	11 f4       	brne	.+4      	; 0x2a94 <main+0x1cc>
    2a90:	b8 ae       	std	Y+56, r11	; 0x38
    2a92:	d9 ae       	std	Y+57, r13	; 0x39
    2a94:	4a e0       	ldi	r20, 0x0A	; 10
    2a96:	be 01       	movw	r22, r28
    2a98:	65 5d       	subi	r22, 0xD5	; 213
    2a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a9c:	0e 94 b9 22 	call	0x4572	; 0x4572 <__itoa_ncheck>
			if(ThrottleGreaterThan10 == 1){
				//Show_String(1,&BlankNumber,0x28,0x05);
				ThrottleGreaterThan10 = 0;
			}
			itoa(ThrottlePercentageData,TempBuffer,10);
			digitLength = (ThrottlePercentageData == 0 ? 1 : (int)(log10(ThrottlePercentageData)+1));
    2aa0:	60 91 e5 05 	lds	r22, 0x05E5	; 0x8005e5 <ThrottlePercentageData>
    2aa4:	70 91 e6 05 	lds	r23, 0x05E6	; 0x8005e6 <ThrottlePercentageData+0x1>
    2aa8:	61 15       	cp	r22, r1
    2aaa:	71 05       	cpc	r23, r1
    2aac:	89 f0       	breq	.+34     	; 0x2ad0 <main+0x208>
    2aae:	80 e0       	ldi	r24, 0x00	; 0
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	0e 94 cd 20 	call	0x419a	; 0x419a <__floatunsisf>
    2ab6:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <log10>
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	40 e8       	ldi	r20, 0x80	; 128
    2ac0:	5f e3       	ldi	r21, 0x3F	; 63
    2ac2:	0e 94 2b 20 	call	0x4056	; 0x4056 <__addsf3>
    2ac6:	0e 94 97 20 	call	0x412e	; 0x412e <__fixsfsi>
    2aca:	6f ab       	std	Y+55, r22	; 0x37
    2acc:	17 2f       	mov	r17, r23
    2ace:	02 c0       	rjmp	.+4      	; 0x2ad4 <main+0x20c>
    2ad0:	bf aa       	std	Y+55, r11	; 0x37
    2ad2:	1d 2d       	mov	r17, r13
			Show_Big_String(&Throttle,0x05,0x64,0x16,0x7F, 12, 0x0F, 0xF0);		
    2ad4:	0f 2e       	mov	r0, r31
    2ad6:	f0 ef       	ldi	r31, 0xF0	; 240
    2ad8:	af 2e       	mov	r10, r31
    2ada:	f0 2d       	mov	r31, r0
    2adc:	0f 2e       	mov	r0, r31
    2ade:	ff e0       	ldi	r31, 0x0F	; 15
    2ae0:	cf 2e       	mov	r12, r31
    2ae2:	f0 2d       	mov	r31, r0
    2ae4:	0f 2e       	mov	r0, r31
    2ae6:	fc e0       	ldi	r31, 0x0C	; 12
    2ae8:	ef 2e       	mov	r14, r31
    2aea:	f1 2c       	mov	r15, r1
    2aec:	f0 2d       	mov	r31, r0
    2aee:	0f e7       	ldi	r16, 0x7F	; 127
    2af0:	26 e1       	ldi	r18, 0x16	; 22
    2af2:	44 e6       	ldi	r20, 0x64	; 100
    2af4:	65 e0       	ldi	r22, 0x05	; 5
    2af6:	ce 01       	movw	r24, r28
    2af8:	4d 96       	adiw	r24, 0x1d	; 29
    2afa:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <Show_Big_String>
			Show_String(1,TempBuffer,0x28,0x05);
    2afe:	25 e0       	ldi	r18, 0x05	; 5
    2b00:	48 e2       	ldi	r20, 0x28	; 40
    2b02:	be 01       	movw	r22, r28
    2b04:	65 5d       	subi	r22, 0xD5	; 213
    2b06:	7f 4f       	sbci	r23, 0xFF	; 255
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <Show_String>
			Show_Big_String(&TempBuffer,0x2D,0x64,0x16,0x7F, digitLength, 0x0F, 0xF0); // Print the current throttle percentage
    2b0e:	ef a8       	ldd	r14, Y+55	; 0x37
    2b10:	f1 2e       	mov	r15, r17
    2b12:	26 e1       	ldi	r18, 0x16	; 22
    2b14:	44 e6       	ldi	r20, 0x64	; 100
    2b16:	6d e2       	ldi	r22, 0x2D	; 45
    2b18:	ce 01       	movw	r24, r28
    2b1a:	8b 96       	adiw	r24, 0x2b	; 43
    2b1c:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <Show_Big_String>
			Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x04, 0x40);
    2b20:	68 94       	set
    2b22:	aa 24       	eor	r10, r10
    2b24:	a6 f8       	bld	r10, 6
    2b26:	68 94       	set
    2b28:	cc 24       	eor	r12, r12
    2b2a:	c2 f8       	bld	r12, 2
    2b2c:	eb 2c       	mov	r14, r11
    2b2e:	fd 2c       	mov	r15, r13
    2b30:	21 e1       	ldi	r18, 0x11	; 17
    2b32:	40 e6       	ldi	r20, 0x60	; 96
    2b34:	6a e3       	ldi	r22, 0x3A	; 58
    2b36:	ce 01       	movw	r24, r28
    2b38:	8a 96       	adiw	r24, 0x2a	; 42
    2b3a:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <Show_Bigger_String>
    2b3e:	ab c0       	rjmp	.+342    	; 0x2c96 <main+0x3ce>
		}
		
		if(LeftDialADCScaled == 4)
    2b40:	94 e0       	ldi	r25, 0x04	; 4
    2b42:	89 16       	cp	r8, r25
    2b44:	91 04       	cpc	r9, r1
    2b46:	09 f0       	breq	.+2      	; 0x2b4a <main+0x282>
    2b48:	a6 c0       	rjmp	.+332    	; 0x2c96 <main+0x3ce>
		{
			if(ADC_Change == 1)
    2b4a:	e1 e0       	ldi	r30, 0x01	; 1
    2b4c:	2e 16       	cp	r2, r30
    2b4e:	31 04       	cpc	r3, r1
    2b50:	c9 f5       	brne	.+114    	; 0x2bc4 <main+0x2fc>
			{
				ADC_Change = 0;
				if(LeftDialADCScaled > LeftDialADCOld){
    2b52:	8d a9       	ldd	r24, Y+53	; 0x35
    2b54:	9e a9       	ldd	r25, Y+54	; 0x36
    2b56:	68 16       	cp	r6, r24
    2b58:	79 06       	cpc	r7, r25
    2b5a:	90 f4       	brcc	.+36     	; 0x2b80 <main+0x2b8>
					Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x0F, 0xF0);
    2b5c:	0f 2e       	mov	r0, r31
    2b5e:	f0 ef       	ldi	r31, 0xF0	; 240
    2b60:	af 2e       	mov	r10, r31
    2b62:	f0 2d       	mov	r31, r0
    2b64:	0f 2e       	mov	r0, r31
    2b66:	ff e0       	ldi	r31, 0x0F	; 15
    2b68:	cf 2e       	mov	r12, r31
    2b6a:	f0 2d       	mov	r31, r0
    2b6c:	eb 2c       	mov	r14, r11
    2b6e:	fd 2c       	mov	r15, r13
    2b70:	0f e7       	ldi	r16, 0x7F	; 127
    2b72:	21 e1       	ldi	r18, 0x11	; 17
    2b74:	40 e6       	ldi	r20, 0x60	; 96
    2b76:	6a e3       	ldi	r22, 0x3A	; 58
    2b78:	ce 01       	movw	r24, r28
    2b7a:	8a 96       	adiw	r24, 0x2a	; 42
    2b7c:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <Show_Bigger_String>
				}
				if(LeftDialADCScaled < LeftDialADCOld){
    2b80:	ed a9       	ldd	r30, Y+53	; 0x35
    2b82:	fe a9       	ldd	r31, Y+54	; 0x36
    2b84:	e6 15       	cp	r30, r6
    2b86:	f7 05       	cpc	r31, r7
    2b88:	90 f4       	brcc	.+36     	; 0x2bae <main+0x2e6>
					Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x0F, 0xF0);
    2b8a:	0f 2e       	mov	r0, r31
    2b8c:	f0 ef       	ldi	r31, 0xF0	; 240
    2b8e:	af 2e       	mov	r10, r31
    2b90:	f0 2d       	mov	r31, r0
    2b92:	0f 2e       	mov	r0, r31
    2b94:	ff e0       	ldi	r31, 0x0F	; 15
    2b96:	cf 2e       	mov	r12, r31
    2b98:	f0 2d       	mov	r31, r0
    2b9a:	eb 2c       	mov	r14, r11
    2b9c:	fd 2c       	mov	r15, r13
    2b9e:	0f e7       	ldi	r16, 0x7F	; 127
    2ba0:	21 e1       	ldi	r18, 0x11	; 17
    2ba2:	45 e1       	ldi	r20, 0x15	; 21
    2ba4:	60 e0       	ldi	r22, 0x00	; 0
    2ba6:	ce 01       	movw	r24, r28
    2ba8:	89 96       	adiw	r24, 0x29	; 41
    2baa:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <Show_Bigger_String>
				}
				LeftDialADCOld = LeftDialADCScaled;
				Delay(500);
    2bae:	84 ef       	ldi	r24, 0xF4	; 244
    2bb0:	91 e0       	ldi	r25, 0x01	; 1
    2bb2:	0e 94 74 19 	call	0x32e8	; 0x32e8 <Delay>
				Fill_RAM(0x00);
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <Fill_RAM>
					Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x0F, 0xF0);
				}
				if(LeftDialADCScaled < LeftDialADCOld){
					Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x0F, 0xF0);
				}
				LeftDialADCOld = LeftDialADCScaled;
    2bbc:	65 2c       	mov	r6, r5
    2bbe:	74 2c       	mov	r7, r4
		
		if(LeftDialADCScaled == 4)
		{
			if(ADC_Change == 1)
			{
				ADC_Change = 0;
    2bc0:	21 2c       	mov	r2, r1
    2bc2:	31 2c       	mov	r3, r1
				Fill_RAM(0x00);
			}
			
			// If RPM is greater than 100 (or 1000), when the throttle goes down, a trailing 0 will be left
			// This needs to be cleared
			if(RPMData < 99){ RPMGreaterThan100 = 1; }
    2bc4:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <RPMData>
    2bc8:	90 91 e2 05 	lds	r25, 0x05E2	; 0x8005e2 <RPMData+0x1>
    2bcc:	a0 91 e3 05 	lds	r26, 0x05E3	; 0x8005e3 <RPMData+0x2>
    2bd0:	b0 91 e4 05 	lds	r27, 0x05E4	; 0x8005e4 <RPMData+0x3>
    2bd4:	4a e0       	ldi	r20, 0x0A	; 10
    2bd6:	be 01       	movw	r22, r28
    2bd8:	65 5d       	subi	r22, 0xD5	; 213
    2bda:	7f 4f       	sbci	r23, 0xFF	; 255
    2bdc:	0e 94 b9 22 	call	0x4572	; 0x4572 <__itoa_ncheck>
			if(RPMGreaterThan100 == 1){
				//Show_String(1,&BlankNumber,0x28,0x15);
				RPMGreaterThan100 = 0;
			}
			itoa(RPMData,TempBuffer,10);
			digitLength = (RPMData == 0 ? 1 : (int)(log10(RPMData)+1));
    2be0:	60 91 e1 05 	lds	r22, 0x05E1	; 0x8005e1 <RPMData>
    2be4:	70 91 e2 05 	lds	r23, 0x05E2	; 0x8005e2 <RPMData+0x1>
    2be8:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <RPMData+0x2>
    2bec:	90 91 e4 05 	lds	r25, 0x05E4	; 0x8005e4 <RPMData+0x3>
    2bf0:	61 15       	cp	r22, r1
    2bf2:	71 05       	cpc	r23, r1
    2bf4:	81 05       	cpc	r24, r1
    2bf6:	91 05       	cpc	r25, r1
    2bf8:	79 f0       	breq	.+30     	; 0x2c18 <main+0x350>
    2bfa:	0e 94 cd 20 	call	0x419a	; 0x419a <__floatunsisf>
    2bfe:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <log10>
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	40 e8       	ldi	r20, 0x80	; 128
    2c08:	5f e3       	ldi	r21, 0x3F	; 63
    2c0a:	0e 94 2b 20 	call	0x4056	; 0x4056 <__addsf3>
    2c0e:	0e 94 97 20 	call	0x412e	; 0x412e <__fixsfsi>
    2c12:	6f ab       	std	Y+55, r22	; 0x37
    2c14:	17 2f       	mov	r17, r23
    2c16:	02 c0       	rjmp	.+4      	; 0x2c1c <main+0x354>
    2c18:	bf aa       	std	Y+55, r11	; 0x37
    2c1a:	1d 2d       	mov	r17, r13
			Show_String(1,TempBuffer,0x28,0x05);
    2c1c:	25 e0       	ldi	r18, 0x05	; 5
    2c1e:	48 e2       	ldi	r20, 0x28	; 40
    2c20:	be 01       	movw	r22, r28
    2c22:	65 5d       	subi	r22, 0xD5	; 213
    2c24:	7f 4f       	sbci	r23, 0xFF	; 255
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <Show_String>
			Show_Big_String(&RPM,0x05,0x64,0x16,0x7F, 5, 0x0F, 0xF0);
    2c2c:	0f 2e       	mov	r0, r31
    2c2e:	f0 ef       	ldi	r31, 0xF0	; 240
    2c30:	af 2e       	mov	r10, r31
    2c32:	f0 2d       	mov	r31, r0
    2c34:	0f 2e       	mov	r0, r31
    2c36:	ff e0       	ldi	r31, 0x0F	; 15
    2c38:	cf 2e       	mov	r12, r31
    2c3a:	f0 2d       	mov	r31, r0
    2c3c:	0f 2e       	mov	r0, r31
    2c3e:	f5 e0       	ldi	r31, 0x05	; 5
    2c40:	ef 2e       	mov	r14, r31
    2c42:	f1 2c       	mov	r15, r1
    2c44:	f0 2d       	mov	r31, r0
    2c46:	0f e7       	ldi	r16, 0x7F	; 127
    2c48:	26 e1       	ldi	r18, 0x16	; 22
    2c4a:	44 e6       	ldi	r20, 0x64	; 100
    2c4c:	65 e0       	ldi	r22, 0x05	; 5
    2c4e:	ce 01       	movw	r24, r28
    2c50:	0a 96       	adiw	r24, 0x0a	; 10
    2c52:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <Show_Big_String>
			Show_Big_String(&TempBuffer,0x2D,0x64,0x16,0x7F, digitLength, 0x0F, 0xF0);
    2c56:	ef a8       	ldd	r14, Y+55	; 0x37
    2c58:	f1 2e       	mov	r15, r17
    2c5a:	26 e1       	ldi	r18, 0x16	; 22
    2c5c:	44 e6       	ldi	r20, 0x64	; 100
    2c5e:	6d e2       	ldi	r22, 0x2D	; 45
    2c60:	ce 01       	movw	r24, r28
    2c62:	8b 96       	adiw	r24, 0x2b	; 43
    2c64:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <Show_Big_String>
			Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x04, 0x40);
    2c68:	68 94       	set
    2c6a:	aa 24       	eor	r10, r10
    2c6c:	a6 f8       	bld	r10, 6
    2c6e:	68 94       	set
    2c70:	cc 24       	eor	r12, r12
    2c72:	c2 f8       	bld	r12, 2
    2c74:	eb 2c       	mov	r14, r11
    2c76:	fd 2c       	mov	r15, r13
    2c78:	21 e1       	ldi	r18, 0x11	; 17
    2c7a:	45 e1       	ldi	r20, 0x15	; 21
    2c7c:	60 e0       	ldi	r22, 0x00	; 0
    2c7e:	ce 01       	movw	r24, r28
    2c80:	89 96       	adiw	r24, 0x29	; 41
    2c82:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <Show_Bigger_String>
			Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x04, 0x40);
    2c86:	21 e1       	ldi	r18, 0x11	; 17
    2c88:	40 e6       	ldi	r20, 0x60	; 96
    2c8a:	6a e3       	ldi	r22, 0x3A	; 58
    2c8c:	ce 01       	movw	r24, r28
    2c8e:	8a 96       	adiw	r24, 0x2a	; 42
    2c90:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <Show_Bigger_String>
    2c94:	56 c1       	rjmp	.+684    	; 0x2f42 <main+0x67a>
		}
		
		if(LeftDialADCScaled == 5)
    2c96:	f5 e0       	ldi	r31, 0x05	; 5
    2c98:	8f 16       	cp	r8, r31
    2c9a:	91 04       	cpc	r9, r1
    2c9c:	09 f0       	breq	.+2      	; 0x2ca0 <main+0x3d8>
    2c9e:	a2 c0       	rjmp	.+324    	; 0x2de4 <main+0x51c>
		{
			if(ADC_Change == 1)
    2ca0:	21 e0       	ldi	r18, 0x01	; 1
    2ca2:	22 16       	cp	r2, r18
    2ca4:	31 04       	cpc	r3, r1
    2ca6:	c9 f5       	brne	.+114    	; 0x2d1a <main+0x452>
			{
				ADC_Change = 0;
				if(LeftDialADCScaled > LeftDialADCOld){
    2ca8:	8d a9       	ldd	r24, Y+53	; 0x35
    2caa:	9e a9       	ldd	r25, Y+54	; 0x36
    2cac:	68 16       	cp	r6, r24
    2cae:	79 06       	cpc	r7, r25
    2cb0:	90 f4       	brcc	.+36     	; 0x2cd6 <main+0x40e>
					Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x0F, 0xF0);
    2cb2:	0f 2e       	mov	r0, r31
    2cb4:	f0 ef       	ldi	r31, 0xF0	; 240
    2cb6:	af 2e       	mov	r10, r31
    2cb8:	f0 2d       	mov	r31, r0
    2cba:	0f 2e       	mov	r0, r31
    2cbc:	ff e0       	ldi	r31, 0x0F	; 15
    2cbe:	cf 2e       	mov	r12, r31
    2cc0:	f0 2d       	mov	r31, r0
    2cc2:	eb 2c       	mov	r14, r11
    2cc4:	fd 2c       	mov	r15, r13
    2cc6:	0f e7       	ldi	r16, 0x7F	; 127
    2cc8:	21 e1       	ldi	r18, 0x11	; 17
    2cca:	40 e6       	ldi	r20, 0x60	; 96
    2ccc:	6a e3       	ldi	r22, 0x3A	; 58
    2cce:	ce 01       	movw	r24, r28
    2cd0:	8a 96       	adiw	r24, 0x2a	; 42
    2cd2:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <Show_Bigger_String>
				}
				if(LeftDialADCScaled < LeftDialADCOld){
    2cd6:	ed a9       	ldd	r30, Y+53	; 0x35
    2cd8:	fe a9       	ldd	r31, Y+54	; 0x36
    2cda:	e6 15       	cp	r30, r6
    2cdc:	f7 05       	cpc	r31, r7
    2cde:	90 f4       	brcc	.+36     	; 0x2d04 <main+0x43c>
					Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x0F, 0xF0);
    2ce0:	0f 2e       	mov	r0, r31
    2ce2:	f0 ef       	ldi	r31, 0xF0	; 240
    2ce4:	af 2e       	mov	r10, r31
    2ce6:	f0 2d       	mov	r31, r0
    2ce8:	0f 2e       	mov	r0, r31
    2cea:	ff e0       	ldi	r31, 0x0F	; 15
    2cec:	cf 2e       	mov	r12, r31
    2cee:	f0 2d       	mov	r31, r0
    2cf0:	eb 2c       	mov	r14, r11
    2cf2:	fd 2c       	mov	r15, r13
    2cf4:	0f e7       	ldi	r16, 0x7F	; 127
    2cf6:	21 e1       	ldi	r18, 0x11	; 17
    2cf8:	45 e1       	ldi	r20, 0x15	; 21
    2cfa:	60 e0       	ldi	r22, 0x00	; 0
    2cfc:	ce 01       	movw	r24, r28
    2cfe:	89 96       	adiw	r24, 0x29	; 41
    2d00:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <Show_Bigger_String>
				}
				LeftDialADCOld = LeftDialADCScaled;
				Delay(500);
    2d04:	84 ef       	ldi	r24, 0xF4	; 244
    2d06:	91 e0       	ldi	r25, 0x01	; 1
    2d08:	0e 94 74 19 	call	0x32e8	; 0x32e8 <Delay>
				Fill_RAM(0x00);
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <Fill_RAM>
					Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x0F, 0xF0);
				}
				if(LeftDialADCScaled < LeftDialADCOld){
					Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x0F, 0xF0);
				}
				LeftDialADCOld = LeftDialADCScaled;
    2d12:	65 2c       	mov	r6, r5
    2d14:	74 2c       	mov	r7, r4
		
		if(LeftDialADCScaled == 5)
		{
			if(ADC_Change == 1)
			{
				ADC_Change = 0;
    2d16:	21 2c       	mov	r2, r1
    2d18:	31 2c       	mov	r3, r1
    2d1a:	4a e0       	ldi	r20, 0x0A	; 10
    2d1c:	be 01       	movw	r22, r28
    2d1e:	65 5d       	subi	r22, 0xD5	; 213
    2d20:	7f 4f       	sbci	r23, 0xFF	; 255
    2d22:	ed ed       	ldi	r30, 0xDD	; 221
    2d24:	f5 e0       	ldi	r31, 0x05	; 5
    2d26:	80 81       	ld	r24, Z
    2d28:	91 81       	ldd	r25, Z+1	; 0x01
    2d2a:	0e 94 b9 22 	call	0x4572	; 0x4572 <__itoa_ncheck>
				Delay(500);
				Fill_RAM(0x00);
			}
			
			itoa(GearboxTempData,TempBuffer,10);
			digitLength = (GearboxTempData == 0 ? 1 : (int)(log10(GearboxTempData)+1));
    2d2e:	60 91 dd 05 	lds	r22, 0x05DD	; 0x8005dd <GearboxTempData>
    2d32:	70 91 de 05 	lds	r23, 0x05DE	; 0x8005de <GearboxTempData+0x1>
    2d36:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <GearboxTempData+0x2>
    2d3a:	90 91 e0 05 	lds	r25, 0x05E0	; 0x8005e0 <GearboxTempData+0x3>
    2d3e:	61 15       	cp	r22, r1
    2d40:	71 05       	cpc	r23, r1
    2d42:	81 05       	cpc	r24, r1
    2d44:	91 05       	cpc	r25, r1
    2d46:	79 f0       	breq	.+30     	; 0x2d66 <main+0x49e>
    2d48:	0e 94 cd 20 	call	0x419a	; 0x419a <__floatunsisf>
    2d4c:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <log10>
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	40 e8       	ldi	r20, 0x80	; 128
    2d56:	5f e3       	ldi	r21, 0x3F	; 63
    2d58:	0e 94 2b 20 	call	0x4056	; 0x4056 <__addsf3>
    2d5c:	0e 94 97 20 	call	0x412e	; 0x412e <__fixsfsi>
    2d60:	96 2e       	mov	r9, r22
    2d62:	17 2f       	mov	r17, r23
    2d64:	02 c0       	rjmp	.+4      	; 0x2d6a <main+0x4a2>
    2d66:	9b 2c       	mov	r9, r11
    2d68:	1d 2d       	mov	r17, r13
			Show_String(1,TempBuffer,0x28,0x05);
    2d6a:	25 e0       	ldi	r18, 0x05	; 5
    2d6c:	48 e2       	ldi	r20, 0x28	; 40
    2d6e:	be 01       	movw	r22, r28
    2d70:	65 5d       	subi	r22, 0xD5	; 213
    2d72:	7f 4f       	sbci	r23, 0xFF	; 255
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <Show_String>
			Show_Big_String(&GearboxTemp,0x05,0x64,0x16,0x7F, 14, 0x0F, 0xF0);
    2d7a:	0f 2e       	mov	r0, r31
    2d7c:	f0 ef       	ldi	r31, 0xF0	; 240
    2d7e:	af 2e       	mov	r10, r31
    2d80:	f0 2d       	mov	r31, r0
    2d82:	0f 2e       	mov	r0, r31
    2d84:	ff e0       	ldi	r31, 0x0F	; 15
    2d86:	cf 2e       	mov	r12, r31
    2d88:	f0 2d       	mov	r31, r0
    2d8a:	0f 2e       	mov	r0, r31
    2d8c:	fe e0       	ldi	r31, 0x0E	; 14
    2d8e:	ef 2e       	mov	r14, r31
    2d90:	f1 2c       	mov	r15, r1
    2d92:	f0 2d       	mov	r31, r0
    2d94:	0f e7       	ldi	r16, 0x7F	; 127
    2d96:	26 e1       	ldi	r18, 0x16	; 22
    2d98:	44 e6       	ldi	r20, 0x64	; 100
    2d9a:	65 e0       	ldi	r22, 0x05	; 5
    2d9c:	ce 01       	movw	r24, r28
    2d9e:	0f 96       	adiw	r24, 0x0f	; 15
    2da0:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <Show_Big_String>
			Show_Big_String(&TempBuffer,0x30,0x64,0x16,0x7F, digitLength, 0x0F, 0xF0);
    2da4:	e9 2c       	mov	r14, r9
    2da6:	f1 2e       	mov	r15, r17
    2da8:	26 e1       	ldi	r18, 0x16	; 22
    2daa:	44 e6       	ldi	r20, 0x64	; 100
    2dac:	60 e3       	ldi	r22, 0x30	; 48
    2dae:	ce 01       	movw	r24, r28
    2db0:	8b 96       	adiw	r24, 0x2b	; 43
    2db2:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <Show_Big_String>
			Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x04, 0x40);
    2db6:	68 94       	set
    2db8:	aa 24       	eor	r10, r10
    2dba:	a6 f8       	bld	r10, 6
    2dbc:	68 94       	set
    2dbe:	cc 24       	eor	r12, r12
    2dc0:	c2 f8       	bld	r12, 2
    2dc2:	eb 2c       	mov	r14, r11
    2dc4:	fd 2c       	mov	r15, r13
    2dc6:	21 e1       	ldi	r18, 0x11	; 17
    2dc8:	45 e1       	ldi	r20, 0x15	; 21
    2dca:	60 e0       	ldi	r22, 0x00	; 0
    2dcc:	ce 01       	movw	r24, r28
    2dce:	89 96       	adiw	r24, 0x29	; 41
    2dd0:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <Show_Bigger_String>
			Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x04, 0x40);
    2dd4:	21 e1       	ldi	r18, 0x11	; 17
    2dd6:	40 e6       	ldi	r20, 0x60	; 96
    2dd8:	6a e3       	ldi	r22, 0x3A	; 58
    2dda:	ce 01       	movw	r24, r28
    2ddc:	8a 96       	adiw	r24, 0x2a	; 42
    2dde:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <Show_Bigger_String>
    2de2:	d6 cd       	rjmp	.-1108   	; 0x2990 <main+0xc8>
		}
		
		if(LeftDialADCScaled == 6)
    2de4:	f6 e0       	ldi	r31, 0x06	; 6
    2de6:	8f 16       	cp	r8, r31
    2de8:	91 04       	cpc	r9, r1
    2dea:	09 f0       	breq	.+2      	; 0x2dee <main+0x526>
    2dec:	aa c0       	rjmp	.+340    	; 0x2f42 <main+0x67a>
		{
			if(ADC_Change == 1)
    2dee:	21 e0       	ldi	r18, 0x01	; 1
    2df0:	22 16       	cp	r2, r18
    2df2:	31 04       	cpc	r3, r1
    2df4:	c9 f5       	brne	.+114    	; 0x2e68 <main+0x5a0>
			{
				ADC_Change = 0;
				if(LeftDialADCScaled > LeftDialADCOld){
    2df6:	8d a9       	ldd	r24, Y+53	; 0x35
    2df8:	9e a9       	ldd	r25, Y+54	; 0x36
    2dfa:	68 16       	cp	r6, r24
    2dfc:	79 06       	cpc	r7, r25
    2dfe:	90 f4       	brcc	.+36     	; 0x2e24 <main+0x55c>
					Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x0F, 0xF0);
    2e00:	0f 2e       	mov	r0, r31
    2e02:	f0 ef       	ldi	r31, 0xF0	; 240
    2e04:	af 2e       	mov	r10, r31
    2e06:	f0 2d       	mov	r31, r0
    2e08:	0f 2e       	mov	r0, r31
    2e0a:	ff e0       	ldi	r31, 0x0F	; 15
    2e0c:	cf 2e       	mov	r12, r31
    2e0e:	f0 2d       	mov	r31, r0
    2e10:	eb 2c       	mov	r14, r11
    2e12:	fd 2c       	mov	r15, r13
    2e14:	0f e7       	ldi	r16, 0x7F	; 127
    2e16:	21 e1       	ldi	r18, 0x11	; 17
    2e18:	40 e6       	ldi	r20, 0x60	; 96
    2e1a:	6a e3       	ldi	r22, 0x3A	; 58
    2e1c:	ce 01       	movw	r24, r28
    2e1e:	8a 96       	adiw	r24, 0x2a	; 42
    2e20:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <Show_Bigger_String>
				}
				if(LeftDialADCScaled < LeftDialADCOld){
    2e24:	ed a9       	ldd	r30, Y+53	; 0x35
    2e26:	fe a9       	ldd	r31, Y+54	; 0x36
    2e28:	e6 15       	cp	r30, r6
    2e2a:	f7 05       	cpc	r31, r7
    2e2c:	90 f4       	brcc	.+36     	; 0x2e52 <main+0x58a>
					Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x0F, 0xF0);
    2e2e:	0f 2e       	mov	r0, r31
    2e30:	f0 ef       	ldi	r31, 0xF0	; 240
    2e32:	af 2e       	mov	r10, r31
    2e34:	f0 2d       	mov	r31, r0
    2e36:	0f 2e       	mov	r0, r31
    2e38:	ff e0       	ldi	r31, 0x0F	; 15
    2e3a:	cf 2e       	mov	r12, r31
    2e3c:	f0 2d       	mov	r31, r0
    2e3e:	eb 2c       	mov	r14, r11
    2e40:	fd 2c       	mov	r15, r13
    2e42:	0f e7       	ldi	r16, 0x7F	; 127
    2e44:	21 e1       	ldi	r18, 0x11	; 17
    2e46:	45 e1       	ldi	r20, 0x15	; 21
    2e48:	60 e0       	ldi	r22, 0x00	; 0
    2e4a:	ce 01       	movw	r24, r28
    2e4c:	89 96       	adiw	r24, 0x29	; 41
    2e4e:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <Show_Bigger_String>
				}
				LeftDialADCOld = LeftDialADCScaled;
				Delay(500);
    2e52:	84 ef       	ldi	r24, 0xF4	; 244
    2e54:	91 e0       	ldi	r25, 0x01	; 1
    2e56:	0e 94 74 19 	call	0x32e8	; 0x32e8 <Delay>
				Fill_RAM(0x00);
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <Fill_RAM>
					Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x0F, 0xF0);
				}
				if(LeftDialADCScaled < LeftDialADCOld){
					Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x0F, 0xF0);
				}
				LeftDialADCOld = LeftDialADCScaled;
    2e60:	65 2c       	mov	r6, r5
    2e62:	74 2c       	mov	r7, r4
		
		if(LeftDialADCScaled == 6)
		{
			if(ADC_Change == 1)
			{
				ADC_Change = 0;
    2e64:	21 2c       	mov	r2, r1
    2e66:	31 2c       	mov	r3, r1
    2e68:	60 91 d9 05 	lds	r22, 0x05D9	; 0x8005d9 <VoltageData>
    2e6c:	70 91 da 05 	lds	r23, 0x05DA	; 0x8005da <VoltageData+0x1>
    2e70:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <VoltageData+0x2>
    2e74:	90 91 dc 05 	lds	r25, 0x05DC	; 0x8005dc <VoltageData+0x3>
    2e78:	28 ee       	ldi	r18, 0xE8	; 232
    2e7a:	33 e0       	ldi	r19, 0x03	; 3
    2e7c:	40 e0       	ldi	r20, 0x00	; 0
    2e7e:	50 e0       	ldi	r21, 0x00	; 0
    2e80:	0e 94 7d 22 	call	0x44fa	; 0x44fa <__udivmodsi4>
    2e84:	da 01       	movw	r26, r20
    2e86:	c9 01       	movw	r24, r18
    2e88:	4a e0       	ldi	r20, 0x0A	; 10
    2e8a:	be 01       	movw	r22, r28
    2e8c:	65 5d       	subi	r22, 0xD5	; 213
    2e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e90:	0e 94 b9 22 	call	0x4572	; 0x4572 <__itoa_ncheck>
				Delay(500);
				Fill_RAM(0x00);
			}
			
			itoa(VoltageData/1000, TempBuffer, 10);		//display the average cell voltage in Volts instead of millivolts (find the whole volts in the value)
			TempBuffer[1] = '.';						//add the decimal point
    2e94:	8e e2       	ldi	r24, 0x2E	; 46
    2e96:	8c a7       	std	Y+44, r24	; 0x2c
    2e98:	60 91 d9 05 	lds	r22, 0x05D9	; 0x8005d9 <VoltageData>
    2e9c:	70 91 da 05 	lds	r23, 0x05DA	; 0x8005da <VoltageData+0x1>
    2ea0:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <VoltageData+0x2>
    2ea4:	90 91 dc 05 	lds	r25, 0x05DC	; 0x8005dc <VoltageData+0x3>
    2ea8:	28 ee       	ldi	r18, 0xE8	; 232
    2eaa:	33 e0       	ldi	r19, 0x03	; 3
    2eac:	40 e0       	ldi	r20, 0x00	; 0
    2eae:	50 e0       	ldi	r21, 0x00	; 0
    2eb0:	0e 94 7d 22 	call	0x44fa	; 0x44fa <__udivmodsi4>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	4a e0       	ldi	r20, 0x0A	; 10
    2eba:	be 01       	movw	r22, r28
    2ebc:	63 5d       	subi	r22, 0xD3	; 211
    2ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec0:	0e 94 b9 22 	call	0x4572	; 0x4572 <__itoa_ncheck>
			itoa(VoltageData-((VoltageData/1000)*1000), TempBuffer+2, 10);	//add the remaining millivolts
			Show_String(1,TempBuffer,0x28,0x05);		//display the result.
    2ec4:	25 e0       	ldi	r18, 0x05	; 5
    2ec6:	48 e2       	ldi	r20, 0x28	; 40
    2ec8:	be 01       	movw	r22, r28
    2eca:	65 5d       	subi	r22, 0xD5	; 213
    2ecc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <Show_String>
			Show_Big_String(&Voltage,0x05,0x64,0x16,0x7F, 9, 0x0F, 0xF0);
    2ed4:	0f 2e       	mov	r0, r31
    2ed6:	f0 ef       	ldi	r31, 0xF0	; 240
    2ed8:	af 2e       	mov	r10, r31
    2eda:	f0 2d       	mov	r31, r0
    2edc:	0f 2e       	mov	r0, r31
    2ede:	ff e0       	ldi	r31, 0x0F	; 15
    2ee0:	cf 2e       	mov	r12, r31
    2ee2:	f0 2d       	mov	r31, r0
    2ee4:	0f 2e       	mov	r0, r31
    2ee6:	f9 e0       	ldi	r31, 0x09	; 9
    2ee8:	ef 2e       	mov	r14, r31
    2eea:	f1 2c       	mov	r15, r1
    2eec:	f0 2d       	mov	r31, r0
    2eee:	0f e7       	ldi	r16, 0x7F	; 127
    2ef0:	26 e1       	ldi	r18, 0x16	; 22
    2ef2:	44 e6       	ldi	r20, 0x64	; 100
    2ef4:	65 e0       	ldi	r22, 0x05	; 5
    2ef6:	ce 01       	movw	r24, r28
    2ef8:	01 96       	adiw	r24, 0x01	; 1
    2efa:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <Show_Big_String>
			Show_Big_String(&TempBuffer,0x2D,0x64,0x16,0x7F, 4, 0x0F, 0xF0);
    2efe:	68 94       	set
    2f00:	ee 24       	eor	r14, r14
    2f02:	e2 f8       	bld	r14, 2
    2f04:	f1 2c       	mov	r15, r1
    2f06:	26 e1       	ldi	r18, 0x16	; 22
    2f08:	44 e6       	ldi	r20, 0x64	; 100
    2f0a:	6d e2       	ldi	r22, 0x2D	; 45
    2f0c:	ce 01       	movw	r24, r28
    2f0e:	8b 96       	adiw	r24, 0x2b	; 43
    2f10:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <Show_Big_String>
			Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x04, 0x40);
    2f14:	68 94       	set
    2f16:	aa 24       	eor	r10, r10
    2f18:	a6 f8       	bld	r10, 6
    2f1a:	68 94       	set
    2f1c:	cc 24       	eor	r12, r12
    2f1e:	c2 f8       	bld	r12, 2
    2f20:	eb 2c       	mov	r14, r11
    2f22:	fd 2c       	mov	r15, r13
    2f24:	21 e1       	ldi	r18, 0x11	; 17
    2f26:	45 e1       	ldi	r20, 0x15	; 21
    2f28:	60 e0       	ldi	r22, 0x00	; 0
    2f2a:	ce 01       	movw	r24, r28
    2f2c:	89 96       	adiw	r24, 0x29	; 41
    2f2e:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <Show_Bigger_String>
			Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x04, 0x40);
    2f32:	21 e1       	ldi	r18, 0x11	; 17
    2f34:	40 e6       	ldi	r20, 0x60	; 96
    2f36:	6a e3       	ldi	r22, 0x3A	; 58
    2f38:	ce 01       	movw	r24, r28
    2f3a:	8a 96       	adiw	r24, 0x2a	; 42
    2f3c:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <Show_Bigger_String>
    2f40:	27 cd       	rjmp	.-1458   	; 0x2990 <main+0xc8>
		}
		
		if(LeftDialADCScaled > 6)
    2f42:	f7 e0       	ldi	r31, 0x07	; 7
    2f44:	8f 16       	cp	r8, r31
    2f46:	91 04       	cpc	r9, r1
    2f48:	0c f4       	brge	.+2      	; 0x2f4c <main+0x684>
    2f4a:	22 cd       	rjmp	.-1468   	; 0x2990 <main+0xc8>
		{
			if(ADC_Change == 1)
    2f4c:	21 e0       	ldi	r18, 0x01	; 1
    2f4e:	22 16       	cp	r2, r18
    2f50:	31 04       	cpc	r3, r1
    2f52:	c9 f5       	brne	.+114    	; 0x2fc6 <main+0x6fe>
			{
				ADC_Change = 0;
				if(LeftDialADCScaled > LeftDialADCOld){
    2f54:	8d a9       	ldd	r24, Y+53	; 0x35
    2f56:	9e a9       	ldd	r25, Y+54	; 0x36
    2f58:	68 16       	cp	r6, r24
    2f5a:	79 06       	cpc	r7, r25
    2f5c:	90 f4       	brcc	.+36     	; 0x2f82 <main+0x6ba>
					Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x0F, 0xF0);
    2f5e:	0f 2e       	mov	r0, r31
    2f60:	f0 ef       	ldi	r31, 0xF0	; 240
    2f62:	af 2e       	mov	r10, r31
    2f64:	f0 2d       	mov	r31, r0
    2f66:	0f 2e       	mov	r0, r31
    2f68:	ff e0       	ldi	r31, 0x0F	; 15
    2f6a:	cf 2e       	mov	r12, r31
    2f6c:	f0 2d       	mov	r31, r0
    2f6e:	eb 2c       	mov	r14, r11
    2f70:	fd 2c       	mov	r15, r13
    2f72:	0f e7       	ldi	r16, 0x7F	; 127
    2f74:	21 e1       	ldi	r18, 0x11	; 17
    2f76:	40 e6       	ldi	r20, 0x60	; 96
    2f78:	6a e3       	ldi	r22, 0x3A	; 58
    2f7a:	ce 01       	movw	r24, r28
    2f7c:	8a 96       	adiw	r24, 0x2a	; 42
    2f7e:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <Show_Bigger_String>
				}
				if(LeftDialADCScaled < LeftDialADCOld){
    2f82:	ed a9       	ldd	r30, Y+53	; 0x35
    2f84:	fe a9       	ldd	r31, Y+54	; 0x36
    2f86:	e6 15       	cp	r30, r6
    2f88:	f7 05       	cpc	r31, r7
    2f8a:	90 f4       	brcc	.+36     	; 0x2fb0 <main+0x6e8>
					Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x0F, 0xF0);
    2f8c:	0f 2e       	mov	r0, r31
    2f8e:	f0 ef       	ldi	r31, 0xF0	; 240
    2f90:	af 2e       	mov	r10, r31
    2f92:	f0 2d       	mov	r31, r0
    2f94:	0f 2e       	mov	r0, r31
    2f96:	ff e0       	ldi	r31, 0x0F	; 15
    2f98:	cf 2e       	mov	r12, r31
    2f9a:	f0 2d       	mov	r31, r0
    2f9c:	eb 2c       	mov	r14, r11
    2f9e:	fd 2c       	mov	r15, r13
    2fa0:	0f e7       	ldi	r16, 0x7F	; 127
    2fa2:	21 e1       	ldi	r18, 0x11	; 17
    2fa4:	45 e1       	ldi	r20, 0x15	; 21
    2fa6:	60 e0       	ldi	r22, 0x00	; 0
    2fa8:	ce 01       	movw	r24, r28
    2faa:	89 96       	adiw	r24, 0x29	; 41
    2fac:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <Show_Bigger_String>
				}
				LeftDialADCOld = LeftDialADCScaled;
				Delay(500);
    2fb0:	84 ef       	ldi	r24, 0xF4	; 244
    2fb2:	91 e0       	ldi	r25, 0x01	; 1
    2fb4:	0e 94 74 19 	call	0x32e8	; 0x32e8 <Delay>
				Fill_RAM(0x00);
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <Fill_RAM>
					Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x0F, 0xF0);
				}
				if(LeftDialADCScaled < LeftDialADCOld){
					Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x0F, 0xF0);
				}
				LeftDialADCOld = LeftDialADCScaled;
    2fbe:	65 2c       	mov	r6, r5
    2fc0:	74 2c       	mov	r7, r4
		
		if(LeftDialADCScaled > 6)
		{
			if(ADC_Change == 1)
			{
				ADC_Change = 0;
    2fc2:	21 2c       	mov	r2, r1
    2fc4:	31 2c       	mov	r3, r1
				}
				LeftDialADCOld = LeftDialADCScaled;
				Delay(500);
				Fill_RAM(0x00);
			}
			Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x04, 0x40);
    2fc6:	68 94       	set
    2fc8:	aa 24       	eor	r10, r10
    2fca:	a6 f8       	bld	r10, 6
    2fcc:	68 94       	set
    2fce:	cc 24       	eor	r12, r12
    2fd0:	c2 f8       	bld	r12, 2
    2fd2:	eb 2c       	mov	r14, r11
    2fd4:	fd 2c       	mov	r15, r13
    2fd6:	0f e7       	ldi	r16, 0x7F	; 127
    2fd8:	21 e1       	ldi	r18, 0x11	; 17
    2fda:	45 e1       	ldi	r20, 0x15	; 21
    2fdc:	60 e0       	ldi	r22, 0x00	; 0
    2fde:	ce 01       	movw	r24, r28
    2fe0:	89 96       	adiw	r24, 0x29	; 41
    2fe2:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <Show_Bigger_String>
    2fe6:	d4 cc       	rjmp	.-1624   	; 0x2990 <main+0xc8>
		if((LeftDialADCOld != LeftDialADCScaled) /*|| (RightDialADCOld != RightDialADCScaled)*/)
		{
			ADC_Change = 1;
		}
		
		if(LeftDialADCScaled == 3)
    2fe8:	f3 e0       	ldi	r31, 0x03	; 3
    2fea:	8f 16       	cp	r8, r31
    2fec:	91 04       	cpc	r9, r1
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <main+0x72a>
    2ff0:	09 cd       	rjmp	.-1518   	; 0x2a04 <main+0x13c>
			Show_String(1,TempBuffer,0x28,0x05);
			Show_Big_String(&TempBuffer,0x2D,0x64,0x16,0x7F, digitLength, 0x0F, 0xF0); // Print the current throttle percentage
			Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x04, 0x40);
		}
		
		if(LeftDialADCScaled == 4)
    2ff2:	24 e0       	ldi	r18, 0x04	; 4
    2ff4:	82 16       	cp	r8, r18
    2ff6:	91 04       	cpc	r9, r1
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <main+0x734>
    2ffa:	ab cd       	rjmp	.-1194   	; 0x2b52 <main+0x28a>
		CAN_TXMOB(0, 1, &CAN_Dial, 0x400001,0);
		_delay_ms(100);
		
		if((LeftDialADCOld != LeftDialADCScaled) /*|| (RightDialADCOld != RightDialADCScaled)*/)
		{
			ADC_Change = 1;
    2ffc:	2b 2c       	mov	r2, r11
    2ffe:	3d 2c       	mov	r3, r13
    3000:	4a ce       	rjmp	.-876    	; 0x2c96 <main+0x3ce>

00003002 <ADC_init>:
Input   :   none
Returns :   -
============================================================================*/
void ADC_init()
{
	ADMUX = (1 << REFS0)|(1 << AREFEN); /* AVcc with external capacitor */
    3002:	ec e7       	ldi	r30, 0x7C	; 124
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	80 e6       	ldi	r24, 0x60	; 96
    3008:	80 83       	st	Z, r24
	ADMUX &= ~(1 << ADLAR);	/* make sure bits are right adjusted */
    300a:	80 81       	ld	r24, Z
    300c:	8f 7d       	andi	r24, 0xDF	; 223
    300e:	80 83       	st	Z, r24
	ADCSRA = (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0); /* prescale div factor = 128, 125kHz (lowest we can go for best accuracy)*/
    3010:	87 e8       	ldi	r24, 0x87	; 135
    3012:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3016:	08 95       	ret

00003018 <ADC_read>:
Input   :   uint8_t channel - selected analog input channel
Returns :   result - pass the 10 bit ADC number to requesting function
============================================================================*/
uint16_t ADC_read(uint8_t channel)
{
	channel = (ADMUX & 0xe0)|(channel & 0x1F); /* only change the ADMUX bits which signal which channel to use */
    3018:	ec e7       	ldi	r30, 0x7C	; 124
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	90 81       	ld	r25, Z
    301e:	90 7e       	andi	r25, 0xE0	; 224
    3020:	8f 71       	andi	r24, 0x1F	; 31
    3022:	89 2b       	or	r24, r25
	ADMUX = channel;
    3024:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); /* start conversion process */
    3026:	ea e7       	ldi	r30, 0x7A	; 122
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	80 81       	ld	r24, Z
    302c:	80 64       	ori	r24, 0x40	; 64
    302e:	80 83       	st	Z, r24
	while(!(ADCSRA & (1 << ADIF))); /* loop while the conversion is taking place */
    3030:	80 81       	ld	r24, Z
    3032:	84 ff       	sbrs	r24, 4
    3034:	fd cf       	rjmp	.-6      	; 0x3030 <ADC_read+0x18>
	uint16_t result = 0;
	result = ADCL; /* read ADCL, then ADCH --> order is important! */
    3036:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	result |= ((3 & ADCH) << 8);
    303a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	//--> also not sure if this code is correct. other ADC examples return 'ADC' instead. //
	ADCSRA |= (1 << ADIF); /* clear 'complete' status */
    303e:	ea e7       	ldi	r30, 0x7A	; 122
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	90 81       	ld	r25, Z
    3044:	90 61       	ori	r25, 0x10	; 16
    3046:	90 83       	st	Z, r25
	return result; /* pass the 10 bit ADC number to requesting function */
    3048:	23 70       	andi	r18, 0x03	; 3
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	92 2b       	or	r25, r18
    304e:	08 95       	ret

00003050 <CAN_init>:
	if(mob>=0)CAN_TXMOB(mob, 2, tData, 0, 2); //transmit registration and do not wait for finish
	return mob;
}

uint8_t CAN_init()
{
    3050:	ef 92       	push	r14
    3052:	ff 92       	push	r15
    3054:	0f 93       	push	r16
    3056:	1f 93       	push	r17
    3058:	cf 93       	push	r28
    305a:	df 93       	push	r29
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
    3062:	80 e0       	ldi	r24, 0x00	; 0
	{
		CANPAGE = (mobCount << 4);		//select the message object to modify
    3064:	0d ee       	ldi	r16, 0xED	; 237
    3066:	10 e0       	ldi	r17, 0x00	; 0
		CANCDMOB = 0;					//make sure we do not do any actions on this mob.
    3068:	6f ee       	ldi	r22, 0xEF	; 239
    306a:	70 e0       	ldi	r23, 0x00	; 0
		CANSTMOB = 0;					//make sure no interrupts are set.
    306c:	4e ee       	ldi	r20, 0xEE	; 238
    306e:	50 e0       	ldi	r21, 0x00	; 0
		CANIDM1 = 0;
    3070:	27 ef       	ldi	r18, 0xF7	; 247
    3072:	30 e0       	ldi	r19, 0x00	; 0
		CANIDM2 = 0;
    3074:	c6 ef       	ldi	r28, 0xF6	; 246
    3076:	d0 e0       	ldi	r29, 0x00	; 0
		CANIDM3 = 0;
    3078:	a5 ef       	ldi	r26, 0xF5	; 245
    307a:	b0 e0       	ldi	r27, 0x00	; 0
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
    307c:	0f 2e       	mov	r0, r31
    307e:	f4 ef       	ldi	r31, 0xF4	; 244
    3080:	ef 2e       	mov	r14, r31
    3082:	f1 2c       	mov	r15, r1
    3084:	f0 2d       	mov	r31, r0
{
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
	{
		CANPAGE = (mobCount << 4);		//select the message object to modify
    3086:	98 2f       	mov	r25, r24
    3088:	92 95       	swap	r25
    308a:	90 7f       	andi	r25, 0xF0	; 240
    308c:	f8 01       	movw	r30, r16
    308e:	90 83       	st	Z, r25
		CANCDMOB = 0;					//make sure we do not do any actions on this mob.
    3090:	fb 01       	movw	r30, r22
    3092:	10 82       	st	Z, r1
		CANSTMOB = 0;					//make sure no interrupts are set.
    3094:	fa 01       	movw	r30, r20
    3096:	10 82       	st	Z, r1
		CANIDM1 = 0;
    3098:	f9 01       	movw	r30, r18
    309a:	10 82       	st	Z, r1
		CANIDM2 = 0;
    309c:	18 82       	st	Y, r1
		CANIDM3 = 0;
    309e:	1c 92       	st	X, r1
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
    30a0:	f7 01       	movw	r30, r14
    30a2:	10 82       	st	Z, r1

uint8_t CAN_init()
{
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
    30a4:	8f 5f       	subi	r24, 0xFF	; 255
    30a6:	86 30       	cpi	r24, 0x06	; 6
    30a8:	71 f7       	brne	.-36     	; 0x3086 <CAN_init+0x36>
		CANIDM1 = 0;
		CANIDM2 = 0;
		CANIDM3 = 0;
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
	}
	CANBT1 = 0x0E;		//these registers control speed of communication
    30aa:	8e e0       	ldi	r24, 0x0E	; 14
    30ac:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x04;		//currently with these values, it is 250kbps
    30b0:	84 e0       	ldi	r24, 0x04	; 4
    30b2:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x13;		//with 8 TQ per bit.
    30b6:	83 e1       	ldi	r24, 0x13	; 19
    30b8:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANIE2 = (1 << IEMOB4)|(1 << IEMOB5);		//enable interrupts on MOB 4 and 5 for receiving
    30bc:	80 e3       	ldi	r24, 0x30	; 48
    30be:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	CANGIE = (1 << ENRX)|(1 << ENIT);		//enable receive interrupt; enable global CAN interrupt (all interrupts)
    30c2:	80 ea       	ldi	r24, 0xA0	; 160
    30c4:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	//put other initialisation functions here.

	CANGCON = (1 << ENASTB);    // Enable the CAN. 
    30c8:	82 e0       	ldi	r24, 0x02	; 2
    30ca:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    30ce:	ff ef       	ldi	r31, 0xFF	; 255
    30d0:	20 e7       	ldi	r18, 0x70	; 112
    30d2:	82 e0       	ldi	r24, 0x02	; 2
    30d4:	f1 50       	subi	r31, 0x01	; 1
    30d6:	20 40       	sbci	r18, 0x00	; 0
    30d8:	80 40       	sbci	r24, 0x00	; 0
    30da:	e1 f7       	brne	.-8      	; 0x30d4 <CAN_init+0x84>
    30dc:	00 c0       	rjmp	.+0      	; 0x30de <CAN_init+0x8e>
    30de:	00 00       	nop
	_delay_ms(50);
	if(!(CANGSTA & (1<<ENFG)))return 1;
    30e0:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    30e4:	82 fb       	bst	r24, 2
    30e6:	88 27       	eor	r24, r24
    30e8:	80 f9       	bld	r24, 0
	return 0;
}
    30ea:	91 e0       	ldi	r25, 0x01	; 1
    30ec:	89 27       	eor	r24, r25
    30ee:	df 91       	pop	r29
    30f0:	cf 91       	pop	r28
    30f2:	1f 91       	pop	r17
    30f4:	0f 91       	pop	r16
    30f6:	ff 90       	pop	r15
    30f8:	ef 90       	pop	r14
    30fa:	08 95       	ret

000030fc <CAN_RXInit>:

void CAN_RXInit(int8_t mob, uint8_t numBytes, uint32_t IDmsk, uint32_t ID)
{
    30fc:	ef 92       	push	r14
    30fe:	ff 92       	push	r15
    3100:	0f 93       	push	r16
    3102:	1f 93       	push	r17
	CANPAGE = ( mob << 4);		//use the mobth mob for receiving.
    3104:	82 95       	swap	r24
    3106:	80 7f       	andi	r24, 0xF0	; 240
    3108:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	//IDEMSK is sent with the CAN packet, we choose to not require that it be set, and instead focus on ID match
	CANIDM4 = (IDmsk<<03) & 0xF8;	//shifts the value sets RTRMSK to zero and IDEMSK to 0
    310c:	82 2f       	mov	r24, r18
    310e:	88 0f       	add	r24, r24
    3110:	88 0f       	add	r24, r24
    3112:	88 0f       	add	r24, r24
    3114:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM3 = (IDmsk>>05) & 0xFF;
    3118:	da 01       	movw	r26, r20
    311a:	c9 01       	movw	r24, r18
    311c:	68 94       	set
    311e:	14 f8       	bld	r1, 4
    3120:	b6 95       	lsr	r27
    3122:	a7 95       	ror	r26
    3124:	97 95       	ror	r25
    3126:	87 95       	ror	r24
    3128:	16 94       	lsr	r1
    312a:	d1 f7       	brne	.-12     	; 0x3120 <CAN_RXInit+0x24>
    312c:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
	CANIDM2 = (IDmsk>>13) & 0xFF;	
    3130:	da 01       	movw	r26, r20
    3132:	c9 01       	movw	r24, r18
    3134:	07 2e       	mov	r0, r23
    3136:	7d e0       	ldi	r23, 0x0D	; 13
    3138:	b6 95       	lsr	r27
    313a:	a7 95       	ror	r26
    313c:	97 95       	ror	r25
    313e:	87 95       	ror	r24
    3140:	7a 95       	dec	r23
    3142:	d1 f7       	brne	.-12     	; 0x3138 <CAN_RXInit+0x3c>
    3144:	70 2d       	mov	r23, r0
    3146:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (IDmsk>>21) & 0xFF;
    314a:	da 01       	movw	r26, r20
    314c:	c9 01       	movw	r24, r18
    314e:	07 2e       	mov	r0, r23
    3150:	75 e1       	ldi	r23, 0x15	; 21
    3152:	b6 95       	lsr	r27
    3154:	a7 95       	ror	r26
    3156:	97 95       	ror	r25
    3158:	87 95       	ror	r24
    315a:	7a 95       	dec	r23
    315c:	d1 f7       	brne	.-12     	; 0x3152 <CAN_RXInit+0x56>
    315e:	70 2d       	mov	r23, r0
    3160:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG to 0
    3164:	8e 2d       	mov	r24, r14
    3166:	88 0f       	add	r24, r24
    3168:	88 0f       	add	r24, r24
    316a:	88 0f       	add	r24, r24
    316c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = (ID>>05) & 0xFF;
    3170:	d8 01       	movw	r26, r16
    3172:	c7 01       	movw	r24, r14
    3174:	68 94       	set
    3176:	14 f8       	bld	r1, 4
    3178:	b6 95       	lsr	r27
    317a:	a7 95       	ror	r26
    317c:	97 95       	ror	r25
    317e:	87 95       	ror	r24
    3180:	16 94       	lsr	r1
    3182:	d1 f7       	brne	.-12     	; 0x3178 <CAN_RXInit+0x7c>
    3184:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = (ID>>13) & 0xFF;
    3188:	d8 01       	movw	r26, r16
    318a:	c7 01       	movw	r24, r14
    318c:	07 2e       	mov	r0, r23
    318e:	7d e0       	ldi	r23, 0x0D	; 13
    3190:	b6 95       	lsr	r27
    3192:	a7 95       	ror	r26
    3194:	97 95       	ror	r25
    3196:	87 95       	ror	r24
    3198:	7a 95       	dec	r23
    319a:	d1 f7       	brne	.-12     	; 0x3190 <CAN_RXInit+0x94>
    319c:	70 2d       	mov	r23, r0
    319e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (ID>>21) & 0xFF;
    31a2:	d8 01       	movw	r26, r16
    31a4:	c7 01       	movw	r24, r14
    31a6:	07 2e       	mov	r0, r23
    31a8:	75 e1       	ldi	r23, 0x15	; 21
    31aa:	b6 95       	lsr	r27
    31ac:	a7 95       	ror	r26
    31ae:	97 95       	ror	r25
    31b0:	87 95       	ror	r24
    31b2:	7a 95       	dec	r23
    31b4:	d1 f7       	brne	.-12     	; 0x31aa <CAN_RXInit+0xae>
    31b6:	70 2d       	mov	r23, r0
    31b8:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	
	CANCDMOB = (numBytes << DLC0)|(2<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.
    31bc:	60 69       	ori	r22, 0x90	; 144
    31be:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
}
    31c2:	1f 91       	pop	r17
    31c4:	0f 91       	pop	r16
    31c6:	ff 90       	pop	r15
    31c8:	ef 90       	pop	r14
    31ca:	08 95       	ret

000031cc <CAN_TXMOB>:

void CAN_TXMOB(int8_t mob, uint8_t numBytes, uint8_t * data, uint32_t ID, uint8_t ms_loop_until_TXOK)
{
    31cc:	ef 92       	push	r14
    31ce:	0f 93       	push	r16
    31d0:	1f 93       	push	r17
	CANPAGE = ( mob << 4);		//use the mobth mob
    31d2:	82 95       	swap	r24
    31d4:	80 7f       	andi	r24, 0xF0	; 240
    31d6:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	//IDEMSK is sent with the CAN packet, we choose to not set it, and instead the receiver will focus on ID match
	CANSTMOB &= ~(1<<TXOK);
    31da:	ee ee       	ldi	r30, 0xEE	; 238
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	80 81       	ld	r24, Z
    31e0:	8f 7b       	andi	r24, 0xBF	; 191
    31e2:	80 83       	st	Z, r24
	CANIDM4 = 0;
    31e4:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG
    31e8:	80 2f       	mov	r24, r16
    31ea:	88 0f       	add	r24, r24
    31ec:	88 0f       	add	r24, r24
    31ee:	88 0f       	add	r24, r24
    31f0:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = (ID>>05) & 0xFF;
    31f4:	d9 01       	movw	r26, r18
    31f6:	c8 01       	movw	r24, r16
    31f8:	68 94       	set
    31fa:	14 f8       	bld	r1, 4
    31fc:	b6 95       	lsr	r27
    31fe:	a7 95       	ror	r26
    3200:	97 95       	ror	r25
    3202:	87 95       	ror	r24
    3204:	16 94       	lsr	r1
    3206:	d1 f7       	brne	.-12     	; 0x31fc <CAN_TXMOB+0x30>
    3208:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = (ID>>13) & 0xFF;
    320c:	d9 01       	movw	r26, r18
    320e:	c8 01       	movw	r24, r16
    3210:	07 2e       	mov	r0, r23
    3212:	7d e0       	ldi	r23, 0x0D	; 13
    3214:	b6 95       	lsr	r27
    3216:	a7 95       	ror	r26
    3218:	97 95       	ror	r25
    321a:	87 95       	ror	r24
    321c:	7a 95       	dec	r23
    321e:	d1 f7       	brne	.-12     	; 0x3214 <CAN_TXMOB+0x48>
    3220:	70 2d       	mov	r23, r0
    3222:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (ID>>21) & 0xFF;
    3226:	0f 2e       	mov	r0, r31
    3228:	f5 e1       	ldi	r31, 0x15	; 21
    322a:	36 95       	lsr	r19
    322c:	27 95       	ror	r18
    322e:	17 95       	ror	r17
    3230:	07 95       	ror	r16
    3232:	fa 95       	dec	r31
    3234:	d1 f7       	brne	.-12     	; 0x322a <CAN_TXMOB+0x5e>
    3236:	f0 2d       	mov	r31, r0
    3238:	00 93 f3 00 	sts	0x00F3, r16	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	for(uint8_t i = 0; i < numBytes; i++)
    323c:	66 23       	and	r22, r22
    323e:	71 f0       	breq	.+28     	; 0x325c <CAN_TXMOB+0x90>
    3240:	fa 01       	movw	r30, r20
    3242:	8f ef       	ldi	r24, 0xFF	; 255
    3244:	86 0f       	add	r24, r22
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	01 96       	adiw	r24, 0x01	; 1
    324a:	48 0f       	add	r20, r24
    324c:	59 1f       	adc	r21, r25
	{
		CANMSG = data[i];
    324e:	aa ef       	ldi	r26, 0xFA	; 250
    3250:	b0 e0       	ldi	r27, 0x00	; 0
    3252:	81 91       	ld	r24, Z+
    3254:	8c 93       	st	X, r24
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG
	CANIDT3 = (ID>>05) & 0xFF;
	CANIDT2 = (ID>>13) & 0xFF;
	CANIDT1 = (ID>>21) & 0xFF;
	for(uint8_t i = 0; i < numBytes; i++)
    3256:	e4 17       	cp	r30, r20
    3258:	f5 07       	cpc	r31, r21
    325a:	d9 f7       	brne	.-10     	; 0x3252 <CAN_TXMOB+0x86>
	{
		CANMSG = data[i];
	}
	CANCDMOB = (numBytes << DLC0)|(1<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.
    325c:	60 65       	ori	r22, 0x50	; 80
    325e:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	for(uint8_t i = 0; i < ms_loop_until_TXOK; i++)	//loop until specified wait time is up
    3262:	ee 20       	and	r14, r14
    3264:	a1 f0       	breq	.+40     	; 0x328e <CAN_TXMOB+0xc2>
	{
		if((CANSTMOB & (1 << TXOK)))break;		//check for transmission complete
    3266:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    326a:	86 fd       	sbrc	r24, 6
    326c:	10 c0       	rjmp	.+32     	; 0x328e <CAN_TXMOB+0xc2>
    326e:	80 e0       	ldi	r24, 0x00	; 0
    3270:	ee ee       	ldi	r30, 0xEE	; 238
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	03 c0       	rjmp	.+6      	; 0x327c <CAN_TXMOB+0xb0>
    3276:	90 81       	ld	r25, Z
    3278:	96 fd       	sbrc	r25, 6
    327a:	09 c0       	rjmp	.+18     	; 0x328e <CAN_TXMOB+0xc2>
    327c:	af e9       	ldi	r26, 0x9F	; 159
    327e:	bf e0       	ldi	r27, 0x0F	; 15
    3280:	11 97       	sbiw	r26, 0x01	; 1
    3282:	f1 f7       	brne	.-4      	; 0x3280 <CAN_TXMOB+0xb4>
    3284:	00 c0       	rjmp	.+0      	; 0x3286 <CAN_TXMOB+0xba>
    3286:	00 00       	nop
	{
		CANMSG = data[i];
	}
	CANCDMOB = (numBytes << DLC0)|(1<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.

	for(uint8_t i = 0; i < ms_loop_until_TXOK; i++)	//loop until specified wait time is up
    3288:	8f 5f       	subi	r24, 0xFF	; 255
    328a:	e8 12       	cpse	r14, r24
    328c:	f4 cf       	rjmp	.-24     	; 0x3276 <CAN_TXMOB+0xaa>
	{
		if((CANSTMOB & (1 << TXOK)))break;		//check for transmission complete
		_delay_ms(1);								//do nothing for 1 ms
	}
}
    328e:	1f 91       	pop	r17
    3290:	0f 91       	pop	r16
    3292:	ef 90       	pop	r14
    3294:	08 95       	ret

00003296 <CAN_findFreeTXMOB>:

int8_t CAN_findFreeTXMOB()
{
    3296:	cf 93       	push	r28
    3298:	df 93       	push	r29
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
	{
		CANPAGE = ( i << 4);		//use the mobth mob
    329a:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if((CANSTMOB & (1<<TXOK)) || !(CANCDMOB & (1<<CONMOB0))) //if the transmission is complete or the mob has not been setup yet
    329e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    32a2:	86 fd       	sbrc	r24, 6
    32a4:	16 c0       	rjmp	.+44     	; 0x32d2 <CAN_findFreeTXMOB+0x3c>
    32a6:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    32aa:	86 ff       	sbrs	r24, 6
    32ac:	14 c0       	rjmp	.+40     	; 0x32d6 <CAN_findFreeTXMOB+0x40>
    32ae:	81 e0       	ldi	r24, 0x01	; 1

int8_t CAN_findFreeTXMOB()
{
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
	{
		CANPAGE = ( i << 4);		//use the mobth mob
    32b0:	ad ee       	ldi	r26, 0xED	; 237
    32b2:	b0 e0       	ldi	r27, 0x00	; 0
		if((CANSTMOB & (1<<TXOK)) || !(CANCDMOB & (1<<CONMOB0))) //if the transmission is complete or the mob has not been setup yet
    32b4:	ee ee       	ldi	r30, 0xEE	; 238
    32b6:	f0 e0       	ldi	r31, 0x00	; 0
    32b8:	cf ee       	ldi	r28, 0xEF	; 239
    32ba:	d0 e0       	ldi	r29, 0x00	; 0

int8_t CAN_findFreeTXMOB()
{
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
	{
		CANPAGE = ( i << 4);		//use the mobth mob
    32bc:	98 2f       	mov	r25, r24
    32be:	92 95       	swap	r25
    32c0:	90 7f       	andi	r25, 0xF0	; 240
    32c2:	9c 93       	st	X, r25
		if((CANSTMOB & (1<<TXOK)) || !(CANCDMOB & (1<<CONMOB0))) //if the transmission is complete or the mob has not been setup yet
    32c4:	90 81       	ld	r25, Z
    32c6:	96 fd       	sbrc	r25, 6
    32c8:	0c c0       	rjmp	.+24     	; 0x32e2 <CAN_findFreeTXMOB+0x4c>
    32ca:	98 81       	ld	r25, Y
    32cc:	96 fd       	sbrc	r25, 6
    32ce:	05 c0       	rjmp	.+10     	; 0x32da <CAN_findFreeTXMOB+0x44>
    32d0:	08 c0       	rjmp	.+16     	; 0x32e2 <CAN_findFreeTXMOB+0x4c>
	}
}

int8_t CAN_findFreeTXMOB()
{
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	06 c0       	rjmp	.+12     	; 0x32e2 <CAN_findFreeTXMOB+0x4c>
    32d6:	80 e0       	ldi	r24, 0x00	; 0
	{
		CANPAGE = ( i << 4);		//use the mobth mob
		if((CANSTMOB & (1<<TXOK)) || !(CANCDMOB & (1<<CONMOB0))) //if the transmission is complete or the mob has not been setup yet
		{
			return i;			//send back the free mob
    32d8:	04 c0       	rjmp	.+8      	; 0x32e2 <CAN_findFreeTXMOB+0x4c>
	}
}

int8_t CAN_findFreeTXMOB()
{
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
    32da:	8f 5f       	subi	r24, 0xFF	; 255
    32dc:	84 30       	cpi	r24, 0x04	; 4
    32de:	71 f7       	brne	.-36     	; 0x32bc <CAN_findFreeTXMOB+0x26>
		if((CANSTMOB & (1<<TXOK)) || !(CANCDMOB & (1<<CONMOB0))) //if the transmission is complete or the mob has not been setup yet
		{
			return i;			//send back the free mob
		}
	}
	return -1;		//otherwise, none are free
    32e0:	8f ef       	ldi	r24, 0xFF	; 255
    32e2:	df 91       	pop	r29
    32e4:	cf 91       	pop	r28
    32e6:	08 95       	ret

000032e8 <Delay>:
	Write_Data(0x90);			//   Gray Scale Level 12
	Write_Data(0x9C);			//   Gray Scale Level 13
	Write_Data(0xA8);			//   Gray Scale Level 14
	Write_Data(0xB4);			//   Gray Scale Level 15

	Write_Command(0x00);			// Enable Gray Scale Table
    32e8:	00 97       	sbiw	r24, 0x00	; 0
    32ea:	39 f0       	breq	.+14     	; 0x32fa <Delay+0x12>
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	2f 5f       	subi	r18, 0xFF	; 255
    32f2:	3f 4f       	sbci	r19, 0xFF	; 255
    32f4:	82 17       	cp	r24, r18
    32f6:	93 07       	cpc	r25, r19
    32f8:	d9 f7       	brne	.-10     	; 0x32f0 <Delay+0x8>
    32fa:	08 95       	ret

000032fc <Write_Command>:
    32fc:	2d 98       	cbi	0x05, 5	; 5
    32fe:	58 98       	cbi	0x0b, 0	; 11
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <spi_send_byte>
    3306:	2d 9a       	sbi	0x05, 5	; 5
    3308:	58 9a       	sbi	0x0b, 0	; 11
    330a:	08 95       	ret

0000330c <Write_Data>:
    330c:	58 98       	cbi	0x0b, 0	; 11
    330e:	2d 9a       	sbi	0x05, 5	; 5
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <spi_send_byte>
    3316:	2d 9a       	sbi	0x05, 5	; 5
    3318:	58 9a       	sbi	0x0b, 0	; 11
    331a:	08 95       	ret

0000331c <Set_Column_Address>:
    331c:	cf 93       	push	r28
    331e:	df 93       	push	r29
    3320:	d8 2f       	mov	r29, r24
    3322:	c6 2f       	mov	r28, r22
    3324:	85 e1       	ldi	r24, 0x15	; 21
    3326:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    332a:	8d 2f       	mov	r24, r29
    332c:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3330:	8c 2f       	mov	r24, r28
    3332:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3336:	df 91       	pop	r29
    3338:	cf 91       	pop	r28
    333a:	08 95       	ret

0000333c <Set_Row_Address>:
    333c:	cf 93       	push	r28
    333e:	df 93       	push	r29
    3340:	d8 2f       	mov	r29, r24
    3342:	c6 2f       	mov	r28, r22
    3344:	85 e7       	ldi	r24, 0x75	; 117
    3346:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    334a:	8d 2f       	mov	r24, r29
    334c:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3350:	8c 2f       	mov	r24, r28
    3352:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3356:	df 91       	pop	r29
    3358:	cf 91       	pop	r28
    335a:	08 95       	ret

0000335c <Set_Write_RAM>:
    335c:	8c e5       	ldi	r24, 0x5C	; 92
    335e:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    3362:	08 95       	ret

00003364 <Set_Remap_Format>:
    3364:	cf 93       	push	r28
    3366:	c8 2f       	mov	r28, r24
    3368:	80 ea       	ldi	r24, 0xA0	; 160
    336a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    336e:	8c 2f       	mov	r24, r28
    3370:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3374:	81 e1       	ldi	r24, 0x11	; 17
    3376:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    337a:	cf 91       	pop	r28
    337c:	08 95       	ret

0000337e <Set_Start_Line>:
    337e:	cf 93       	push	r28
    3380:	c8 2f       	mov	r28, r24
    3382:	81 ea       	ldi	r24, 0xA1	; 161
    3384:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    3388:	8c 2f       	mov	r24, r28
    338a:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    338e:	cf 91       	pop	r28
    3390:	08 95       	ret

00003392 <Set_Display_Offset>:
    3392:	cf 93       	push	r28
    3394:	c8 2f       	mov	r28, r24
    3396:	82 ea       	ldi	r24, 0xA2	; 162
    3398:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    339c:	8c 2f       	mov	r24, r28
    339e:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    33a2:	cf 91       	pop	r28
    33a4:	08 95       	ret

000033a6 <Set_Function_Selection>:
    33a6:	cf 93       	push	r28
    33a8:	c8 2f       	mov	r28, r24
    33aa:	8b ea       	ldi	r24, 0xAB	; 171
    33ac:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    33b0:	8c 2f       	mov	r24, r28
    33b2:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    33b6:	cf 91       	pop	r28
    33b8:	08 95       	ret

000033ba <Set_Phase_Length>:
    33ba:	cf 93       	push	r28
    33bc:	c8 2f       	mov	r28, r24
    33be:	81 eb       	ldi	r24, 0xB1	; 177
    33c0:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    33c4:	8c 2f       	mov	r24, r28
    33c6:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    33ca:	cf 91       	pop	r28
    33cc:	08 95       	ret

000033ce <Set_Display_Clock>:
    33ce:	cf 93       	push	r28
    33d0:	c8 2f       	mov	r28, r24
    33d2:	83 eb       	ldi	r24, 0xB3	; 179
    33d4:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    33d8:	8c 2f       	mov	r24, r28
    33da:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    33de:	cf 91       	pop	r28
    33e0:	08 95       	ret

000033e2 <Set_Display_Enhancement_A>:
    33e2:	cf 93       	push	r28
    33e4:	df 93       	push	r29
    33e6:	d8 2f       	mov	r29, r24
    33e8:	c6 2f       	mov	r28, r22
    33ea:	84 eb       	ldi	r24, 0xB4	; 180
    33ec:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    33f0:	8d 2f       	mov	r24, r29
    33f2:	80 6a       	ori	r24, 0xA0	; 160
    33f4:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    33f8:	8c 2f       	mov	r24, r28
    33fa:	85 60       	ori	r24, 0x05	; 5
    33fc:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3400:	df 91       	pop	r29
    3402:	cf 91       	pop	r28
    3404:	08 95       	ret

00003406 <Set_GPIO>:
    3406:	cf 93       	push	r28
    3408:	c8 2f       	mov	r28, r24
    340a:	85 eb       	ldi	r24, 0xB5	; 181
    340c:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    3410:	8c 2f       	mov	r24, r28
    3412:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3416:	cf 91       	pop	r28
    3418:	08 95       	ret

0000341a <Set_Precharge_Period>:
    341a:	cf 93       	push	r28
    341c:	c8 2f       	mov	r28, r24
    341e:	86 eb       	ldi	r24, 0xB6	; 182
    3420:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    3424:	8c 2f       	mov	r24, r28
    3426:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    342a:	cf 91       	pop	r28
    342c:	08 95       	ret

0000342e <Set_Precharge_Voltage>:
    342e:	cf 93       	push	r28
    3430:	c8 2f       	mov	r28, r24
    3432:	8b eb       	ldi	r24, 0xBB	; 187
    3434:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    3438:	8c 2f       	mov	r24, r28
    343a:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    343e:	cf 91       	pop	r28
    3440:	08 95       	ret

00003442 <Set_VCOMH>:
    3442:	cf 93       	push	r28
    3444:	c8 2f       	mov	r28, r24
    3446:	8e eb       	ldi	r24, 0xBE	; 190
    3448:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    344c:	8c 2f       	mov	r24, r28
    344e:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3452:	cf 91       	pop	r28
    3454:	08 95       	ret

00003456 <Set_Contrast_Current>:
    3456:	cf 93       	push	r28
    3458:	c8 2f       	mov	r28, r24
    345a:	81 ec       	ldi	r24, 0xC1	; 193
    345c:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    3460:	8c 2f       	mov	r24, r28
    3462:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3466:	cf 91       	pop	r28
    3468:	08 95       	ret

0000346a <Set_Master_Current>:
    346a:	cf 93       	push	r28
    346c:	c8 2f       	mov	r28, r24
    346e:	87 ec       	ldi	r24, 0xC7	; 199
    3470:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    3474:	8c 2f       	mov	r24, r28
    3476:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    347a:	cf 91       	pop	r28
    347c:	08 95       	ret

0000347e <Set_Multiplex_Ratio>:
    347e:	cf 93       	push	r28
    3480:	c8 2f       	mov	r28, r24
    3482:	8a ec       	ldi	r24, 0xCA	; 202
    3484:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    3488:	8c 2f       	mov	r24, r28
    348a:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    348e:	cf 91       	pop	r28
    3490:	08 95       	ret

00003492 <Set_Display_Enhancement_B>:
    3492:	cf 93       	push	r28
    3494:	c8 2f       	mov	r28, r24
    3496:	81 ed       	ldi	r24, 0xD1	; 209
    3498:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    349c:	8c 2f       	mov	r24, r28
    349e:	82 68       	ori	r24, 0x82	; 130
    34a0:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    34a4:	80 e2       	ldi	r24, 0x20	; 32
    34a6:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    34aa:	cf 91       	pop	r28
    34ac:	08 95       	ret

000034ae <Set_Command_Lock>:
    34ae:	cf 93       	push	r28
    34b0:	c8 2f       	mov	r28, r24
    34b2:	8d ef       	ldi	r24, 0xFD	; 253
    34b4:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    34b8:	8c 2f       	mov	r24, r28
    34ba:	82 61       	ori	r24, 0x12	; 18
    34bc:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    34c0:	cf 91       	pop	r28
    34c2:	08 95       	ret

000034c4 <Fill_RAM>:
    34c4:	1f 93       	push	r17
    34c6:	cf 93       	push	r28
    34c8:	df 93       	push	r29
    34ca:	d8 2f       	mov	r29, r24
    34cc:	67 e7       	ldi	r22, 0x77	; 119
    34ce:	80 e0       	ldi	r24, 0x00	; 0
    34d0:	0e 94 8e 19 	call	0x331c	; 0x331c <Set_Column_Address>
    34d4:	6f e7       	ldi	r22, 0x7F	; 127
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	0e 94 9e 19 	call	0x333c	; 0x333c <Set_Row_Address>
    34dc:	0e 94 ae 19 	call	0x335c	; 0x335c <Set_Write_RAM>
    34e0:	10 e0       	ldi	r17, 0x00	; 0
    34e2:	08 c0       	rjmp	.+16     	; 0x34f4 <Fill_RAM+0x30>
    34e4:	8d 2f       	mov	r24, r29
    34e6:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    34ea:	c1 50       	subi	r28, 0x01	; 1
    34ec:	d9 f7       	brne	.-10     	; 0x34e4 <Fill_RAM+0x20>
    34ee:	1f 5f       	subi	r17, 0xFF	; 255
    34f0:	10 38       	cpi	r17, 0x80	; 128
    34f2:	11 f0       	breq	.+4      	; 0x34f8 <Fill_RAM+0x34>
    34f4:	c8 e7       	ldi	r28, 0x78	; 120
    34f6:	f6 cf       	rjmp	.-20     	; 0x34e4 <Fill_RAM+0x20>
    34f8:	df 91       	pop	r29
    34fa:	cf 91       	pop	r28
    34fc:	1f 91       	pop	r17
    34fe:	08 95       	ret

00003500 <Show_Font57>:
    3500:	5f 92       	push	r5
    3502:	6f 92       	push	r6
    3504:	7f 92       	push	r7
    3506:	8f 92       	push	r8
    3508:	9f 92       	push	r9
    350a:	af 92       	push	r10
    350c:	bf 92       	push	r11
    350e:	cf 92       	push	r12
    3510:	df 92       	push	r13
    3512:	ef 92       	push	r14
    3514:	ff 92       	push	r15
    3516:	0f 93       	push	r16
    3518:	1f 93       	push	r17
    351a:	cf 93       	push	r28
    351c:	df 93       	push	r29
    351e:	c4 2f       	mov	r28, r20
    3520:	a2 2e       	mov	r10, r18
    3522:	60 32       	cpi	r22, 0x20	; 32
    3524:	11 f0       	breq	.+4      	; 0x352a <Show_Font57+0x2a>
    3526:	60 52       	subi	r22, 0x20	; 32
    3528:	01 c0       	rjmp	.+2      	; 0x352c <Show_Font57+0x2c>
    352a:	60 e6       	ldi	r22, 0x60	; 96
    352c:	81 30       	cpi	r24, 0x01	; 1
    352e:	71 f4       	brne	.+28     	; 0x354c <Show_Font57+0x4c>
    3530:	70 e0       	ldi	r23, 0x00	; 0
    3532:	61 50       	subi	r22, 0x01	; 1
    3534:	71 09       	sbc	r23, r1
    3536:	6b 01       	movw	r12, r22
    3538:	cc 0c       	add	r12, r12
    353a:	dd 1c       	adc	r13, r13
    353c:	cc 0c       	add	r12, r12
    353e:	dd 1c       	adc	r13, r13
    3540:	6c 0d       	add	r22, r12
    3542:	7d 1d       	adc	r23, r13
    3544:	cb 01       	movw	r24, r22
    3546:	80 50       	subi	r24, 0x00	; 0
    3548:	9f 4f       	sbci	r25, 0xFF	; 255
    354a:	6c 01       	movw	r12, r24
    354c:	85 e1       	ldi	r24, 0x15	; 21
    354e:	0e 94 b2 19 	call	0x3364	; 0x3364 <Set_Remap_Format>
    3552:	d0 e0       	ldi	r29, 0x00	; 0
    3554:	81 2c       	mov	r8, r1
    3556:	0f 2e       	mov	r0, r31
    3558:	fc e1       	ldi	r31, 0x1C	; 28
    355a:	bf 2e       	mov	r11, r31
    355c:	f0 2d       	mov	r31, r0
    355e:	bc 0e       	add	r11, r28
    3560:	0f 2e       	mov	r0, r31
    3562:	f7 e0       	ldi	r31, 0x07	; 7
    3564:	9f 2e       	mov	r9, r31
    3566:	f0 2d       	mov	r31, r0
    3568:	9a 0c       	add	r9, r10
    356a:	f6 01       	movw	r30, r12
    356c:	00 81       	ld	r16, Z
    356e:	d1 30       	cpi	r29, 0x01	; 1
    3570:	39 f4       	brne	.+14     	; 0x3580 <Show_Font57+0x80>
    3572:	ff ef       	ldi	r31, 0xFF	; 255
    3574:	cf 1a       	sub	r12, r31
    3576:	df 0a       	sbc	r13, r31
    3578:	c8 2d       	mov	r28, r8
    357a:	18 2d       	mov	r17, r8
    357c:	58 2c       	mov	r5, r8
    357e:	07 c0       	rjmp	.+14     	; 0x358e <Show_Font57+0x8e>
    3580:	f6 01       	movw	r30, r12
    3582:	51 80       	ldd	r5, Z+1	; 0x01
    3584:	12 81       	ldd	r17, Z+2	; 0x02
    3586:	c3 81       	ldd	r28, Z+3	; 0x03
    3588:	f4 e0       	ldi	r31, 0x04	; 4
    358a:	cf 0e       	add	r12, r31
    358c:	d1 1c       	adc	r13, r1
    358e:	8b 2d       	mov	r24, r11
    3590:	8d 0f       	add	r24, r29
    3592:	68 2f       	mov	r22, r24
    3594:	0e 94 8e 19 	call	0x331c	; 0x331c <Set_Column_Address>
    3598:	69 2d       	mov	r22, r9
    359a:	8a 2d       	mov	r24, r10
    359c:	0e 94 9e 19 	call	0x333c	; 0x333c <Set_Row_Address>
    35a0:	0e 94 ae 19 	call	0x335c	; 0x335c <Set_Write_RAM>
    35a4:	00 fb       	bst	r16, 0
    35a6:	66 24       	eor	r6, r6
    35a8:	60 f8       	bld	r6, 0
    35aa:	71 2c       	mov	r7, r1
    35ac:	c3 01       	movw	r24, r6
    35ae:	82 95       	swap	r24
    35b0:	92 95       	swap	r25
    35b2:	90 7f       	andi	r25, 0xF0	; 240
    35b4:	98 27       	eor	r25, r24
    35b6:	80 7f       	andi	r24, 0xF0	; 240
    35b8:	98 27       	eor	r25, r24
    35ba:	95 2d       	mov	r25, r5
    35bc:	91 70       	andi	r25, 0x01	; 1
    35be:	89 2b       	or	r24, r25
    35c0:	28 2f       	mov	r18, r24
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	b9 01       	movw	r22, r18
    35c6:	66 0f       	add	r22, r22
    35c8:	77 1f       	adc	r23, r23
    35ca:	a9 01       	movw	r20, r18
    35cc:	44 0f       	add	r20, r20
    35ce:	55 1f       	adc	r21, r21
    35d0:	44 0f       	add	r20, r20
    35d2:	55 1f       	adc	r21, r21
    35d4:	46 2b       	or	r20, r22
    35d6:	84 2b       	or	r24, r20
    35d8:	22 0f       	add	r18, r18
    35da:	33 1f       	adc	r19, r19
    35dc:	22 0f       	add	r18, r18
    35de:	33 1f       	adc	r19, r19
    35e0:	22 0f       	add	r18, r18
    35e2:	33 1f       	adc	r19, r19
    35e4:	82 2b       	or	r24, r18
    35e6:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    35ea:	10 fb       	bst	r17, 0
    35ec:	ee 24       	eor	r14, r14
    35ee:	e0 f8       	bld	r14, 0
    35f0:	f1 2c       	mov	r15, r1
    35f2:	c7 01       	movw	r24, r14
    35f4:	82 95       	swap	r24
    35f6:	92 95       	swap	r25
    35f8:	90 7f       	andi	r25, 0xF0	; 240
    35fa:	98 27       	eor	r25, r24
    35fc:	80 7f       	andi	r24, 0xF0	; 240
    35fe:	98 27       	eor	r25, r24
    3600:	9c 2f       	mov	r25, r28
    3602:	91 70       	andi	r25, 0x01	; 1
    3604:	89 2b       	or	r24, r25
    3606:	28 2f       	mov	r18, r24
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	b9 01       	movw	r22, r18
    360c:	66 0f       	add	r22, r22
    360e:	77 1f       	adc	r23, r23
    3610:	a9 01       	movw	r20, r18
    3612:	44 0f       	add	r20, r20
    3614:	55 1f       	adc	r21, r21
    3616:	44 0f       	add	r20, r20
    3618:	55 1f       	adc	r21, r21
    361a:	46 2b       	or	r20, r22
    361c:	84 2b       	or	r24, r20
    361e:	22 0f       	add	r18, r18
    3620:	33 1f       	adc	r19, r19
    3622:	22 0f       	add	r18, r18
    3624:	33 1f       	adc	r19, r19
    3626:	22 0f       	add	r18, r18
    3628:	33 1f       	adc	r19, r19
    362a:	82 2b       	or	r24, r18
    362c:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3630:	90 2f       	mov	r25, r16
    3632:	92 70       	andi	r25, 0x02	; 2
    3634:	99 0f       	add	r25, r25
    3636:	99 0f       	add	r25, r25
    3638:	99 0f       	add	r25, r25
    363a:	51 fa       	bst	r5, 1
    363c:	22 27       	eor	r18, r18
    363e:	20 f9       	bld	r18, 0
    3640:	92 2b       	or	r25, r18
    3642:	29 2f       	mov	r18, r25
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	b9 01       	movw	r22, r18
    3648:	66 0f       	add	r22, r22
    364a:	77 1f       	adc	r23, r23
    364c:	a9 01       	movw	r20, r18
    364e:	44 0f       	add	r20, r20
    3650:	55 1f       	adc	r21, r21
    3652:	44 0f       	add	r20, r20
    3654:	55 1f       	adc	r21, r21
    3656:	46 2b       	or	r20, r22
    3658:	84 2f       	mov	r24, r20
    365a:	89 2b       	or	r24, r25
    365c:	22 0f       	add	r18, r18
    365e:	33 1f       	adc	r19, r19
    3660:	22 0f       	add	r18, r18
    3662:	33 1f       	adc	r19, r19
    3664:	22 0f       	add	r18, r18
    3666:	33 1f       	adc	r19, r19
    3668:	82 2b       	or	r24, r18
    366a:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    366e:	91 2f       	mov	r25, r17
    3670:	92 70       	andi	r25, 0x02	; 2
    3672:	99 0f       	add	r25, r25
    3674:	99 0f       	add	r25, r25
    3676:	99 0f       	add	r25, r25
    3678:	c1 fb       	bst	r28, 1
    367a:	22 27       	eor	r18, r18
    367c:	20 f9       	bld	r18, 0
    367e:	92 2b       	or	r25, r18
    3680:	29 2f       	mov	r18, r25
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	b9 01       	movw	r22, r18
    3686:	66 0f       	add	r22, r22
    3688:	77 1f       	adc	r23, r23
    368a:	a9 01       	movw	r20, r18
    368c:	44 0f       	add	r20, r20
    368e:	55 1f       	adc	r21, r21
    3690:	44 0f       	add	r20, r20
    3692:	55 1f       	adc	r21, r21
    3694:	46 2b       	or	r20, r22
    3696:	84 2f       	mov	r24, r20
    3698:	89 2b       	or	r24, r25
    369a:	22 0f       	add	r18, r18
    369c:	33 1f       	adc	r19, r19
    369e:	22 0f       	add	r18, r18
    36a0:	33 1f       	adc	r19, r19
    36a2:	22 0f       	add	r18, r18
    36a4:	33 1f       	adc	r19, r19
    36a6:	82 2b       	or	r24, r18
    36a8:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    36ac:	90 2f       	mov	r25, r16
    36ae:	94 70       	andi	r25, 0x04	; 4
    36b0:	99 0f       	add	r25, r25
    36b2:	99 0f       	add	r25, r25
    36b4:	52 fa       	bst	r5, 2
    36b6:	22 27       	eor	r18, r18
    36b8:	20 f9       	bld	r18, 0
    36ba:	92 2b       	or	r25, r18
    36bc:	29 2f       	mov	r18, r25
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	b9 01       	movw	r22, r18
    36c2:	66 0f       	add	r22, r22
    36c4:	77 1f       	adc	r23, r23
    36c6:	a9 01       	movw	r20, r18
    36c8:	44 0f       	add	r20, r20
    36ca:	55 1f       	adc	r21, r21
    36cc:	44 0f       	add	r20, r20
    36ce:	55 1f       	adc	r21, r21
    36d0:	46 2b       	or	r20, r22
    36d2:	84 2f       	mov	r24, r20
    36d4:	89 2b       	or	r24, r25
    36d6:	22 0f       	add	r18, r18
    36d8:	33 1f       	adc	r19, r19
    36da:	22 0f       	add	r18, r18
    36dc:	33 1f       	adc	r19, r19
    36de:	22 0f       	add	r18, r18
    36e0:	33 1f       	adc	r19, r19
    36e2:	82 2b       	or	r24, r18
    36e4:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    36e8:	91 2f       	mov	r25, r17
    36ea:	94 70       	andi	r25, 0x04	; 4
    36ec:	99 0f       	add	r25, r25
    36ee:	99 0f       	add	r25, r25
    36f0:	c2 fb       	bst	r28, 2
    36f2:	22 27       	eor	r18, r18
    36f4:	20 f9       	bld	r18, 0
    36f6:	92 2b       	or	r25, r18
    36f8:	29 2f       	mov	r18, r25
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	b9 01       	movw	r22, r18
    36fe:	66 0f       	add	r22, r22
    3700:	77 1f       	adc	r23, r23
    3702:	a9 01       	movw	r20, r18
    3704:	44 0f       	add	r20, r20
    3706:	55 1f       	adc	r21, r21
    3708:	44 0f       	add	r20, r20
    370a:	55 1f       	adc	r21, r21
    370c:	46 2b       	or	r20, r22
    370e:	84 2f       	mov	r24, r20
    3710:	89 2b       	or	r24, r25
    3712:	22 0f       	add	r18, r18
    3714:	33 1f       	adc	r19, r19
    3716:	22 0f       	add	r18, r18
    3718:	33 1f       	adc	r19, r19
    371a:	22 0f       	add	r18, r18
    371c:	33 1f       	adc	r19, r19
    371e:	82 2b       	or	r24, r18
    3720:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3724:	90 2f       	mov	r25, r16
    3726:	98 70       	andi	r25, 0x08	; 8
    3728:	99 0f       	add	r25, r25
    372a:	53 fa       	bst	r5, 3
    372c:	22 27       	eor	r18, r18
    372e:	20 f9       	bld	r18, 0
    3730:	92 2b       	or	r25, r18
    3732:	29 2f       	mov	r18, r25
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	b9 01       	movw	r22, r18
    3738:	66 0f       	add	r22, r22
    373a:	77 1f       	adc	r23, r23
    373c:	a9 01       	movw	r20, r18
    373e:	44 0f       	add	r20, r20
    3740:	55 1f       	adc	r21, r21
    3742:	44 0f       	add	r20, r20
    3744:	55 1f       	adc	r21, r21
    3746:	46 2b       	or	r20, r22
    3748:	84 2f       	mov	r24, r20
    374a:	89 2b       	or	r24, r25
    374c:	22 0f       	add	r18, r18
    374e:	33 1f       	adc	r19, r19
    3750:	22 0f       	add	r18, r18
    3752:	33 1f       	adc	r19, r19
    3754:	22 0f       	add	r18, r18
    3756:	33 1f       	adc	r19, r19
    3758:	82 2b       	or	r24, r18
    375a:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    375e:	91 2f       	mov	r25, r17
    3760:	98 70       	andi	r25, 0x08	; 8
    3762:	99 0f       	add	r25, r25
    3764:	c3 fb       	bst	r28, 3
    3766:	22 27       	eor	r18, r18
    3768:	20 f9       	bld	r18, 0
    376a:	92 2b       	or	r25, r18
    376c:	29 2f       	mov	r18, r25
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	b9 01       	movw	r22, r18
    3772:	66 0f       	add	r22, r22
    3774:	77 1f       	adc	r23, r23
    3776:	a9 01       	movw	r20, r18
    3778:	44 0f       	add	r20, r20
    377a:	55 1f       	adc	r21, r21
    377c:	44 0f       	add	r20, r20
    377e:	55 1f       	adc	r21, r21
    3780:	46 2b       	or	r20, r22
    3782:	84 2f       	mov	r24, r20
    3784:	89 2b       	or	r24, r25
    3786:	22 0f       	add	r18, r18
    3788:	33 1f       	adc	r19, r19
    378a:	22 0f       	add	r18, r18
    378c:	33 1f       	adc	r19, r19
    378e:	22 0f       	add	r18, r18
    3790:	33 1f       	adc	r19, r19
    3792:	82 2b       	or	r24, r18
    3794:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3798:	90 2f       	mov	r25, r16
    379a:	90 71       	andi	r25, 0x10	; 16
    379c:	39 2f       	mov	r19, r25
    379e:	33 0f       	add	r19, r19
    37a0:	33 0f       	add	r19, r19
    37a2:	33 0f       	add	r19, r19
    37a4:	25 2d       	mov	r18, r5
    37a6:	20 71       	andi	r18, 0x10	; 16
    37a8:	82 2f       	mov	r24, r18
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	95 95       	asr	r25
    37ae:	87 95       	ror	r24
    37b0:	93 2f       	mov	r25, r19
    37b2:	98 2b       	or	r25, r24
    37b4:	29 2f       	mov	r18, r25
    37b6:	26 95       	lsr	r18
    37b8:	89 2f       	mov	r24, r25
    37ba:	86 95       	lsr	r24
    37bc:	86 95       	lsr	r24
    37be:	28 2b       	or	r18, r24
    37c0:	29 2b       	or	r18, r25
    37c2:	89 2f       	mov	r24, r25
    37c4:	86 95       	lsr	r24
    37c6:	86 95       	lsr	r24
    37c8:	86 95       	lsr	r24
    37ca:	82 2b       	or	r24, r18
    37cc:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    37d0:	91 2f       	mov	r25, r17
    37d2:	90 71       	andi	r25, 0x10	; 16
    37d4:	39 2f       	mov	r19, r25
    37d6:	33 0f       	add	r19, r19
    37d8:	33 0f       	add	r19, r19
    37da:	33 0f       	add	r19, r19
    37dc:	2c 2f       	mov	r18, r28
    37de:	20 71       	andi	r18, 0x10	; 16
    37e0:	82 2f       	mov	r24, r18
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	95 95       	asr	r25
    37e6:	87 95       	ror	r24
    37e8:	93 2f       	mov	r25, r19
    37ea:	98 2b       	or	r25, r24
    37ec:	29 2f       	mov	r18, r25
    37ee:	26 95       	lsr	r18
    37f0:	89 2f       	mov	r24, r25
    37f2:	86 95       	lsr	r24
    37f4:	86 95       	lsr	r24
    37f6:	28 2b       	or	r18, r24
    37f8:	29 2b       	or	r18, r25
    37fa:	89 2f       	mov	r24, r25
    37fc:	86 95       	lsr	r24
    37fe:	86 95       	lsr	r24
    3800:	86 95       	lsr	r24
    3802:	82 2b       	or	r24, r18
    3804:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3808:	90 2f       	mov	r25, r16
    380a:	90 72       	andi	r25, 0x20	; 32
    380c:	39 2f       	mov	r19, r25
    380e:	33 0f       	add	r19, r19
    3810:	33 0f       	add	r19, r19
    3812:	25 2d       	mov	r18, r5
    3814:	20 72       	andi	r18, 0x20	; 32
    3816:	82 2f       	mov	r24, r18
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	95 95       	asr	r25
    381c:	87 95       	ror	r24
    381e:	95 95       	asr	r25
    3820:	87 95       	ror	r24
    3822:	93 2f       	mov	r25, r19
    3824:	98 2b       	or	r25, r24
    3826:	29 2f       	mov	r18, r25
    3828:	26 95       	lsr	r18
    382a:	89 2f       	mov	r24, r25
    382c:	86 95       	lsr	r24
    382e:	86 95       	lsr	r24
    3830:	28 2b       	or	r18, r24
    3832:	29 2b       	or	r18, r25
    3834:	89 2f       	mov	r24, r25
    3836:	86 95       	lsr	r24
    3838:	86 95       	lsr	r24
    383a:	86 95       	lsr	r24
    383c:	82 2b       	or	r24, r18
    383e:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3842:	91 2f       	mov	r25, r17
    3844:	90 72       	andi	r25, 0x20	; 32
    3846:	39 2f       	mov	r19, r25
    3848:	33 0f       	add	r19, r19
    384a:	33 0f       	add	r19, r19
    384c:	2c 2f       	mov	r18, r28
    384e:	20 72       	andi	r18, 0x20	; 32
    3850:	82 2f       	mov	r24, r18
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	95 95       	asr	r25
    3856:	87 95       	ror	r24
    3858:	95 95       	asr	r25
    385a:	87 95       	ror	r24
    385c:	93 2f       	mov	r25, r19
    385e:	98 2b       	or	r25, r24
    3860:	29 2f       	mov	r18, r25
    3862:	26 95       	lsr	r18
    3864:	89 2f       	mov	r24, r25
    3866:	86 95       	lsr	r24
    3868:	86 95       	lsr	r24
    386a:	28 2b       	or	r18, r24
    386c:	29 2b       	or	r18, r25
    386e:	89 2f       	mov	r24, r25
    3870:	86 95       	lsr	r24
    3872:	86 95       	lsr	r24
    3874:	86 95       	lsr	r24
    3876:	82 2b       	or	r24, r18
    3878:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    387c:	90 2f       	mov	r25, r16
    387e:	90 74       	andi	r25, 0x40	; 64
    3880:	39 2f       	mov	r19, r25
    3882:	33 0f       	add	r19, r19
    3884:	25 2d       	mov	r18, r5
    3886:	20 74       	andi	r18, 0x40	; 64
    3888:	82 2f       	mov	r24, r18
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	95 95       	asr	r25
    388e:	87 95       	ror	r24
    3890:	95 95       	asr	r25
    3892:	87 95       	ror	r24
    3894:	95 95       	asr	r25
    3896:	87 95       	ror	r24
    3898:	93 2f       	mov	r25, r19
    389a:	98 2b       	or	r25, r24
    389c:	29 2f       	mov	r18, r25
    389e:	26 95       	lsr	r18
    38a0:	89 2f       	mov	r24, r25
    38a2:	86 95       	lsr	r24
    38a4:	86 95       	lsr	r24
    38a6:	28 2b       	or	r18, r24
    38a8:	29 2b       	or	r18, r25
    38aa:	89 2f       	mov	r24, r25
    38ac:	86 95       	lsr	r24
    38ae:	86 95       	lsr	r24
    38b0:	86 95       	lsr	r24
    38b2:	82 2b       	or	r24, r18
    38b4:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    38b8:	91 2f       	mov	r25, r17
    38ba:	90 74       	andi	r25, 0x40	; 64
    38bc:	39 2f       	mov	r19, r25
    38be:	33 0f       	add	r19, r19
    38c0:	2c 2f       	mov	r18, r28
    38c2:	20 74       	andi	r18, 0x40	; 64
    38c4:	82 2f       	mov	r24, r18
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	95 95       	asr	r25
    38ca:	87 95       	ror	r24
    38cc:	95 95       	asr	r25
    38ce:	87 95       	ror	r24
    38d0:	95 95       	asr	r25
    38d2:	87 95       	ror	r24
    38d4:	93 2f       	mov	r25, r19
    38d6:	98 2b       	or	r25, r24
    38d8:	29 2f       	mov	r18, r25
    38da:	26 95       	lsr	r18
    38dc:	89 2f       	mov	r24, r25
    38de:	86 95       	lsr	r24
    38e0:	86 95       	lsr	r24
    38e2:	28 2b       	or	r18, r24
    38e4:	29 2b       	or	r18, r25
    38e6:	89 2f       	mov	r24, r25
    38e8:	86 95       	lsr	r24
    38ea:	86 95       	lsr	r24
    38ec:	86 95       	lsr	r24
    38ee:	82 2b       	or	r24, r18
    38f0:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    38f4:	25 2d       	mov	r18, r5
    38f6:	20 78       	andi	r18, 0x80	; 128
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	35 95       	asr	r19
    38fc:	27 95       	ror	r18
    38fe:	35 95       	asr	r19
    3900:	27 95       	ror	r18
    3902:	35 95       	asr	r19
    3904:	27 95       	ror	r18
    3906:	35 95       	asr	r19
    3908:	27 95       	ror	r18
    390a:	80 2f       	mov	r24, r16
    390c:	80 78       	andi	r24, 0x80	; 128
    390e:	28 2b       	or	r18, r24
    3910:	92 2f       	mov	r25, r18
    3912:	96 95       	lsr	r25
    3914:	82 2f       	mov	r24, r18
    3916:	86 95       	lsr	r24
    3918:	86 95       	lsr	r24
    391a:	89 2b       	or	r24, r25
    391c:	82 2b       	or	r24, r18
    391e:	26 95       	lsr	r18
    3920:	26 95       	lsr	r18
    3922:	26 95       	lsr	r18
    3924:	82 2b       	or	r24, r18
    3926:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    392a:	c0 78       	andi	r28, 0x80	; 128
    392c:	2c 2f       	mov	r18, r28
    392e:	30 e0       	ldi	r19, 0x00	; 0
    3930:	35 95       	asr	r19
    3932:	27 95       	ror	r18
    3934:	35 95       	asr	r19
    3936:	27 95       	ror	r18
    3938:	35 95       	asr	r19
    393a:	27 95       	ror	r18
    393c:	35 95       	asr	r19
    393e:	27 95       	ror	r18
    3940:	81 2f       	mov	r24, r17
    3942:	80 78       	andi	r24, 0x80	; 128
    3944:	28 2b       	or	r18, r24
    3946:	92 2f       	mov	r25, r18
    3948:	96 95       	lsr	r25
    394a:	82 2f       	mov	r24, r18
    394c:	86 95       	lsr	r24
    394e:	86 95       	lsr	r24
    3950:	89 2b       	or	r24, r25
    3952:	82 2b       	or	r24, r18
    3954:	26 95       	lsr	r18
    3956:	26 95       	lsr	r18
    3958:	26 95       	lsr	r18
    395a:	82 2b       	or	r24, r18
    395c:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3960:	df 5f       	subi	r29, 0xFF	; 255
    3962:	d2 30       	cpi	r29, 0x02	; 2
    3964:	09 f0       	breq	.+2      	; 0x3968 <Show_Font57+0x468>
    3966:	01 ce       	rjmp	.-1022   	; 0x356a <Show_Font57+0x6a>
    3968:	84 e1       	ldi	r24, 0x14	; 20
    396a:	0e 94 b2 19 	call	0x3364	; 0x3364 <Set_Remap_Format>
    396e:	df 91       	pop	r29
    3970:	cf 91       	pop	r28
    3972:	1f 91       	pop	r17
    3974:	0f 91       	pop	r16
    3976:	ff 90       	pop	r15
    3978:	ef 90       	pop	r14
    397a:	df 90       	pop	r13
    397c:	cf 90       	pop	r12
    397e:	bf 90       	pop	r11
    3980:	af 90       	pop	r10
    3982:	9f 90       	pop	r9
    3984:	8f 90       	pop	r8
    3986:	7f 90       	pop	r7
    3988:	6f 90       	pop	r6
    398a:	5f 90       	pop	r5
    398c:	08 95       	ret

0000398e <Show_Bigger_Char>:
    398e:	3f 92       	push	r3
    3990:	4f 92       	push	r4
    3992:	5f 92       	push	r5
    3994:	6f 92       	push	r6
    3996:	7f 92       	push	r7
    3998:	8f 92       	push	r8
    399a:	9f 92       	push	r9
    399c:	af 92       	push	r10
    399e:	bf 92       	push	r11
    39a0:	cf 92       	push	r12
    39a2:	df 92       	push	r13
    39a4:	ef 92       	push	r14
    39a6:	ff 92       	push	r15
    39a8:	0f 93       	push	r16
    39aa:	1f 93       	push	r17
    39ac:	cf 93       	push	r28
    39ae:	df 93       	push	r29
    39b0:	d8 2f       	mov	r29, r24
    39b2:	c2 2f       	mov	r28, r18
    39b4:	0f 2e       	mov	r0, r31
    39b6:	fc e1       	ldi	r31, 0x1C	; 28
    39b8:	4f 2e       	mov	r4, r31
    39ba:	f0 2d       	mov	r31, r0
    39bc:	44 0e       	add	r4, r20
    39be:	0f 2e       	mov	r0, r31
    39c0:	fc e1       	ldi	r31, 0x1C	; 28
    39c2:	5f 2e       	mov	r5, r31
    39c4:	f0 2d       	mov	r31, r0
    39c6:	56 0e       	add	r5, r22
    39c8:	64 2d       	mov	r22, r4
    39ca:	85 2d       	mov	r24, r5
    39cc:	0e 94 8e 19 	call	0x331c	; 0x331c <Set_Column_Address>
    39d0:	69 e1       	ldi	r22, 0x19	; 25
    39d2:	6c 0f       	add	r22, r28
    39d4:	8c 2f       	mov	r24, r28
    39d6:	0e 94 9e 19 	call	0x333c	; 0x333c <Set_Row_Address>
    39da:	0e 94 ae 19 	call	0x335c	; 0x335c <Set_Write_RAM>
    39de:	ff 24       	eor	r15, r15
    39e0:	f3 94       	inc	r15
    39e2:	fc 0e       	add	r15, r28
    39e4:	8d 2f       	mov	r24, r29
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	80 97       	sbiw	r24, 0x20	; 32
    39ea:	42 e3       	ldi	r20, 0x32	; 50
    39ec:	48 9f       	mul	r20, r24
    39ee:	90 01       	movw	r18, r0
    39f0:	49 9f       	mul	r20, r25
    39f2:	30 0d       	add	r19, r0
    39f4:	11 24       	eor	r1, r1
    39f6:	b9 01       	movw	r22, r18
    39f8:	69 52       	subi	r22, 0x29	; 41
    39fa:	77 4f       	sbci	r23, 0xF7	; 247
    39fc:	4b 01       	movw	r8, r22
    39fe:	0f 2e       	mov	r0, r31
    3a00:	fa e1       	ldi	r31, 0x1A	; 26
    3a02:	3f 2e       	mov	r3, r31
    3a04:	f0 2d       	mov	r31, r0
    3a06:	3c 0e       	add	r3, r28
    3a08:	aa 24       	eor	r10, r10
    3a0a:	a3 94       	inc	r10
    3a0c:	b1 2c       	mov	r11, r1
    3a0e:	0f 2e       	mov	r0, r31
    3a10:	fe e1       	ldi	r31, 0x1E	; 30
    3a12:	df 2e       	mov	r13, r31
    3a14:	f0 2d       	mov	r31, r0
    3a16:	dc 0e       	add	r13, r28
    3a18:	95 c0       	rjmp	.+298    	; 0x3b44 <Show_Bigger_Char+0x1b6>
    3a1a:	04 30       	cpi	r16, 0x04	; 4
    3a1c:	11 05       	cpc	r17, r1
    3a1e:	4c f5       	brge	.+82     	; 0x3a72 <Show_Bigger_Char+0xe4>
    3a20:	9e 01       	movw	r18, r28
    3a22:	2a 50       	subi	r18, 0x0A	; 10
    3a24:	31 09       	sbc	r19, r1
    3a26:	f3 01       	movw	r30, r6
    3a28:	94 91       	lpm	r25, Z
    3a2a:	ae 01       	movw	r20, r28
    3a2c:	49 50       	subi	r20, 0x09	; 9
    3a2e:	51 09       	sbc	r21, r1
    3a30:	b5 01       	movw	r22, r10
    3a32:	02 c0       	rjmp	.+4      	; 0x3a38 <Show_Bigger_Char+0xaa>
    3a34:	66 0f       	add	r22, r22
    3a36:	77 1f       	adc	r23, r23
    3a38:	4a 95       	dec	r20
    3a3a:	e2 f7       	brpl	.-8      	; 0x3a34 <Show_Bigger_Char+0xa6>
    3a3c:	89 2f       	mov	r24, r25
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	86 23       	and	r24, r22
    3a42:	97 23       	and	r25, r23
    3a44:	18 16       	cp	r1, r24
    3a46:	19 06       	cpc	r1, r25
    3a48:	14 f4       	brge	.+4      	; 0x3a4e <Show_Bigger_Char+0xc0>
    3a4a:	8c 2d       	mov	r24, r12
    3a4c:	01 c0       	rjmp	.+2      	; 0x3a50 <Show_Bigger_Char+0xc2>
    3a4e:	80 e0       	ldi	r24, 0x00	; 0
    3a50:	f3 01       	movw	r30, r6
    3a52:	94 91       	lpm	r25, Z
    3a54:	a5 01       	movw	r20, r10
    3a56:	02 c0       	rjmp	.+4      	; 0x3a5c <Show_Bigger_Char+0xce>
    3a58:	44 0f       	add	r20, r20
    3a5a:	55 1f       	adc	r21, r21
    3a5c:	2a 95       	dec	r18
    3a5e:	e2 f7       	brpl	.-8      	; 0x3a58 <Show_Bigger_Char+0xca>
    3a60:	29 2f       	mov	r18, r25
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	24 23       	and	r18, r20
    3a66:	35 23       	and	r19, r21
    3a68:	12 16       	cp	r1, r18
    3a6a:	13 06       	cpc	r1, r19
    3a6c:	1c f4       	brge	.+6      	; 0x3a74 <Show_Bigger_Char+0xe6>
    3a6e:	8e 0d       	add	r24, r14
    3a70:	01 c0       	rjmp	.+2      	; 0x3a74 <Show_Bigger_Char+0xe6>
    3a72:	80 e0       	ldi	r24, 0x00	; 0
    3a74:	98 01       	movw	r18, r16
    3a76:	24 50       	subi	r18, 0x04	; 4
    3a78:	31 09       	sbc	r19, r1
    3a7a:	24 30       	cpi	r18, 0x04	; 4
    3a7c:	31 05       	cpc	r19, r1
    3a7e:	28 f5       	brcc	.+74     	; 0x3aca <Show_Bigger_Char+0x13c>
    3a80:	ae 01       	movw	r20, r28
    3a82:	42 50       	subi	r20, 0x02	; 2
    3a84:	51 09       	sbc	r21, r1
    3a86:	f4 01       	movw	r30, r8
    3a88:	24 91       	lpm	r18, Z
    3a8a:	be 01       	movw	r22, r28
    3a8c:	61 50       	subi	r22, 0x01	; 1
    3a8e:	71 09       	sbc	r23, r1
    3a90:	f5 01       	movw	r30, r10
    3a92:	02 c0       	rjmp	.+4      	; 0x3a98 <Show_Bigger_Char+0x10a>
    3a94:	ee 0f       	add	r30, r30
    3a96:	ff 1f       	adc	r31, r31
    3a98:	6a 95       	dec	r22
    3a9a:	e2 f7       	brpl	.-8      	; 0x3a94 <Show_Bigger_Char+0x106>
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	2e 23       	and	r18, r30
    3aa0:	3f 23       	and	r19, r31
    3aa2:	12 16       	cp	r1, r18
    3aa4:	13 06       	cpc	r1, r19
    3aa6:	0c f4       	brge	.+2      	; 0x3aaa <Show_Bigger_Char+0x11c>
    3aa8:	8c 0d       	add	r24, r12
    3aaa:	f4 01       	movw	r30, r8
    3aac:	24 91       	lpm	r18, Z
    3aae:	b5 01       	movw	r22, r10
    3ab0:	02 c0       	rjmp	.+4      	; 0x3ab6 <Show_Bigger_Char+0x128>
    3ab2:	66 0f       	add	r22, r22
    3ab4:	77 1f       	adc	r23, r23
    3ab6:	4a 95       	dec	r20
    3ab8:	e2 f7       	brpl	.-8      	; 0x3ab2 <Show_Bigger_Char+0x124>
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	26 23       	and	r18, r22
    3abe:	37 23       	and	r19, r23
    3ac0:	12 16       	cp	r1, r18
    3ac2:	13 06       	cpc	r1, r19
    3ac4:	34 f5       	brge	.+76     	; 0x3b12 <Show_Bigger_Char+0x184>
    3ac6:	8e 0d       	add	r24, r14
    3ac8:	24 c0       	rjmp	.+72     	; 0x3b12 <Show_Bigger_Char+0x184>
    3aca:	6c 2f       	mov	r22, r28
    3acc:	f4 01       	movw	r30, r8
    3ace:	94 91       	lpm	r25, Z
    3ad0:	9e 01       	movw	r18, r28
    3ad2:	2f 5f       	subi	r18, 0xFF	; 255
    3ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ad6:	a5 01       	movw	r20, r10
    3ad8:	02 c0       	rjmp	.+4      	; 0x3ade <Show_Bigger_Char+0x150>
    3ada:	44 0f       	add	r20, r20
    3adc:	55 1f       	adc	r21, r21
    3ade:	2a 95       	dec	r18
    3ae0:	e2 f7       	brpl	.-8      	; 0x3ada <Show_Bigger_Char+0x14c>
    3ae2:	29 2f       	mov	r18, r25
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	24 23       	and	r18, r20
    3ae8:	35 23       	and	r19, r21
    3aea:	12 16       	cp	r1, r18
    3aec:	13 06       	cpc	r1, r19
    3aee:	0c f4       	brge	.+2      	; 0x3af2 <Show_Bigger_Char+0x164>
    3af0:	8c 0d       	add	r24, r12
    3af2:	f4 01       	movw	r30, r8
    3af4:	94 91       	lpm	r25, Z
    3af6:	a5 01       	movw	r20, r10
    3af8:	02 c0       	rjmp	.+4      	; 0x3afe <Show_Bigger_Char+0x170>
    3afa:	44 0f       	add	r20, r20
    3afc:	55 1f       	adc	r21, r21
    3afe:	6a 95       	dec	r22
    3b00:	e2 f7       	brpl	.-8      	; 0x3afa <Show_Bigger_Char+0x16c>
    3b02:	29 2f       	mov	r18, r25
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	24 23       	and	r18, r20
    3b08:	35 23       	and	r19, r21
    3b0a:	12 16       	cp	r1, r18
    3b0c:	13 06       	cpc	r1, r19
    3b0e:	0c f4       	brge	.+2      	; 0x3b12 <Show_Bigger_Char+0x184>
    3b10:	8e 0d       	add	r24, r14
    3b12:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3b16:	0f 5f       	subi	r16, 0xFF	; 255
    3b18:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1a:	22 97       	sbiw	r28, 0x02	; 2
    3b1c:	08 30       	cpi	r16, 0x08	; 8
    3b1e:	11 05       	cpc	r17, r1
    3b20:	09 f0       	breq	.+2      	; 0x3b24 <Show_Bigger_Char+0x196>
    3b22:	7b cf       	rjmp	.-266    	; 0x3a1a <Show_Bigger_Char+0x8c>
    3b24:	64 2d       	mov	r22, r4
    3b26:	85 2d       	mov	r24, r5
    3b28:	0e 94 8e 19 	call	0x331c	; 0x331c <Set_Column_Address>
    3b2c:	6d 2d       	mov	r22, r13
    3b2e:	8f 2d       	mov	r24, r15
    3b30:	0e 94 9e 19 	call	0x333c	; 0x333c <Set_Row_Address>
    3b34:	0e 94 ae 19 	call	0x335c	; 0x335c <Set_Write_RAM>
    3b38:	f3 94       	inc	r15
    3b3a:	f2 e0       	ldi	r31, 0x02	; 2
    3b3c:	8f 0e       	add	r8, r31
    3b3e:	91 1c       	adc	r9, r1
    3b40:	f3 14       	cp	r15, r3
    3b42:	49 f0       	breq	.+18     	; 0x3b56 <Show_Bigger_Char+0x1c8>
    3b44:	34 01       	movw	r6, r8
    3b46:	61 e0       	ldi	r22, 0x01	; 1
    3b48:	66 1a       	sub	r6, r22
    3b4a:	71 08       	sbc	r7, r1
    3b4c:	c0 e1       	ldi	r28, 0x10	; 16
    3b4e:	d0 e0       	ldi	r29, 0x00	; 0
    3b50:	00 e0       	ldi	r16, 0x00	; 0
    3b52:	10 e0       	ldi	r17, 0x00	; 0
    3b54:	62 cf       	rjmp	.-316    	; 0x3a1a <Show_Bigger_Char+0x8c>
    3b56:	df 91       	pop	r29
    3b58:	cf 91       	pop	r28
    3b5a:	1f 91       	pop	r17
    3b5c:	0f 91       	pop	r16
    3b5e:	ff 90       	pop	r15
    3b60:	ef 90       	pop	r14
    3b62:	df 90       	pop	r13
    3b64:	cf 90       	pop	r12
    3b66:	bf 90       	pop	r11
    3b68:	af 90       	pop	r10
    3b6a:	9f 90       	pop	r9
    3b6c:	8f 90       	pop	r8
    3b6e:	7f 90       	pop	r7
    3b70:	6f 90       	pop	r6
    3b72:	5f 90       	pop	r5
    3b74:	4f 90       	pop	r4
    3b76:	3f 90       	pop	r3
    3b78:	08 95       	ret

00003b7a <Show_Big_Char>:
    3b7a:	3f 92       	push	r3
    3b7c:	4f 92       	push	r4
    3b7e:	5f 92       	push	r5
    3b80:	6f 92       	push	r6
    3b82:	7f 92       	push	r7
    3b84:	8f 92       	push	r8
    3b86:	9f 92       	push	r9
    3b88:	af 92       	push	r10
    3b8a:	bf 92       	push	r11
    3b8c:	cf 92       	push	r12
    3b8e:	df 92       	push	r13
    3b90:	ef 92       	push	r14
    3b92:	ff 92       	push	r15
    3b94:	0f 93       	push	r16
    3b96:	1f 93       	push	r17
    3b98:	cf 93       	push	r28
    3b9a:	df 93       	push	r29
    3b9c:	c8 2f       	mov	r28, r24
    3b9e:	d2 2f       	mov	r29, r18
    3ba0:	0f 2e       	mov	r0, r31
    3ba2:	fc e1       	ldi	r31, 0x1C	; 28
    3ba4:	4f 2e       	mov	r4, r31
    3ba6:	f0 2d       	mov	r31, r0
    3ba8:	44 0e       	add	r4, r20
    3baa:	0f 2e       	mov	r0, r31
    3bac:	fc e1       	ldi	r31, 0x1C	; 28
    3bae:	5f 2e       	mov	r5, r31
    3bb0:	f0 2d       	mov	r31, r0
    3bb2:	56 0e       	add	r5, r22
    3bb4:	64 2d       	mov	r22, r4
    3bb6:	85 2d       	mov	r24, r5
    3bb8:	0e 94 8e 19 	call	0x331c	; 0x331c <Set_Column_Address>
    3bbc:	0f 2e       	mov	r0, r31
    3bbe:	f1 e1       	ldi	r31, 0x11	; 17
    3bc0:	3f 2e       	mov	r3, r31
    3bc2:	f0 2d       	mov	r31, r0
    3bc4:	3d 0e       	add	r3, r29
    3bc6:	63 2d       	mov	r22, r3
    3bc8:	8d 2f       	mov	r24, r29
    3bca:	0e 94 9e 19 	call	0x333c	; 0x333c <Set_Row_Address>
    3bce:	0e 94 ae 19 	call	0x335c	; 0x335c <Set_Write_RAM>
    3bd2:	ff 24       	eor	r15, r15
    3bd4:	f3 94       	inc	r15
    3bd6:	fd 0e       	add	r15, r29
    3bd8:	8c 2f       	mov	r24, r28
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	80 97       	sbiw	r24, 0x20	; 32
    3bde:	46 e2       	ldi	r20, 0x26	; 38
    3be0:	48 9f       	mul	r20, r24
    3be2:	90 01       	movw	r18, r0
    3be4:	49 9f       	mul	r20, r25
    3be6:	30 0d       	add	r19, r0
    3be8:	11 24       	eor	r1, r1
    3bea:	b9 01       	movw	r22, r18
    3bec:	60 59       	subi	r22, 0x90	; 144
    3bee:	76 4e       	sbci	r23, 0xE6	; 230
    3bf0:	4b 01       	movw	r8, r22
    3bf2:	0f 2e       	mov	r0, r31
    3bf4:	f2 e1       	ldi	r31, 0x12	; 18
    3bf6:	df 2e       	mov	r13, r31
    3bf8:	f0 2d       	mov	r31, r0
    3bfa:	dd 0e       	add	r13, r29
    3bfc:	aa 24       	eor	r10, r10
    3bfe:	a3 94       	inc	r10
    3c00:	b1 2c       	mov	r11, r1
    3c02:	6b c0       	rjmp	.+214    	; 0x3cda <Show_Big_Char+0x160>
    3c04:	c4 30       	cpi	r28, 0x04	; 4
    3c06:	d1 05       	cpc	r29, r1
    3c08:	4c f5       	brge	.+82     	; 0x3c5c <Show_Big_Char+0xe2>
    3c0a:	98 01       	movw	r18, r16
    3c0c:	28 50       	subi	r18, 0x08	; 8
    3c0e:	31 09       	sbc	r19, r1
    3c10:	f4 01       	movw	r30, r8
    3c12:	94 91       	lpm	r25, Z
    3c14:	a8 01       	movw	r20, r16
    3c16:	47 50       	subi	r20, 0x07	; 7
    3c18:	51 09       	sbc	r21, r1
    3c1a:	b5 01       	movw	r22, r10
    3c1c:	02 c0       	rjmp	.+4      	; 0x3c22 <Show_Big_Char+0xa8>
    3c1e:	66 0f       	add	r22, r22
    3c20:	77 1f       	adc	r23, r23
    3c22:	4a 95       	dec	r20
    3c24:	e2 f7       	brpl	.-8      	; 0x3c1e <Show_Big_Char+0xa4>
    3c26:	89 2f       	mov	r24, r25
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	86 23       	and	r24, r22
    3c2c:	97 23       	and	r25, r23
    3c2e:	18 16       	cp	r1, r24
    3c30:	19 06       	cpc	r1, r25
    3c32:	14 f4       	brge	.+4      	; 0x3c38 <Show_Big_Char+0xbe>
    3c34:	8c 2d       	mov	r24, r12
    3c36:	01 c0       	rjmp	.+2      	; 0x3c3a <Show_Big_Char+0xc0>
    3c38:	80 e0       	ldi	r24, 0x00	; 0
    3c3a:	f4 01       	movw	r30, r8
    3c3c:	94 91       	lpm	r25, Z
    3c3e:	a5 01       	movw	r20, r10
    3c40:	02 c0       	rjmp	.+4      	; 0x3c46 <Show_Big_Char+0xcc>
    3c42:	44 0f       	add	r20, r20
    3c44:	55 1f       	adc	r21, r21
    3c46:	2a 95       	dec	r18
    3c48:	e2 f7       	brpl	.-8      	; 0x3c42 <Show_Big_Char+0xc8>
    3c4a:	29 2f       	mov	r18, r25
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	24 23       	and	r18, r20
    3c50:	35 23       	and	r19, r21
    3c52:	12 16       	cp	r1, r18
    3c54:	13 06       	cpc	r1, r19
    3c56:	44 f5       	brge	.+80     	; 0x3ca8 <Show_Big_Char+0x12e>
    3c58:	8e 0d       	add	r24, r14
    3c5a:	26 c0       	rjmp	.+76     	; 0x3ca8 <Show_Big_Char+0x12e>
    3c5c:	20 2f       	mov	r18, r16
    3c5e:	f3 01       	movw	r30, r6
    3c60:	94 91       	lpm	r25, Z
    3c62:	a8 01       	movw	r20, r16
    3c64:	4f 5f       	subi	r20, 0xFF	; 255
    3c66:	5f 4f       	sbci	r21, 0xFF	; 255
    3c68:	b5 01       	movw	r22, r10
    3c6a:	02 c0       	rjmp	.+4      	; 0x3c70 <Show_Big_Char+0xf6>
    3c6c:	66 0f       	add	r22, r22
    3c6e:	77 1f       	adc	r23, r23
    3c70:	4a 95       	dec	r20
    3c72:	e2 f7       	brpl	.-8      	; 0x3c6c <Show_Big_Char+0xf2>
    3c74:	89 2f       	mov	r24, r25
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	86 23       	and	r24, r22
    3c7a:	97 23       	and	r25, r23
    3c7c:	18 16       	cp	r1, r24
    3c7e:	19 06       	cpc	r1, r25
    3c80:	14 f4       	brge	.+4      	; 0x3c86 <Show_Big_Char+0x10c>
    3c82:	8c 2d       	mov	r24, r12
    3c84:	01 c0       	rjmp	.+2      	; 0x3c88 <Show_Big_Char+0x10e>
    3c86:	80 e0       	ldi	r24, 0x00	; 0
    3c88:	f3 01       	movw	r30, r6
    3c8a:	94 91       	lpm	r25, Z
    3c8c:	a5 01       	movw	r20, r10
    3c8e:	02 c0       	rjmp	.+4      	; 0x3c94 <Show_Big_Char+0x11a>
    3c90:	44 0f       	add	r20, r20
    3c92:	55 1f       	adc	r21, r21
    3c94:	2a 95       	dec	r18
    3c96:	e2 f7       	brpl	.-8      	; 0x3c90 <Show_Big_Char+0x116>
    3c98:	29 2f       	mov	r18, r25
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	24 23       	and	r18, r20
    3c9e:	35 23       	and	r19, r21
    3ca0:	12 16       	cp	r1, r18
    3ca2:	13 06       	cpc	r1, r19
    3ca4:	0c f4       	brge	.+2      	; 0x3ca8 <Show_Big_Char+0x12e>
    3ca6:	8e 0d       	add	r24, r14
    3ca8:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3cac:	21 96       	adiw	r28, 0x01	; 1
    3cae:	02 50       	subi	r16, 0x02	; 2
    3cb0:	11 09       	sbc	r17, r1
    3cb2:	c7 30       	cpi	r28, 0x07	; 7
    3cb4:	d1 05       	cpc	r29, r1
    3cb6:	09 f0       	breq	.+2      	; 0x3cba <Show_Big_Char+0x140>
    3cb8:	a5 cf       	rjmp	.-182    	; 0x3c04 <Show_Big_Char+0x8a>
    3cba:	64 2d       	mov	r22, r4
    3cbc:	85 2d       	mov	r24, r5
    3cbe:	0e 94 8e 19 	call	0x331c	; 0x331c <Set_Column_Address>
    3cc2:	63 2d       	mov	r22, r3
    3cc4:	8f 2d       	mov	r24, r15
    3cc6:	0e 94 9e 19 	call	0x333c	; 0x333c <Set_Row_Address>
    3cca:	0e 94 ae 19 	call	0x335c	; 0x335c <Set_Write_RAM>
    3cce:	f3 94       	inc	r15
    3cd0:	f2 e0       	ldi	r31, 0x02	; 2
    3cd2:	8f 0e       	add	r8, r31
    3cd4:	91 1c       	adc	r9, r1
    3cd6:	fd 14       	cp	r15, r13
    3cd8:	49 f0       	breq	.+18     	; 0x3cec <Show_Big_Char+0x172>
    3cda:	34 01       	movw	r6, r8
    3cdc:	6f ef       	ldi	r22, 0xFF	; 255
    3cde:	66 1a       	sub	r6, r22
    3ce0:	76 0a       	sbc	r7, r22
    3ce2:	0e e0       	ldi	r16, 0x0E	; 14
    3ce4:	10 e0       	ldi	r17, 0x00	; 0
    3ce6:	c0 e0       	ldi	r28, 0x00	; 0
    3ce8:	d0 e0       	ldi	r29, 0x00	; 0
    3cea:	8c cf       	rjmp	.-232    	; 0x3c04 <Show_Big_Char+0x8a>
    3cec:	df 91       	pop	r29
    3cee:	cf 91       	pop	r28
    3cf0:	1f 91       	pop	r17
    3cf2:	0f 91       	pop	r16
    3cf4:	ff 90       	pop	r15
    3cf6:	ef 90       	pop	r14
    3cf8:	df 90       	pop	r13
    3cfa:	cf 90       	pop	r12
    3cfc:	bf 90       	pop	r11
    3cfe:	af 90       	pop	r10
    3d00:	9f 90       	pop	r9
    3d02:	8f 90       	pop	r8
    3d04:	7f 90       	pop	r7
    3d06:	6f 90       	pop	r6
    3d08:	5f 90       	pop	r5
    3d0a:	4f 90       	pop	r4
    3d0c:	3f 90       	pop	r3
    3d0e:	08 95       	ret

00003d10 <Show_String>:
    3d10:	ff 92       	push	r15
    3d12:	0f 93       	push	r16
    3d14:	1f 93       	push	r17
    3d16:	cf 93       	push	r28
    3d18:	df 93       	push	r29
    3d1a:	f8 2e       	mov	r15, r24
    3d1c:	8b 01       	movw	r16, r22
    3d1e:	c4 2f       	mov	r28, r20
    3d20:	d2 2f       	mov	r29, r18
    3d22:	60 e6       	ldi	r22, 0x60	; 96
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	0e 94 80 1a 	call	0x3500	; 0x3500 <Show_Font57>
    3d2a:	2d 2f       	mov	r18, r29
    3d2c:	4c 2f       	mov	r20, r28
    3d2e:	f8 01       	movw	r30, r16
    3d30:	61 91       	ld	r22, Z+
    3d32:	8f 01       	movw	r16, r30
    3d34:	8f 2d       	mov	r24, r15
    3d36:	0e 94 80 1a 	call	0x3500	; 0x3500 <Show_Font57>
    3d3a:	ce 5f       	subi	r28, 0xFE	; 254
    3d3c:	f8 01       	movw	r30, r16
    3d3e:	80 81       	ld	r24, Z
    3d40:	81 11       	cpse	r24, r1
    3d42:	f3 cf       	rjmp	.-26     	; 0x3d2a <Show_String+0x1a>
    3d44:	df 91       	pop	r29
    3d46:	cf 91       	pop	r28
    3d48:	1f 91       	pop	r17
    3d4a:	0f 91       	pop	r16
    3d4c:	ff 90       	pop	r15
    3d4e:	08 95       	ret

00003d50 <Show_Bigger_String>:
    3d50:	6f 92       	push	r6
    3d52:	7f 92       	push	r7
    3d54:	8f 92       	push	r8
    3d56:	9f 92       	push	r9
    3d58:	af 92       	push	r10
    3d5a:	cf 92       	push	r12
    3d5c:	df 92       	push	r13
    3d5e:	ef 92       	push	r14
    3d60:	ff 92       	push	r15
    3d62:	0f 93       	push	r16
    3d64:	1f 93       	push	r17
    3d66:	cf 93       	push	r28
    3d68:	df 93       	push	r29
    3d6a:	4c 01       	movw	r8, r24
    3d6c:	12 2f       	mov	r17, r18
    3d6e:	d0 2e       	mov	r13, r16
    3d70:	37 01       	movw	r6, r14
    3d72:	fc 2c       	mov	r15, r12
    3d74:	61 14       	cp	r6, r1
    3d76:	71 04       	cpc	r7, r1
    3d78:	a9 f0       	breq	.+42     	; 0x3da4 <Show_Bigger_String+0x54>
    3d7a:	68 0e       	add	r6, r24
    3d7c:	79 1e       	adc	r7, r25
    3d7e:	c6 2f       	mov	r28, r22
    3d80:	d4 2f       	mov	r29, r20
    3d82:	d6 1b       	sub	r29, r22
    3d84:	4d 2f       	mov	r20, r29
    3d86:	4c 0f       	add	r20, r28
    3d88:	ca 2c       	mov	r12, r10
    3d8a:	ef 2c       	mov	r14, r15
    3d8c:	0d 2d       	mov	r16, r13
    3d8e:	21 2f       	mov	r18, r17
    3d90:	6c 2f       	mov	r22, r28
    3d92:	f4 01       	movw	r30, r8
    3d94:	81 91       	ld	r24, Z+
    3d96:	4f 01       	movw	r8, r30
    3d98:	0e 94 c7 1c 	call	0x398e	; 0x398e <Show_Bigger_Char>
    3d9c:	cc 5f       	subi	r28, 0xFC	; 252
    3d9e:	68 14       	cp	r6, r8
    3da0:	79 04       	cpc	r7, r9
    3da2:	81 f7       	brne	.-32     	; 0x3d84 <Show_Bigger_String+0x34>
    3da4:	df 91       	pop	r29
    3da6:	cf 91       	pop	r28
    3da8:	1f 91       	pop	r17
    3daa:	0f 91       	pop	r16
    3dac:	ff 90       	pop	r15
    3dae:	ef 90       	pop	r14
    3db0:	df 90       	pop	r13
    3db2:	cf 90       	pop	r12
    3db4:	af 90       	pop	r10
    3db6:	9f 90       	pop	r9
    3db8:	8f 90       	pop	r8
    3dba:	7f 90       	pop	r7
    3dbc:	6f 90       	pop	r6
    3dbe:	08 95       	ret

00003dc0 <Show_Big_String>:
    3dc0:	6f 92       	push	r6
    3dc2:	7f 92       	push	r7
    3dc4:	8f 92       	push	r8
    3dc6:	9f 92       	push	r9
    3dc8:	af 92       	push	r10
    3dca:	cf 92       	push	r12
    3dcc:	df 92       	push	r13
    3dce:	ef 92       	push	r14
    3dd0:	ff 92       	push	r15
    3dd2:	0f 93       	push	r16
    3dd4:	1f 93       	push	r17
    3dd6:	cf 93       	push	r28
    3dd8:	df 93       	push	r29
    3dda:	4c 01       	movw	r8, r24
    3ddc:	12 2f       	mov	r17, r18
    3dde:	d0 2e       	mov	r13, r16
    3de0:	37 01       	movw	r6, r14
    3de2:	fc 2c       	mov	r15, r12
    3de4:	61 14       	cp	r6, r1
    3de6:	71 04       	cpc	r7, r1
    3de8:	a9 f0       	breq	.+42     	; 0x3e14 <Show_Big_String+0x54>
    3dea:	68 0e       	add	r6, r24
    3dec:	79 1e       	adc	r7, r25
    3dee:	c6 2f       	mov	r28, r22
    3df0:	d4 2f       	mov	r29, r20
    3df2:	d6 1b       	sub	r29, r22
    3df4:	4d 2f       	mov	r20, r29
    3df6:	4c 0f       	add	r20, r28
    3df8:	ca 2c       	mov	r12, r10
    3dfa:	ef 2c       	mov	r14, r15
    3dfc:	0d 2d       	mov	r16, r13
    3dfe:	21 2f       	mov	r18, r17
    3e00:	6c 2f       	mov	r22, r28
    3e02:	f4 01       	movw	r30, r8
    3e04:	81 91       	ld	r24, Z+
    3e06:	4f 01       	movw	r8, r30
    3e08:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <Show_Big_Char>
    3e0c:	cd 5f       	subi	r28, 0xFD	; 253
    3e0e:	68 14       	cp	r6, r8
    3e10:	79 04       	cpc	r7, r9
    3e12:	81 f7       	brne	.-32     	; 0x3df4 <Show_Big_String+0x34>
    3e14:	df 91       	pop	r29
    3e16:	cf 91       	pop	r28
    3e18:	1f 91       	pop	r17
    3e1a:	0f 91       	pop	r16
    3e1c:	ff 90       	pop	r15
    3e1e:	ef 90       	pop	r14
    3e20:	df 90       	pop	r13
    3e22:	cf 90       	pop	r12
    3e24:	af 90       	pop	r10
    3e26:	9f 90       	pop	r9
    3e28:	8f 90       	pop	r8
    3e2a:	7f 90       	pop	r7
    3e2c:	6f 90       	pop	r6
    3e2e:	08 95       	ret

00003e30 <Data_processing>:
    3e30:	1f 93       	push	r17
    3e32:	cf 93       	push	r28
    3e34:	df 93       	push	r29
    3e36:	38 2f       	mov	r19, r24
    3e38:	30 78       	andi	r19, 0x80	; 128
    3e3a:	e8 2f       	mov	r30, r24
    3e3c:	e0 74       	andi	r30, 0x40	; 64
    3e3e:	f0 e0       	ldi	r31, 0x00	; 0
    3e40:	f5 95       	asr	r31
    3e42:	e7 95       	ror	r30
    3e44:	f5 95       	asr	r31
    3e46:	e7 95       	ror	r30
    3e48:	f5 95       	asr	r31
    3e4a:	e7 95       	ror	r30
    3e4c:	98 2f       	mov	r25, r24
    3e4e:	90 72       	andi	r25, 0x20	; 32
    3e50:	99 0f       	add	r25, r25
    3e52:	99 0f       	add	r25, r25
    3e54:	68 2f       	mov	r22, r24
    3e56:	60 71       	andi	r22, 0x10	; 16
    3e58:	70 e0       	ldi	r23, 0x00	; 0
    3e5a:	75 95       	asr	r23
    3e5c:	67 95       	ror	r22
    3e5e:	58 2f       	mov	r21, r24
    3e60:	58 70       	andi	r21, 0x08	; 8
    3e62:	52 95       	swap	r21
    3e64:	50 7f       	andi	r21, 0xF0	; 240
    3e66:	f8 2f       	mov	r31, r24
    3e68:	f4 70       	andi	r31, 0x04	; 4
    3e6a:	ff 0f       	add	r31, r31
    3e6c:	48 2f       	mov	r20, r24
    3e6e:	42 70       	andi	r20, 0x02	; 2
    3e70:	42 95       	swap	r20
    3e72:	44 0f       	add	r20, r20
    3e74:	44 0f       	add	r20, r20
    3e76:	40 7c       	andi	r20, 0xC0	; 192
    3e78:	81 70       	andi	r24, 0x01	; 1
    3e7a:	78 2f       	mov	r23, r24
    3e7c:	77 0f       	add	r23, r23
    3e7e:	77 0f       	add	r23, r23
    3e80:	77 0f       	add	r23, r23
    3e82:	29 2f       	mov	r18, r25
    3e84:	26 95       	lsr	r18
    3e86:	89 2f       	mov	r24, r25
    3e88:	86 95       	lsr	r24
    3e8a:	86 95       	lsr	r24
    3e8c:	82 2b       	or	r24, r18
    3e8e:	89 2b       	or	r24, r25
    3e90:	96 95       	lsr	r25
    3e92:	96 95       	lsr	r25
    3e94:	96 95       	lsr	r25
    3e96:	98 2b       	or	r25, r24
    3e98:	96 2b       	or	r25, r22
    3e9a:	d6 2f       	mov	r29, r22
    3e9c:	d6 95       	lsr	r29
    3e9e:	d9 2b       	or	r29, r25
    3ea0:	86 2f       	mov	r24, r22
    3ea2:	86 95       	lsr	r24
    3ea4:	86 95       	lsr	r24
    3ea6:	d8 2b       	or	r29, r24
    3ea8:	66 95       	lsr	r22
    3eaa:	66 95       	lsr	r22
    3eac:	66 95       	lsr	r22
    3eae:	d6 2b       	or	r29, r22
    3eb0:	95 2f       	mov	r25, r21
    3eb2:	96 95       	lsr	r25
    3eb4:	85 2f       	mov	r24, r21
    3eb6:	8f 2b       	or	r24, r31
    3eb8:	89 2b       	or	r24, r25
    3eba:	95 2f       	mov	r25, r21
    3ebc:	96 95       	lsr	r25
    3ebe:	96 95       	lsr	r25
    3ec0:	89 2b       	or	r24, r25
    3ec2:	56 95       	lsr	r21
    3ec4:	56 95       	lsr	r21
    3ec6:	56 95       	lsr	r21
    3ec8:	58 2b       	or	r21, r24
    3eca:	1f 2f       	mov	r17, r31
    3ecc:	16 95       	lsr	r17
    3ece:	15 2b       	or	r17, r21
    3ed0:	8f 2f       	mov	r24, r31
    3ed2:	86 95       	lsr	r24
    3ed4:	86 95       	lsr	r24
    3ed6:	18 2b       	or	r17, r24
    3ed8:	f6 95       	lsr	r31
    3eda:	f6 95       	lsr	r31
    3edc:	f6 95       	lsr	r31
    3ede:	1f 2b       	or	r17, r31
    3ee0:	c4 2f       	mov	r28, r20
    3ee2:	c6 95       	lsr	r28
    3ee4:	84 2f       	mov	r24, r20
    3ee6:	87 2b       	or	r24, r23
    3ee8:	c8 2b       	or	r28, r24
    3eea:	84 2f       	mov	r24, r20
    3eec:	86 95       	lsr	r24
    3eee:	86 95       	lsr	r24
    3ef0:	c8 2b       	or	r28, r24
    3ef2:	46 95       	lsr	r20
    3ef4:	46 95       	lsr	r20
    3ef6:	46 95       	lsr	r20
    3ef8:	4c 2b       	or	r20, r28
    3efa:	c7 2f       	mov	r28, r23
    3efc:	c6 95       	lsr	r28
    3efe:	c4 2b       	or	r28, r20
    3f00:	87 2f       	mov	r24, r23
    3f02:	86 95       	lsr	r24
    3f04:	86 95       	lsr	r24
    3f06:	c8 2b       	or	r28, r24
    3f08:	76 95       	lsr	r23
    3f0a:	76 95       	lsr	r23
    3f0c:	76 95       	lsr	r23
    3f0e:	c7 2b       	or	r28, r23
    3f10:	23 2f       	mov	r18, r19
    3f12:	26 95       	lsr	r18
    3f14:	83 2f       	mov	r24, r19
    3f16:	86 95       	lsr	r24
    3f18:	86 95       	lsr	r24
    3f1a:	28 2b       	or	r18, r24
    3f1c:	23 2b       	or	r18, r19
    3f1e:	36 95       	lsr	r19
    3f20:	36 95       	lsr	r19
    3f22:	36 95       	lsr	r19
    3f24:	23 2b       	or	r18, r19
    3f26:	2e 2b       	or	r18, r30
    3f28:	8e 2f       	mov	r24, r30
    3f2a:	86 95       	lsr	r24
    3f2c:	82 2b       	or	r24, r18
    3f2e:	9e 2f       	mov	r25, r30
    3f30:	96 95       	lsr	r25
    3f32:	96 95       	lsr	r25
    3f34:	89 2b       	or	r24, r25
    3f36:	e6 95       	lsr	r30
    3f38:	e6 95       	lsr	r30
    3f3a:	e6 95       	lsr	r30
    3f3c:	8e 2b       	or	r24, r30
    3f3e:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3f42:	8d 2f       	mov	r24, r29
    3f44:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3f48:	81 2f       	mov	r24, r17
    3f4a:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3f4e:	8c 2f       	mov	r24, r28
    3f50:	0e 94 86 19 	call	0x330c	; 0x330c <Write_Data>
    3f54:	df 91       	pop	r29
    3f56:	cf 91       	pop	r28
    3f58:	1f 91       	pop	r17
    3f5a:	08 95       	ret

00003f5c <Display_Picture>:
    3f5c:	cf 92       	push	r12
    3f5e:	df 92       	push	r13
    3f60:	ef 92       	push	r14
    3f62:	ff 92       	push	r15
    3f64:	0f 93       	push	r16
    3f66:	1f 93       	push	r17
    3f68:	cf 93       	push	r28
    3f6a:	df 93       	push	r29
    3f6c:	6c 01       	movw	r12, r24
    3f6e:	63 e9       	ldi	r22, 0x93	; 147
    3f70:	8c e1       	ldi	r24, 0x1C	; 28
    3f72:	0e 94 8e 19 	call	0x331c	; 0x331c <Set_Column_Address>
    3f76:	6f e7       	ldi	r22, 0x7F	; 127
    3f78:	80 e0       	ldi	r24, 0x00	; 0
    3f7a:	0e 94 9e 19 	call	0x333c	; 0x333c <Set_Row_Address>
    3f7e:	0e 94 ae 19 	call	0x335c	; 0x335c <Set_Write_RAM>
    3f82:	76 01       	movw	r14, r12
    3f84:	88 ef       	ldi	r24, 0xF8	; 248
    3f86:	d8 1a       	sub	r13, r24
    3f88:	0e c0       	rjmp	.+28     	; 0x3fa6 <Display_Picture+0x4a>
    3f8a:	fe 01       	movw	r30, r28
    3f8c:	84 91       	lpm	r24, Z
    3f8e:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <Data_processing>
    3f92:	21 96       	adiw	r28, 0x01	; 1
    3f94:	c0 17       	cp	r28, r16
    3f96:	d1 07       	cpc	r29, r17
    3f98:	c1 f7       	brne	.-16     	; 0x3f8a <Display_Picture+0x2e>
    3f9a:	f0 e2       	ldi	r31, 0x20	; 32
    3f9c:	ef 0e       	add	r14, r31
    3f9e:	f1 1c       	adc	r15, r1
    3fa0:	ec 14       	cp	r14, r12
    3fa2:	fd 04       	cpc	r15, r13
    3fa4:	29 f0       	breq	.+10     	; 0x3fb0 <Display_Picture+0x54>
    3fa6:	87 01       	movw	r16, r14
    3fa8:	04 5c       	subi	r16, 0xC4	; 196
    3faa:	1f 4f       	sbci	r17, 0xFF	; 255
    3fac:	e7 01       	movw	r28, r14
    3fae:	ed cf       	rjmp	.-38     	; 0x3f8a <Display_Picture+0x2e>
    3fb0:	df 91       	pop	r29
    3fb2:	cf 91       	pop	r28
    3fb4:	1f 91       	pop	r17
    3fb6:	0f 91       	pop	r16
    3fb8:	ff 90       	pop	r15
    3fba:	ef 90       	pop	r14
    3fbc:	df 90       	pop	r13
    3fbe:	cf 90       	pop	r12
    3fc0:	08 95       	ret

00003fc2 <Set_Linear_Gray_Scale_Table>:
}


void Set_Linear_Gray_Scale_Table()
{
	Write_Command(0xB9);			// Set Default Linear Gray Scale Table
    3fc2:	89 eb       	ldi	r24, 0xB9	; 185
    3fc4:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    3fc8:	08 95       	ret

00003fca <OLED_Init>:
{
	
	
	unsigned char i;

	RESET_low;
    3fca:	2e 98       	cbi	0x05, 6	; 5
	Delay(10);
	
	RESET_high;
    3fcc:	2e 9a       	sbi	0x05, 6	; 5


	Set_Command_Lock(0x12);			// Unlock Basic Commands (0x12/0x16)
    3fce:	82 e1       	ldi	r24, 0x12	; 18
    3fd0:	0e 94 57 1a 	call	0x34ae	; 0x34ae <Set_Command_Lock>
	//     Enable Internal VDD Regulator
}

void Set_Display_On_Off(unsigned char d)
{
	Write_Command(0xAE|d);			// Set Display On/Off
    3fd4:	8e ea       	ldi	r24, 0xAE	; 174
    3fd6:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
	RESET_high;


	Set_Command_Lock(0x12);			// Unlock Basic Commands (0x12/0x16)
	Set_Display_On_Off(0x00);		// Display Off (0x00/0x01)
	Set_Display_Clock(0x91);		// Set Clock as 80 Frames/Sec
    3fda:	81 e9       	ldi	r24, 0x91	; 145
    3fdc:	0e 94 e7 19 	call	0x33ce	; 0x33ce <Set_Display_Clock>
	Set_Multiplex_Ratio(0x3F);		// 1/64 Duty (0x0F~0x3F)
    3fe0:	8f e3       	ldi	r24, 0x3F	; 63
    3fe2:	0e 94 3f 1a 	call	0x347e	; 0x347e <Set_Multiplex_Ratio>
	Set_Display_Offset(0x00);		// Shift Mapping RAM Counter (0x00~0x3F)
    3fe6:	80 e0       	ldi	r24, 0x00	; 0
    3fe8:	0e 94 c9 19 	call	0x3392	; 0x3392 <Set_Display_Offset>
	Set_Start_Line(0x00);			// Set Mapping RAM Display Start Line (0x00~0x7F)
    3fec:	80 e0       	ldi	r24, 0x00	; 0
    3fee:	0e 94 bf 19 	call	0x337e	; 0x337e <Set_Start_Line>
	Set_Remap_Format(0x14);			// Set Horizontal Address Increment
    3ff2:	84 e1       	ldi	r24, 0x14	; 20
    3ff4:	0e 94 b2 19 	call	0x3364	; 0x3364 <Set_Remap_Format>
	//     Column Address 0 Mapped to SEG0
	//     Disable Nibble Remap
	//     Scan from COM[N-1] to COM0
	//     Disable COM Split Odd Even
	//     Enable Dual COM Line Mode
	Set_GPIO(0x00);				// Disable GPIO Pins Input
    3ff8:	80 e0       	ldi	r24, 0x00	; 0
    3ffa:	0e 94 03 1a 	call	0x3406	; 0x3406 <Set_GPIO>
	Set_Function_Selection(0x01);		// Enable Internal VDD Regulator
    3ffe:	81 e0       	ldi	r24, 0x01	; 1
    4000:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <Set_Function_Selection>
	Set_Display_Enhancement_A(0xA0,0xFD);	// Enable External VSL
    4004:	6d ef       	ldi	r22, 0xFD	; 253
    4006:	80 ea       	ldi	r24, 0xA0	; 160
    4008:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <Set_Display_Enhancement_A>
	// Set Low Gray Scale Enhancement
	Set_Contrast_Current(0x7F);		// Set Segment Output Current
    400c:	8f e7       	ldi	r24, 0x7F	; 127
    400e:	0e 94 2b 1a 	call	0x3456	; 0x3456 <Set_Contrast_Current>
	Set_Master_Current(Brightness);		// Set Scale Factor of Segment Output Current Control
    4012:	8f e0       	ldi	r24, 0x0F	; 15
    4014:	0e 94 35 1a 	call	0x346a	; 0x346a <Set_Master_Current>
	//Set_Gray_Scale_Table();			// Set Pulse Width for Gray Scale Table
	Set_Linear_Gray_Scale_Table();
    4018:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <Set_Linear_Gray_Scale_Table>
	Set_Phase_Length(0xE2);			// Set Phase 1 as 5 Clocks & Phase 2 as 14 Clocks
    401c:	82 ee       	ldi	r24, 0xE2	; 226
    401e:	0e 94 dd 19 	call	0x33ba	; 0x33ba <Set_Phase_Length>
	Set_Display_Enhancement_B(0x20);	// Enhance Driving Scheme Capability (0x00/0x20)
    4022:	80 e2       	ldi	r24, 0x20	; 32
    4024:	0e 94 49 1a 	call	0x3492	; 0x3492 <Set_Display_Enhancement_B>
	Set_Precharge_Voltage(0x1F);		// Set Pre-Charge Voltage Level as 0.60*VCC
    4028:	8f e1       	ldi	r24, 0x1F	; 31
    402a:	0e 94 17 1a 	call	0x342e	; 0x342e <Set_Precharge_Voltage>
	Set_Precharge_Period(0x08);		// Set Second Pre-Charge Period as 8 Clocks
    402e:	88 e0       	ldi	r24, 0x08	; 8
    4030:	0e 94 0d 1a 	call	0x341a	; 0x341a <Set_Precharge_Period>
	Set_VCOMH(0x07);			// Set Common Pins Deselect Voltage Level as 0.86*VCC
    4034:	87 e0       	ldi	r24, 0x07	; 7
    4036:	0e 94 21 1a 	call	0x3442	; 0x3442 <Set_VCOMH>
	Write_Data(d);				//   Default => 0x00
}

void Set_Display_Mode(unsigned char d)
{
	Write_Command(0xA4|d);			// Set Display Mode
    403a:	86 ea       	ldi	r24, 0xA6	; 166
    403c:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
	//     0xA7 (0x03) => Inverse Display
}

void Set_Partial_Display(unsigned char a, unsigned char b, unsigned char c)
{
	Write_Command(0xA8|a);
    4040:	89 ea       	ldi	r24, 0xA9	; 169
    4042:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
	Set_Precharge_Period(0x08);		// Set Second Pre-Charge Period as 8 Clocks
	Set_VCOMH(0x07);			// Set Common Pins Deselect Voltage Level as 0.86*VCC
	Set_Display_Mode(0x02);			// Normal Display Mode (0x00/0x01/0x02/0x03)
	Set_Partial_Display(0x01,0x00,0x00);	// Disable Partial Display

	Fill_RAM(0x00);				// Clear Screen
    4046:	80 e0       	ldi	r24, 0x00	; 0
    4048:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <Fill_RAM>
	//     Enable Internal VDD Regulator
}

void Set_Display_On_Off(unsigned char d)
{
	Write_Command(0xAE|d);			// Set Display On/Off
    404c:	8f ea       	ldi	r24, 0xAF	; 175
    404e:	0e 94 7e 19 	call	0x32fc	; 0x32fc <Write_Command>
    4052:	08 95       	ret

00004054 <__subsf3>:
    4054:	50 58       	subi	r21, 0x80	; 128

00004056 <__addsf3>:
    4056:	bb 27       	eor	r27, r27
    4058:	aa 27       	eor	r26, r26
    405a:	0e 94 42 20 	call	0x4084	; 0x4084 <__addsf3x>
    405e:	0c 94 21 21 	jmp	0x4242	; 0x4242 <__fp_round>
    4062:	0e 94 13 21 	call	0x4226	; 0x4226 <__fp_pscA>
    4066:	38 f0       	brcs	.+14     	; 0x4076 <__addsf3+0x20>
    4068:	0e 94 1a 21 	call	0x4234	; 0x4234 <__fp_pscB>
    406c:	20 f0       	brcs	.+8      	; 0x4076 <__addsf3+0x20>
    406e:	39 f4       	brne	.+14     	; 0x407e <__addsf3+0x28>
    4070:	9f 3f       	cpi	r25, 0xFF	; 255
    4072:	19 f4       	brne	.+6      	; 0x407a <__addsf3+0x24>
    4074:	26 f4       	brtc	.+8      	; 0x407e <__addsf3+0x28>
    4076:	0c 94 10 21 	jmp	0x4220	; 0x4220 <__fp_nan>
    407a:	0e f4       	brtc	.+2      	; 0x407e <__addsf3+0x28>
    407c:	e0 95       	com	r30
    407e:	e7 fb       	bst	r30, 7
    4080:	0c 94 0a 21 	jmp	0x4214	; 0x4214 <__fp_inf>

00004084 <__addsf3x>:
    4084:	e9 2f       	mov	r30, r25
    4086:	0e 94 32 21 	call	0x4264	; 0x4264 <__fp_split3>
    408a:	58 f3       	brcs	.-42     	; 0x4062 <__addsf3+0xc>
    408c:	ba 17       	cp	r27, r26
    408e:	62 07       	cpc	r22, r18
    4090:	73 07       	cpc	r23, r19
    4092:	84 07       	cpc	r24, r20
    4094:	95 07       	cpc	r25, r21
    4096:	20 f0       	brcs	.+8      	; 0x40a0 <__addsf3x+0x1c>
    4098:	79 f4       	brne	.+30     	; 0x40b8 <__addsf3x+0x34>
    409a:	a6 f5       	brtc	.+104    	; 0x4104 <__addsf3x+0x80>
    409c:	0c 94 54 21 	jmp	0x42a8	; 0x42a8 <__fp_zero>
    40a0:	0e f4       	brtc	.+2      	; 0x40a4 <__addsf3x+0x20>
    40a2:	e0 95       	com	r30
    40a4:	0b 2e       	mov	r0, r27
    40a6:	ba 2f       	mov	r27, r26
    40a8:	a0 2d       	mov	r26, r0
    40aa:	0b 01       	movw	r0, r22
    40ac:	b9 01       	movw	r22, r18
    40ae:	90 01       	movw	r18, r0
    40b0:	0c 01       	movw	r0, r24
    40b2:	ca 01       	movw	r24, r20
    40b4:	a0 01       	movw	r20, r0
    40b6:	11 24       	eor	r1, r1
    40b8:	ff 27       	eor	r31, r31
    40ba:	59 1b       	sub	r21, r25
    40bc:	99 f0       	breq	.+38     	; 0x40e4 <__addsf3x+0x60>
    40be:	59 3f       	cpi	r21, 0xF9	; 249
    40c0:	50 f4       	brcc	.+20     	; 0x40d6 <__addsf3x+0x52>
    40c2:	50 3e       	cpi	r21, 0xE0	; 224
    40c4:	68 f1       	brcs	.+90     	; 0x4120 <__addsf3x+0x9c>
    40c6:	1a 16       	cp	r1, r26
    40c8:	f0 40       	sbci	r31, 0x00	; 0
    40ca:	a2 2f       	mov	r26, r18
    40cc:	23 2f       	mov	r18, r19
    40ce:	34 2f       	mov	r19, r20
    40d0:	44 27       	eor	r20, r20
    40d2:	58 5f       	subi	r21, 0xF8	; 248
    40d4:	f3 cf       	rjmp	.-26     	; 0x40bc <__addsf3x+0x38>
    40d6:	46 95       	lsr	r20
    40d8:	37 95       	ror	r19
    40da:	27 95       	ror	r18
    40dc:	a7 95       	ror	r26
    40de:	f0 40       	sbci	r31, 0x00	; 0
    40e0:	53 95       	inc	r21
    40e2:	c9 f7       	brne	.-14     	; 0x40d6 <__addsf3x+0x52>
    40e4:	7e f4       	brtc	.+30     	; 0x4104 <__addsf3x+0x80>
    40e6:	1f 16       	cp	r1, r31
    40e8:	ba 0b       	sbc	r27, r26
    40ea:	62 0b       	sbc	r22, r18
    40ec:	73 0b       	sbc	r23, r19
    40ee:	84 0b       	sbc	r24, r20
    40f0:	ba f0       	brmi	.+46     	; 0x4120 <__addsf3x+0x9c>
    40f2:	91 50       	subi	r25, 0x01	; 1
    40f4:	a1 f0       	breq	.+40     	; 0x411e <__addsf3x+0x9a>
    40f6:	ff 0f       	add	r31, r31
    40f8:	bb 1f       	adc	r27, r27
    40fa:	66 1f       	adc	r22, r22
    40fc:	77 1f       	adc	r23, r23
    40fe:	88 1f       	adc	r24, r24
    4100:	c2 f7       	brpl	.-16     	; 0x40f2 <__addsf3x+0x6e>
    4102:	0e c0       	rjmp	.+28     	; 0x4120 <__addsf3x+0x9c>
    4104:	ba 0f       	add	r27, r26
    4106:	62 1f       	adc	r22, r18
    4108:	73 1f       	adc	r23, r19
    410a:	84 1f       	adc	r24, r20
    410c:	48 f4       	brcc	.+18     	; 0x4120 <__addsf3x+0x9c>
    410e:	87 95       	ror	r24
    4110:	77 95       	ror	r23
    4112:	67 95       	ror	r22
    4114:	b7 95       	ror	r27
    4116:	f7 95       	ror	r31
    4118:	9e 3f       	cpi	r25, 0xFE	; 254
    411a:	08 f0       	brcs	.+2      	; 0x411e <__addsf3x+0x9a>
    411c:	b0 cf       	rjmp	.-160    	; 0x407e <__addsf3+0x28>
    411e:	93 95       	inc	r25
    4120:	88 0f       	add	r24, r24
    4122:	08 f0       	brcs	.+2      	; 0x4126 <__addsf3x+0xa2>
    4124:	99 27       	eor	r25, r25
    4126:	ee 0f       	add	r30, r30
    4128:	97 95       	ror	r25
    412a:	87 95       	ror	r24
    412c:	08 95       	ret

0000412e <__fixsfsi>:
    412e:	0e 94 9e 20 	call	0x413c	; 0x413c <__fixunssfsi>
    4132:	68 94       	set
    4134:	b1 11       	cpse	r27, r1
    4136:	0c 94 55 21 	jmp	0x42aa	; 0x42aa <__fp_szero>
    413a:	08 95       	ret

0000413c <__fixunssfsi>:
    413c:	0e 94 3a 21 	call	0x4274	; 0x4274 <__fp_splitA>
    4140:	88 f0       	brcs	.+34     	; 0x4164 <__fixunssfsi+0x28>
    4142:	9f 57       	subi	r25, 0x7F	; 127
    4144:	98 f0       	brcs	.+38     	; 0x416c <__fixunssfsi+0x30>
    4146:	b9 2f       	mov	r27, r25
    4148:	99 27       	eor	r25, r25
    414a:	b7 51       	subi	r27, 0x17	; 23
    414c:	b0 f0       	brcs	.+44     	; 0x417a <__fixunssfsi+0x3e>
    414e:	e1 f0       	breq	.+56     	; 0x4188 <__fixunssfsi+0x4c>
    4150:	66 0f       	add	r22, r22
    4152:	77 1f       	adc	r23, r23
    4154:	88 1f       	adc	r24, r24
    4156:	99 1f       	adc	r25, r25
    4158:	1a f0       	brmi	.+6      	; 0x4160 <__fixunssfsi+0x24>
    415a:	ba 95       	dec	r27
    415c:	c9 f7       	brne	.-14     	; 0x4150 <__fixunssfsi+0x14>
    415e:	14 c0       	rjmp	.+40     	; 0x4188 <__fixunssfsi+0x4c>
    4160:	b1 30       	cpi	r27, 0x01	; 1
    4162:	91 f0       	breq	.+36     	; 0x4188 <__fixunssfsi+0x4c>
    4164:	0e 94 54 21 	call	0x42a8	; 0x42a8 <__fp_zero>
    4168:	b1 e0       	ldi	r27, 0x01	; 1
    416a:	08 95       	ret
    416c:	0c 94 54 21 	jmp	0x42a8	; 0x42a8 <__fp_zero>
    4170:	67 2f       	mov	r22, r23
    4172:	78 2f       	mov	r23, r24
    4174:	88 27       	eor	r24, r24
    4176:	b8 5f       	subi	r27, 0xF8	; 248
    4178:	39 f0       	breq	.+14     	; 0x4188 <__fixunssfsi+0x4c>
    417a:	b9 3f       	cpi	r27, 0xF9	; 249
    417c:	cc f3       	brlt	.-14     	; 0x4170 <__fixunssfsi+0x34>
    417e:	86 95       	lsr	r24
    4180:	77 95       	ror	r23
    4182:	67 95       	ror	r22
    4184:	b3 95       	inc	r27
    4186:	d9 f7       	brne	.-10     	; 0x417e <__fixunssfsi+0x42>
    4188:	3e f4       	brtc	.+14     	; 0x4198 <__fixunssfsi+0x5c>
    418a:	90 95       	com	r25
    418c:	80 95       	com	r24
    418e:	70 95       	com	r23
    4190:	61 95       	neg	r22
    4192:	7f 4f       	sbci	r23, 0xFF	; 255
    4194:	8f 4f       	sbci	r24, 0xFF	; 255
    4196:	9f 4f       	sbci	r25, 0xFF	; 255
    4198:	08 95       	ret

0000419a <__floatunsisf>:
    419a:	e8 94       	clt
    419c:	09 c0       	rjmp	.+18     	; 0x41b0 <__floatsisf+0x12>

0000419e <__floatsisf>:
    419e:	97 fb       	bst	r25, 7
    41a0:	3e f4       	brtc	.+14     	; 0x41b0 <__floatsisf+0x12>
    41a2:	90 95       	com	r25
    41a4:	80 95       	com	r24
    41a6:	70 95       	com	r23
    41a8:	61 95       	neg	r22
    41aa:	7f 4f       	sbci	r23, 0xFF	; 255
    41ac:	8f 4f       	sbci	r24, 0xFF	; 255
    41ae:	9f 4f       	sbci	r25, 0xFF	; 255
    41b0:	99 23       	and	r25, r25
    41b2:	a9 f0       	breq	.+42     	; 0x41de <__floatsisf+0x40>
    41b4:	f9 2f       	mov	r31, r25
    41b6:	96 e9       	ldi	r25, 0x96	; 150
    41b8:	bb 27       	eor	r27, r27
    41ba:	93 95       	inc	r25
    41bc:	f6 95       	lsr	r31
    41be:	87 95       	ror	r24
    41c0:	77 95       	ror	r23
    41c2:	67 95       	ror	r22
    41c4:	b7 95       	ror	r27
    41c6:	f1 11       	cpse	r31, r1
    41c8:	f8 cf       	rjmp	.-16     	; 0x41ba <__floatsisf+0x1c>
    41ca:	fa f4       	brpl	.+62     	; 0x420a <__floatsisf+0x6c>
    41cc:	bb 0f       	add	r27, r27
    41ce:	11 f4       	brne	.+4      	; 0x41d4 <__floatsisf+0x36>
    41d0:	60 ff       	sbrs	r22, 0
    41d2:	1b c0       	rjmp	.+54     	; 0x420a <__floatsisf+0x6c>
    41d4:	6f 5f       	subi	r22, 0xFF	; 255
    41d6:	7f 4f       	sbci	r23, 0xFF	; 255
    41d8:	8f 4f       	sbci	r24, 0xFF	; 255
    41da:	9f 4f       	sbci	r25, 0xFF	; 255
    41dc:	16 c0       	rjmp	.+44     	; 0x420a <__floatsisf+0x6c>
    41de:	88 23       	and	r24, r24
    41e0:	11 f0       	breq	.+4      	; 0x41e6 <__floatsisf+0x48>
    41e2:	96 e9       	ldi	r25, 0x96	; 150
    41e4:	11 c0       	rjmp	.+34     	; 0x4208 <__floatsisf+0x6a>
    41e6:	77 23       	and	r23, r23
    41e8:	21 f0       	breq	.+8      	; 0x41f2 <__floatsisf+0x54>
    41ea:	9e e8       	ldi	r25, 0x8E	; 142
    41ec:	87 2f       	mov	r24, r23
    41ee:	76 2f       	mov	r23, r22
    41f0:	05 c0       	rjmp	.+10     	; 0x41fc <__floatsisf+0x5e>
    41f2:	66 23       	and	r22, r22
    41f4:	71 f0       	breq	.+28     	; 0x4212 <__floatsisf+0x74>
    41f6:	96 e8       	ldi	r25, 0x86	; 134
    41f8:	86 2f       	mov	r24, r22
    41fa:	70 e0       	ldi	r23, 0x00	; 0
    41fc:	60 e0       	ldi	r22, 0x00	; 0
    41fe:	2a f0       	brmi	.+10     	; 0x420a <__floatsisf+0x6c>
    4200:	9a 95       	dec	r25
    4202:	66 0f       	add	r22, r22
    4204:	77 1f       	adc	r23, r23
    4206:	88 1f       	adc	r24, r24
    4208:	da f7       	brpl	.-10     	; 0x4200 <__floatsisf+0x62>
    420a:	88 0f       	add	r24, r24
    420c:	96 95       	lsr	r25
    420e:	87 95       	ror	r24
    4210:	97 f9       	bld	r25, 7
    4212:	08 95       	ret

00004214 <__fp_inf>:
    4214:	97 f9       	bld	r25, 7
    4216:	9f 67       	ori	r25, 0x7F	; 127
    4218:	80 e8       	ldi	r24, 0x80	; 128
    421a:	70 e0       	ldi	r23, 0x00	; 0
    421c:	60 e0       	ldi	r22, 0x00	; 0
    421e:	08 95       	ret

00004220 <__fp_nan>:
    4220:	9f ef       	ldi	r25, 0xFF	; 255
    4222:	80 ec       	ldi	r24, 0xC0	; 192
    4224:	08 95       	ret

00004226 <__fp_pscA>:
    4226:	00 24       	eor	r0, r0
    4228:	0a 94       	dec	r0
    422a:	16 16       	cp	r1, r22
    422c:	17 06       	cpc	r1, r23
    422e:	18 06       	cpc	r1, r24
    4230:	09 06       	cpc	r0, r25
    4232:	08 95       	ret

00004234 <__fp_pscB>:
    4234:	00 24       	eor	r0, r0
    4236:	0a 94       	dec	r0
    4238:	12 16       	cp	r1, r18
    423a:	13 06       	cpc	r1, r19
    423c:	14 06       	cpc	r1, r20
    423e:	05 06       	cpc	r0, r21
    4240:	08 95       	ret

00004242 <__fp_round>:
    4242:	09 2e       	mov	r0, r25
    4244:	03 94       	inc	r0
    4246:	00 0c       	add	r0, r0
    4248:	11 f4       	brne	.+4      	; 0x424e <__fp_round+0xc>
    424a:	88 23       	and	r24, r24
    424c:	52 f0       	brmi	.+20     	; 0x4262 <__fp_round+0x20>
    424e:	bb 0f       	add	r27, r27
    4250:	40 f4       	brcc	.+16     	; 0x4262 <__fp_round+0x20>
    4252:	bf 2b       	or	r27, r31
    4254:	11 f4       	brne	.+4      	; 0x425a <__fp_round+0x18>
    4256:	60 ff       	sbrs	r22, 0
    4258:	04 c0       	rjmp	.+8      	; 0x4262 <__fp_round+0x20>
    425a:	6f 5f       	subi	r22, 0xFF	; 255
    425c:	7f 4f       	sbci	r23, 0xFF	; 255
    425e:	8f 4f       	sbci	r24, 0xFF	; 255
    4260:	9f 4f       	sbci	r25, 0xFF	; 255
    4262:	08 95       	ret

00004264 <__fp_split3>:
    4264:	57 fd       	sbrc	r21, 7
    4266:	90 58       	subi	r25, 0x80	; 128
    4268:	44 0f       	add	r20, r20
    426a:	55 1f       	adc	r21, r21
    426c:	59 f0       	breq	.+22     	; 0x4284 <__fp_splitA+0x10>
    426e:	5f 3f       	cpi	r21, 0xFF	; 255
    4270:	71 f0       	breq	.+28     	; 0x428e <__fp_splitA+0x1a>
    4272:	47 95       	ror	r20

00004274 <__fp_splitA>:
    4274:	88 0f       	add	r24, r24
    4276:	97 fb       	bst	r25, 7
    4278:	99 1f       	adc	r25, r25
    427a:	61 f0       	breq	.+24     	; 0x4294 <__fp_splitA+0x20>
    427c:	9f 3f       	cpi	r25, 0xFF	; 255
    427e:	79 f0       	breq	.+30     	; 0x429e <__fp_splitA+0x2a>
    4280:	87 95       	ror	r24
    4282:	08 95       	ret
    4284:	12 16       	cp	r1, r18
    4286:	13 06       	cpc	r1, r19
    4288:	14 06       	cpc	r1, r20
    428a:	55 1f       	adc	r21, r21
    428c:	f2 cf       	rjmp	.-28     	; 0x4272 <__fp_split3+0xe>
    428e:	46 95       	lsr	r20
    4290:	f1 df       	rcall	.-30     	; 0x4274 <__fp_splitA>
    4292:	08 c0       	rjmp	.+16     	; 0x42a4 <__fp_splitA+0x30>
    4294:	16 16       	cp	r1, r22
    4296:	17 06       	cpc	r1, r23
    4298:	18 06       	cpc	r1, r24
    429a:	99 1f       	adc	r25, r25
    429c:	f1 cf       	rjmp	.-30     	; 0x4280 <__fp_splitA+0xc>
    429e:	86 95       	lsr	r24
    42a0:	71 05       	cpc	r23, r1
    42a2:	61 05       	cpc	r22, r1
    42a4:	08 94       	sec
    42a6:	08 95       	ret

000042a8 <__fp_zero>:
    42a8:	e8 94       	clt

000042aa <__fp_szero>:
    42aa:	bb 27       	eor	r27, r27
    42ac:	66 27       	eor	r22, r22
    42ae:	77 27       	eor	r23, r23
    42b0:	cb 01       	movw	r24, r22
    42b2:	97 f9       	bld	r25, 7
    42b4:	08 95       	ret

000042b6 <log10>:
    42b6:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <log>
    42ba:	29 ed       	ldi	r18, 0xD9	; 217
    42bc:	3b e5       	ldi	r19, 0x5B	; 91
    42be:	4e ed       	ldi	r20, 0xDE	; 222
    42c0:	5e e3       	ldi	r21, 0x3E	; 62
    42c2:	0c 94 b3 21 	jmp	0x4366	; 0x4366 <__mulsf3>
    42c6:	16 f0       	brts	.+4      	; 0x42cc <log10+0x16>
    42c8:	0c 94 20 22 	jmp	0x4440	; 0x4440 <__fp_mpack>
    42cc:	0c 94 10 21 	jmp	0x4220	; 0x4220 <__fp_nan>
    42d0:	68 94       	set
    42d2:	0c 94 0a 21 	jmp	0x4214	; 0x4214 <__fp_inf>

000042d6 <log>:
    42d6:	0e 94 3a 21 	call	0x4274	; 0x4274 <__fp_splitA>
    42da:	a8 f3       	brcs	.-22     	; 0x42c6 <log10+0x10>
    42dc:	99 23       	and	r25, r25
    42de:	c1 f3       	breq	.-16     	; 0x42d0 <log10+0x1a>
    42e0:	ae f3       	brts	.-22     	; 0x42cc <log10+0x16>
    42e2:	df 93       	push	r29
    42e4:	cf 93       	push	r28
    42e6:	1f 93       	push	r17
    42e8:	0f 93       	push	r16
    42ea:	ff 92       	push	r15
    42ec:	c9 2f       	mov	r28, r25
    42ee:	dd 27       	eor	r29, r29
    42f0:	88 23       	and	r24, r24
    42f2:	2a f0       	brmi	.+10     	; 0x42fe <log+0x28>
    42f4:	21 97       	sbiw	r28, 0x01	; 1
    42f6:	66 0f       	add	r22, r22
    42f8:	77 1f       	adc	r23, r23
    42fa:	88 1f       	adc	r24, r24
    42fc:	da f7       	brpl	.-10     	; 0x42f4 <log+0x1e>
    42fe:	20 e0       	ldi	r18, 0x00	; 0
    4300:	30 e0       	ldi	r19, 0x00	; 0
    4302:	40 e8       	ldi	r20, 0x80	; 128
    4304:	5f eb       	ldi	r21, 0xBF	; 191
    4306:	9f e3       	ldi	r25, 0x3F	; 63
    4308:	88 39       	cpi	r24, 0x98	; 152
    430a:	20 f0       	brcs	.+8      	; 0x4314 <log+0x3e>
    430c:	80 3e       	cpi	r24, 0xE0	; 224
    430e:	38 f0       	brcs	.+14     	; 0x431e <log+0x48>
    4310:	21 96       	adiw	r28, 0x01	; 1
    4312:	8f 77       	andi	r24, 0x7F	; 127
    4314:	0e 94 2b 20 	call	0x4056	; 0x4056 <__addsf3>
    4318:	ec e7       	ldi	r30, 0x7C	; 124
    431a:	f0 e0       	ldi	r31, 0x00	; 0
    431c:	04 c0       	rjmp	.+8      	; 0x4326 <log+0x50>
    431e:	0e 94 2b 20 	call	0x4056	; 0x4056 <__addsf3>
    4322:	e9 ea       	ldi	r30, 0xA9	; 169
    4324:	f0 e0       	ldi	r31, 0x00	; 0
    4326:	0e 94 2e 22 	call	0x445c	; 0x445c <__fp_powser>
    432a:	8b 01       	movw	r16, r22
    432c:	be 01       	movw	r22, r28
    432e:	ec 01       	movw	r28, r24
    4330:	fb 2e       	mov	r15, r27
    4332:	6f 57       	subi	r22, 0x7F	; 127
    4334:	71 09       	sbc	r23, r1
    4336:	75 95       	asr	r23
    4338:	77 1f       	adc	r23, r23
    433a:	88 0b       	sbc	r24, r24
    433c:	99 0b       	sbc	r25, r25
    433e:	0e 94 cf 20 	call	0x419e	; 0x419e <__floatsisf>
    4342:	28 e1       	ldi	r18, 0x18	; 24
    4344:	32 e7       	ldi	r19, 0x72	; 114
    4346:	41 e3       	ldi	r20, 0x31	; 49
    4348:	5f e3       	ldi	r21, 0x3F	; 63
    434a:	0e 94 c6 21 	call	0x438c	; 0x438c <__mulsf3x>
    434e:	af 2d       	mov	r26, r15
    4350:	98 01       	movw	r18, r16
    4352:	ae 01       	movw	r20, r28
    4354:	ff 90       	pop	r15
    4356:	0f 91       	pop	r16
    4358:	1f 91       	pop	r17
    435a:	cf 91       	pop	r28
    435c:	df 91       	pop	r29
    435e:	0e 94 42 20 	call	0x4084	; 0x4084 <__addsf3x>
    4362:	0c 94 21 21 	jmp	0x4242	; 0x4242 <__fp_round>

00004366 <__mulsf3>:
    4366:	0e 94 c6 21 	call	0x438c	; 0x438c <__mulsf3x>
    436a:	0c 94 21 21 	jmp	0x4242	; 0x4242 <__fp_round>
    436e:	0e 94 13 21 	call	0x4226	; 0x4226 <__fp_pscA>
    4372:	38 f0       	brcs	.+14     	; 0x4382 <__mulsf3+0x1c>
    4374:	0e 94 1a 21 	call	0x4234	; 0x4234 <__fp_pscB>
    4378:	20 f0       	brcs	.+8      	; 0x4382 <__mulsf3+0x1c>
    437a:	95 23       	and	r25, r21
    437c:	11 f0       	breq	.+4      	; 0x4382 <__mulsf3+0x1c>
    437e:	0c 94 0a 21 	jmp	0x4214	; 0x4214 <__fp_inf>
    4382:	0c 94 10 21 	jmp	0x4220	; 0x4220 <__fp_nan>
    4386:	11 24       	eor	r1, r1
    4388:	0c 94 55 21 	jmp	0x42aa	; 0x42aa <__fp_szero>

0000438c <__mulsf3x>:
    438c:	0e 94 32 21 	call	0x4264	; 0x4264 <__fp_split3>
    4390:	70 f3       	brcs	.-36     	; 0x436e <__mulsf3+0x8>

00004392 <__mulsf3_pse>:
    4392:	95 9f       	mul	r25, r21
    4394:	c1 f3       	breq	.-16     	; 0x4386 <__mulsf3+0x20>
    4396:	95 0f       	add	r25, r21
    4398:	50 e0       	ldi	r21, 0x00	; 0
    439a:	55 1f       	adc	r21, r21
    439c:	62 9f       	mul	r22, r18
    439e:	f0 01       	movw	r30, r0
    43a0:	72 9f       	mul	r23, r18
    43a2:	bb 27       	eor	r27, r27
    43a4:	f0 0d       	add	r31, r0
    43a6:	b1 1d       	adc	r27, r1
    43a8:	63 9f       	mul	r22, r19
    43aa:	aa 27       	eor	r26, r26
    43ac:	f0 0d       	add	r31, r0
    43ae:	b1 1d       	adc	r27, r1
    43b0:	aa 1f       	adc	r26, r26
    43b2:	64 9f       	mul	r22, r20
    43b4:	66 27       	eor	r22, r22
    43b6:	b0 0d       	add	r27, r0
    43b8:	a1 1d       	adc	r26, r1
    43ba:	66 1f       	adc	r22, r22
    43bc:	82 9f       	mul	r24, r18
    43be:	22 27       	eor	r18, r18
    43c0:	b0 0d       	add	r27, r0
    43c2:	a1 1d       	adc	r26, r1
    43c4:	62 1f       	adc	r22, r18
    43c6:	73 9f       	mul	r23, r19
    43c8:	b0 0d       	add	r27, r0
    43ca:	a1 1d       	adc	r26, r1
    43cc:	62 1f       	adc	r22, r18
    43ce:	83 9f       	mul	r24, r19
    43d0:	a0 0d       	add	r26, r0
    43d2:	61 1d       	adc	r22, r1
    43d4:	22 1f       	adc	r18, r18
    43d6:	74 9f       	mul	r23, r20
    43d8:	33 27       	eor	r19, r19
    43da:	a0 0d       	add	r26, r0
    43dc:	61 1d       	adc	r22, r1
    43de:	23 1f       	adc	r18, r19
    43e0:	84 9f       	mul	r24, r20
    43e2:	60 0d       	add	r22, r0
    43e4:	21 1d       	adc	r18, r1
    43e6:	82 2f       	mov	r24, r18
    43e8:	76 2f       	mov	r23, r22
    43ea:	6a 2f       	mov	r22, r26
    43ec:	11 24       	eor	r1, r1
    43ee:	9f 57       	subi	r25, 0x7F	; 127
    43f0:	50 40       	sbci	r21, 0x00	; 0
    43f2:	9a f0       	brmi	.+38     	; 0x441a <__mulsf3_pse+0x88>
    43f4:	f1 f0       	breq	.+60     	; 0x4432 <__mulsf3_pse+0xa0>
    43f6:	88 23       	and	r24, r24
    43f8:	4a f0       	brmi	.+18     	; 0x440c <__mulsf3_pse+0x7a>
    43fa:	ee 0f       	add	r30, r30
    43fc:	ff 1f       	adc	r31, r31
    43fe:	bb 1f       	adc	r27, r27
    4400:	66 1f       	adc	r22, r22
    4402:	77 1f       	adc	r23, r23
    4404:	88 1f       	adc	r24, r24
    4406:	91 50       	subi	r25, 0x01	; 1
    4408:	50 40       	sbci	r21, 0x00	; 0
    440a:	a9 f7       	brne	.-22     	; 0x43f6 <__mulsf3_pse+0x64>
    440c:	9e 3f       	cpi	r25, 0xFE	; 254
    440e:	51 05       	cpc	r21, r1
    4410:	80 f0       	brcs	.+32     	; 0x4432 <__mulsf3_pse+0xa0>
    4412:	0c 94 0a 21 	jmp	0x4214	; 0x4214 <__fp_inf>
    4416:	0c 94 55 21 	jmp	0x42aa	; 0x42aa <__fp_szero>
    441a:	5f 3f       	cpi	r21, 0xFF	; 255
    441c:	e4 f3       	brlt	.-8      	; 0x4416 <__mulsf3_pse+0x84>
    441e:	98 3e       	cpi	r25, 0xE8	; 232
    4420:	d4 f3       	brlt	.-12     	; 0x4416 <__mulsf3_pse+0x84>
    4422:	86 95       	lsr	r24
    4424:	77 95       	ror	r23
    4426:	67 95       	ror	r22
    4428:	b7 95       	ror	r27
    442a:	f7 95       	ror	r31
    442c:	e7 95       	ror	r30
    442e:	9f 5f       	subi	r25, 0xFF	; 255
    4430:	c1 f7       	brne	.-16     	; 0x4422 <__mulsf3_pse+0x90>
    4432:	fe 2b       	or	r31, r30
    4434:	88 0f       	add	r24, r24
    4436:	91 1d       	adc	r25, r1
    4438:	96 95       	lsr	r25
    443a:	87 95       	ror	r24
    443c:	97 f9       	bld	r25, 7
    443e:	08 95       	ret

00004440 <__fp_mpack>:
    4440:	9f 3f       	cpi	r25, 0xFF	; 255
    4442:	31 f0       	breq	.+12     	; 0x4450 <__fp_mpack_finite+0xc>

00004444 <__fp_mpack_finite>:
    4444:	91 50       	subi	r25, 0x01	; 1
    4446:	20 f4       	brcc	.+8      	; 0x4450 <__fp_mpack_finite+0xc>
    4448:	87 95       	ror	r24
    444a:	77 95       	ror	r23
    444c:	67 95       	ror	r22
    444e:	b7 95       	ror	r27
    4450:	88 0f       	add	r24, r24
    4452:	91 1d       	adc	r25, r1
    4454:	96 95       	lsr	r25
    4456:	87 95       	ror	r24
    4458:	97 f9       	bld	r25, 7
    445a:	08 95       	ret

0000445c <__fp_powser>:
    445c:	df 93       	push	r29
    445e:	cf 93       	push	r28
    4460:	1f 93       	push	r17
    4462:	0f 93       	push	r16
    4464:	ff 92       	push	r15
    4466:	ef 92       	push	r14
    4468:	df 92       	push	r13
    446a:	7b 01       	movw	r14, r22
    446c:	8c 01       	movw	r16, r24
    446e:	68 94       	set
    4470:	06 c0       	rjmp	.+12     	; 0x447e <__fp_powser+0x22>
    4472:	da 2e       	mov	r13, r26
    4474:	ef 01       	movw	r28, r30
    4476:	0e 94 c6 21 	call	0x438c	; 0x438c <__mulsf3x>
    447a:	fe 01       	movw	r30, r28
    447c:	e8 94       	clt
    447e:	a5 91       	lpm	r26, Z+
    4480:	25 91       	lpm	r18, Z+
    4482:	35 91       	lpm	r19, Z+
    4484:	45 91       	lpm	r20, Z+
    4486:	55 91       	lpm	r21, Z+
    4488:	a6 f3       	brts	.-24     	; 0x4472 <__fp_powser+0x16>
    448a:	ef 01       	movw	r28, r30
    448c:	0e 94 42 20 	call	0x4084	; 0x4084 <__addsf3x>
    4490:	fe 01       	movw	r30, r28
    4492:	97 01       	movw	r18, r14
    4494:	a8 01       	movw	r20, r16
    4496:	da 94       	dec	r13
    4498:	69 f7       	brne	.-38     	; 0x4474 <__fp_powser+0x18>
    449a:	df 90       	pop	r13
    449c:	ef 90       	pop	r14
    449e:	ff 90       	pop	r15
    44a0:	0f 91       	pop	r16
    44a2:	1f 91       	pop	r17
    44a4:	cf 91       	pop	r28
    44a6:	df 91       	pop	r29
    44a8:	08 95       	ret

000044aa <__udivmodhi4>:
    44aa:	aa 1b       	sub	r26, r26
    44ac:	bb 1b       	sub	r27, r27
    44ae:	51 e1       	ldi	r21, 0x11	; 17
    44b0:	07 c0       	rjmp	.+14     	; 0x44c0 <__udivmodhi4_ep>

000044b2 <__udivmodhi4_loop>:
    44b2:	aa 1f       	adc	r26, r26
    44b4:	bb 1f       	adc	r27, r27
    44b6:	a6 17       	cp	r26, r22
    44b8:	b7 07       	cpc	r27, r23
    44ba:	10 f0       	brcs	.+4      	; 0x44c0 <__udivmodhi4_ep>
    44bc:	a6 1b       	sub	r26, r22
    44be:	b7 0b       	sbc	r27, r23

000044c0 <__udivmodhi4_ep>:
    44c0:	88 1f       	adc	r24, r24
    44c2:	99 1f       	adc	r25, r25
    44c4:	5a 95       	dec	r21
    44c6:	a9 f7       	brne	.-22     	; 0x44b2 <__udivmodhi4_loop>
    44c8:	80 95       	com	r24
    44ca:	90 95       	com	r25
    44cc:	bc 01       	movw	r22, r24
    44ce:	cd 01       	movw	r24, r26
    44d0:	08 95       	ret

000044d2 <__divmodhi4>:
    44d2:	97 fb       	bst	r25, 7
    44d4:	07 2e       	mov	r0, r23
    44d6:	16 f4       	brtc	.+4      	; 0x44dc <__divmodhi4+0xa>
    44d8:	00 94       	com	r0
    44da:	07 d0       	rcall	.+14     	; 0x44ea <__divmodhi4_neg1>
    44dc:	77 fd       	sbrc	r23, 7
    44de:	09 d0       	rcall	.+18     	; 0x44f2 <__divmodhi4_neg2>
    44e0:	0e 94 55 22 	call	0x44aa	; 0x44aa <__udivmodhi4>
    44e4:	07 fc       	sbrc	r0, 7
    44e6:	05 d0       	rcall	.+10     	; 0x44f2 <__divmodhi4_neg2>
    44e8:	3e f4       	brtc	.+14     	; 0x44f8 <__divmodhi4_exit>

000044ea <__divmodhi4_neg1>:
    44ea:	90 95       	com	r25
    44ec:	81 95       	neg	r24
    44ee:	9f 4f       	sbci	r25, 0xFF	; 255
    44f0:	08 95       	ret

000044f2 <__divmodhi4_neg2>:
    44f2:	70 95       	com	r23
    44f4:	61 95       	neg	r22
    44f6:	7f 4f       	sbci	r23, 0xFF	; 255

000044f8 <__divmodhi4_exit>:
    44f8:	08 95       	ret

000044fa <__udivmodsi4>:
    44fa:	a1 e2       	ldi	r26, 0x21	; 33
    44fc:	1a 2e       	mov	r1, r26
    44fe:	aa 1b       	sub	r26, r26
    4500:	bb 1b       	sub	r27, r27
    4502:	fd 01       	movw	r30, r26
    4504:	0d c0       	rjmp	.+26     	; 0x4520 <__udivmodsi4_ep>

00004506 <__udivmodsi4_loop>:
    4506:	aa 1f       	adc	r26, r26
    4508:	bb 1f       	adc	r27, r27
    450a:	ee 1f       	adc	r30, r30
    450c:	ff 1f       	adc	r31, r31
    450e:	a2 17       	cp	r26, r18
    4510:	b3 07       	cpc	r27, r19
    4512:	e4 07       	cpc	r30, r20
    4514:	f5 07       	cpc	r31, r21
    4516:	20 f0       	brcs	.+8      	; 0x4520 <__udivmodsi4_ep>
    4518:	a2 1b       	sub	r26, r18
    451a:	b3 0b       	sbc	r27, r19
    451c:	e4 0b       	sbc	r30, r20
    451e:	f5 0b       	sbc	r31, r21

00004520 <__udivmodsi4_ep>:
    4520:	66 1f       	adc	r22, r22
    4522:	77 1f       	adc	r23, r23
    4524:	88 1f       	adc	r24, r24
    4526:	99 1f       	adc	r25, r25
    4528:	1a 94       	dec	r1
    452a:	69 f7       	brne	.-38     	; 0x4506 <__udivmodsi4_loop>
    452c:	60 95       	com	r22
    452e:	70 95       	com	r23
    4530:	80 95       	com	r24
    4532:	90 95       	com	r25
    4534:	9b 01       	movw	r18, r22
    4536:	ac 01       	movw	r20, r24
    4538:	bd 01       	movw	r22, r26
    453a:	cf 01       	movw	r24, r30
    453c:	08 95       	ret

0000453e <__umulhisi3>:
    453e:	a2 9f       	mul	r26, r18
    4540:	b0 01       	movw	r22, r0
    4542:	b3 9f       	mul	r27, r19
    4544:	c0 01       	movw	r24, r0
    4546:	a3 9f       	mul	r26, r19
    4548:	70 0d       	add	r23, r0
    454a:	81 1d       	adc	r24, r1
    454c:	11 24       	eor	r1, r1
    454e:	91 1d       	adc	r25, r1
    4550:	b2 9f       	mul	r27, r18
    4552:	70 0d       	add	r23, r0
    4554:	81 1d       	adc	r24, r1
    4556:	11 24       	eor	r1, r1
    4558:	91 1d       	adc	r25, r1
    455a:	08 95       	ret

0000455c <strcat>:
    455c:	fb 01       	movw	r30, r22
    455e:	dc 01       	movw	r26, r24
    4560:	0d 90       	ld	r0, X+
    4562:	00 20       	and	r0, r0
    4564:	e9 f7       	brne	.-6      	; 0x4560 <strcat+0x4>
    4566:	11 97       	sbiw	r26, 0x01	; 1
    4568:	01 90       	ld	r0, Z+
    456a:	0d 92       	st	X+, r0
    456c:	00 20       	and	r0, r0
    456e:	e1 f7       	brne	.-8      	; 0x4568 <strcat+0xc>
    4570:	08 95       	ret

00004572 <__itoa_ncheck>:
    4572:	bb 27       	eor	r27, r27
    4574:	4a 30       	cpi	r20, 0x0A	; 10
    4576:	31 f4       	brne	.+12     	; 0x4584 <__itoa_ncheck+0x12>
    4578:	99 23       	and	r25, r25
    457a:	22 f4       	brpl	.+8      	; 0x4584 <__itoa_ncheck+0x12>
    457c:	bd e2       	ldi	r27, 0x2D	; 45
    457e:	90 95       	com	r25
    4580:	81 95       	neg	r24
    4582:	9f 4f       	sbci	r25, 0xFF	; 255
    4584:	0c 94 c5 22 	jmp	0x458a	; 0x458a <__utoa_common>

00004588 <__utoa_ncheck>:
    4588:	bb 27       	eor	r27, r27

0000458a <__utoa_common>:
    458a:	fb 01       	movw	r30, r22
    458c:	55 27       	eor	r21, r21
    458e:	aa 27       	eor	r26, r26
    4590:	88 0f       	add	r24, r24
    4592:	99 1f       	adc	r25, r25
    4594:	aa 1f       	adc	r26, r26
    4596:	a4 17       	cp	r26, r20
    4598:	10 f0       	brcs	.+4      	; 0x459e <__utoa_common+0x14>
    459a:	a4 1b       	sub	r26, r20
    459c:	83 95       	inc	r24
    459e:	50 51       	subi	r21, 0x10	; 16
    45a0:	b9 f7       	brne	.-18     	; 0x4590 <__utoa_common+0x6>
    45a2:	a0 5d       	subi	r26, 0xD0	; 208
    45a4:	aa 33       	cpi	r26, 0x3A	; 58
    45a6:	08 f0       	brcs	.+2      	; 0x45aa <__utoa_common+0x20>
    45a8:	a9 5d       	subi	r26, 0xD9	; 217
    45aa:	a1 93       	st	Z+, r26
    45ac:	00 97       	sbiw	r24, 0x00	; 0
    45ae:	79 f7       	brne	.-34     	; 0x458e <__utoa_common+0x4>
    45b0:	b1 11       	cpse	r27, r1
    45b2:	b1 93       	st	Z+, r27
    45b4:	11 92       	st	Z+, r1
    45b6:	cb 01       	movw	r24, r22
    45b8:	0c 94 de 22 	jmp	0x45bc	; 0x45bc <strrev>

000045bc <strrev>:
    45bc:	dc 01       	movw	r26, r24
    45be:	fc 01       	movw	r30, r24
    45c0:	67 2f       	mov	r22, r23
    45c2:	71 91       	ld	r23, Z+
    45c4:	77 23       	and	r23, r23
    45c6:	e1 f7       	brne	.-8      	; 0x45c0 <strrev+0x4>
    45c8:	32 97       	sbiw	r30, 0x02	; 2
    45ca:	04 c0       	rjmp	.+8      	; 0x45d4 <strrev+0x18>
    45cc:	7c 91       	ld	r23, X
    45ce:	6d 93       	st	X+, r22
    45d0:	70 83       	st	Z, r23
    45d2:	62 91       	ld	r22, -Z
    45d4:	ae 17       	cp	r26, r30
    45d6:	bf 07       	cpc	r27, r31
    45d8:	c8 f3       	brcs	.-14     	; 0x45cc <strrev+0x10>
    45da:	08 95       	ret

000045dc <_exit>:
    45dc:	f8 94       	cli

000045de <__stop_program>:
    45de:	ff cf       	rjmp	.-2      	; 0x45de <__stop_program>
