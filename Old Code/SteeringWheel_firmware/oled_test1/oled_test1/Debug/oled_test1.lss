
oled_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000f26  00800100  000053cc  00005460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000053cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00801026  00801026  00006386  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006386  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000063b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  000063f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021a2  00000000  00000000  00006660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ed  00000000  00000000  00008802  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002449  00000000  00000000  00008def  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009fc  00000000  00000000  0000b238  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009a6  00000000  00000000  0000bc34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015a9  00000000  00000000  0000c5da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0000db83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__ctors_end>
       4:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
       8:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
       c:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      10:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      14:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      18:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      1c:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      20:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      24:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      28:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      2c:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      30:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      34:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      38:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      3c:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      40:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      44:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      48:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__vector_18>
      4c:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      50:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      54:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      58:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      5c:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      60:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      64:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      68:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      6c:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      70:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      74:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      78:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__bad_interrupt>
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__FUSE_REGION_LENGTH__+0x4d0>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <BigText>:
	...
      fe:	0c 00 0c 00 0c 00 0c 00 0c 00 0c 00 0c 00 0c 00     ................
     10e:	0c 00 0c 00 00 00 0e 00 0e 00 0e 00 00 00 00 00     ................
     11e:	00 00 00 00 00 00 19 80 19 80 19 80 19 80 19 80     ................
	...
     14a:	00 00 13 00 13 00 13 00 ff c0 ff c0 13 00 36 00     ..............6.
     15a:	ff 80 ff 80 36 00 36 00 36 00 36 00 00 00 00 00     ....6.6.6.6.....
     16a:	00 00 00 00 02 00 02 00 1f 80 3f 80 66 00 66 00     ..........?.f.f.
     17a:	74 00 3c 00 1f 00 07 80 0c c0 0c c0 4d c0 7f 80     t.<.........M...
     18a:	3f 00 08 00 08 00 00 00 00 00 00 00 78 40 fc c0     ?...........x@..
     19a:	cd 80 cd 00 ff 00 7e 00 04 00 0c 00 0b c0 17 e0     ......~.........
     1aa:	36 60 26 60 67 e0 c3 c0 00 00 00 00 00 00 00 00     6`&`g...........
     1ba:	00 00 0f 00 3f 80 31 80 31 80 33 80 1f 00 1c 00     ....?.1.1.3.....
     1ca:	3c 60 66 60 63 e0 61 c0 71 c0 3f e0 1f 70 00 00     <`f`c.a.q.?..p..
	...
     1e2:	0c 00 0c 00 0c 00 0c 00 0c 00 00 00 00 00 00 00     ................
	...
     206:	01 00 03 80 03 00 06 00 0c 00 0c 00 18 00 18 00     ................
     216:	18 00 18 00 18 00 18 00 18 00 0c 00 0c 00 06 00     ................
     226:	07 00 03 80 01 00 10 00 38 00 18 00 0c 00 06 00     ........8.......
     236:	06 00 03 00 03 00 03 00 03 00 03 00 03 00 03 00     ................
     246:	06 00 06 00 0c 00 18 00 38 00 10 00 00 00 04 00     ........8.......
     256:	24 80 35 80 0e 00 0e 00 37 80 24 80 04 00 00 00     $.5.....7.$.....
	...
     27e:	00 00 06 00 06 00 06 00 06 00 7f e0 7f e0 06 00     ................
     28e:	06 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     2b6:	0c 00 0e 00 06 00 06 00 3c 00 38 00 00 00 00 00     ........<.8.....
	...
     2d2:	00 00 1f 80 1f 80 00 00 00 00 00 00 00 00 00 00     ................
	...
     302:	0e 00 0e 00 0e 00 00 00 00 00 00 00 00 00 00 00     ................
     312:	00 80 01 80 01 80 03 00 03 00 02 00 06 00 04 00     ................
     322:	0c 00 08 00 18 00 18 00 10 00 30 00 20 00 60 00     ..........0. .`.
	...
     33a:	0f 00 1f c0 30 c0 70 e0 60 e0 63 e0 6f 60 7c 60     ....0.p.`.c.o`|`
     34a:	70 60 70 e0 30 c0 3f 80 0f 00 00 00 00 00 00 00     p`p.0.?.........
     35a:	00 00 00 00 00 00 06 00 1e 00 36 00 26 00 06 00     ..........6.&...
     36a:	06 00 06 00 06 00 06 00 06 00 06 00 3f c0 3f c0     ............?.?.
	...
     386:	3c 00 7e 00 43 00 03 00 03 00 03 00 06 00 0c 00     <.~.C...........
     396:	18 00 30 00 20 00 7f 80 7f 80 00 00 00 00 00 00     ..0. ...........
     3a6:	00 00 00 00 00 00 1e 00 3f 80 21 80 01 80 01 80     ........?.!.....
     3b6:	0f 00 0f 80 01 c0 00 c0 00 c0 01 c0 3f 80 3e 00     ............?.>.
	...
     3d2:	07 00 0f 00 0b 00 1b 00 33 00 23 00 63 00 c3 00     ........3.#.c...
     3e2:	ff c0 ff c0 03 00 03 00 03 00 00 00 00 00 00 00     ................
     3f2:	00 00 00 00 00 00 3f 80 3f 80 30 00 30 00 30 00     ......?.?.0.0.0.
     402:	3f 00 3f 80 01 c0 00 c0 00 c0 01 c0 3f 80 3e 00     ?.?.........?.>.
	...
     41e:	07 80 1f 80 38 00 30 00 60 00 6f 00 7f 80 71 c0     ....8.0.`.o...q.
     42e:	60 c0 60 c0 31 c0 3f 80 1f 00 00 00 00 00 00 00     `.`.1.?.........
     43e:	00 00 00 00 00 00 7f c0 7f c0 00 c0 01 80 01 80     ................
     44e:	03 00 03 00 06 00 06 00 0c 00 0c 00 18 00 18 00     ................
	...
     46a:	1f 00 3f c0 60 c0 60 c0 71 80 1f 00 1f 00 33 80     ..?.`.`.q.....3.
     47a:	60 c0 60 c0 60 c0 3f 80 1f 00 00 00 00 00 00 00     `.`.`.?.........
     48a:	00 00 00 00 00 00 1f 00 3f 80 71 80 60 c0 60 c0     ........?.q.`.`.
     49a:	71 c0 3f c0 1e c0 00 c0 01 80 03 80 3f 00 3c 00     q.?.........?.<.
	...
     4ba:	00 00 0e 00 0e 00 0e 00 00 00 00 00 00 00 00 00     ................
     4ca:	0e 00 0e 00 0e 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4e2:	0e 00 0e 00 0e 00 00 00 00 00 00 00 00 00 0c 00     ................
     4f2:	0e 00 06 00 06 00 3c 00 38 00 00 00 00 00 00 00     ......<.8.......
     502:	00 00 00 00 01 00 03 00 06 00 0c 00 30 00 60 00     ............0.`.
     512:	30 00 0c 00 06 00 03 00 01 00 00 00 00 00 00 00     0...............
	...
     532:	7f 80 7f 80 00 00 00 00 7f 80 7f 80 00 00 00 00     ................
	...
     552:	10 00 18 00 0c 00 06 00 01 80 00 c0 01 80 06 00     ................
     562:	0c 00 18 00 10 00 00 00 00 00 00 00 00 00 00 00     ................
     572:	1c 00 1f 00 03 00 01 80 01 80 01 80 0f 80 0f 00     ................
     582:	0c 00 0c 00 00 00 0e 00 0e 00 0e 00 00 00 00 00     ................
     592:	00 00 00 00 00 00 0f 00 11 80 20 80 60 40 40 40     .......... .`@@@
     5a2:	4f 40 9f 40 9b 40 b3 40 b3 40 b3 40 bf 80 9d 80     O@.@.@.@.@.@....
     5b2:	80 00 c0 00 40 00 61 00 3e 00 00 00 00 00 0e 00     ....@.a.>.......
     5c2:	0a 00 0a 00 1b 00 1b 00 11 00 31 80 31 80 3f 80     ..........1.1.?.
     5d2:	3f 80 60 c0 60 c0 40 c0 00 00 00 00 00 00 00 00     ?.`.`.@.........
     5e2:	00 00 00 00 3f 80 3f e0 30 60 30 60 30 e0 3f 80     ....?.?.0`0`0.?.
     5f2:	3f c0 30 e0 30 60 30 60 30 e0 3f c0 3f 00 00 00     ?.0.0`0`0.?.?...
	...
     60a:	00 00 0f 80 1f c0 38 40 30 00 60 00 60 00 60 00     ......8@0.`.`.`.
     61a:	60 00 60 00 70 00 38 40 1f c0 0f 80 00 00 00 00     `.`.p.8@........
	...
     632:	7e 00 7f 80 61 80 61 c0 60 c0 60 c0 60 c0 60 c0     ~...a.a.`.`.`.`.
     642:	60 c0 61 c0 63 80 7f 00 7e 00 00 00 00 00 00 00     `.a.c...~.......
     652:	00 00 00 00 00 00 3f 80 3f 80 30 00 30 00 30 00     ......?.?.0.0.0.
     662:	3f 80 3f 80 30 00 30 00 30 00 30 00 3f 80 3f 80     ?.?.0.0.0.0.?.?.
	...
     67e:	3f 80 3f 80 30 00 30 00 30 00 3f 80 3f 80 30 00     ?.?.0.0.0.?.?.0.
     68e:	30 00 30 00 30 00 30 00 30 00 00 00 00 00 00 00     0.0.0.0.0.......
     69e:	00 00 00 00 00 00 07 c0 1f e0 38 20 30 00 60 00     ..........8 0.`.
     6ae:	63 e0 63 e0 60 60 60 60 70 60 38 60 1f e0 0f c0     c.c.````p`8`....
	...
     6ca:	60 c0 60 c0 60 c0 60 c0 60 c0 7f c0 7f c0 60 c0     `.`.`.`.`.....`.
     6da:	60 c0 60 c0 60 c0 60 c0 60 c0 00 00 00 00 00 00     `.`.`.`.`.......
     6ea:	00 00 00 00 00 00 3f c0 3f c0 06 00 06 00 06 00     ......?.?.......
     6fa:	06 00 06 00 06 00 06 00 06 00 06 00 3f c0 3f c0     ............?.?.
	...
     716:	3f 80 3f 80 01 80 01 80 01 80 01 80 01 80 01 80     ?.?.............
     726:	01 80 01 80 23 80 3f 00 1e 00 00 00 00 00 00 00     ....#.?.........
     736:	00 00 00 00 00 00 30 c0 31 80 33 00 33 00 36 00     ......0.1.3.3.6.
     746:	34 00 3c 00 34 00 36 00 33 00 33 00 31 80 30 c0     4.<.4.6.3.3.1.0.
	...
     762:	30 00 30 00 30 00 30 00 30 00 30 00 30 00 30 00     0.0.0.0.0.0.0.0.
     772:	30 00 30 00 30 00 3f 80 3f 80 00 00 00 00 00 00     0.0.0.?.?.......
     782:	00 00 00 00 00 00 60 c0 71 c0 71 c0 71 c0 7b c0     ......`.q.q.q.{.
     792:	6a c0 6a c0 6e c0 64 c0 60 c0 60 c0 60 c0 60 c0     j.j.n.d.`.`.`.`.
	...
     7ae:	70 c0 70 c0 78 c0 68 c0 68 c0 6c c0 64 c0 66 c0     p.p.x.h.h.l.d.f.
     7be:	62 c0 62 c0 63 c0 61 c0 61 c0 00 00 00 00 00 00     b.b.c.a.a.......
     7ce:	00 00 00 00 00 00 0f 00 3f 80 31 80 70 c0 60 c0     ........?.1.p.`.
     7de:	60 c0 60 c0 60 c0 60 c0 61 c0 31 80 3f 80 1e 00     `.`.`.`.a.1.?...
	...
     7fa:	3f 80 3f c0 30 e0 30 60 30 60 30 e0 3f c0 3f 00     ?.?.0.0`0`0.?.?.
     80a:	30 00 30 00 30 00 30 00 30 00 00 00 00 00 00 00     0.0.0.0.0.......
     81a:	00 00 00 00 00 00 0f 00 1f c0 30 c0 70 e0 60 60     ..........0.p.``
     82a:	60 60 60 60 60 60 60 60 70 e0 30 c0 3f 80 1f 00     ````````p.0.?...
     83a:	06 00 07 10 03 f0 01 e0 00 00 00 00 3f 00 3f 80     ............?.?.
     84a:	31 c0 30 c0 30 c0 31 c0 3f 80 3e 00 33 80 31 80     1.0.0.1.?.>.3.1.
     85a:	30 c0 30 c0 30 60 00 00 00 00 00 00 00 00 00 00     0.0.0`..........
     86a:	00 00 1f 00 3f 80 60 80 60 00 70 00 3c 00 1f 00     ....?.`.`.p.<...
     87a:	03 80 00 c0 00 c0 41 c0 7f 80 3f 00 00 00 00 00     ......A...?.....
	...
     892:	7f e0 7f e0 06 00 06 00 06 00 06 00 06 00 06 00     ................
     8a2:	06 00 06 00 06 00 06 00 06 00 00 00 00 00 00 00     ................
     8b2:	00 00 00 00 00 00 60 c0 60 c0 60 c0 60 c0 60 c0     ......`.`.`.`.`.
     8c2:	60 c0 60 c0 60 c0 60 c0 60 c0 71 c0 3f 80 1f 00     `.`.`.`.`.q.?...
	...
     8de:	c0 40 c0 c0 c0 c0 60 80 61 80 21 80 31 80 31 00     .@....`.a.!.1.1.
     8ee:	1b 00 1b 00 1a 00 0e 00 0e 00 00 00 00 00 00 00     ................
     8fe:	00 00 00 00 00 00 40 40 40 40 40 40 40 40 44 40     ......@@@@@@@@D@
     90e:	4e 40 4a 40 4a 40 5b 40 51 40 51 c0 71 c0 60 c0     N@J@J@[@Q@Q.q.`.
	...
     92a:	60 c0 31 80 3b 00 1b 00 0e 00 0e 00 0e 00 1f 00     `.1.;...........
     93a:	1b 00 31 80 31 80 60 c0 c0 e0 00 00 00 00 00 00     ..1.1.`.........
     94a:	00 00 00 00 00 00 c0 30 60 60 30 c0 30 c0 19 80     .......0``0.0...
     95a:	1d 80 0f 00 06 00 06 00 06 00 06 00 06 00 06 00     ................
	...
     976:	7f c0 7f c0 00 80 01 00 03 00 06 00 04 00 0c 00     ................
     986:	18 00 10 00 30 00 7f c0 7f c0 00 00 00 00 00 00     ....0...........
	...
     9a2:	1f 00 3f 80 21 80 01 80 1f 80 7f 80 61 80 63 80     ..?.!.......a.c.
     9b2:	7f 80 3d 80 00 00 00 00 00 00 00 00 00 00 30 00     ..=...........0.
     9c2:	30 00 30 00 30 00 37 80 3f c0 38 e0 30 60 30 60     0.0.0.7.?.8.0`0`
     9d2:	30 60 30 60 30 c0 3f c0 1f 00 00 00 00 00 00 00     0`0`0.?.........
	...
     9ee:	07 80 1f c0 18 40 30 00 30 00 30 00 30 00 38 40     .....@0.0.0.0.8@
     9fe:	1f c0 0f 80 00 00 00 00 00 00 00 00 00 00 00 c0     ................
     a0e:	00 c0 00 c0 00 c0 0f c0 3f c0 30 c0 60 c0 60 c0     ........?.0.`.`.
     a1e:	60 c0 60 c0 73 c0 3f c0 1e c0 00 00 00 00 00 00     `.`.s.?.........
	...
     a3a:	1f 00 3f 80 31 c0 60 c0 7f c0 7f c0 60 00 70 00     ..?.1.`.....`.p.
     a4a:	3f 80 1f 80 00 00 00 00 00 00 00 00 00 00 03 c0     ?...............
     a5a:	07 c0 0c 00 0c 00 0c 00 7f 80 7f 80 0c 00 0c 00     ................
     a6a:	0c 00 0c 00 0c 00 0c 00 0c 00 00 00 00 00 00 00     ................
	...
     a86:	0f c0 1f c0 31 80 31 80 31 80 1f 00 3e 00 60 00     ....1.1.1...>.`.
     a96:	7f 80 3f c0 60 c0 60 c0 7f 80 3f 00 00 00 30 00     ..?.`.`...?...0.
     aa6:	30 00 30 00 30 00 37 80 3f c0 38 c0 30 c0 30 c0     0.0.0.7.?.8.0.0.
     ab6:	30 c0 30 c0 30 c0 30 c0 30 c0 00 00 00 00 00 00     0.0.0.0.0.......
     ac6:	00 00 0e 00 0e 00 0e 00 00 00 00 00 3e 00 3e 00     ............>.>.
     ad6:	06 00 06 00 06 00 06 00 06 00 06 00 3f c0 3f c0     ............?.?.
	...
     aee:	03 80 03 80 03 80 00 00 00 00 3f 80 3f 80 01 80     ..........?.?...
     afe:	01 80 01 80 01 80 01 80 01 80 01 80 01 80 01 80     ................
     b0e:	21 80 3f 00 1e 00 00 00 30 00 30 00 30 00 30 00     !.?.....0.0.0.0.
     b1e:	30 c0 31 80 33 00 36 00 3c 00 36 00 36 00 33 00     0.1.3.6.<.6.6.3.
     b2e:	31 80 30 c0 00 00 00 00 00 00 00 00 00 00 3e 00     1.0...........>.
     b3e:	3e 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00     >...............
     b4e:	06 00 06 00 06 00 3f c0 3f c0 00 00 00 00 00 00     ......?.?.......
	...
     b6a:	6c c0 7f e0 77 60 66 60 66 60 66 60 66 60 66 60     l...w`f`f`f`f`f`
     b7a:	66 60 66 60 00 00 00 00 00 00 00 00 00 00 00 00     f`f`............
     b8a:	00 00 00 00 00 00 37 80 3f c0 38 c0 30 c0 30 c0     ......7.?.8.0.0.
     b9a:	30 c0 30 c0 30 c0 30 c0 30 c0 00 00 00 00 00 00     0.0.0.0.0.......
	...
     bb6:	1f 00 3f 80 31 c0 60 c0 60 c0 60 c0 60 c0 71 80     ..?.1.`.`.`.`.q.
     bc6:	3f 80 1f 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
     bd6:	00 00 00 00 00 00 37 00 3f 80 39 c0 30 c0 30 c0     ......7.?.9.0.0.
     be6:	30 c0 30 c0 31 c0 3f 80 3f 00 30 00 30 00 30 00     0.0.1.?.?.0.0.0.
     bf6:	30 00 00 00 00 00 00 00 00 00 00 00 0f c0 3f c0     0.............?.
     c06:	30 c0 60 c0 60 c0 60 c0 60 c0 73 c0 3f c0 1e c0     0.`.`.`.`.s.?...
     c16:	00 c0 00 c0 00 c0 00 c0 00 00 00 00 00 00 00 00     ................
     c26:	00 00 37 80 3f c0 38 c0 30 c0 30 00 30 00 30 00     ..7.?.8.0.0.0.0.
     c36:	30 00 30 00 30 00 00 00 00 00 00 00 00 00 00 00     0.0.0...........
	...
     c4e:	0f 00 3f 80 30 80 30 00 1e 00 07 80 00 c0 20 c0     ..?.0.0....... .
     c5e:	3f c0 1f 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
     c6e:	0c 00 0c 00 0c 00 7f c0 7f c0 0c 00 0c 00 0c 00     ................
     c7e:	0c 00 0c 00 0c 00 0f c0 07 c0 00 00 00 00 00 00     ................
	...
     c9a:	30 c0 30 c0 30 c0 30 c0 30 c0 30 c0 30 c0 31 c0     0.0.0.0.0.0.0.1.
     caa:	3f c0 1e c0 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
     cba:	00 00 00 00 00 00 60 c0 60 c0 60 80 31 80 31 80     ......`.`.`.1.1.
     cca:	11 00 1b 00 1a 00 0a 00 0e 00 00 00 00 00 00 00     ................
	...
     ce6:	40 40 40 40 64 40 66 40 6a 40 6a 40 2b 40 29 40     @@@@d@f@j@j@+@)@
     cf6:	39 c0 31 c0 00 00 00 00 00 00 00 00 00 00 00 00     9.1.............
     d06:	00 00 00 00 00 00 60 c0 31 80 1b 00 1b 00 0e 00     ......`.1.......
     d16:	0e 00 1b 00 1b 00 31 80 61 c0 00 00 00 00 00 00     ......1.a.......
	...
     d32:	60 c0 60 c0 60 80 31 80 31 00 11 00 1b 00 1a 00     `.`.`.1.1.......
     d42:	0e 00 0c 00 0c 00 18 00 f8 00 f0 00 00 00 00 00     ................
     d52:	00 00 00 00 00 00 3f c0 3f c0 00 80 01 00 02 00     ......?.?.......
     d62:	04 00 08 00 18 00 3f c0 3f c0 00 00 00 00 00 00     ......?.?.......
	...

00000d74 <BiggerText>:
	...
     da8:	03 80 03 80 03 80 03 80 03 80 03 80 03 80 03 80     ................
     db8:	03 80 03 80 03 80 03 80 03 80 03 80 00 00 00 00     ................
     dc8:	03 80 03 80 03 80 00 00 00 00 00 00 00 00 00 00     ................
     dd8:	00 00 1c e0 1c e0 1c e0 1c e0 1c e0 1c e0 00 00     ................
	...
     e10:	06 38 06 38 06 38 06 38 3f fe 3f fe 0e 70 0e 70     .8.8.8.8?.?..p.p
     e20:	0c 70 0c 70 7f fc 7f fc 0c 70 1c e0 1c e0 1c e0     .p.p.....p......
     e30:	1c e0 00 00 00 00 00 00 00 00 00 00 00 60 00 c0     .............`..
     e40:	00 c0 07 f0 0f f8 1c c8 38 c0 38 c0 38 80 1f 80     ........8.8.8...
     e50:	0f 80 07 e0 01 f8 01 bc 01 9c 03 1c 03 1c 23 38     ..............#8
     e60:	3f f8 1f e0 03 00 03 00 06 00 00 00 00 00 00 00     ?...............
     e70:	3c 0c 7e 18 e7 38 e7 30 e7 60 e7 60 7e c0 3d 80     <.~..8.0.`.`~.=.
     e80:	01 80 03 00 07 00 06 78 0c fc 1d ce 19 ce 31 ce     .......x......1.
     e90:	31 ce 60 fc c0 78 00 00 00 00 00 00 00 00 00 00     1.`..x..........
     ea0:	00 00 07 c0 1f e0 3c f0 38 70 38 70 38 70 38 e0     ......<.8p8p8p8.
     eb0:	1d c0 1f 80 1e 00 3f 1c 3b 9c 71 dc 71 d8 70 f8     ......?.;.q.q.p.
     ec0:	70 70 78 f8 3f fc 0f 8e 00 00 00 00 00 00 00 00     ppx.?...........
     ed0:	00 00 00 00 03 80 03 80 03 80 03 80 03 80 03 80     ................
	...
     f04:	00 40 00 e0 01 c0 03 80 03 00 07 00 0e 00 0e 00     .@..............
     f14:	0e 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00     ................
     f24:	0e 00 0e 00 0e 00 07 00 07 00 03 80 01 c0 00 e0     ................
     f34:	00 40 04 00 0e 00 07 00 03 80 01 c0 01 c0 00 e0     .@..............
     f44:	00 e0 00 e0 00 70 00 70 00 70 00 70 00 70 00 70     .....p.p.p.p.p.p
     f54:	00 70 00 e0 00 e0 00 e0 01 c0 01 80 03 80 07 00     .p..............
     f64:	0e 00 04 00 00 00 01 80 01 80 09 90 1d b8 07 e0     ................
     f74:	01 80 07 e0 1d b8 01 90 01 80 01 80 00 00 00 00     ................
	...
     fa8:	03 80 03 80 03 80 03 80 03 80 7f fc 7f fc 03 80     ................
     fb8:	03 80 03 80 03 80 03 80 00 00 00 00 00 00 00 00     ................
	...
     fec:	07 00 07 80 07 80 03 80 03 80 03 80 07 00 1e 00     ................
     ffc:	1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1014:	00 00 1f e0 1f e0 00 00 00 00 00 00 00 00 00 00     ................
	...
    1050:	03 00 07 80 07 80 03 00 00 00 00 00 00 00 00 00     ................
    1060:	00 00 00 00 00 18 00 38 00 30 00 30 00 60 00 60     .......8.0.0.`.`
    1070:	00 e0 00 c0 00 c0 01 80 01 80 03 00 03 00 07 00     ................
    1080:	06 00 06 00 0c 00 0c 00 1c 00 18 00 18 00 30 00     ..............0.
	...
    1098:	00 00 07 c0 1f f0 1c 78 38 38 38 38 70 3c 70 7c     .......x8888p<p|
    10a8:	71 dc 73 9c 77 1c 7c 1c 78 1c 38 38 38 38 3c 70     q.s.w.|.x.8888<p
    10b8:	1f f0 07 c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
    10c8:	00 00 00 00 01 c0 07 c0 1d c0 39 c0 11 c0 01 c0     ..........9.....
    10d8:	01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
    10e8:	01 c0 1f f8 1f f8 00 00 00 00 00 00 00 00 00 00     ................
    10f8:	00 00 00 00 00 00 0f 80 1f e0 38 e0 10 70 00 70     ..........8..p.p
    1108:	00 70 00 70 00 e0 00 e0 01 c0 03 80 07 00 0e 00     .p.p............
    1118:	1c 00 18 00 3f f8 3f f8 00 00 00 00 00 00 00 00     ....?.?.........
	...
    1130:	1f 80 3f e0 20 f0 00 70 00 70 00 70 00 e0 0f c0     ..?. ..p.p.p....
    1140:	0f e0 00 f0 00 38 00 38 00 38 00 38 00 f0 3f e0     .....8.8.8.8..?.
    1150:	3f 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
    1160:	00 00 00 78 00 f8 01 f8 03 b8 03 38 06 38 0e 38     ...x.......8.8.8
    1170:	0c 38 18 38 30 38 70 38 7f fe 7f fe 00 38 00 38     .8.808p8.....8.8
    1180:	00 38 00 38 00 00 00 00 00 00 00 00 00 00 00 00     .8.8............
    1190:	00 00 00 00 3f f0 3f f0 38 00 38 00 38 00 38 00     ....?.?.8.8.8.8.
    11a0:	38 00 3f c0 3f f0 00 f8 00 38 00 38 00 38 00 78     8.?.?....8.8.8.x
    11b0:	00 f0 3f e0 3f 80 00 00 00 00 00 00 00 00 00 00     ..?.?...........
    11c0:	00 00 00 00 00 00 01 f8 07 f8 0f 00 1e 00 1c 00     ................
    11d0:	18 00 38 00 3b f0 3f f8 3c 3c 38 1c 38 1c 38 1c     ..8.;.?.<<8.8.8.
    11e0:	1c 1c 1c 38 0f f0 07 e0 00 00 00 00 00 00 00 00     ...8............
	...
    11f8:	3f fc 3f fc 00 1c 00 18 00 38 00 30 00 70 00 60     ?.?......8.0.p.`
    1208:	00 e0 00 c0 01 c0 01 80 03 80 03 00 07 00 06 00     ................
    1218:	0e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1228:	00 00 07 e0 1f f8 3c 3c 38 1c 38 1c 3c 1c 1e 78     ......<<8.8.<..x
    1238:	0f e0 07 f0 1e 78 1c 3c 38 1c 38 1c 38 1c 3c 3c     .....x.<8.8.8.<<
    1248:	1f f8 07 e0 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1258:	00 00 00 00 07 c0 1f f0 3c 78 78 38 70 1c 70 1c     ........<xx8p.p.
    1268:	70 1c 70 1c 38 3c 3f fc 0f dc 00 18 00 38 00 70     p.p.8<?......8.p
    1278:	00 f0 3f c0 3f 00 00 00 00 00 00 00 00 00 00 00     ..?.?...........
	...
    1294:	00 00 03 00 07 80 07 80 03 00 00 00 00 00 00 00     ................
    12a4:	00 00 00 00 03 00 07 80 07 80 03 00 00 00 00 00     ................
	...
    12c8:	01 80 03 c0 03 c0 01 80 00 00 00 00 00 00 00 00     ................
    12d8:	00 00 03 80 03 c0 03 c0 01 c0 01 c0 01 c0 03 80     ................
    12e8:	0f 00 0e 00 00 00 00 00 00 00 00 00 00 00 00 20     ............... 
    12f8:	00 70 00 e0 01 c0 07 00 0e 00 1c 00 38 00 1c 00     .p..........8...
    1308:	0e 00 07 80 01 c0 00 e0 00 70 00 20 00 00 00 00     .........p. ....
	...
    1330:	3f f8 3f f8 00 00 00 00 00 00 3f f8 3f f8 00 00     ?.?.......?.?...
	...
    1358:	00 00 08 00 1c 00 0e 00 07 00 03 c0 00 e0 00 70     ...............p
    1368:	00 38 00 70 00 e0 01 c0 07 00 0e 00 1c 00 08 00     .8.p............
	...
    1384:	0f 00 0f c0 01 e0 00 70 00 38 00 38 00 38 00 38     .......p.8.8.8.8
    1394:	00 78 03 f0 03 e0 03 80 03 80 03 80 00 00 00 00     .x..............
    13a4:	07 00 07 00 07 00 00 00 00 00 00 00 00 00 00 00     ................
    13b4:	00 00 03 e0 07 f8 0e 18 18 0c 38 0c 30 06 60 06     ..........8.0.`.
    13c4:	61 f6 63 f6 c7 36 c6 76 ce 66 ce 66 ce 66 ce 66     a.c..6.v.f.f.f.f
    13d4:	ce ec cf bc c7 38 e0 00 60 00 70 00 38 20 1f e0     .....8..`.p.8 ..
    13e4:	0f c0 00 00 00 00 00 00 03 80 02 c0 06 c0 06 c0     ................
    13f4:	06 e0 0c 60 0c 60 0c 70 18 30 18 30 18 30 3f f8     ...`.`.p.0.0.0?.
    1404:	3f f8 30 18 70 1c 60 0c 60 0c 00 00 00 00 00 00     ?.0.p.`.`.......
	...
    141c:	00 00 3f e0 3f f0 38 78 38 38 38 38 38 38 38 70     ..?.?.8x8888888p
    142c:	3f e0 3f f0 38 38 38 1c 38 1c 38 1c 38 1c 38 38     ?.?.888.8.8.8.88
    143c:	3f f0 3f c0 00 00 00 00 00 00 00 00 00 00 00 00     ?.?.............
    144c:	00 00 00 00 03 f0 0f f8 1e 08 3c 00 38 00 70 00     ..........<.8.p.
    145c:	70 00 70 00 70 00 70 00 70 00 70 00 38 00 38 00     p.p.p.p.p.p.8.8.
    146c:	1e 08 0f f8 07 f0 00 00 00 00 00 00 00 00 00 00     ................
    147c:	00 00 00 00 00 00 7f 80 7f e0 70 70 70 38 70 38     ..........ppp8p8
    148c:	70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 38     p.p.p.p.p.p.p.p8
    149c:	70 38 70 f0 7f e0 7f 80 00 00 00 00 00 00 00 00     p8p.............
	...
    14b4:	1f f8 1f f8 1c 00 1c 00 1c 00 1c 00 1c 00 1f f8     ................
    14c4:	1f f8 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1f f8     ................
    14d4:	1f f8 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    14e4:	00 00 1f f8 1f f8 1c 00 1c 00 1c 00 1c 00 1c 00     ................
    14f4:	1f f8 1f f8 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00     ................
    1504:	1c 00 1c 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1514:	00 00 00 00 03 f8 0f fc 1e 04 3c 00 38 00 78 00     ..........<.8.x.
    1524:	70 00 70 fc 70 fc 70 1c 70 1c 70 1c 38 1c 38 1c     p.p.p.p.p.p.8.8.
    1534:	1e 1c 0f fc 03 f0 00 00 00 00 00 00 00 00 00 00     ................
    1544:	00 00 00 00 00 00 70 38 70 38 70 38 70 38 70 38     ......p8p8p8p8p8
    1554:	70 38 70 38 7f f8 7f f8 70 38 70 38 70 38 70 38     p8p8....p8p8p8p8
    1564:	70 38 70 38 70 38 70 38 00 00 00 00 00 00 00 00     p8p8p8p8........
	...
    157c:	3f f8 3f f8 03 80 03 80 03 80 03 80 03 80 03 80     ?.?.............
    158c:	03 80 03 80 03 80 03 80 03 80 03 80 03 80 3f f8     ..............?.
    159c:	3f f8 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
    15ac:	00 00 3f f0 3f f0 00 70 00 70 00 70 00 70 00 70     ..?.?..p.p.p.p.p
    15bc:	00 70 00 70 00 70 00 70 00 70 00 70 00 70 20 e0     .p.p.p.p.p.p.p .
    15cc:	3f c0 1f 80 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
    15dc:	00 00 00 00 38 18 38 38 38 70 38 e0 38 c0 39 80     ....8.888p8.8.9.
    15ec:	3b 80 3b 00 3e 00 3b 00 3b 80 39 c0 38 c0 38 e0     ;.;.>.;.;.9.8.8.
    15fc:	38 70 38 38 38 1c 00 00 00 00 00 00 00 00 00 00     8p888...........
    160c:	00 00 00 00 00 00 1c 00 1c 00 1c 00 1c 00 1c 00     ................
    161c:	1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00     ................
    162c:	1c 00 1c 00 1f f8 1f f8 00 00 00 00 00 00 00 00     ................
	...
    1644:	38 38 38 38 38 38 3c 78 3c 78 34 58 36 d8 36 98     888888<x<x4X6.6.
    1654:	32 98 33 98 30 18 30 18 30 18 30 18 30 18 30 18     2.3.0.0.0.0.0.0.
    1664:	30 18 00 00 00 00 00 00 00 00 00 00 00 00 00 00     0...............
    1674:	00 00 3c 38 3c 38 3c 38 3e 38 3a 38 3a 38 3b 38     ..<8<8<8>8:8:8;8
    1684:	39 38 39 38 39 b8 39 b8 38 b8 38 f8 38 f8 38 78     98989.9.8.8.8.8x
    1694:	38 78 38 78 00 00 00 00 00 00 00 00 00 00 00 00     8x8x............
    16a4:	00 00 00 00 07 c0 0f f0 1c 78 38 38 38 3c 70 1c     .........x888<p.
    16b4:	70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 78 38 38 38     p.p.p.p.p.p.x888
    16c4:	3c 70 1f e0 07 c0 00 00 00 00 00 00 00 00 00 00     <p..............
    16d4:	00 00 00 00 00 00 3f e0 3f f0 38 78 38 1c 38 1c     ......?.?.8x8.8.
    16e4:	38 1c 38 1c 38 3c 38 78 3f f0 3f c0 38 00 38 00     8.8.8<8x?.?.8.8.
    16f4:	38 00 38 00 38 00 38 00 00 00 00 00 00 00 00 00     8.8.8.8.........
	...
    170c:	07 e0 0f f8 1c 3c 38 1c 38 1c 70 0e 70 0e 70 0e     .....<8.8.p.p.p.
    171c:	70 0e 70 0e 70 0e 70 0e 78 1c 38 1c 3c 38 1f f0     p.p.p.p.x.8.<8..
    172c:	07 e0 01 c0 01 c0 00 e2 00 ff 00 3e 00 00 00 00     ...........>....
    173c:	00 00 3f c0 3f f0 38 78 38 38 38 38 38 38 38 38     ..?.?.8x88888888
    174c:	38 70 3f e0 3f c0 38 e0 38 70 38 70 38 38 38 38     8p?.?.8.8p8p8888
    175c:	38 18 38 1c 00 00 00 00 00 00 00 00 00 00 00 00     8.8.............
    176c:	00 00 00 00 07 f0 0f f8 1c 08 38 00 38 00 38 00     ..........8.8.8.
    177c:	1e 00 1f 80 07 e0 00 f8 00 3c 00 1c 00 1c 00 1c     .........<......
    178c:	20 38 3f f0 1f e0 00 00 00 00 00 00 00 00 00 00      8?.............
    179c:	00 00 00 00 00 00 7f fc 7f fc 03 80 03 80 03 80     ................
    17ac:	03 80 03 80 03 80 03 80 03 80 03 80 03 80 03 80     ................
    17bc:	03 80 03 80 03 80 03 80 00 00 00 00 00 00 00 00     ................
	...
    17d4:	70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c     p.p.p.p.p.p.p.p.
    17e4:	70 1c 70 1c 70 1c 70 1c 70 1c 70 3c 38 38 1f f0     p.p.p.p.p.p<88..
    17f4:	0f c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1804:	00 00 60 0c 70 0c 70 1c 30 18 30 18 38 38 18 30     ..`.p.p.0.0.88.0
    1814:	18 30 1c 70 1c 60 0c 60 0e e0 0e c0 06 c0 06 c0     .0.p.`.`........
    1824:	07 80 03 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1834:	00 00 00 00 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c     ....p.p.p.p.p.p.
    1844:	71 9c 73 9c 73 9c 72 9c 76 dc 36 d8 34 58 3c 78     q.s.s.r.v.6.4X<x
    1854:	3c 78 38 38 38 38 00 00 00 00 00 00 00 00 00 00     <x8888..........
    1864:	00 00 00 00 00 00 70 1c 38 38 18 30 1c 70 0e e0     ......p.88.0.p..
    1874:	07 c0 07 c0 03 80 03 80 07 c0 0e e0 0e e0 1c 70     ...............p
    1884:	38 38 38 38 70 1c e0 0e 00 00 00 00 00 00 00 00     8888p...........
	...
    189c:	e0 0e 70 1c 70 1c 38 38 38 38 1c 70 0c 60 0e e0     ..p.p.8888.p.`..
    18ac:	06 c0 07 c0 03 80 03 80 03 80 03 80 03 80 03 80     ................
    18bc:	03 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    18cc:	00 00 7f f8 7f f8 00 30 00 60 00 e0 00 c0 01 c0     .......0.`......
    18dc:	01 80 03 00 07 00 06 00 0c 00 1c 00 18 00 30 00     ..............0.
    18ec:	7f fc 7f fc 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1908:	07 e0 1f f8 10 3c 00 1c 00 1c 07 fc 1f fc 3c 1c     .....<........<.
    1918:	38 1c 38 1c 3c 7c 1f fc 0f 9c 00 00 00 00 00 00     8.8.<|..........
    1928:	00 00 00 00 00 00 38 00 38 00 38 00 38 00 38 00     ......8.8.8.8.8.
    1938:	38 00 39 e0 3b f8 3e 38 3c 1c 38 1c 38 1c 38 1c     8.9.;.>8<.8.8.8.
    1948:	38 1c 38 1c 38 38 38 78 3f f0 1f c0 00 00 00 00     8.8.888x?.......
	...
    196c:	03 e0 0f f0 1e 10 1c 00 38 00 38 00 38 00 38 00     ........8.8.8.8.
    197c:	38 00 3c 00 1e 10 0f f0 07 e0 00 00 00 00 00 00     8.<.............
    198c:	00 00 00 00 00 00 00 38 00 38 00 38 00 38 00 38     .......8.8.8.8.8
    199c:	00 38 07 f8 1f f8 3c 38 38 38 70 38 70 38 70 38     .8....<888p8p8p8
    19ac:	70 38 70 38 70 78 38 f8 3f b8 0f 38 00 00 00 00     p8p8px8.?..8....
	...
    19d0:	03 e0 0f f0 1c 38 18 1c 38 1c 3f fc 3f fc 38 00     .....8..8.?.?.8.
    19e0:	38 00 3c 00 1e 08 0f f8 07 f0 00 00 00 00 00 00     8.<.............
    19f0:	00 00 00 00 00 00 00 fc 03 fc 03 80 07 00 07 00     ................
    1a00:	07 00 07 00 7f f8 7f f8 07 00 07 00 07 00 07 00     ................
    1a10:	07 00 07 00 07 00 07 00 07 00 07 00 00 00 00 00     ................
	...
    1a34:	07 fc 1f fc 3c 78 38 38 38 38 38 38 3c 78 1f f0     ....<x888888<x..
    1a44:	3f c0 38 00 38 00 3f f0 1f fc 70 1c 70 1c 78 3c     ?.8.8.?...p.p.x<
    1a54:	3f f8 1f e0 00 00 38 00 38 00 38 00 38 00 38 00     ?.....8.8.8.8.8.
    1a64:	38 00 39 e0 3b f0 3e 78 3c 38 38 38 38 38 38 38     8.9.;.>x<8888888
    1a74:	38 38 38 38 38 38 38 38 38 38 38 38 00 00 00 00     888888888888....
	...
    1a8c:	00 00 01 80 03 c0 01 80 00 00 00 00 3f c0 3f c0     ............?.?.
    1a9c:	01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
    1aac:	01 c0 3f f8 3f f8 00 00 00 00 00 00 00 00 00 00     ..?.?...........
    1abc:	00 00 00 00 00 c0 01 e0 00 c0 00 00 00 00 3f e0     ..............?.
    1acc:	3f e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0     ?...............
    1adc:	00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 41 c0 7f 80     ............A...
    1aec:	3f 00 00 00 38 00 38 00 38 00 38 00 38 00 38 00     ?...8.8.8.8.8.8.
    1afc:	38 38 38 70 38 e0 39 c0 3b 80 3f 00 3b 80 3b 80     888p8.9.;.?.;.;.
    1b0c:	39 c0 38 e0 38 e0 38 70 38 38 00 00 00 00 00 00     9.8.8.8p88......
    1b1c:	00 00 00 00 00 00 3f c0 3f c0 01 c0 01 c0 01 c0     ......?.?.......
    1b2c:	01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
    1b3c:	01 c0 01 c0 01 c0 01 c0 3f f8 3f f8 00 00 00 00     ........?.?.....
	...
    1b60:	77 38 7f 7c 7b dc 73 9c 73 9c 73 9c 73 9c 73 9c     w8.|{.s.s.s.s.s.
    1b70:	73 9c 73 9c 73 9c 73 9c 73 9c 00 00 00 00 00 00     s.s.s.s.s.......
	...
    1b90:	00 00 39 e0 3f f0 3e 78 3c 38 38 38 38 38 38 38     ..9.?.>x<8888888
    1ba0:	38 38 38 38 38 38 38 38 38 38 38 38 00 00 00 00     888888888888....
	...
    1bc4:	07 e0 1f f0 3c 78 38 3c 70 1c 70 1c 70 1c 70 1c     ....<x8<p.p.p.p.
    1bd4:	70 1c 38 38 3c 78 1f f0 0f c0 00 00 00 00 00 00     p.88<x..........
	...
    1bf4:	00 00 39 e0 3f f8 3e 38 3c 1c 38 1c 38 1c 38 1c     ..9.?.>8<.8.8.8.
    1c04:	38 1c 38 1c 38 38 38 78 3f f0 3f c0 38 00 38 00     8.8.888x?.?.8.8.
    1c14:	38 00 38 00 38 00 00 00 00 00 00 00 00 00 00 00     8.8.8...........
    1c24:	00 00 00 00 07 f8 1f f8 3c 38 38 38 70 38 70 38     ........<888p8p8
    1c34:	70 38 70 38 70 38 70 78 38 f8 3f b8 0f 38 00 38     p8p8p8px8.?..8.8
    1c44:	00 38 00 38 00 38 00 38 00 00 00 00 00 00 00 00     .8.8.8.8........
    1c54:	00 00 00 00 00 00 1c f8 1d fc 1f 1e 1e 0e 1c 0e     ................
    1c64:	1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00     ................
	...
    1c8c:	07 e0 1f f0 3c 10 38 00 3c 00 1f 00 0f e0 01 f0     ....<.8.<.......
    1c9c:	00 38 00 38 20 78 3f f0 1f c0 00 00 00 00 00 00     .8.8 x?.........
	...
    1cb4:	00 00 07 00 07 00 07 00 07 00 7f f8 7f f8 07 00     ................
    1cc4:	07 00 07 00 07 00 07 00 07 00 07 00 07 00 07 80     ................
    1cd4:	03 f8 01 f8 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1cf0:	38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38     8888888888888888
    1d00:	38 38 38 78 3c f8 1f f8 0f 38 00 00 00 00 00 00     888x<....8......
	...
    1d20:	00 00 60 18 70 18 30 38 30 30 38 30 18 60 1c 60     ..`.p.080080.`.`
    1d30:	0c 60 0c c0 06 c0 06 c0 07 80 03 80 00 00 00 00     .`..............
	...
    1d54:	60 0c 60 0c 60 0c 61 8c 63 8c 73 8c 32 cc 32 cc     `.`.`.a.c.s.2.2.
    1d64:	36 6c 34 68 34 68 1c 38 1c 38 00 00 00 00 00 00     6l4h4h.8.8......
	...
    1d84:	00 00 70 1c 38 38 1c 70 0c 60 0e e0 07 c0 03 80     ..p.88.p.`......
    1d94:	07 c0 06 e0 0c 60 1c 70 38 38 70 1c 00 00 00 00     .....`.p88p.....
	...
    1db8:	60 18 70 38 30 38 38 30 38 30 18 60 1c 60 0c 60     `.p8088080.`.`.`
    1dc8:	0e c0 06 c0 06 80 03 80 03 80 03 00 07 00 0e 00     ................
    1dd8:	fc 00 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1de8:	00 00 3f f0 3f f0 00 60 00 c0 01 c0 01 80 03 00     ..?.?..`........
    1df8:	06 00 0e 00 0c 00 18 00 3f f0 3f f0 00 00 00 00     ........?.?.....
    1e08:	00 00 00 00 00 00                                   ......

00001e0e <__ctors_end>:
    1e0e:	11 24       	eor	r1, r1
    1e10:	1f be       	out	0x3f, r1	; 63
    1e12:	cf ef       	ldi	r28, 0xFF	; 255
    1e14:	d0 e1       	ldi	r29, 0x10	; 16
    1e16:	de bf       	out	0x3e, r29	; 62
    1e18:	cd bf       	out	0x3d, r28	; 61

00001e1a <__do_copy_data>:
    1e1a:	10 e1       	ldi	r17, 0x10	; 16
    1e1c:	a0 e0       	ldi	r26, 0x00	; 0
    1e1e:	b1 e0       	ldi	r27, 0x01	; 1
    1e20:	ec ec       	ldi	r30, 0xCC	; 204
    1e22:	f3 e5       	ldi	r31, 0x53	; 83
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <__do_copy_data+0x10>
    1e26:	05 90       	lpm	r0, Z+
    1e28:	0d 92       	st	X+, r0
    1e2a:	a6 32       	cpi	r26, 0x26	; 38
    1e2c:	b1 07       	cpc	r27, r17
    1e2e:	d9 f7       	brne	.-10     	; 0x1e26 <__do_copy_data+0xc>

00001e30 <__do_clear_bss>:
    1e30:	20 e1       	ldi	r18, 0x10	; 16
    1e32:	a6 e2       	ldi	r26, 0x26	; 38
    1e34:	b0 e1       	ldi	r27, 0x10	; 16
    1e36:	01 c0       	rjmp	.+2      	; 0x1e3a <.do_clear_bss_start>

00001e38 <.do_clear_bss_loop>:
    1e38:	1d 92       	st	X+, r1

00001e3a <.do_clear_bss_start>:
    1e3a:	a5 33       	cpi	r26, 0x35	; 53
    1e3c:	b2 07       	cpc	r27, r18
    1e3e:	e1 f7       	brne	.-8      	; 0x1e38 <.do_clear_bss_loop>
    1e40:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <main>
    1e44:	0c 94 e4 29 	jmp	0x53c8	; 0x53c8 <_exit>

00001e48 <__bad_interrupt>:
    1e48:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001e4c <CAN_init>:
	if(mob>=0)CAN_TXMOB(mob, 2, tData, 0, 20); //transmit registration and do not wait for finish
	return mob;
}

uint8_t CAN_init()
{
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	2f 97       	sbiw	r28, 0x0f	; 15
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
    1e60:	88 ed       	ldi	r24, 0xD8	; 216
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	21 e0       	ldi	r18, 0x01	; 1
    1e66:	fc 01       	movw	r30, r24
    1e68:	20 83       	st	Z, r18
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
    1e6a:	19 82       	std	Y+1, r1	; 0x01
    1e6c:	22 c0       	rjmp	.+68     	; 0x1eb2 <CAN_init+0x66>
	{
		CANPAGE = (mobCount << 4);		//select the message object to modify
    1e6e:	8d ee       	ldi	r24, 0xED	; 237
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	29 81       	ldd	r18, Y+1	; 0x01
    1e74:	22 95       	swap	r18
    1e76:	20 7f       	andi	r18, 0xF0	; 240
    1e78:	fc 01       	movw	r30, r24
    1e7a:	20 83       	st	Z, r18
		CANCDMOB = 0;					//make sure we do not do any actions on this mob.
    1e7c:	8f ee       	ldi	r24, 0xEF	; 239
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	fc 01       	movw	r30, r24
    1e82:	10 82       	st	Z, r1
		CANSTMOB = 0;					//make sure no interrupts are set.
    1e84:	8e ee       	ldi	r24, 0xEE	; 238
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	fc 01       	movw	r30, r24
    1e8a:	10 82       	st	Z, r1
		CANIDM1 = 0;
    1e8c:	87 ef       	ldi	r24, 0xF7	; 247
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	fc 01       	movw	r30, r24
    1e92:	10 82       	st	Z, r1
		CANIDM2 = 0;
    1e94:	86 ef       	ldi	r24, 0xF6	; 246
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	fc 01       	movw	r30, r24
    1e9a:	10 82       	st	Z, r1
		CANIDM3 = 0;
    1e9c:	85 ef       	ldi	r24, 0xF5	; 245
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	10 82       	st	Z, r1
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
    1ea4:	84 ef       	ldi	r24, 0xF4	; 244
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	10 82       	st	Z, r1

uint8_t CAN_init()
{
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	8f 5f       	subi	r24, 0xFF	; 255
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	86 30       	cpi	r24, 0x06	; 6
    1eb6:	d8 f2       	brcs	.-74     	; 0x1e6e <CAN_init+0x22>
		CANIDM1 = 0;
		CANIDM2 = 0;
		CANIDM3 = 0;
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
	}
	CANBT1 = 0x0E;		//these registers control speed of communication
    1eb8:	82 ee       	ldi	r24, 0xE2	; 226
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	2e e0       	ldi	r18, 0x0E	; 14
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	20 83       	st	Z, r18
	CANBT2 = 0x04;		//currently with these values, it is 250kbps
    1ec2:	83 ee       	ldi	r24, 0xE3	; 227
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	24 e0       	ldi	r18, 0x04	; 4
    1ec8:	fc 01       	movw	r30, r24
    1eca:	20 83       	st	Z, r18
	CANBT3 = 0x13;		//with 8 TQ per bit.
    1ecc:	84 ee       	ldi	r24, 0xE4	; 228
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	23 e1       	ldi	r18, 0x13	; 19
    1ed2:	fc 01       	movw	r30, r24
    1ed4:	20 83       	st	Z, r18

	CANIE2 = (1 << IEMOB4)|(1 << IEMOB5);		//enable interrupts on MOB 4 and 5 for receiving
    1ed6:	8e ed       	ldi	r24, 0xDE	; 222
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	20 e3       	ldi	r18, 0x30	; 48
    1edc:	fc 01       	movw	r30, r24
    1ede:	20 83       	st	Z, r18
	CANGIE = (1 << ENRX)|(1 << ENIT);		//enable receive interrupt; enable global CAN interrupt (all interrupts)
    1ee0:	8b ed       	ldi	r24, 0xDB	; 219
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	20 ea       	ldi	r18, 0xA0	; 160
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	20 83       	st	Z, r18
	//put other initialisation functions here.

	CANGCON = (1 << ENASTB);    // Enable the CAN.
    1eea:	88 ed       	ldi	r24, 0xD8	; 216
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	22 e0       	ldi	r18, 0x02	; 2
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	20 83       	st	Z, r18
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	a8 e4       	ldi	r26, 0x48	; 72
    1efa:	b2 e4       	ldi	r27, 0x42	; 66
    1efc:	8a 83       	std	Y+2, r24	; 0x02
    1efe:	9b 83       	std	Y+3, r25	; 0x03
    1f00:	ac 83       	std	Y+4, r26	; 0x04
    1f02:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	4a e7       	ldi	r20, 0x7A	; 122
    1f0a:	55 e4       	ldi	r21, 0x45	; 69
    1f0c:	6a 81       	ldd	r22, Y+2	; 0x02
    1f0e:	7b 81       	ldd	r23, Y+3	; 0x03
    1f10:	8c 81       	ldd	r24, Y+4	; 0x04
    1f12:	9d 81       	ldd	r25, Y+5	; 0x05
    1f14:	0e 94 9e 28 	call	0x513c	; 0x513c <__mulsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	8e 83       	std	Y+6, r24	; 0x06
    1f1e:	9f 83       	std	Y+7, r25	; 0x07
    1f20:	a8 87       	std	Y+8, r26	; 0x08
    1f22:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e8       	ldi	r20, 0x80	; 128
    1f2a:	5f e3       	ldi	r21, 0x3F	; 63
    1f2c:	6e 81       	ldd	r22, Y+6	; 0x06
    1f2e:	7f 81       	ldd	r23, Y+7	; 0x07
    1f30:	88 85       	ldd	r24, Y+8	; 0x08
    1f32:	99 85       	ldd	r25, Y+9	; 0x09
    1f34:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <__cmpsf2>
    1f38:	88 23       	and	r24, r24
    1f3a:	2c f4       	brge	.+10     	; 0x1f46 <CAN_init+0xfa>
		__ticks = 1;
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	9b 87       	std	Y+11, r25	; 0x0b
    1f42:	8a 87       	std	Y+10, r24	; 0x0a
    1f44:	3f c0       	rjmp	.+126    	; 0x1fc4 <CAN_init+0x178>
	else if (__tmp > 65535)
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	3f ef       	ldi	r19, 0xFF	; 255
    1f4a:	4f e7       	ldi	r20, 0x7F	; 127
    1f4c:	57 e4       	ldi	r21, 0x47	; 71
    1f4e:	6e 81       	ldd	r22, Y+6	; 0x06
    1f50:	7f 81       	ldd	r23, Y+7	; 0x07
    1f52:	88 85       	ldd	r24, Y+8	; 0x08
    1f54:	99 85       	ldd	r25, Y+9	; 0x09
    1f56:	0e 94 41 28 	call	0x5082	; 0x5082 <__gesf2>
    1f5a:	18 16       	cp	r1, r24
    1f5c:	4c f5       	brge	.+82     	; 0x1fb0 <CAN_init+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e2       	ldi	r20, 0x20	; 32
    1f64:	51 e4       	ldi	r21, 0x41	; 65
    1f66:	6a 81       	ldd	r22, Y+2	; 0x02
    1f68:	7b 81       	ldd	r23, Y+3	; 0x03
    1f6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6e:	0e 94 9e 28 	call	0x513c	; 0x513c <__mulsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	bc 01       	movw	r22, r24
    1f78:	cd 01       	movw	r24, r26
    1f7a:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <__fixunssfsi>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	9b 87       	std	Y+11, r25	; 0x0b
    1f84:	8a 87       	std	Y+10, r24	; 0x0a
    1f86:	0f c0       	rjmp	.+30     	; 0x1fa6 <CAN_init+0x15a>
    1f88:	80 e9       	ldi	r24, 0x90	; 144
    1f8a:	91 e0       	ldi	r25, 0x01	; 1
    1f8c:	9d 87       	std	Y+13, r25	; 0x0d
    1f8e:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f90:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f92:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <CAN_init+0x148>
    1f98:	9d 87       	std	Y+13, r25	; 0x0d
    1f9a:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	9b 87       	std	Y+11, r25	; 0x0b
    1fa4:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fa8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1faa:	89 2b       	or	r24, r25
    1fac:	69 f7       	brne	.-38     	; 0x1f88 <CAN_init+0x13c>
    1fae:	14 c0       	rjmp	.+40     	; 0x1fd8 <CAN_init+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb0:	6e 81       	ldd	r22, Y+6	; 0x06
    1fb2:	7f 81       	ldd	r23, Y+7	; 0x07
    1fb4:	88 85       	ldd	r24, Y+8	; 0x08
    1fb6:	99 85       	ldd	r25, Y+9	; 0x09
    1fb8:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <__fixunssfsi>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	9b 87       	std	Y+11, r25	; 0x0b
    1fc2:	8a 87       	std	Y+10, r24	; 0x0a
    1fc4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fc6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fc8:	9f 87       	std	Y+15, r25	; 0x0f
    1fca:	8e 87       	std	Y+14, r24	; 0x0e
    1fcc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fce:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <CAN_init+0x184>
    1fd4:	9f 87       	std	Y+15, r25	; 0x0f
    1fd6:	8e 87       	std	Y+14, r24	; 0x0e
	_delay_ms(50);
	if(!(CANGSTA & (1<<ENFG)))return 1;
    1fd8:	89 ed       	ldi	r24, 0xD9	; 217
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	fc 01       	movw	r30, r24
    1fde:	80 81       	ld	r24, Z
    1fe0:	88 2f       	mov	r24, r24
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	84 70       	andi	r24, 0x04	; 4
    1fe6:	99 27       	eor	r25, r25
    1fe8:	89 2b       	or	r24, r25
    1fea:	11 f4       	brne	.+4      	; 0x1ff0 <CAN_init+0x1a4>
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	01 c0       	rjmp	.+2      	; 0x1ff2 <CAN_init+0x1a6>
	return 0;
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
}
    1ff2:	2f 96       	adiw	r28, 0x0f	; 15
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	08 95       	ret

00002004 <CAN_RXInit>:

void CAN_RXInit(int8_t mob, uint8_t numBytes, uint32_t IDmsk, uint32_t ID)
{
    2004:	ef 92       	push	r14
    2006:	ff 92       	push	r15
    2008:	0f 93       	push	r16
    200a:	1f 93       	push	r17
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	2a 97       	sbiw	r28, 0x0a	; 10
    2016:	0f b6       	in	r0, 0x3f	; 63
    2018:	f8 94       	cli
    201a:	de bf       	out	0x3e, r29	; 62
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	cd bf       	out	0x3d, r28	; 61
    2020:	89 83       	std	Y+1, r24	; 0x01
    2022:	6a 83       	std	Y+2, r22	; 0x02
    2024:	2b 83       	std	Y+3, r18	; 0x03
    2026:	3c 83       	std	Y+4, r19	; 0x04
    2028:	4d 83       	std	Y+5, r20	; 0x05
    202a:	5e 83       	std	Y+6, r21	; 0x06
    202c:	ef 82       	std	Y+7, r14	; 0x07
    202e:	f8 86       	std	Y+8, r15	; 0x08
    2030:	09 87       	std	Y+9, r16	; 0x09
    2032:	1a 87       	std	Y+10, r17	; 0x0a
	CANPAGE = ( mob << 4);		//use the mobth mob for receiving.
    2034:	8d ee       	ldi	r24, 0xED	; 237
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	29 81       	ldd	r18, Y+1	; 0x01
    203a:	22 95       	swap	r18
    203c:	20 7f       	andi	r18, 0xF0	; 240
    203e:	fc 01       	movw	r30, r24
    2040:	20 83       	st	Z, r18
	//IDEMSK is sent with the CAN packet, we choose to not require that it be set, and instead focus on ID match
	CANIDM4 = (IDmsk<<03) & 0xF8;	//shifts the value sets RTRMSK to zero and IDEMSK to 0
    2042:	84 ef       	ldi	r24, 0xF4	; 244
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	2b 81       	ldd	r18, Y+3	; 0x03
    2048:	22 0f       	add	r18, r18
    204a:	22 0f       	add	r18, r18
    204c:	22 0f       	add	r18, r18
    204e:	fc 01       	movw	r30, r24
    2050:	20 83       	st	Z, r18
	CANIDM3 = (IDmsk>>05) & 0xFF;
    2052:	25 ef       	ldi	r18, 0xF5	; 245
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	9c 81       	ldd	r25, Y+4	; 0x04
    205a:	ad 81       	ldd	r26, Y+5	; 0x05
    205c:	be 81       	ldd	r27, Y+6	; 0x06
    205e:	68 94       	set
    2060:	14 f8       	bld	r1, 4
    2062:	b6 95       	lsr	r27
    2064:	a7 95       	ror	r26
    2066:	97 95       	ror	r25
    2068:	87 95       	ror	r24
    206a:	16 94       	lsr	r1
    206c:	d1 f7       	brne	.-12     	; 0x2062 <CAN_RXInit+0x5e>
    206e:	f9 01       	movw	r30, r18
    2070:	80 83       	st	Z, r24
	CANIDM2 = (IDmsk>>13) & 0xFF;	
    2072:	26 ef       	ldi	r18, 0xF6	; 246
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	ad 81       	ldd	r26, Y+5	; 0x05
    207c:	be 81       	ldd	r27, Y+6	; 0x06
    207e:	07 2e       	mov	r0, r23
    2080:	7d e0       	ldi	r23, 0x0D	; 13
    2082:	b6 95       	lsr	r27
    2084:	a7 95       	ror	r26
    2086:	97 95       	ror	r25
    2088:	87 95       	ror	r24
    208a:	7a 95       	dec	r23
    208c:	d1 f7       	brne	.-12     	; 0x2082 <CAN_RXInit+0x7e>
    208e:	70 2d       	mov	r23, r0
    2090:	f9 01       	movw	r30, r18
    2092:	80 83       	st	Z, r24
	CANIDM1 = (IDmsk>>21) & 0xFF;
    2094:	27 ef       	ldi	r18, 0xF7	; 247
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	9c 81       	ldd	r25, Y+4	; 0x04
    209c:	ad 81       	ldd	r26, Y+5	; 0x05
    209e:	be 81       	ldd	r27, Y+6	; 0x06
    20a0:	07 2e       	mov	r0, r23
    20a2:	75 e1       	ldi	r23, 0x15	; 21
    20a4:	b6 95       	lsr	r27
    20a6:	a7 95       	ror	r26
    20a8:	97 95       	ror	r25
    20aa:	87 95       	ror	r24
    20ac:	7a 95       	dec	r23
    20ae:	d1 f7       	brne	.-12     	; 0x20a4 <CAN_RXInit+0xa0>
    20b0:	70 2d       	mov	r23, r0
    20b2:	f9 01       	movw	r30, r18
    20b4:	80 83       	st	Z, r24
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG to 0
    20b6:	80 ef       	ldi	r24, 0xF0	; 240
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	2f 81       	ldd	r18, Y+7	; 0x07
    20bc:	22 0f       	add	r18, r18
    20be:	22 0f       	add	r18, r18
    20c0:	22 0f       	add	r18, r18
    20c2:	fc 01       	movw	r30, r24
    20c4:	20 83       	st	Z, r18
	CANIDT3 = (ID>>05) & 0xFF;
    20c6:	21 ef       	ldi	r18, 0xF1	; 241
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	8f 81       	ldd	r24, Y+7	; 0x07
    20cc:	98 85       	ldd	r25, Y+8	; 0x08
    20ce:	a9 85       	ldd	r26, Y+9	; 0x09
    20d0:	ba 85       	ldd	r27, Y+10	; 0x0a
    20d2:	68 94       	set
    20d4:	14 f8       	bld	r1, 4
    20d6:	b6 95       	lsr	r27
    20d8:	a7 95       	ror	r26
    20da:	97 95       	ror	r25
    20dc:	87 95       	ror	r24
    20de:	16 94       	lsr	r1
    20e0:	d1 f7       	brne	.-12     	; 0x20d6 <CAN_RXInit+0xd2>
    20e2:	f9 01       	movw	r30, r18
    20e4:	80 83       	st	Z, r24
	CANIDT2 = (ID>>13) & 0xFF;
    20e6:	22 ef       	ldi	r18, 0xF2	; 242
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	8f 81       	ldd	r24, Y+7	; 0x07
    20ec:	98 85       	ldd	r25, Y+8	; 0x08
    20ee:	a9 85       	ldd	r26, Y+9	; 0x09
    20f0:	ba 85       	ldd	r27, Y+10	; 0x0a
    20f2:	07 2e       	mov	r0, r23
    20f4:	7d e0       	ldi	r23, 0x0D	; 13
    20f6:	b6 95       	lsr	r27
    20f8:	a7 95       	ror	r26
    20fa:	97 95       	ror	r25
    20fc:	87 95       	ror	r24
    20fe:	7a 95       	dec	r23
    2100:	d1 f7       	brne	.-12     	; 0x20f6 <CAN_RXInit+0xf2>
    2102:	70 2d       	mov	r23, r0
    2104:	f9 01       	movw	r30, r18
    2106:	80 83       	st	Z, r24
	CANIDT1 = (ID>>21) & 0xFF;
    2108:	23 ef       	ldi	r18, 0xF3	; 243
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	8f 81       	ldd	r24, Y+7	; 0x07
    210e:	98 85       	ldd	r25, Y+8	; 0x08
    2110:	a9 85       	ldd	r26, Y+9	; 0x09
    2112:	ba 85       	ldd	r27, Y+10	; 0x0a
    2114:	07 2e       	mov	r0, r23
    2116:	75 e1       	ldi	r23, 0x15	; 21
    2118:	b6 95       	lsr	r27
    211a:	a7 95       	ror	r26
    211c:	97 95       	ror	r25
    211e:	87 95       	ror	r24
    2120:	7a 95       	dec	r23
    2122:	d1 f7       	brne	.-12     	; 0x2118 <CAN_RXInit+0x114>
    2124:	70 2d       	mov	r23, r0
    2126:	f9 01       	movw	r30, r18
    2128:	80 83       	st	Z, r24
	
	CANCDMOB = (numBytes << DLC0)|(2<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.
    212a:	8f ee       	ldi	r24, 0xEF	; 239
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	2a 81       	ldd	r18, Y+2	; 0x02
    2130:	20 69       	ori	r18, 0x90	; 144
    2132:	fc 01       	movw	r30, r24
    2134:	20 83       	st	Z, r18
}
    2136:	00 00       	nop
    2138:	2a 96       	adiw	r28, 0x0a	; 10
    213a:	0f b6       	in	r0, 0x3f	; 63
    213c:	f8 94       	cli
    213e:	de bf       	out	0x3e, r29	; 62
    2140:	0f be       	out	0x3f, r0	; 63
    2142:	cd bf       	out	0x3d, r28	; 61
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	1f 91       	pop	r17
    214a:	0f 91       	pop	r16
    214c:	ff 90       	pop	r15
    214e:	ef 90       	pop	r14
    2150:	08 95       	ret

00002152 <CAN_TXMOB>:

void CAN_TXMOB(int8_t mob, uint8_t numBytes, uint8_t * data, uint32_t ID, uint8_t ms_loop_until_TXOK)
{
    2152:	ef 92       	push	r14
    2154:	0f 93       	push	r16
    2156:	1f 93       	push	r17
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	69 97       	sbiw	r28, 0x19	; 25
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	cd bf       	out	0x3d, r28	; 61
    216c:	89 8b       	std	Y+17, r24	; 0x11
    216e:	6a 8b       	std	Y+18, r22	; 0x12
    2170:	5c 8b       	std	Y+20, r21	; 0x14
    2172:	4b 8b       	std	Y+19, r20	; 0x13
    2174:	0d 8b       	std	Y+21, r16	; 0x15
    2176:	1e 8b       	std	Y+22, r17	; 0x16
    2178:	2f 8b       	std	Y+23, r18	; 0x17
    217a:	38 8f       	std	Y+24, r19	; 0x18
    217c:	e9 8e       	std	Y+25, r14	; 0x19
	CANPAGE = ( mob << 4);		//use the mobth mob
    217e:	8d ee       	ldi	r24, 0xED	; 237
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	29 89       	ldd	r18, Y+17	; 0x11
    2184:	22 95       	swap	r18
    2186:	20 7f       	andi	r18, 0xF0	; 240
    2188:	fc 01       	movw	r30, r24
    218a:	20 83       	st	Z, r18
	//IDEMSK is sent with the CAN packet, we choose to not set it, and instead the receiver will focus on ID match
	CANSTMOB &= ~(1<<TXOK);
    218c:	8e ee       	ldi	r24, 0xEE	; 238
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	2e ee       	ldi	r18, 0xEE	; 238
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	f9 01       	movw	r30, r18
    2196:	20 81       	ld	r18, Z
    2198:	2f 7b       	andi	r18, 0xBF	; 191
    219a:	fc 01       	movw	r30, r24
    219c:	20 83       	st	Z, r18
	CANIDM4 = 0;
    219e:	84 ef       	ldi	r24, 0xF4	; 244
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	fc 01       	movw	r30, r24
    21a4:	10 82       	st	Z, r1
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG
    21a6:	80 ef       	ldi	r24, 0xF0	; 240
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	2d 89       	ldd	r18, Y+21	; 0x15
    21ac:	22 0f       	add	r18, r18
    21ae:	22 0f       	add	r18, r18
    21b0:	22 0f       	add	r18, r18
    21b2:	fc 01       	movw	r30, r24
    21b4:	20 83       	st	Z, r18
	CANIDT3 = (ID>>05) & 0xFF;
    21b6:	21 ef       	ldi	r18, 0xF1	; 241
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	8d 89       	ldd	r24, Y+21	; 0x15
    21bc:	9e 89       	ldd	r25, Y+22	; 0x16
    21be:	af 89       	ldd	r26, Y+23	; 0x17
    21c0:	b8 8d       	ldd	r27, Y+24	; 0x18
    21c2:	68 94       	set
    21c4:	14 f8       	bld	r1, 4
    21c6:	b6 95       	lsr	r27
    21c8:	a7 95       	ror	r26
    21ca:	97 95       	ror	r25
    21cc:	87 95       	ror	r24
    21ce:	16 94       	lsr	r1
    21d0:	d1 f7       	brne	.-12     	; 0x21c6 <CAN_TXMOB+0x74>
    21d2:	f9 01       	movw	r30, r18
    21d4:	80 83       	st	Z, r24
	CANIDT2 = (ID>>13) & 0xFF;
    21d6:	22 ef       	ldi	r18, 0xF2	; 242
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	8d 89       	ldd	r24, Y+21	; 0x15
    21dc:	9e 89       	ldd	r25, Y+22	; 0x16
    21de:	af 89       	ldd	r26, Y+23	; 0x17
    21e0:	b8 8d       	ldd	r27, Y+24	; 0x18
    21e2:	07 2e       	mov	r0, r23
    21e4:	7d e0       	ldi	r23, 0x0D	; 13
    21e6:	b6 95       	lsr	r27
    21e8:	a7 95       	ror	r26
    21ea:	97 95       	ror	r25
    21ec:	87 95       	ror	r24
    21ee:	7a 95       	dec	r23
    21f0:	d1 f7       	brne	.-12     	; 0x21e6 <CAN_TXMOB+0x94>
    21f2:	70 2d       	mov	r23, r0
    21f4:	f9 01       	movw	r30, r18
    21f6:	80 83       	st	Z, r24
	CANIDT1 = (ID>>21) & 0xFF;
    21f8:	23 ef       	ldi	r18, 0xF3	; 243
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	8d 89       	ldd	r24, Y+21	; 0x15
    21fe:	9e 89       	ldd	r25, Y+22	; 0x16
    2200:	af 89       	ldd	r26, Y+23	; 0x17
    2202:	b8 8d       	ldd	r27, Y+24	; 0x18
    2204:	07 2e       	mov	r0, r23
    2206:	75 e1       	ldi	r23, 0x15	; 21
    2208:	b6 95       	lsr	r27
    220a:	a7 95       	ror	r26
    220c:	97 95       	ror	r25
    220e:	87 95       	ror	r24
    2210:	7a 95       	dec	r23
    2212:	d1 f7       	brne	.-12     	; 0x2208 <CAN_TXMOB+0xb6>
    2214:	70 2d       	mov	r23, r0
    2216:	f9 01       	movw	r30, r18
    2218:	80 83       	st	Z, r24
	for(uint8_t i = 0; i < numBytes; i++)
    221a:	19 82       	std	Y+1, r1	; 0x01
    221c:	10 c0       	rjmp	.+32     	; 0x223e <CAN_TXMOB+0xec>
	{
		CANMSG = data[i];
    221e:	8a ef       	ldi	r24, 0xFA	; 250
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	29 81       	ldd	r18, Y+1	; 0x01
    2224:	22 2f       	mov	r18, r18
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	4b 89       	ldd	r20, Y+19	; 0x13
    222a:	5c 89       	ldd	r21, Y+20	; 0x14
    222c:	24 0f       	add	r18, r20
    222e:	35 1f       	adc	r19, r21
    2230:	f9 01       	movw	r30, r18
    2232:	20 81       	ld	r18, Z
    2234:	fc 01       	movw	r30, r24
    2236:	20 83       	st	Z, r18
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG
	CANIDT3 = (ID>>05) & 0xFF;
	CANIDT2 = (ID>>13) & 0xFF;
	CANIDT1 = (ID>>21) & 0xFF;
	for(uint8_t i = 0; i < numBytes; i++)
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	8f 5f       	subi	r24, 0xFF	; 255
    223c:	89 83       	std	Y+1, r24	; 0x01
    223e:	99 81       	ldd	r25, Y+1	; 0x01
    2240:	8a 89       	ldd	r24, Y+18	; 0x12
    2242:	98 17       	cp	r25, r24
    2244:	60 f3       	brcs	.-40     	; 0x221e <CAN_TXMOB+0xcc>
	{
		CANMSG = data[i];
	}
	CANCDMOB = (numBytes << DLC0)|(1<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.
    2246:	8f ee       	ldi	r24, 0xEF	; 239
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	2a 89       	ldd	r18, Y+18	; 0x12
    224c:	20 65       	ori	r18, 0x50	; 80
    224e:	fc 01       	movw	r30, r24
    2250:	20 83       	st	Z, r18

	for(uint8_t i = 0; i < ms_loop_until_TXOK; i++)	//loop until specified wait time is up
    2252:	1a 82       	std	Y+2, r1	; 0x02
    2254:	80 c0       	rjmp	.+256    	; 0x2356 <CAN_TXMOB+0x204>
	{
		if((CANSTMOB & (1 << TXOK)))break;		//check for transmission complete
    2256:	8e ee       	ldi	r24, 0xEE	; 238
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	fc 01       	movw	r30, r24
    225c:	80 81       	ld	r24, Z
    225e:	88 2f       	mov	r24, r24
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	80 74       	andi	r24, 0x40	; 64
    2264:	99 27       	eor	r25, r25
    2266:	89 2b       	or	r24, r25
    2268:	09 f0       	breq	.+2      	; 0x226c <CAN_TXMOB+0x11a>
    226a:	7b c0       	rjmp	.+246    	; 0x2362 <CAN_TXMOB+0x210>
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	a0 e8       	ldi	r26, 0x80	; 128
    2272:	bf e3       	ldi	r27, 0x3F	; 63
    2274:	8b 83       	std	Y+3, r24	; 0x03
    2276:	9c 83       	std	Y+4, r25	; 0x04
    2278:	ad 83       	std	Y+5, r26	; 0x05
    227a:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	4a e7       	ldi	r20, 0x7A	; 122
    2282:	55 e4       	ldi	r21, 0x45	; 69
    2284:	6b 81       	ldd	r22, Y+3	; 0x03
    2286:	7c 81       	ldd	r23, Y+4	; 0x04
    2288:	8d 81       	ldd	r24, Y+5	; 0x05
    228a:	9e 81       	ldd	r25, Y+6	; 0x06
    228c:	0e 94 9e 28 	call	0x513c	; 0x513c <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	8f 83       	std	Y+7, r24	; 0x07
    2296:	98 87       	std	Y+8, r25	; 0x08
    2298:	a9 87       	std	Y+9, r26	; 0x09
    229a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 e8       	ldi	r20, 0x80	; 128
    22a2:	5f e3       	ldi	r21, 0x3F	; 63
    22a4:	6f 81       	ldd	r22, Y+7	; 0x07
    22a6:	78 85       	ldd	r23, Y+8	; 0x08
    22a8:	89 85       	ldd	r24, Y+9	; 0x09
    22aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ac:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <__cmpsf2>
    22b0:	88 23       	and	r24, r24
    22b2:	2c f4       	brge	.+10     	; 0x22be <CAN_TXMOB+0x16c>
		__ticks = 1;
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	9c 87       	std	Y+12, r25	; 0x0c
    22ba:	8b 87       	std	Y+11, r24	; 0x0b
    22bc:	3f c0       	rjmp	.+126    	; 0x233c <CAN_TXMOB+0x1ea>
	else if (__tmp > 65535)
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	3f ef       	ldi	r19, 0xFF	; 255
    22c2:	4f e7       	ldi	r20, 0x7F	; 127
    22c4:	57 e4       	ldi	r21, 0x47	; 71
    22c6:	6f 81       	ldd	r22, Y+7	; 0x07
    22c8:	78 85       	ldd	r23, Y+8	; 0x08
    22ca:	89 85       	ldd	r24, Y+9	; 0x09
    22cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ce:	0e 94 41 28 	call	0x5082	; 0x5082 <__gesf2>
    22d2:	18 16       	cp	r1, r24
    22d4:	4c f5       	brge	.+82     	; 0x2328 <CAN_TXMOB+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e2       	ldi	r20, 0x20	; 32
    22dc:	51 e4       	ldi	r21, 0x41	; 65
    22de:	6b 81       	ldd	r22, Y+3	; 0x03
    22e0:	7c 81       	ldd	r23, Y+4	; 0x04
    22e2:	8d 81       	ldd	r24, Y+5	; 0x05
    22e4:	9e 81       	ldd	r25, Y+6	; 0x06
    22e6:	0e 94 9e 28 	call	0x513c	; 0x513c <__mulsf3>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	bc 01       	movw	r22, r24
    22f0:	cd 01       	movw	r24, r26
    22f2:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <__fixunssfsi>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	9c 87       	std	Y+12, r25	; 0x0c
    22fc:	8b 87       	std	Y+11, r24	; 0x0b
    22fe:	0f c0       	rjmp	.+30     	; 0x231e <CAN_TXMOB+0x1cc>
    2300:	80 e9       	ldi	r24, 0x90	; 144
    2302:	91 e0       	ldi	r25, 0x01	; 1
    2304:	9e 87       	std	Y+14, r25	; 0x0e
    2306:	8d 87       	std	Y+13, r24	; 0x0d
    2308:	8d 85       	ldd	r24, Y+13	; 0x0d
    230a:	9e 85       	ldd	r25, Y+14	; 0x0e
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	f1 f7       	brne	.-4      	; 0x230c <CAN_TXMOB+0x1ba>
    2310:	9e 87       	std	Y+14, r25	; 0x0e
    2312:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2314:	8b 85       	ldd	r24, Y+11	; 0x0b
    2316:	9c 85       	ldd	r25, Y+12	; 0x0c
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	9c 87       	std	Y+12, r25	; 0x0c
    231c:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2320:	9c 85       	ldd	r25, Y+12	; 0x0c
    2322:	89 2b       	or	r24, r25
    2324:	69 f7       	brne	.-38     	; 0x2300 <CAN_TXMOB+0x1ae>
    2326:	14 c0       	rjmp	.+40     	; 0x2350 <CAN_TXMOB+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2328:	6f 81       	ldd	r22, Y+7	; 0x07
    232a:	78 85       	ldd	r23, Y+8	; 0x08
    232c:	89 85       	ldd	r24, Y+9	; 0x09
    232e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2330:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <__fixunssfsi>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	9c 87       	std	Y+12, r25	; 0x0c
    233a:	8b 87       	std	Y+11, r24	; 0x0b
    233c:	8b 85       	ldd	r24, Y+11	; 0x0b
    233e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2340:	98 8b       	std	Y+16, r25	; 0x10
    2342:	8f 87       	std	Y+15, r24	; 0x0f
    2344:	8f 85       	ldd	r24, Y+15	; 0x0f
    2346:	98 89       	ldd	r25, Y+16	; 0x10
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	f1 f7       	brne	.-4      	; 0x2348 <CAN_TXMOB+0x1f6>
    234c:	98 8b       	std	Y+16, r25	; 0x10
    234e:	8f 87       	std	Y+15, r24	; 0x0f
	{
		CANMSG = data[i];
	}
	CANCDMOB = (numBytes << DLC0)|(1<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.

	for(uint8_t i = 0; i < ms_loop_until_TXOK; i++)	//loop until specified wait time is up
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	8f 5f       	subi	r24, 0xFF	; 255
    2354:	8a 83       	std	Y+2, r24	; 0x02
    2356:	9a 81       	ldd	r25, Y+2	; 0x02
    2358:	89 8d       	ldd	r24, Y+25	; 0x19
    235a:	98 17       	cp	r25, r24
    235c:	08 f4       	brcc	.+2      	; 0x2360 <CAN_TXMOB+0x20e>
    235e:	7b cf       	rjmp	.-266    	; 0x2256 <CAN_TXMOB+0x104>
	{
		if((CANSTMOB & (1 << TXOK)))break;		//check for transmission complete
		_delay_ms(1);								//do nothing for 1 ms
	}
}
    2360:	01 c0       	rjmp	.+2      	; 0x2364 <CAN_TXMOB+0x212>
	}
	CANCDMOB = (numBytes << DLC0)|(1<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.

	for(uint8_t i = 0; i < ms_loop_until_TXOK; i++)	//loop until specified wait time is up
	{
		if((CANSTMOB & (1 << TXOK)))break;		//check for transmission complete
    2362:	00 00       	nop
		_delay_ms(1);								//do nothing for 1 ms
	}
}
    2364:	00 00       	nop
    2366:	69 96       	adiw	r28, 0x19	; 25
    2368:	0f b6       	in	r0, 0x3f	; 63
    236a:	f8 94       	cli
    236c:	de bf       	out	0x3e, r29	; 62
    236e:	0f be       	out	0x3f, r0	; 63
    2370:	cd bf       	out	0x3d, r28	; 61
    2372:	df 91       	pop	r29
    2374:	cf 91       	pop	r28
    2376:	1f 91       	pop	r17
    2378:	0f 91       	pop	r16
    237a:	ef 90       	pop	r14
    237c:	08 95       	ret

0000237e <CAN_findFreeTXMOB>:

int8_t CAN_findFreeTXMOB()
{
    237e:	cf 93       	push	r28
    2380:	df 93       	push	r29
    2382:	1f 92       	push	r1
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
    2388:	19 82       	std	Y+1, r1	; 0x01
    238a:	20 c0       	rjmp	.+64     	; 0x23cc <CAN_findFreeTXMOB+0x4e>
	{
		CANPAGE = ( i << 4);		//use the mobth mob
    238c:	8d ee       	ldi	r24, 0xED	; 237
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	29 81       	ldd	r18, Y+1	; 0x01
    2392:	22 95       	swap	r18
    2394:	20 7f       	andi	r18, 0xF0	; 240
    2396:	fc 01       	movw	r30, r24
    2398:	20 83       	st	Z, r18
		if((CANSTMOB & (1<<TXOK)) || !(CANCDMOB & (1<<CONMOB0))) //if the transmission is complete or the mob has not been setup yet
    239a:	8e ee       	ldi	r24, 0xEE	; 238
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	fc 01       	movw	r30, r24
    23a0:	80 81       	ld	r24, Z
    23a2:	88 2f       	mov	r24, r24
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	80 74       	andi	r24, 0x40	; 64
    23a8:	99 27       	eor	r25, r25
    23aa:	89 2b       	or	r24, r25
    23ac:	51 f4       	brne	.+20     	; 0x23c2 <CAN_findFreeTXMOB+0x44>
    23ae:	8f ee       	ldi	r24, 0xEF	; 239
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	fc 01       	movw	r30, r24
    23b4:	80 81       	ld	r24, Z
    23b6:	88 2f       	mov	r24, r24
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	80 74       	andi	r24, 0x40	; 64
    23bc:	99 27       	eor	r25, r25
    23be:	89 2b       	or	r24, r25
    23c0:	11 f4       	brne	.+4      	; 0x23c6 <CAN_findFreeTXMOB+0x48>
		{
			return i;			//send back the free mob
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	07 c0       	rjmp	.+14     	; 0x23d4 <CAN_findFreeTXMOB+0x56>
	}
}

int8_t CAN_findFreeTXMOB()
{
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	8f 5f       	subi	r24, 0xFF	; 255
    23ca:	89 83       	std	Y+1, r24	; 0x01
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	84 30       	cpi	r24, 0x04	; 4
    23d0:	e8 f2       	brcs	.-70     	; 0x238c <CAN_findFreeTXMOB+0xe>
		if((CANSTMOB & (1<<TXOK)) || !(CANCDMOB & (1<<CONMOB0))) //if the transmission is complete or the mob has not been setup yet
		{
			return i;			//send back the free mob
		}
	}
	return -1;		//otherwise, none are free
    23d2:	8f ef       	ldi	r24, 0xFF	; 255
    23d4:	0f 90       	pop	r0
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	08 95       	ret

000023dc <__vector_18>:
}

void Set_Linear_Gray_Scale_Table()
{
	Write_Command(0xB9);			// Set Default Linear Gray Scale Table
}
    23dc:	1f 92       	push	r1
    23de:	0f 92       	push	r0
    23e0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    23e4:	0f 92       	push	r0
    23e6:	11 24       	eor	r1, r1
    23e8:	ef 92       	push	r14
    23ea:	ff 92       	push	r15
    23ec:	0f 93       	push	r16
    23ee:	1f 93       	push	r17
    23f0:	2f 93       	push	r18
    23f2:	3f 93       	push	r19
    23f4:	4f 93       	push	r20
    23f6:	5f 93       	push	r21
    23f8:	6f 93       	push	r22
    23fa:	7f 93       	push	r23
    23fc:	8f 93       	push	r24
    23fe:	9f 93       	push	r25
    2400:	af 93       	push	r26
    2402:	bf 93       	push	r27
    2404:	ef 93       	push	r30
    2406:	ff 93       	push	r31
    2408:	cf 93       	push	r28
    240a:	df 93       	push	r29
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	80 ee       	ldi	r24, 0xE0	; 224
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	fc 01       	movw	r30, r24
    2416:	80 81       	ld	r24, Z
    2418:	88 2f       	mov	r24, r24
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	80 72       	andi	r24, 0x20	; 32
    241e:	99 27       	eor	r25, r25
    2420:	89 2b       	or	r24, r25
    2422:	09 f4       	brne	.+2      	; 0x2426 <__vector_18+0x4a>
    2424:	d2 c0       	rjmp	.+420    	; 0x25ca <__vector_18+0x1ee>
    2426:	8d ee       	ldi	r24, 0xED	; 237
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	20 e5       	ldi	r18, 0x50	; 80
    242c:	fc 01       	movw	r30, r24
    242e:	20 83       	st	Z, r18
    2430:	8a ef       	ldi	r24, 0xFA	; 250
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	fc 01       	movw	r30, r24
    2436:	80 81       	ld	r24, Z
    2438:	88 2f       	mov	r24, r24
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	98 2f       	mov	r25, r24
    243e:	88 27       	eor	r24, r24
    2440:	90 93 27 10 	sts	0x1027, r25	; 0x801027 <__data_end+0x1>
    2444:	80 93 26 10 	sts	0x1026, r24	; 0x801026 <__data_end>
    2448:	8a ef       	ldi	r24, 0xFA	; 250
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	fc 01       	movw	r30, r24
    244e:	80 81       	ld	r24, Z
    2450:	28 2f       	mov	r18, r24
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	80 91 26 10 	lds	r24, 0x1026	; 0x801026 <__data_end>
    2458:	90 91 27 10 	lds	r25, 0x1027	; 0x801027 <__data_end+0x1>
    245c:	82 0f       	add	r24, r18
    245e:	93 1f       	adc	r25, r19
    2460:	90 93 27 10 	sts	0x1027, r25	; 0x801027 <__data_end+0x1>
    2464:	80 93 26 10 	sts	0x1026, r24	; 0x801026 <__data_end>
    2468:	80 91 26 10 	lds	r24, 0x1026	; 0x801026 <__data_end>
    246c:	90 91 27 10 	lds	r25, 0x1027	; 0x801027 <__data_end+0x1>
    2470:	24 e6       	ldi	r18, 0x64	; 100
    2472:	28 9f       	mul	r18, r24
    2474:	a0 01       	movw	r20, r0
    2476:	29 9f       	mul	r18, r25
    2478:	50 0d       	add	r21, r0
    247a:	11 24       	eor	r1, r1
    247c:	2f ef       	ldi	r18, 0xFF	; 255
    247e:	31 e0       	ldi	r19, 0x01	; 1
    2480:	ca 01       	movw	r24, r20
    2482:	b9 01       	movw	r22, r18
    2484:	0e 94 40 29 	call	0x5280	; 0x5280 <__udivmodhi4>
    2488:	cb 01       	movw	r24, r22
    248a:	90 93 27 10 	sts	0x1027, r25	; 0x801027 <__data_end+0x1>
    248e:	80 93 26 10 	sts	0x1026, r24	; 0x801026 <__data_end>
    2492:	8a ef       	ldi	r24, 0xFA	; 250
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	fc 01       	movw	r30, r24
    2498:	80 81       	ld	r24, Z
    249a:	88 2f       	mov	r24, r24
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	98 2f       	mov	r25, r24
    24a0:	88 27       	eor	r24, r24
    24a2:	09 2e       	mov	r0, r25
    24a4:	00 0c       	add	r0, r0
    24a6:	aa 0b       	sbc	r26, r26
    24a8:	bb 0b       	sbc	r27, r27
    24aa:	80 93 28 10 	sts	0x1028, r24	; 0x801028 <RPMData>
    24ae:	90 93 29 10 	sts	0x1029, r25	; 0x801029 <RPMData+0x1>
    24b2:	a0 93 2a 10 	sts	0x102A, r26	; 0x80102a <RPMData+0x2>
    24b6:	b0 93 2b 10 	sts	0x102B, r27	; 0x80102b <RPMData+0x3>
    24ba:	8a ef       	ldi	r24, 0xFA	; 250
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	fc 01       	movw	r30, r24
    24c0:	80 81       	ld	r24, Z
    24c2:	28 2f       	mov	r18, r24
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	40 e0       	ldi	r20, 0x00	; 0
    24c8:	50 e0       	ldi	r21, 0x00	; 0
    24ca:	80 91 28 10 	lds	r24, 0x1028	; 0x801028 <RPMData>
    24ce:	90 91 29 10 	lds	r25, 0x1029	; 0x801029 <RPMData+0x1>
    24d2:	a0 91 2a 10 	lds	r26, 0x102A	; 0x80102a <RPMData+0x2>
    24d6:	b0 91 2b 10 	lds	r27, 0x102B	; 0x80102b <RPMData+0x3>
    24da:	82 0f       	add	r24, r18
    24dc:	93 1f       	adc	r25, r19
    24de:	a4 1f       	adc	r26, r20
    24e0:	b5 1f       	adc	r27, r21
    24e2:	80 93 28 10 	sts	0x1028, r24	; 0x801028 <RPMData>
    24e6:	90 93 29 10 	sts	0x1029, r25	; 0x801029 <RPMData+0x1>
    24ea:	a0 93 2a 10 	sts	0x102A, r26	; 0x80102a <RPMData+0x2>
    24ee:	b0 93 2b 10 	sts	0x102B, r27	; 0x80102b <RPMData+0x3>
    24f2:	8a ef       	ldi	r24, 0xFA	; 250
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	fc 01       	movw	r30, r24
    24f8:	80 81       	ld	r24, Z
    24fa:	88 2f       	mov	r24, r24
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	98 2f       	mov	r25, r24
    2500:	88 27       	eor	r24, r24
    2502:	09 2e       	mov	r0, r25
    2504:	00 0c       	add	r0, r0
    2506:	aa 0b       	sbc	r26, r26
    2508:	bb 0b       	sbc	r27, r27
    250a:	80 93 2c 10 	sts	0x102C, r24	; 0x80102c <GearboxTempData>
    250e:	90 93 2d 10 	sts	0x102D, r25	; 0x80102d <GearboxTempData+0x1>
    2512:	a0 93 2e 10 	sts	0x102E, r26	; 0x80102e <GearboxTempData+0x2>
    2516:	b0 93 2f 10 	sts	0x102F, r27	; 0x80102f <GearboxTempData+0x3>
    251a:	8a ef       	ldi	r24, 0xFA	; 250
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	fc 01       	movw	r30, r24
    2520:	80 81       	ld	r24, Z
    2522:	28 2f       	mov	r18, r24
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e0       	ldi	r20, 0x00	; 0
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <GearboxTempData>
    252e:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <GearboxTempData+0x1>
    2532:	a0 91 2e 10 	lds	r26, 0x102E	; 0x80102e <GearboxTempData+0x2>
    2536:	b0 91 2f 10 	lds	r27, 0x102F	; 0x80102f <GearboxTempData+0x3>
    253a:	82 0f       	add	r24, r18
    253c:	93 1f       	adc	r25, r19
    253e:	a4 1f       	adc	r26, r20
    2540:	b5 1f       	adc	r27, r21
    2542:	80 93 2c 10 	sts	0x102C, r24	; 0x80102c <GearboxTempData>
    2546:	90 93 2d 10 	sts	0x102D, r25	; 0x80102d <GearboxTempData+0x1>
    254a:	a0 93 2e 10 	sts	0x102E, r26	; 0x80102e <GearboxTempData+0x2>
    254e:	b0 93 2f 10 	sts	0x102F, r27	; 0x80102f <GearboxTempData+0x3>
    2552:	8a ef       	ldi	r24, 0xFA	; 250
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	fc 01       	movw	r30, r24
    2558:	80 81       	ld	r24, Z
    255a:	88 2f       	mov	r24, r24
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	98 2f       	mov	r25, r24
    2560:	88 27       	eor	r24, r24
    2562:	09 2e       	mov	r0, r25
    2564:	00 0c       	add	r0, r0
    2566:	aa 0b       	sbc	r26, r26
    2568:	bb 0b       	sbc	r27, r27
    256a:	80 93 30 10 	sts	0x1030, r24	; 0x801030 <VoltageData>
    256e:	90 93 31 10 	sts	0x1031, r25	; 0x801031 <VoltageData+0x1>
    2572:	a0 93 32 10 	sts	0x1032, r26	; 0x801032 <VoltageData+0x2>
    2576:	b0 93 33 10 	sts	0x1033, r27	; 0x801033 <VoltageData+0x3>
    257a:	8a ef       	ldi	r24, 0xFA	; 250
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	fc 01       	movw	r30, r24
    2580:	80 81       	ld	r24, Z
    2582:	28 2f       	mov	r18, r24
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e0       	ldi	r20, 0x00	; 0
    2588:	50 e0       	ldi	r21, 0x00	; 0
    258a:	80 91 30 10 	lds	r24, 0x1030	; 0x801030 <VoltageData>
    258e:	90 91 31 10 	lds	r25, 0x1031	; 0x801031 <VoltageData+0x1>
    2592:	a0 91 32 10 	lds	r26, 0x1032	; 0x801032 <VoltageData+0x2>
    2596:	b0 91 33 10 	lds	r27, 0x1033	; 0x801033 <VoltageData+0x3>
    259a:	82 0f       	add	r24, r18
    259c:	93 1f       	adc	r25, r19
    259e:	a4 1f       	adc	r26, r20
    25a0:	b5 1f       	adc	r27, r21
    25a2:	80 93 30 10 	sts	0x1030, r24	; 0x801030 <VoltageData>
    25a6:	90 93 31 10 	sts	0x1031, r25	; 0x801031 <VoltageData+0x1>
    25aa:	a0 93 32 10 	sts	0x1032, r26	; 0x801032 <VoltageData+0x2>
    25ae:	b0 93 33 10 	sts	0x1033, r27	; 0x801033 <VoltageData+0x3>
    25b2:	e1 2c       	mov	r14, r1
    25b4:	f1 2c       	mov	r15, r1
    25b6:	00 e4       	ldi	r16, 0x40	; 64
    25b8:	10 e0       	ldi	r17, 0x00	; 0
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e4       	ldi	r20, 0x40	; 64
    25c0:	50 e0       	ldi	r21, 0x00	; 0
    25c2:	68 e0       	ldi	r22, 0x08	; 8
    25c4:	85 e0       	ldi	r24, 0x05	; 5
    25c6:	0e 94 02 10 	call	0x2004	; 0x2004 <CAN_RXInit>
    25ca:	8d ee       	ldi	r24, 0xED	; 237
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	20 e5       	ldi	r18, 0x50	; 80
    25d0:	fc 01       	movw	r30, r24
    25d2:	20 83       	st	Z, r18
    25d4:	8e ee       	ldi	r24, 0xEE	; 238
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	2e ee       	ldi	r18, 0xEE	; 238
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	f9 01       	movw	r30, r18
    25de:	20 81       	ld	r18, Z
    25e0:	2f 7d       	andi	r18, 0xDF	; 223
    25e2:	fc 01       	movw	r30, r24
    25e4:	20 83       	st	Z, r18
    25e6:	8d ee       	ldi	r24, 0xED	; 237
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	20 e4       	ldi	r18, 0x40	; 64
    25ec:	fc 01       	movw	r30, r24
    25ee:	20 83       	st	Z, r18
    25f0:	8e ee       	ldi	r24, 0xEE	; 238
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	2e ee       	ldi	r18, 0xEE	; 238
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	f9 01       	movw	r30, r18
    25fa:	20 81       	ld	r18, Z
    25fc:	2f 7d       	andi	r18, 0xDF	; 223
    25fe:	fc 01       	movw	r30, r24
    2600:	20 83       	st	Z, r18
    2602:	00 00       	nop
    2604:	df 91       	pop	r29
    2606:	cf 91       	pop	r28
    2608:	ff 91       	pop	r31
    260a:	ef 91       	pop	r30
    260c:	bf 91       	pop	r27
    260e:	af 91       	pop	r26
    2610:	9f 91       	pop	r25
    2612:	8f 91       	pop	r24
    2614:	7f 91       	pop	r23
    2616:	6f 91       	pop	r22
    2618:	5f 91       	pop	r21
    261a:	4f 91       	pop	r20
    261c:	3f 91       	pop	r19
    261e:	2f 91       	pop	r18
    2620:	1f 91       	pop	r17
    2622:	0f 91       	pop	r16
    2624:	ff 90       	pop	r15
    2626:	ef 90       	pop	r14
    2628:	0f 90       	pop	r0
    262a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    262e:	0f 90       	pop	r0
    2630:	1f 90       	pop	r1
    2632:	18 95       	reti

00002634 <ADC_init>:
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	8c e7       	ldi	r24, 0x7C	; 124
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	20 e6       	ldi	r18, 0x60	; 96
    2642:	fc 01       	movw	r30, r24
    2644:	20 83       	st	Z, r18
    2646:	8c e7       	ldi	r24, 0x7C	; 124
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	2c e7       	ldi	r18, 0x7C	; 124
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	f9 01       	movw	r30, r18
    2650:	20 81       	ld	r18, Z
    2652:	2f 7d       	andi	r18, 0xDF	; 223
    2654:	fc 01       	movw	r30, r24
    2656:	20 83       	st	Z, r18
    2658:	8a e7       	ldi	r24, 0x7A	; 122
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	27 e8       	ldi	r18, 0x87	; 135
    265e:	fc 01       	movw	r30, r24
    2660:	20 83       	st	Z, r18
    2662:	00 00       	nop
    2664:	df 91       	pop	r29
    2666:	cf 91       	pop	r28
    2668:	08 95       	ret

0000266a <ADC_read>:
    266a:	cf 93       	push	r28
    266c:	df 93       	push	r29
    266e:	00 d0       	rcall	.+0      	; 0x2670 <ADC_read+0x6>
    2670:	1f 92       	push	r1
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	8b 83       	std	Y+3, r24	; 0x03
    2678:	8c e7       	ldi	r24, 0x7C	; 124
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	fc 01       	movw	r30, r24
    267e:	80 81       	ld	r24, Z
    2680:	98 2f       	mov	r25, r24
    2682:	90 7e       	andi	r25, 0xE0	; 224
    2684:	8b 81       	ldd	r24, Y+3	; 0x03
    2686:	8f 71       	andi	r24, 0x1F	; 31
    2688:	89 2b       	or	r24, r25
    268a:	8b 83       	std	Y+3, r24	; 0x03
    268c:	8c e7       	ldi	r24, 0x7C	; 124
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	2b 81       	ldd	r18, Y+3	; 0x03
    2692:	fc 01       	movw	r30, r24
    2694:	20 83       	st	Z, r18
    2696:	8a e7       	ldi	r24, 0x7A	; 122
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	2a e7       	ldi	r18, 0x7A	; 122
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	f9 01       	movw	r30, r18
    26a0:	20 81       	ld	r18, Z
    26a2:	20 64       	ori	r18, 0x40	; 64
    26a4:	fc 01       	movw	r30, r24
    26a6:	20 83       	st	Z, r18
    26a8:	00 00       	nop
    26aa:	8a e7       	ldi	r24, 0x7A	; 122
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	fc 01       	movw	r30, r24
    26b0:	80 81       	ld	r24, Z
    26b2:	88 2f       	mov	r24, r24
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	80 71       	andi	r24, 0x10	; 16
    26b8:	99 27       	eor	r25, r25
    26ba:	89 2b       	or	r24, r25
    26bc:	b1 f3       	breq	.-20     	; 0x26aa <ADC_read+0x40>
    26be:	1a 82       	std	Y+2, r1	; 0x02
    26c0:	19 82       	std	Y+1, r1	; 0x01
    26c2:	88 e7       	ldi	r24, 0x78	; 120
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	fc 01       	movw	r30, r24
    26c8:	80 81       	ld	r24, Z
    26ca:	88 2f       	mov	r24, r24
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	9a 83       	std	Y+2, r25	; 0x02
    26d0:	89 83       	std	Y+1, r24	; 0x01
    26d2:	89 e7       	ldi	r24, 0x79	; 121
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	fc 01       	movw	r30, r24
    26d8:	80 81       	ld	r24, Z
    26da:	88 2f       	mov	r24, r24
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	83 70       	andi	r24, 0x03	; 3
    26e0:	99 27       	eor	r25, r25
    26e2:	98 2f       	mov	r25, r24
    26e4:	88 27       	eor	r24, r24
    26e6:	9c 01       	movw	r18, r24
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	9a 81       	ldd	r25, Y+2	; 0x02
    26ec:	82 2b       	or	r24, r18
    26ee:	93 2b       	or	r25, r19
    26f0:	9a 83       	std	Y+2, r25	; 0x02
    26f2:	89 83       	std	Y+1, r24	; 0x01
    26f4:	8a e7       	ldi	r24, 0x7A	; 122
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	2a e7       	ldi	r18, 0x7A	; 122
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	f9 01       	movw	r30, r18
    26fe:	20 81       	ld	r18, Z
    2700:	20 61       	ori	r18, 0x10	; 16
    2702:	fc 01       	movw	r30, r24
    2704:	20 83       	st	Z, r18
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	08 95       	ret

00002716 <spi_init>:
    2716:	cf 93       	push	r28
    2718:	df 93       	push	r29
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	85 e5       	ldi	r24, 0x55	; 85
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	25 e5       	ldi	r18, 0x55	; 85
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	f9 01       	movw	r30, r18
    2728:	20 81       	ld	r18, Z
    272a:	2f 77       	andi	r18, 0x7F	; 127
    272c:	fc 01       	movw	r30, r24
    272e:	20 83       	st	Z, r18
    2730:	8c e4       	ldi	r24, 0x4C	; 76
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	20 e5       	ldi	r18, 0x50	; 80
    2736:	fc 01       	movw	r30, r24
    2738:	20 83       	st	Z, r18
    273a:	8d e4       	ldi	r24, 0x4D	; 77
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	21 e0       	ldi	r18, 0x01	; 1
    2740:	fc 01       	movw	r30, r24
    2742:	20 83       	st	Z, r18
    2744:	8e e4       	ldi	r24, 0x4E	; 78
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	fc 01       	movw	r30, r24
    274a:	10 82       	st	Z, r1
    274c:	00 00       	nop
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	08 95       	ret

00002754 <spi_send_byte>:
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	1f 92       	push	r1
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62
    275e:	89 83       	std	Y+1, r24	; 0x01
    2760:	8e e4       	ldi	r24, 0x4E	; 78
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	29 81       	ldd	r18, Y+1	; 0x01
    2766:	fc 01       	movw	r30, r24
    2768:	20 83       	st	Z, r18
    276a:	00 00       	nop
    276c:	8d e4       	ldi	r24, 0x4D	; 77
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	fc 01       	movw	r30, r24
    2772:	80 81       	ld	r24, Z
    2774:	88 23       	and	r24, r24
    2776:	d4 f7       	brge	.-12     	; 0x276c <spi_send_byte+0x18>
    2778:	8e e4       	ldi	r24, 0x4E	; 78
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	fc 01       	movw	r30, r24
    277e:	80 81       	ld	r24, Z
    2780:	0f 90       	pop	r0
    2782:	df 91       	pop	r29
    2784:	cf 91       	pop	r28
    2786:	08 95       	ret

00002788 <uDelay>:
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	00 d0       	rcall	.+0      	; 0x278e <uDelay+0x6>
    278e:	cd b7       	in	r28, 0x3d	; 61
    2790:	de b7       	in	r29, 0x3e	; 62
    2792:	9a 83       	std	Y+2, r25	; 0x02
    2794:	89 83       	std	Y+1, r24	; 0x01
    2796:	00 00       	nop
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	9a 81       	ldd	r25, Y+2	; 0x02
    279c:	9c 01       	movw	r18, r24
    279e:	21 50       	subi	r18, 0x01	; 1
    27a0:	31 09       	sbc	r19, r1
    27a2:	3a 83       	std	Y+2, r19	; 0x02
    27a4:	29 83       	std	Y+1, r18	; 0x01
    27a6:	89 2b       	or	r24, r25
    27a8:	b9 f7       	brne	.-18     	; 0x2798 <uDelay+0x10>
    27aa:	00 00       	nop
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	df 91       	pop	r29
    27b2:	cf 91       	pop	r28
    27b4:	08 95       	ret

000027b6 <Delay>:
    27b6:	cf 93       	push	r28
    27b8:	df 93       	push	r29
    27ba:	00 d0       	rcall	.+0      	; 0x27bc <Delay+0x6>
    27bc:	00 d0       	rcall	.+0      	; 0x27be <Delay+0x8>
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	9c 83       	std	Y+4, r25	; 0x04
    27c4:	8b 83       	std	Y+3, r24	; 0x03
    27c6:	1a 82       	std	Y+2, r1	; 0x02
    27c8:	19 82       	std	Y+1, r1	; 0x01
    27ca:	09 c0       	rjmp	.+18     	; 0x27de <Delay+0x28>
    27cc:	80 e6       	ldi	r24, 0x60	; 96
    27ce:	94 e0       	ldi	r25, 0x04	; 4
    27d0:	0e 94 c4 13 	call	0x2788	; 0x2788 <uDelay>
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	9a 81       	ldd	r25, Y+2	; 0x02
    27d8:	01 96       	adiw	r24, 0x01	; 1
    27da:	9a 83       	std	Y+2, r25	; 0x02
    27dc:	89 83       	std	Y+1, r24	; 0x01
    27de:	29 81       	ldd	r18, Y+1	; 0x01
    27e0:	3a 81       	ldd	r19, Y+2	; 0x02
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	9c 81       	ldd	r25, Y+4	; 0x04
    27e6:	28 17       	cp	r18, r24
    27e8:	39 07       	cpc	r19, r25
    27ea:	80 f3       	brcs	.-32     	; 0x27cc <Delay+0x16>
    27ec:	00 00       	nop
    27ee:	0f 90       	pop	r0
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	df 91       	pop	r29
    27f8:	cf 91       	pop	r28
    27fa:	08 95       	ret

000027fc <Write_Command>:
    27fc:	cf 93       	push	r28
    27fe:	df 93       	push	r29
    2800:	1f 92       	push	r1
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
    2806:	89 83       	std	Y+1, r24	; 0x01
    2808:	85 e2       	ldi	r24, 0x25	; 37
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	25 e2       	ldi	r18, 0x25	; 37
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	f9 01       	movw	r30, r18
    2812:	20 81       	ld	r18, Z
    2814:	2f 7d       	andi	r18, 0xDF	; 223
    2816:	fc 01       	movw	r30, r24
    2818:	20 83       	st	Z, r18
    281a:	8b e2       	ldi	r24, 0x2B	; 43
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	2b e2       	ldi	r18, 0x2B	; 43
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	f9 01       	movw	r30, r18
    2824:	20 81       	ld	r18, Z
    2826:	2e 7f       	andi	r18, 0xFE	; 254
    2828:	fc 01       	movw	r30, r24
    282a:	20 83       	st	Z, r18
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	0e 94 aa 13 	call	0x2754	; 0x2754 <spi_send_byte>
    2832:	85 e2       	ldi	r24, 0x25	; 37
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	25 e2       	ldi	r18, 0x25	; 37
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	f9 01       	movw	r30, r18
    283c:	20 81       	ld	r18, Z
    283e:	20 62       	ori	r18, 0x20	; 32
    2840:	fc 01       	movw	r30, r24
    2842:	20 83       	st	Z, r18
    2844:	8b e2       	ldi	r24, 0x2B	; 43
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	2b e2       	ldi	r18, 0x2B	; 43
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	f9 01       	movw	r30, r18
    284e:	20 81       	ld	r18, Z
    2850:	21 60       	ori	r18, 0x01	; 1
    2852:	fc 01       	movw	r30, r24
    2854:	20 83       	st	Z, r18
    2856:	00 00       	nop
    2858:	0f 90       	pop	r0
    285a:	df 91       	pop	r29
    285c:	cf 91       	pop	r28
    285e:	08 95       	ret

00002860 <Write_Data>:
    2860:	cf 93       	push	r28
    2862:	df 93       	push	r29
    2864:	1f 92       	push	r1
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    286a:	89 83       	std	Y+1, r24	; 0x01
    286c:	8b e2       	ldi	r24, 0x2B	; 43
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	2b e2       	ldi	r18, 0x2B	; 43
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	f9 01       	movw	r30, r18
    2876:	20 81       	ld	r18, Z
    2878:	2e 7f       	andi	r18, 0xFE	; 254
    287a:	fc 01       	movw	r30, r24
    287c:	20 83       	st	Z, r18
    287e:	85 e2       	ldi	r24, 0x25	; 37
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	25 e2       	ldi	r18, 0x25	; 37
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	f9 01       	movw	r30, r18
    2888:	20 81       	ld	r18, Z
    288a:	20 62       	ori	r18, 0x20	; 32
    288c:	fc 01       	movw	r30, r24
    288e:	20 83       	st	Z, r18
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	0e 94 aa 13 	call	0x2754	; 0x2754 <spi_send_byte>
    2896:	85 e2       	ldi	r24, 0x25	; 37
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	25 e2       	ldi	r18, 0x25	; 37
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	f9 01       	movw	r30, r18
    28a0:	20 81       	ld	r18, Z
    28a2:	20 62       	ori	r18, 0x20	; 32
    28a4:	fc 01       	movw	r30, r24
    28a6:	20 83       	st	Z, r18
    28a8:	8b e2       	ldi	r24, 0x2B	; 43
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	2b e2       	ldi	r18, 0x2B	; 43
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	f9 01       	movw	r30, r18
    28b2:	20 81       	ld	r18, Z
    28b4:	21 60       	ori	r18, 0x01	; 1
    28b6:	fc 01       	movw	r30, r24
    28b8:	20 83       	st	Z, r18
    28ba:	00 00       	nop
    28bc:	0f 90       	pop	r0
    28be:	df 91       	pop	r29
    28c0:	cf 91       	pop	r28
    28c2:	08 95       	ret

000028c4 <Set_Column_Address>:
    28c4:	cf 93       	push	r28
    28c6:	df 93       	push	r29
    28c8:	00 d0       	rcall	.+0      	; 0x28ca <Set_Column_Address+0x6>
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	6a 83       	std	Y+2, r22	; 0x02
    28d2:	85 e1       	ldi	r24, 0x15	; 21
    28d4:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    28e4:	00 00       	nop
    28e6:	0f 90       	pop	r0
    28e8:	0f 90       	pop	r0
    28ea:	df 91       	pop	r29
    28ec:	cf 91       	pop	r28
    28ee:	08 95       	ret

000028f0 <Set_Row_Address>:
    28f0:	cf 93       	push	r28
    28f2:	df 93       	push	r29
    28f4:	00 d0       	rcall	.+0      	; 0x28f6 <Set_Row_Address+0x6>
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	89 83       	std	Y+1, r24	; 0x01
    28fc:	6a 83       	std	Y+2, r22	; 0x02
    28fe:	85 e7       	ldi	r24, 0x75	; 117
    2900:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    290a:	8a 81       	ldd	r24, Y+2	; 0x02
    290c:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2910:	00 00       	nop
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	df 91       	pop	r29
    2918:	cf 91       	pop	r28
    291a:	08 95       	ret

0000291c <Set_Write_RAM>:
    291c:	cf 93       	push	r28
    291e:	df 93       	push	r29
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	8c e5       	ldi	r24, 0x5C	; 92
    2926:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    292a:	00 00       	nop
    292c:	df 91       	pop	r29
    292e:	cf 91       	pop	r28
    2930:	08 95       	ret

00002932 <Set_Remap_Format>:
    2932:	cf 93       	push	r28
    2934:	df 93       	push	r29
    2936:	1f 92       	push	r1
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	89 83       	std	Y+1, r24	; 0x01
    293e:	80 ea       	ldi	r24, 0xA0	; 160
    2940:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    294a:	81 e1       	ldi	r24, 0x11	; 17
    294c:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2950:	00 00       	nop
    2952:	0f 90       	pop	r0
    2954:	df 91       	pop	r29
    2956:	cf 91       	pop	r28
    2958:	08 95       	ret

0000295a <Set_Start_Line>:
    295a:	cf 93       	push	r28
    295c:	df 93       	push	r29
    295e:	1f 92       	push	r1
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
    2964:	89 83       	std	Y+1, r24	; 0x01
    2966:	81 ea       	ldi	r24, 0xA1	; 161
    2968:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2972:	00 00       	nop
    2974:	0f 90       	pop	r0
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	08 95       	ret

0000297c <Set_Display_Offset>:
    297c:	cf 93       	push	r28
    297e:	df 93       	push	r29
    2980:	1f 92       	push	r1
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
    2986:	89 83       	std	Y+1, r24	; 0x01
    2988:	82 ea       	ldi	r24, 0xA2	; 162
    298a:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2994:	00 00       	nop
    2996:	0f 90       	pop	r0
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	08 95       	ret

0000299e <Set_Display_Mode>:
    299e:	cf 93       	push	r28
    29a0:	df 93       	push	r29
    29a2:	1f 92       	push	r1
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	89 83       	std	Y+1, r24	; 0x01
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	84 6a       	ori	r24, 0xA4	; 164
    29ae:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    29b2:	00 00       	nop
    29b4:	0f 90       	pop	r0
    29b6:	df 91       	pop	r29
    29b8:	cf 91       	pop	r28
    29ba:	08 95       	ret

000029bc <Set_Partial_Display>:
    29bc:	cf 93       	push	r28
    29be:	df 93       	push	r29
    29c0:	00 d0       	rcall	.+0      	; 0x29c2 <Set_Partial_Display+0x6>
    29c2:	1f 92       	push	r1
    29c4:	cd b7       	in	r28, 0x3d	; 61
    29c6:	de b7       	in	r29, 0x3e	; 62
    29c8:	89 83       	std	Y+1, r24	; 0x01
    29ca:	6a 83       	std	Y+2, r22	; 0x02
    29cc:	4b 83       	std	Y+3, r20	; 0x03
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	88 6a       	ori	r24, 0xA8	; 168
    29d2:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	88 23       	and	r24, r24
    29da:	31 f4       	brne	.+12     	; 0x29e8 <Set_Partial_Display+0x2c>
    29dc:	8a 81       	ldd	r24, Y+2	; 0x02
    29de:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    29e2:	8b 81       	ldd	r24, Y+3	; 0x03
    29e4:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    29e8:	00 00       	nop
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	df 91       	pop	r29
    29f2:	cf 91       	pop	r28
    29f4:	08 95       	ret

000029f6 <Set_Function_Selection>:
    29f6:	cf 93       	push	r28
    29f8:	df 93       	push	r29
    29fa:	1f 92       	push	r1
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    2a00:	89 83       	std	Y+1, r24	; 0x01
    2a02:	8b ea       	ldi	r24, 0xAB	; 171
    2a04:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    2a08:	89 81       	ldd	r24, Y+1	; 0x01
    2a0a:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2a0e:	00 00       	nop
    2a10:	0f 90       	pop	r0
    2a12:	df 91       	pop	r29
    2a14:	cf 91       	pop	r28
    2a16:	08 95       	ret

00002a18 <Set_Display_On_Off>:
    2a18:	cf 93       	push	r28
    2a1a:	df 93       	push	r29
    2a1c:	1f 92       	push	r1
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
    2a22:	89 83       	std	Y+1, r24	; 0x01
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	8e 6a       	ori	r24, 0xAE	; 174
    2a28:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    2a2c:	00 00       	nop
    2a2e:	0f 90       	pop	r0
    2a30:	df 91       	pop	r29
    2a32:	cf 91       	pop	r28
    2a34:	08 95       	ret

00002a36 <Set_Phase_Length>:
    2a36:	cf 93       	push	r28
    2a38:	df 93       	push	r29
    2a3a:	1f 92       	push	r1
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
    2a40:	89 83       	std	Y+1, r24	; 0x01
    2a42:	81 eb       	ldi	r24, 0xB1	; 177
    2a44:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2a4e:	00 00       	nop
    2a50:	0f 90       	pop	r0
    2a52:	df 91       	pop	r29
    2a54:	cf 91       	pop	r28
    2a56:	08 95       	ret

00002a58 <Set_Display_Clock>:
    2a58:	cf 93       	push	r28
    2a5a:	df 93       	push	r29
    2a5c:	1f 92       	push	r1
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
    2a62:	89 83       	std	Y+1, r24	; 0x01
    2a64:	83 eb       	ldi	r24, 0xB3	; 179
    2a66:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2a70:	00 00       	nop
    2a72:	0f 90       	pop	r0
    2a74:	df 91       	pop	r29
    2a76:	cf 91       	pop	r28
    2a78:	08 95       	ret

00002a7a <Set_Display_Enhancement_A>:
    2a7a:	cf 93       	push	r28
    2a7c:	df 93       	push	r29
    2a7e:	00 d0       	rcall	.+0      	; 0x2a80 <Set_Display_Enhancement_A+0x6>
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
    2a84:	89 83       	std	Y+1, r24	; 0x01
    2a86:	6a 83       	std	Y+2, r22	; 0x02
    2a88:	84 eb       	ldi	r24, 0xB4	; 180
    2a8a:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	80 6a       	ori	r24, 0xA0	; 160
    2a92:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2a96:	8a 81       	ldd	r24, Y+2	; 0x02
    2a98:	85 60       	ori	r24, 0x05	; 5
    2a9a:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2a9e:	00 00       	nop
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	df 91       	pop	r29
    2aa6:	cf 91       	pop	r28
    2aa8:	08 95       	ret

00002aaa <Set_GPIO>:
    2aaa:	cf 93       	push	r28
    2aac:	df 93       	push	r29
    2aae:	1f 92       	push	r1
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
    2ab4:	89 83       	std	Y+1, r24	; 0x01
    2ab6:	85 eb       	ldi	r24, 0xB5	; 181
    2ab8:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    2abc:	89 81       	ldd	r24, Y+1	; 0x01
    2abe:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2ac2:	00 00       	nop
    2ac4:	0f 90       	pop	r0
    2ac6:	df 91       	pop	r29
    2ac8:	cf 91       	pop	r28
    2aca:	08 95       	ret

00002acc <Set_Precharge_Period>:
    2acc:	cf 93       	push	r28
    2ace:	df 93       	push	r29
    2ad0:	1f 92       	push	r1
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    2ad6:	89 83       	std	Y+1, r24	; 0x01
    2ad8:	86 eb       	ldi	r24, 0xB6	; 182
    2ada:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2ae4:	00 00       	nop
    2ae6:	0f 90       	pop	r0
    2ae8:	df 91       	pop	r29
    2aea:	cf 91       	pop	r28
    2aec:	08 95       	ret

00002aee <Set_Precharge_Voltage>:
    2aee:	cf 93       	push	r28
    2af0:	df 93       	push	r29
    2af2:	1f 92       	push	r1
    2af4:	cd b7       	in	r28, 0x3d	; 61
    2af6:	de b7       	in	r29, 0x3e	; 62
    2af8:	89 83       	std	Y+1, r24	; 0x01
    2afa:	8b eb       	ldi	r24, 0xBB	; 187
    2afc:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2b06:	00 00       	nop
    2b08:	0f 90       	pop	r0
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	08 95       	ret

00002b10 <Set_VCOMH>:
    2b10:	cf 93       	push	r28
    2b12:	df 93       	push	r29
    2b14:	1f 92       	push	r1
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
    2b1a:	89 83       	std	Y+1, r24	; 0x01
    2b1c:	8e eb       	ldi	r24, 0xBE	; 190
    2b1e:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2b28:	00 00       	nop
    2b2a:	0f 90       	pop	r0
    2b2c:	df 91       	pop	r29
    2b2e:	cf 91       	pop	r28
    2b30:	08 95       	ret

00002b32 <Set_Contrast_Current>:
    2b32:	cf 93       	push	r28
    2b34:	df 93       	push	r29
    2b36:	1f 92       	push	r1
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	89 83       	std	Y+1, r24	; 0x01
    2b3e:	81 ec       	ldi	r24, 0xC1	; 193
    2b40:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2b4a:	00 00       	nop
    2b4c:	0f 90       	pop	r0
    2b4e:	df 91       	pop	r29
    2b50:	cf 91       	pop	r28
    2b52:	08 95       	ret

00002b54 <Set_Master_Current>:
    2b54:	cf 93       	push	r28
    2b56:	df 93       	push	r29
    2b58:	1f 92       	push	r1
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
    2b5e:	89 83       	std	Y+1, r24	; 0x01
    2b60:	87 ec       	ldi	r24, 0xC7	; 199
    2b62:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2b6c:	00 00       	nop
    2b6e:	0f 90       	pop	r0
    2b70:	df 91       	pop	r29
    2b72:	cf 91       	pop	r28
    2b74:	08 95       	ret

00002b76 <Set_Multiplex_Ratio>:
    2b76:	cf 93       	push	r28
    2b78:	df 93       	push	r29
    2b7a:	1f 92       	push	r1
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	89 83       	std	Y+1, r24	; 0x01
    2b82:	8a ec       	ldi	r24, 0xCA	; 202
    2b84:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2b8e:	00 00       	nop
    2b90:	0f 90       	pop	r0
    2b92:	df 91       	pop	r29
    2b94:	cf 91       	pop	r28
    2b96:	08 95       	ret

00002b98 <Set_Display_Enhancement_B>:
    2b98:	cf 93       	push	r28
    2b9a:	df 93       	push	r29
    2b9c:	1f 92       	push	r1
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
    2ba2:	89 83       	std	Y+1, r24	; 0x01
    2ba4:	81 ed       	ldi	r24, 0xD1	; 209
    2ba6:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	82 68       	ori	r24, 0x82	; 130
    2bae:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2bb2:	80 e2       	ldi	r24, 0x20	; 32
    2bb4:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2bb8:	00 00       	nop
    2bba:	0f 90       	pop	r0
    2bbc:	df 91       	pop	r29
    2bbe:	cf 91       	pop	r28
    2bc0:	08 95       	ret

00002bc2 <Set_Command_Lock>:
    2bc2:	cf 93       	push	r28
    2bc4:	df 93       	push	r29
    2bc6:	1f 92       	push	r1
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
    2bcc:	89 83       	std	Y+1, r24	; 0x01
    2bce:	8d ef       	ldi	r24, 0xFD	; 253
    2bd0:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	82 61       	ori	r24, 0x12	; 18
    2bd8:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2bdc:	00 00       	nop
    2bde:	0f 90       	pop	r0
    2be0:	df 91       	pop	r29
    2be2:	cf 91       	pop	r28
    2be4:	08 95       	ret

00002be6 <Fill_RAM>:
    2be6:	cf 93       	push	r28
    2be8:	df 93       	push	r29
    2bea:	00 d0       	rcall	.+0      	; 0x2bec <Fill_RAM+0x6>
    2bec:	1f 92       	push	r1
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
    2bf2:	8b 83       	std	Y+3, r24	; 0x03
    2bf4:	67 e7       	ldi	r22, 0x77	; 119
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	0e 94 62 14 	call	0x28c4	; 0x28c4 <Set_Column_Address>
    2bfc:	6f e7       	ldi	r22, 0x7F	; 127
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
    2c00:	0e 94 78 14 	call	0x28f0	; 0x28f0 <Set_Row_Address>
    2c04:	0e 94 8e 14 	call	0x291c	; 0x291c <Set_Write_RAM>
    2c08:	19 82       	std	Y+1, r1	; 0x01
    2c0a:	0e c0       	rjmp	.+28     	; 0x2c28 <Fill_RAM+0x42>
    2c0c:	1a 82       	std	Y+2, r1	; 0x02
    2c0e:	06 c0       	rjmp	.+12     	; 0x2c1c <Fill_RAM+0x36>
    2c10:	8b 81       	ldd	r24, Y+3	; 0x03
    2c12:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2c16:	8a 81       	ldd	r24, Y+2	; 0x02
    2c18:	8f 5f       	subi	r24, 0xFF	; 255
    2c1a:	8a 83       	std	Y+2, r24	; 0x02
    2c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1e:	88 37       	cpi	r24, 0x78	; 120
    2c20:	b8 f3       	brcs	.-18     	; 0x2c10 <Fill_RAM+0x2a>
    2c22:	89 81       	ldd	r24, Y+1	; 0x01
    2c24:	8f 5f       	subi	r24, 0xFF	; 255
    2c26:	89 83       	std	Y+1, r24	; 0x01
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	88 23       	and	r24, r24
    2c2c:	7c f7       	brge	.-34     	; 0x2c0c <Fill_RAM+0x26>
    2c2e:	00 00       	nop
    2c30:	0f 90       	pop	r0
    2c32:	0f 90       	pop	r0
    2c34:	0f 90       	pop	r0
    2c36:	df 91       	pop	r29
    2c38:	cf 91       	pop	r28
    2c3a:	08 95       	ret

00002c3c <Show_Font57>:
    2c3c:	cf 93       	push	r28
    2c3e:	df 93       	push	r29
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
    2c44:	2c 97       	sbiw	r28, 0x0c	; 12
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61
    2c50:	89 87       	std	Y+9, r24	; 0x09
    2c52:	6a 87       	std	Y+10, r22	; 0x0a
    2c54:	4b 87       	std	Y+11, r20	; 0x0b
    2c56:	2c 87       	std	Y+12, r18	; 0x0c
    2c58:	89 85       	ldd	r24, Y+9	; 0x09
    2c5a:	88 2f       	mov	r24, r24
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	81 30       	cpi	r24, 0x01	; 1
    2c60:	91 05       	cpc	r25, r1
    2c62:	19 f0       	breq	.+6      	; 0x2c6a <Show_Font57+0x2e>
    2c64:	02 97       	sbiw	r24, 0x02	; 2
    2c66:	99 f0       	breq	.+38     	; 0x2c8e <Show_Font57+0x52>
    2c68:	24 c0       	rjmp	.+72     	; 0x2cb2 <Show_Font57+0x76>
    2c6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c6c:	88 2f       	mov	r24, r24
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	9c 01       	movw	r18, r24
    2c72:	21 50       	subi	r18, 0x01	; 1
    2c74:	31 09       	sbc	r19, r1
    2c76:	c9 01       	movw	r24, r18
    2c78:	88 0f       	add	r24, r24
    2c7a:	99 1f       	adc	r25, r25
    2c7c:	88 0f       	add	r24, r24
    2c7e:	99 1f       	adc	r25, r25
    2c80:	82 0f       	add	r24, r18
    2c82:	93 1f       	adc	r25, r19
    2c84:	80 50       	subi	r24, 0x00	; 0
    2c86:	97 4f       	sbci	r25, 0xF7	; 247
    2c88:	9a 83       	std	Y+2, r25	; 0x02
    2c8a:	89 83       	std	Y+1, r24	; 0x01
    2c8c:	12 c0       	rjmp	.+36     	; 0x2cb2 <Show_Font57+0x76>
    2c8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c90:	88 2f       	mov	r24, r24
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	9c 01       	movw	r18, r24
    2c96:	21 50       	subi	r18, 0x01	; 1
    2c98:	31 09       	sbc	r19, r1
    2c9a:	c9 01       	movw	r24, r18
    2c9c:	88 0f       	add	r24, r24
    2c9e:	99 1f       	adc	r25, r25
    2ca0:	88 0f       	add	r24, r24
    2ca2:	99 1f       	adc	r25, r25
    2ca4:	82 0f       	add	r24, r18
    2ca6:	93 1f       	adc	r25, r19
    2ca8:	80 55       	subi	r24, 0x50	; 80
    2caa:	92 4f       	sbci	r25, 0xF2	; 242
    2cac:	9a 83       	std	Y+2, r25	; 0x02
    2cae:	89 83       	std	Y+1, r24	; 0x01
    2cb0:	00 00       	nop
    2cb2:	85 e1       	ldi	r24, 0x15	; 21
    2cb4:	0e 94 99 14 	call	0x2932	; 0x2932 <Set_Remap_Format>
    2cb8:	1b 82       	std	Y+3, r1	; 0x03
    2cba:	0d c3       	rjmp	.+1562   	; 0x32d6 <Show_Font57+0x69a>
    2cbc:	89 81       	ldd	r24, Y+1	; 0x01
    2cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	80 81       	ld	r24, Z
    2cc4:	8f 83       	std	Y+7, r24	; 0x07
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cca:	01 96       	adiw	r24, 0x01	; 1
    2ccc:	9a 83       	std	Y+2, r25	; 0x02
    2cce:	89 83       	std	Y+1, r24	; 0x01
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	81 30       	cpi	r24, 0x01	; 1
    2cd4:	21 f4       	brne	.+8      	; 0x2cde <Show_Font57+0xa2>
    2cd6:	1c 82       	std	Y+4, r1	; 0x04
    2cd8:	1d 82       	std	Y+5, r1	; 0x05
    2cda:	1e 82       	std	Y+6, r1	; 0x06
    2cdc:	1e c0       	rjmp	.+60     	; 0x2d1a <Show_Font57+0xde>
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
    2ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	80 81       	ld	r24, Z
    2ce6:	8c 83       	std	Y+4, r24	; 0x04
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	9a 81       	ldd	r25, Y+2	; 0x02
    2cec:	01 96       	adiw	r24, 0x01	; 1
    2cee:	9a 83       	std	Y+2, r25	; 0x02
    2cf0:	89 83       	std	Y+1, r24	; 0x01
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	80 81       	ld	r24, Z
    2cfa:	8d 83       	std	Y+5, r24	; 0x05
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2d00:	01 96       	adiw	r24, 0x01	; 1
    2d02:	9a 83       	std	Y+2, r25	; 0x02
    2d04:	89 83       	std	Y+1, r24	; 0x01
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	80 81       	ld	r24, Z
    2d0e:	8e 83       	std	Y+6, r24	; 0x06
    2d10:	89 81       	ldd	r24, Y+1	; 0x01
    2d12:	9a 81       	ldd	r25, Y+2	; 0x02
    2d14:	01 96       	adiw	r24, 0x01	; 1
    2d16:	9a 83       	std	Y+2, r25	; 0x02
    2d18:	89 83       	std	Y+1, r24	; 0x01
    2d1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d1c:	9c e1       	ldi	r25, 0x1C	; 28
    2d1e:	98 0f       	add	r25, r24
    2d20:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d22:	84 5e       	subi	r24, 0xE4	; 228
    2d24:	69 2f       	mov	r22, r25
    2d26:	0e 94 62 14 	call	0x28c4	; 0x28c4 <Set_Column_Address>
    2d2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d2c:	89 5f       	subi	r24, 0xF9	; 249
    2d2e:	68 2f       	mov	r22, r24
    2d30:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d32:	0e 94 78 14 	call	0x28f0	; 0x28f0 <Set_Row_Address>
    2d36:	0e 94 8e 14 	call	0x291c	; 0x291c <Set_Write_RAM>
    2d3a:	8f 81       	ldd	r24, Y+7	; 0x07
    2d3c:	88 2f       	mov	r24, r24
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	81 70       	andi	r24, 0x01	; 1
    2d42:	99 27       	eor	r25, r25
    2d44:	82 95       	swap	r24
    2d46:	92 95       	swap	r25
    2d48:	90 7f       	andi	r25, 0xF0	; 240
    2d4a:	98 27       	eor	r25, r24
    2d4c:	80 7f       	andi	r24, 0xF0	; 240
    2d4e:	98 27       	eor	r25, r24
    2d50:	98 2f       	mov	r25, r24
    2d52:	8c 81       	ldd	r24, Y+4	; 0x04
    2d54:	81 70       	andi	r24, 0x01	; 1
    2d56:	89 2b       	or	r24, r25
    2d58:	88 87       	std	Y+8, r24	; 0x08
    2d5a:	88 85       	ldd	r24, Y+8	; 0x08
    2d5c:	88 2f       	mov	r24, r24
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	88 0f       	add	r24, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	98 2f       	mov	r25, r24
    2d66:	88 85       	ldd	r24, Y+8	; 0x08
    2d68:	29 2f       	mov	r18, r25
    2d6a:	28 2b       	or	r18, r24
    2d6c:	88 85       	ldd	r24, Y+8	; 0x08
    2d6e:	88 2f       	mov	r24, r24
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	88 0f       	add	r24, r24
    2d74:	99 1f       	adc	r25, r25
    2d76:	88 0f       	add	r24, r24
    2d78:	99 1f       	adc	r25, r25
    2d7a:	28 2b       	or	r18, r24
    2d7c:	88 85       	ldd	r24, Y+8	; 0x08
    2d7e:	88 2f       	mov	r24, r24
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	88 0f       	add	r24, r24
    2d84:	99 1f       	adc	r25, r25
    2d86:	88 0f       	add	r24, r24
    2d88:	99 1f       	adc	r25, r25
    2d8a:	88 0f       	add	r24, r24
    2d8c:	99 1f       	adc	r25, r25
    2d8e:	82 2b       	or	r24, r18
    2d90:	88 87       	std	Y+8, r24	; 0x08
    2d92:	88 85       	ldd	r24, Y+8	; 0x08
    2d94:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2d98:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9a:	88 2f       	mov	r24, r24
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	81 70       	andi	r24, 0x01	; 1
    2da0:	99 27       	eor	r25, r25
    2da2:	82 95       	swap	r24
    2da4:	92 95       	swap	r25
    2da6:	90 7f       	andi	r25, 0xF0	; 240
    2da8:	98 27       	eor	r25, r24
    2daa:	80 7f       	andi	r24, 0xF0	; 240
    2dac:	98 27       	eor	r25, r24
    2dae:	98 2f       	mov	r25, r24
    2db0:	8e 81       	ldd	r24, Y+6	; 0x06
    2db2:	81 70       	andi	r24, 0x01	; 1
    2db4:	89 2b       	or	r24, r25
    2db6:	88 87       	std	Y+8, r24	; 0x08
    2db8:	88 85       	ldd	r24, Y+8	; 0x08
    2dba:	88 2f       	mov	r24, r24
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	88 0f       	add	r24, r24
    2dc0:	99 1f       	adc	r25, r25
    2dc2:	98 2f       	mov	r25, r24
    2dc4:	88 85       	ldd	r24, Y+8	; 0x08
    2dc6:	29 2f       	mov	r18, r25
    2dc8:	28 2b       	or	r18, r24
    2dca:	88 85       	ldd	r24, Y+8	; 0x08
    2dcc:	88 2f       	mov	r24, r24
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	88 0f       	add	r24, r24
    2dd2:	99 1f       	adc	r25, r25
    2dd4:	88 0f       	add	r24, r24
    2dd6:	99 1f       	adc	r25, r25
    2dd8:	28 2b       	or	r18, r24
    2dda:	88 85       	ldd	r24, Y+8	; 0x08
    2ddc:	88 2f       	mov	r24, r24
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	88 0f       	add	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	88 0f       	add	r24, r24
    2de6:	99 1f       	adc	r25, r25
    2de8:	88 0f       	add	r24, r24
    2dea:	99 1f       	adc	r25, r25
    2dec:	82 2b       	or	r24, r18
    2dee:	88 87       	std	Y+8, r24	; 0x08
    2df0:	88 85       	ldd	r24, Y+8	; 0x08
    2df2:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2df6:	8f 81       	ldd	r24, Y+7	; 0x07
    2df8:	88 2f       	mov	r24, r24
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	82 70       	andi	r24, 0x02	; 2
    2dfe:	99 27       	eor	r25, r25
    2e00:	88 0f       	add	r24, r24
    2e02:	99 1f       	adc	r25, r25
    2e04:	88 0f       	add	r24, r24
    2e06:	99 1f       	adc	r25, r25
    2e08:	88 0f       	add	r24, r24
    2e0a:	99 1f       	adc	r25, r25
    2e0c:	28 2f       	mov	r18, r24
    2e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e10:	88 2f       	mov	r24, r24
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	82 70       	andi	r24, 0x02	; 2
    2e16:	99 27       	eor	r25, r25
    2e18:	95 95       	asr	r25
    2e1a:	87 95       	ror	r24
    2e1c:	82 2b       	or	r24, r18
    2e1e:	88 87       	std	Y+8, r24	; 0x08
    2e20:	88 85       	ldd	r24, Y+8	; 0x08
    2e22:	88 2f       	mov	r24, r24
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	88 0f       	add	r24, r24
    2e28:	99 1f       	adc	r25, r25
    2e2a:	98 2f       	mov	r25, r24
    2e2c:	88 85       	ldd	r24, Y+8	; 0x08
    2e2e:	29 2f       	mov	r18, r25
    2e30:	28 2b       	or	r18, r24
    2e32:	88 85       	ldd	r24, Y+8	; 0x08
    2e34:	88 2f       	mov	r24, r24
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	88 0f       	add	r24, r24
    2e3a:	99 1f       	adc	r25, r25
    2e3c:	88 0f       	add	r24, r24
    2e3e:	99 1f       	adc	r25, r25
    2e40:	28 2b       	or	r18, r24
    2e42:	88 85       	ldd	r24, Y+8	; 0x08
    2e44:	88 2f       	mov	r24, r24
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	88 0f       	add	r24, r24
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	88 0f       	add	r24, r24
    2e4e:	99 1f       	adc	r25, r25
    2e50:	88 0f       	add	r24, r24
    2e52:	99 1f       	adc	r25, r25
    2e54:	82 2b       	or	r24, r18
    2e56:	88 87       	std	Y+8, r24	; 0x08
    2e58:	88 85       	ldd	r24, Y+8	; 0x08
    2e5a:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e60:	88 2f       	mov	r24, r24
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	82 70       	andi	r24, 0x02	; 2
    2e66:	99 27       	eor	r25, r25
    2e68:	88 0f       	add	r24, r24
    2e6a:	99 1f       	adc	r25, r25
    2e6c:	88 0f       	add	r24, r24
    2e6e:	99 1f       	adc	r25, r25
    2e70:	88 0f       	add	r24, r24
    2e72:	99 1f       	adc	r25, r25
    2e74:	28 2f       	mov	r18, r24
    2e76:	8e 81       	ldd	r24, Y+6	; 0x06
    2e78:	88 2f       	mov	r24, r24
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	82 70       	andi	r24, 0x02	; 2
    2e7e:	99 27       	eor	r25, r25
    2e80:	95 95       	asr	r25
    2e82:	87 95       	ror	r24
    2e84:	82 2b       	or	r24, r18
    2e86:	88 87       	std	Y+8, r24	; 0x08
    2e88:	88 85       	ldd	r24, Y+8	; 0x08
    2e8a:	88 2f       	mov	r24, r24
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	88 0f       	add	r24, r24
    2e90:	99 1f       	adc	r25, r25
    2e92:	98 2f       	mov	r25, r24
    2e94:	88 85       	ldd	r24, Y+8	; 0x08
    2e96:	29 2f       	mov	r18, r25
    2e98:	28 2b       	or	r18, r24
    2e9a:	88 85       	ldd	r24, Y+8	; 0x08
    2e9c:	88 2f       	mov	r24, r24
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	88 0f       	add	r24, r24
    2ea2:	99 1f       	adc	r25, r25
    2ea4:	88 0f       	add	r24, r24
    2ea6:	99 1f       	adc	r25, r25
    2ea8:	28 2b       	or	r18, r24
    2eaa:	88 85       	ldd	r24, Y+8	; 0x08
    2eac:	88 2f       	mov	r24, r24
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	88 0f       	add	r24, r24
    2eb2:	99 1f       	adc	r25, r25
    2eb4:	88 0f       	add	r24, r24
    2eb6:	99 1f       	adc	r25, r25
    2eb8:	88 0f       	add	r24, r24
    2eba:	99 1f       	adc	r25, r25
    2ebc:	82 2b       	or	r24, r18
    2ebe:	88 87       	std	Y+8, r24	; 0x08
    2ec0:	88 85       	ldd	r24, Y+8	; 0x08
    2ec2:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2ec6:	8f 81       	ldd	r24, Y+7	; 0x07
    2ec8:	88 2f       	mov	r24, r24
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	84 70       	andi	r24, 0x04	; 4
    2ece:	99 27       	eor	r25, r25
    2ed0:	88 0f       	add	r24, r24
    2ed2:	99 1f       	adc	r25, r25
    2ed4:	88 0f       	add	r24, r24
    2ed6:	99 1f       	adc	r25, r25
    2ed8:	28 2f       	mov	r18, r24
    2eda:	8c 81       	ldd	r24, Y+4	; 0x04
    2edc:	88 2f       	mov	r24, r24
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	84 70       	andi	r24, 0x04	; 4
    2ee2:	99 27       	eor	r25, r25
    2ee4:	95 95       	asr	r25
    2ee6:	87 95       	ror	r24
    2ee8:	95 95       	asr	r25
    2eea:	87 95       	ror	r24
    2eec:	82 2b       	or	r24, r18
    2eee:	88 87       	std	Y+8, r24	; 0x08
    2ef0:	88 85       	ldd	r24, Y+8	; 0x08
    2ef2:	88 2f       	mov	r24, r24
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	88 0f       	add	r24, r24
    2ef8:	99 1f       	adc	r25, r25
    2efa:	98 2f       	mov	r25, r24
    2efc:	88 85       	ldd	r24, Y+8	; 0x08
    2efe:	29 2f       	mov	r18, r25
    2f00:	28 2b       	or	r18, r24
    2f02:	88 85       	ldd	r24, Y+8	; 0x08
    2f04:	88 2f       	mov	r24, r24
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	88 0f       	add	r24, r24
    2f0a:	99 1f       	adc	r25, r25
    2f0c:	88 0f       	add	r24, r24
    2f0e:	99 1f       	adc	r25, r25
    2f10:	28 2b       	or	r18, r24
    2f12:	88 85       	ldd	r24, Y+8	; 0x08
    2f14:	88 2f       	mov	r24, r24
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	88 0f       	add	r24, r24
    2f1a:	99 1f       	adc	r25, r25
    2f1c:	88 0f       	add	r24, r24
    2f1e:	99 1f       	adc	r25, r25
    2f20:	88 0f       	add	r24, r24
    2f22:	99 1f       	adc	r25, r25
    2f24:	82 2b       	or	r24, r18
    2f26:	88 87       	std	Y+8, r24	; 0x08
    2f28:	88 85       	ldd	r24, Y+8	; 0x08
    2f2a:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f30:	88 2f       	mov	r24, r24
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	84 70       	andi	r24, 0x04	; 4
    2f36:	99 27       	eor	r25, r25
    2f38:	88 0f       	add	r24, r24
    2f3a:	99 1f       	adc	r25, r25
    2f3c:	88 0f       	add	r24, r24
    2f3e:	99 1f       	adc	r25, r25
    2f40:	28 2f       	mov	r18, r24
    2f42:	8e 81       	ldd	r24, Y+6	; 0x06
    2f44:	88 2f       	mov	r24, r24
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	84 70       	andi	r24, 0x04	; 4
    2f4a:	99 27       	eor	r25, r25
    2f4c:	95 95       	asr	r25
    2f4e:	87 95       	ror	r24
    2f50:	95 95       	asr	r25
    2f52:	87 95       	ror	r24
    2f54:	82 2b       	or	r24, r18
    2f56:	88 87       	std	Y+8, r24	; 0x08
    2f58:	88 85       	ldd	r24, Y+8	; 0x08
    2f5a:	88 2f       	mov	r24, r24
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	88 0f       	add	r24, r24
    2f60:	99 1f       	adc	r25, r25
    2f62:	98 2f       	mov	r25, r24
    2f64:	88 85       	ldd	r24, Y+8	; 0x08
    2f66:	29 2f       	mov	r18, r25
    2f68:	28 2b       	or	r18, r24
    2f6a:	88 85       	ldd	r24, Y+8	; 0x08
    2f6c:	88 2f       	mov	r24, r24
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	88 0f       	add	r24, r24
    2f72:	99 1f       	adc	r25, r25
    2f74:	88 0f       	add	r24, r24
    2f76:	99 1f       	adc	r25, r25
    2f78:	28 2b       	or	r18, r24
    2f7a:	88 85       	ldd	r24, Y+8	; 0x08
    2f7c:	88 2f       	mov	r24, r24
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	88 0f       	add	r24, r24
    2f82:	99 1f       	adc	r25, r25
    2f84:	88 0f       	add	r24, r24
    2f86:	99 1f       	adc	r25, r25
    2f88:	88 0f       	add	r24, r24
    2f8a:	99 1f       	adc	r25, r25
    2f8c:	82 2b       	or	r24, r18
    2f8e:	88 87       	std	Y+8, r24	; 0x08
    2f90:	88 85       	ldd	r24, Y+8	; 0x08
    2f92:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2f96:	8f 81       	ldd	r24, Y+7	; 0x07
    2f98:	88 2f       	mov	r24, r24
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	88 70       	andi	r24, 0x08	; 8
    2f9e:	99 27       	eor	r25, r25
    2fa0:	88 0f       	add	r24, r24
    2fa2:	99 1f       	adc	r25, r25
    2fa4:	28 2f       	mov	r18, r24
    2fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa8:	88 2f       	mov	r24, r24
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	88 70       	andi	r24, 0x08	; 8
    2fae:	99 27       	eor	r25, r25
    2fb0:	95 95       	asr	r25
    2fb2:	87 95       	ror	r24
    2fb4:	95 95       	asr	r25
    2fb6:	87 95       	ror	r24
    2fb8:	95 95       	asr	r25
    2fba:	87 95       	ror	r24
    2fbc:	82 2b       	or	r24, r18
    2fbe:	88 87       	std	Y+8, r24	; 0x08
    2fc0:	88 85       	ldd	r24, Y+8	; 0x08
    2fc2:	88 2f       	mov	r24, r24
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	88 0f       	add	r24, r24
    2fc8:	99 1f       	adc	r25, r25
    2fca:	98 2f       	mov	r25, r24
    2fcc:	88 85       	ldd	r24, Y+8	; 0x08
    2fce:	29 2f       	mov	r18, r25
    2fd0:	28 2b       	or	r18, r24
    2fd2:	88 85       	ldd	r24, Y+8	; 0x08
    2fd4:	88 2f       	mov	r24, r24
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	88 0f       	add	r24, r24
    2fda:	99 1f       	adc	r25, r25
    2fdc:	88 0f       	add	r24, r24
    2fde:	99 1f       	adc	r25, r25
    2fe0:	28 2b       	or	r18, r24
    2fe2:	88 85       	ldd	r24, Y+8	; 0x08
    2fe4:	88 2f       	mov	r24, r24
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	88 0f       	add	r24, r24
    2fea:	99 1f       	adc	r25, r25
    2fec:	88 0f       	add	r24, r24
    2fee:	99 1f       	adc	r25, r25
    2ff0:	88 0f       	add	r24, r24
    2ff2:	99 1f       	adc	r25, r25
    2ff4:	82 2b       	or	r24, r18
    2ff6:	88 87       	std	Y+8, r24	; 0x08
    2ff8:	88 85       	ldd	r24, Y+8	; 0x08
    2ffa:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    2ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    3000:	88 2f       	mov	r24, r24
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	88 70       	andi	r24, 0x08	; 8
    3006:	99 27       	eor	r25, r25
    3008:	88 0f       	add	r24, r24
    300a:	99 1f       	adc	r25, r25
    300c:	28 2f       	mov	r18, r24
    300e:	8e 81       	ldd	r24, Y+6	; 0x06
    3010:	88 2f       	mov	r24, r24
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	88 70       	andi	r24, 0x08	; 8
    3016:	99 27       	eor	r25, r25
    3018:	95 95       	asr	r25
    301a:	87 95       	ror	r24
    301c:	95 95       	asr	r25
    301e:	87 95       	ror	r24
    3020:	95 95       	asr	r25
    3022:	87 95       	ror	r24
    3024:	82 2b       	or	r24, r18
    3026:	88 87       	std	Y+8, r24	; 0x08
    3028:	88 85       	ldd	r24, Y+8	; 0x08
    302a:	88 2f       	mov	r24, r24
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	88 0f       	add	r24, r24
    3030:	99 1f       	adc	r25, r25
    3032:	98 2f       	mov	r25, r24
    3034:	88 85       	ldd	r24, Y+8	; 0x08
    3036:	29 2f       	mov	r18, r25
    3038:	28 2b       	or	r18, r24
    303a:	88 85       	ldd	r24, Y+8	; 0x08
    303c:	88 2f       	mov	r24, r24
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	88 0f       	add	r24, r24
    3042:	99 1f       	adc	r25, r25
    3044:	88 0f       	add	r24, r24
    3046:	99 1f       	adc	r25, r25
    3048:	28 2b       	or	r18, r24
    304a:	88 85       	ldd	r24, Y+8	; 0x08
    304c:	88 2f       	mov	r24, r24
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	88 0f       	add	r24, r24
    3052:	99 1f       	adc	r25, r25
    3054:	88 0f       	add	r24, r24
    3056:	99 1f       	adc	r25, r25
    3058:	88 0f       	add	r24, r24
    305a:	99 1f       	adc	r25, r25
    305c:	82 2b       	or	r24, r18
    305e:	88 87       	std	Y+8, r24	; 0x08
    3060:	88 85       	ldd	r24, Y+8	; 0x08
    3062:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    3066:	8f 81       	ldd	r24, Y+7	; 0x07
    3068:	88 2f       	mov	r24, r24
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	80 71       	andi	r24, 0x10	; 16
    306e:	99 27       	eor	r25, r25
    3070:	88 0f       	add	r24, r24
    3072:	99 1f       	adc	r25, r25
    3074:	88 0f       	add	r24, r24
    3076:	99 1f       	adc	r25, r25
    3078:	88 0f       	add	r24, r24
    307a:	99 1f       	adc	r25, r25
    307c:	28 2f       	mov	r18, r24
    307e:	8c 81       	ldd	r24, Y+4	; 0x04
    3080:	88 2f       	mov	r24, r24
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	80 71       	andi	r24, 0x10	; 16
    3086:	99 27       	eor	r25, r25
    3088:	95 95       	asr	r25
    308a:	87 95       	ror	r24
    308c:	82 2b       	or	r24, r18
    308e:	88 87       	std	Y+8, r24	; 0x08
    3090:	88 85       	ldd	r24, Y+8	; 0x08
    3092:	98 2f       	mov	r25, r24
    3094:	96 95       	lsr	r25
    3096:	88 85       	ldd	r24, Y+8	; 0x08
    3098:	98 2b       	or	r25, r24
    309a:	88 85       	ldd	r24, Y+8	; 0x08
    309c:	86 95       	lsr	r24
    309e:	86 95       	lsr	r24
    30a0:	98 2b       	or	r25, r24
    30a2:	88 85       	ldd	r24, Y+8	; 0x08
    30a4:	86 95       	lsr	r24
    30a6:	86 95       	lsr	r24
    30a8:	86 95       	lsr	r24
    30aa:	89 2b       	or	r24, r25
    30ac:	88 87       	std	Y+8, r24	; 0x08
    30ae:	88 85       	ldd	r24, Y+8	; 0x08
    30b0:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    30b4:	8d 81       	ldd	r24, Y+5	; 0x05
    30b6:	88 2f       	mov	r24, r24
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	80 71       	andi	r24, 0x10	; 16
    30bc:	99 27       	eor	r25, r25
    30be:	88 0f       	add	r24, r24
    30c0:	99 1f       	adc	r25, r25
    30c2:	88 0f       	add	r24, r24
    30c4:	99 1f       	adc	r25, r25
    30c6:	88 0f       	add	r24, r24
    30c8:	99 1f       	adc	r25, r25
    30ca:	28 2f       	mov	r18, r24
    30cc:	8e 81       	ldd	r24, Y+6	; 0x06
    30ce:	88 2f       	mov	r24, r24
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	80 71       	andi	r24, 0x10	; 16
    30d4:	99 27       	eor	r25, r25
    30d6:	95 95       	asr	r25
    30d8:	87 95       	ror	r24
    30da:	82 2b       	or	r24, r18
    30dc:	88 87       	std	Y+8, r24	; 0x08
    30de:	88 85       	ldd	r24, Y+8	; 0x08
    30e0:	98 2f       	mov	r25, r24
    30e2:	96 95       	lsr	r25
    30e4:	88 85       	ldd	r24, Y+8	; 0x08
    30e6:	98 2b       	or	r25, r24
    30e8:	88 85       	ldd	r24, Y+8	; 0x08
    30ea:	86 95       	lsr	r24
    30ec:	86 95       	lsr	r24
    30ee:	98 2b       	or	r25, r24
    30f0:	88 85       	ldd	r24, Y+8	; 0x08
    30f2:	86 95       	lsr	r24
    30f4:	86 95       	lsr	r24
    30f6:	86 95       	lsr	r24
    30f8:	89 2b       	or	r24, r25
    30fa:	88 87       	std	Y+8, r24	; 0x08
    30fc:	88 85       	ldd	r24, Y+8	; 0x08
    30fe:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    3102:	8f 81       	ldd	r24, Y+7	; 0x07
    3104:	88 2f       	mov	r24, r24
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	80 72       	andi	r24, 0x20	; 32
    310a:	99 27       	eor	r25, r25
    310c:	88 0f       	add	r24, r24
    310e:	99 1f       	adc	r25, r25
    3110:	88 0f       	add	r24, r24
    3112:	99 1f       	adc	r25, r25
    3114:	28 2f       	mov	r18, r24
    3116:	8c 81       	ldd	r24, Y+4	; 0x04
    3118:	88 2f       	mov	r24, r24
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	80 72       	andi	r24, 0x20	; 32
    311e:	99 27       	eor	r25, r25
    3120:	95 95       	asr	r25
    3122:	87 95       	ror	r24
    3124:	95 95       	asr	r25
    3126:	87 95       	ror	r24
    3128:	82 2b       	or	r24, r18
    312a:	88 87       	std	Y+8, r24	; 0x08
    312c:	88 85       	ldd	r24, Y+8	; 0x08
    312e:	98 2f       	mov	r25, r24
    3130:	96 95       	lsr	r25
    3132:	88 85       	ldd	r24, Y+8	; 0x08
    3134:	98 2b       	or	r25, r24
    3136:	88 85       	ldd	r24, Y+8	; 0x08
    3138:	86 95       	lsr	r24
    313a:	86 95       	lsr	r24
    313c:	98 2b       	or	r25, r24
    313e:	88 85       	ldd	r24, Y+8	; 0x08
    3140:	86 95       	lsr	r24
    3142:	86 95       	lsr	r24
    3144:	86 95       	lsr	r24
    3146:	89 2b       	or	r24, r25
    3148:	88 87       	std	Y+8, r24	; 0x08
    314a:	88 85       	ldd	r24, Y+8	; 0x08
    314c:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    3150:	8d 81       	ldd	r24, Y+5	; 0x05
    3152:	88 2f       	mov	r24, r24
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	80 72       	andi	r24, 0x20	; 32
    3158:	99 27       	eor	r25, r25
    315a:	88 0f       	add	r24, r24
    315c:	99 1f       	adc	r25, r25
    315e:	88 0f       	add	r24, r24
    3160:	99 1f       	adc	r25, r25
    3162:	28 2f       	mov	r18, r24
    3164:	8e 81       	ldd	r24, Y+6	; 0x06
    3166:	88 2f       	mov	r24, r24
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	80 72       	andi	r24, 0x20	; 32
    316c:	99 27       	eor	r25, r25
    316e:	95 95       	asr	r25
    3170:	87 95       	ror	r24
    3172:	95 95       	asr	r25
    3174:	87 95       	ror	r24
    3176:	82 2b       	or	r24, r18
    3178:	88 87       	std	Y+8, r24	; 0x08
    317a:	88 85       	ldd	r24, Y+8	; 0x08
    317c:	98 2f       	mov	r25, r24
    317e:	96 95       	lsr	r25
    3180:	88 85       	ldd	r24, Y+8	; 0x08
    3182:	98 2b       	or	r25, r24
    3184:	88 85       	ldd	r24, Y+8	; 0x08
    3186:	86 95       	lsr	r24
    3188:	86 95       	lsr	r24
    318a:	98 2b       	or	r25, r24
    318c:	88 85       	ldd	r24, Y+8	; 0x08
    318e:	86 95       	lsr	r24
    3190:	86 95       	lsr	r24
    3192:	86 95       	lsr	r24
    3194:	89 2b       	or	r24, r25
    3196:	88 87       	std	Y+8, r24	; 0x08
    3198:	88 85       	ldd	r24, Y+8	; 0x08
    319a:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    319e:	8f 81       	ldd	r24, Y+7	; 0x07
    31a0:	88 2f       	mov	r24, r24
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	80 74       	andi	r24, 0x40	; 64
    31a6:	99 27       	eor	r25, r25
    31a8:	88 0f       	add	r24, r24
    31aa:	99 1f       	adc	r25, r25
    31ac:	28 2f       	mov	r18, r24
    31ae:	8c 81       	ldd	r24, Y+4	; 0x04
    31b0:	88 2f       	mov	r24, r24
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	80 74       	andi	r24, 0x40	; 64
    31b6:	99 27       	eor	r25, r25
    31b8:	95 95       	asr	r25
    31ba:	87 95       	ror	r24
    31bc:	95 95       	asr	r25
    31be:	87 95       	ror	r24
    31c0:	95 95       	asr	r25
    31c2:	87 95       	ror	r24
    31c4:	82 2b       	or	r24, r18
    31c6:	88 87       	std	Y+8, r24	; 0x08
    31c8:	88 85       	ldd	r24, Y+8	; 0x08
    31ca:	98 2f       	mov	r25, r24
    31cc:	96 95       	lsr	r25
    31ce:	88 85       	ldd	r24, Y+8	; 0x08
    31d0:	98 2b       	or	r25, r24
    31d2:	88 85       	ldd	r24, Y+8	; 0x08
    31d4:	86 95       	lsr	r24
    31d6:	86 95       	lsr	r24
    31d8:	98 2b       	or	r25, r24
    31da:	88 85       	ldd	r24, Y+8	; 0x08
    31dc:	86 95       	lsr	r24
    31de:	86 95       	lsr	r24
    31e0:	86 95       	lsr	r24
    31e2:	89 2b       	or	r24, r25
    31e4:	88 87       	std	Y+8, r24	; 0x08
    31e6:	88 85       	ldd	r24, Y+8	; 0x08
    31e8:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    31ec:	8d 81       	ldd	r24, Y+5	; 0x05
    31ee:	88 2f       	mov	r24, r24
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	80 74       	andi	r24, 0x40	; 64
    31f4:	99 27       	eor	r25, r25
    31f6:	88 0f       	add	r24, r24
    31f8:	99 1f       	adc	r25, r25
    31fa:	28 2f       	mov	r18, r24
    31fc:	8e 81       	ldd	r24, Y+6	; 0x06
    31fe:	88 2f       	mov	r24, r24
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	80 74       	andi	r24, 0x40	; 64
    3204:	99 27       	eor	r25, r25
    3206:	95 95       	asr	r25
    3208:	87 95       	ror	r24
    320a:	95 95       	asr	r25
    320c:	87 95       	ror	r24
    320e:	95 95       	asr	r25
    3210:	87 95       	ror	r24
    3212:	82 2b       	or	r24, r18
    3214:	88 87       	std	Y+8, r24	; 0x08
    3216:	88 85       	ldd	r24, Y+8	; 0x08
    3218:	98 2f       	mov	r25, r24
    321a:	96 95       	lsr	r25
    321c:	88 85       	ldd	r24, Y+8	; 0x08
    321e:	98 2b       	or	r25, r24
    3220:	88 85       	ldd	r24, Y+8	; 0x08
    3222:	86 95       	lsr	r24
    3224:	86 95       	lsr	r24
    3226:	98 2b       	or	r25, r24
    3228:	88 85       	ldd	r24, Y+8	; 0x08
    322a:	86 95       	lsr	r24
    322c:	86 95       	lsr	r24
    322e:	86 95       	lsr	r24
    3230:	89 2b       	or	r24, r25
    3232:	88 87       	std	Y+8, r24	; 0x08
    3234:	88 85       	ldd	r24, Y+8	; 0x08
    3236:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    323a:	8f 81       	ldd	r24, Y+7	; 0x07
    323c:	28 2f       	mov	r18, r24
    323e:	20 78       	andi	r18, 0x80	; 128
    3240:	8c 81       	ldd	r24, Y+4	; 0x04
    3242:	88 2f       	mov	r24, r24
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	80 78       	andi	r24, 0x80	; 128
    3248:	99 27       	eor	r25, r25
    324a:	95 95       	asr	r25
    324c:	87 95       	ror	r24
    324e:	95 95       	asr	r25
    3250:	87 95       	ror	r24
    3252:	95 95       	asr	r25
    3254:	87 95       	ror	r24
    3256:	95 95       	asr	r25
    3258:	87 95       	ror	r24
    325a:	82 2b       	or	r24, r18
    325c:	88 87       	std	Y+8, r24	; 0x08
    325e:	88 85       	ldd	r24, Y+8	; 0x08
    3260:	98 2f       	mov	r25, r24
    3262:	96 95       	lsr	r25
    3264:	88 85       	ldd	r24, Y+8	; 0x08
    3266:	98 2b       	or	r25, r24
    3268:	88 85       	ldd	r24, Y+8	; 0x08
    326a:	86 95       	lsr	r24
    326c:	86 95       	lsr	r24
    326e:	98 2b       	or	r25, r24
    3270:	88 85       	ldd	r24, Y+8	; 0x08
    3272:	86 95       	lsr	r24
    3274:	86 95       	lsr	r24
    3276:	86 95       	lsr	r24
    3278:	89 2b       	or	r24, r25
    327a:	88 87       	std	Y+8, r24	; 0x08
    327c:	88 85       	ldd	r24, Y+8	; 0x08
    327e:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    3282:	8d 81       	ldd	r24, Y+5	; 0x05
    3284:	28 2f       	mov	r18, r24
    3286:	20 78       	andi	r18, 0x80	; 128
    3288:	8e 81       	ldd	r24, Y+6	; 0x06
    328a:	88 2f       	mov	r24, r24
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	80 78       	andi	r24, 0x80	; 128
    3290:	99 27       	eor	r25, r25
    3292:	95 95       	asr	r25
    3294:	87 95       	ror	r24
    3296:	95 95       	asr	r25
    3298:	87 95       	ror	r24
    329a:	95 95       	asr	r25
    329c:	87 95       	ror	r24
    329e:	95 95       	asr	r25
    32a0:	87 95       	ror	r24
    32a2:	82 2b       	or	r24, r18
    32a4:	88 87       	std	Y+8, r24	; 0x08
    32a6:	88 85       	ldd	r24, Y+8	; 0x08
    32a8:	98 2f       	mov	r25, r24
    32aa:	96 95       	lsr	r25
    32ac:	88 85       	ldd	r24, Y+8	; 0x08
    32ae:	98 2b       	or	r25, r24
    32b0:	88 85       	ldd	r24, Y+8	; 0x08
    32b2:	86 95       	lsr	r24
    32b4:	86 95       	lsr	r24
    32b6:	98 2b       	or	r25, r24
    32b8:	88 85       	ldd	r24, Y+8	; 0x08
    32ba:	86 95       	lsr	r24
    32bc:	86 95       	lsr	r24
    32be:	86 95       	lsr	r24
    32c0:	89 2b       	or	r24, r25
    32c2:	88 87       	std	Y+8, r24	; 0x08
    32c4:	88 85       	ldd	r24, Y+8	; 0x08
    32c6:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    32ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    32cc:	8f 5f       	subi	r24, 0xFF	; 255
    32ce:	8b 87       	std	Y+11, r24	; 0x0b
    32d0:	8b 81       	ldd	r24, Y+3	; 0x03
    32d2:	8f 5f       	subi	r24, 0xFF	; 255
    32d4:	8b 83       	std	Y+3, r24	; 0x03
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	82 30       	cpi	r24, 0x02	; 2
    32da:	08 f4       	brcc	.+2      	; 0x32de <Show_Font57+0x6a2>
    32dc:	ef cc       	rjmp	.-1570   	; 0x2cbc <Show_Font57+0x80>
    32de:	84 e1       	ldi	r24, 0x14	; 20
    32e0:	0e 94 99 14 	call	0x2932	; 0x2932 <Set_Remap_Format>
    32e4:	00 00       	nop
    32e6:	2c 96       	adiw	r28, 0x0c	; 12
    32e8:	0f b6       	in	r0, 0x3f	; 63
    32ea:	f8 94       	cli
    32ec:	de bf       	out	0x3e, r29	; 62
    32ee:	0f be       	out	0x3f, r0	; 63
    32f0:	cd bf       	out	0x3d, r28	; 61
    32f2:	df 91       	pop	r29
    32f4:	cf 91       	pop	r28
    32f6:	08 95       	ret

000032f8 <Show_String>:
    32f8:	cf 93       	push	r28
    32fa:	df 93       	push	r29
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
    3300:	27 97       	sbiw	r28, 0x07	; 7
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	f8 94       	cli
    3306:	de bf       	out	0x3e, r29	; 62
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	cd bf       	out	0x3d, r28	; 61
    330c:	8b 83       	std	Y+3, r24	; 0x03
    330e:	7d 83       	std	Y+5, r23	; 0x05
    3310:	6c 83       	std	Y+4, r22	; 0x04
    3312:	4e 83       	std	Y+6, r20	; 0x06
    3314:	2f 83       	std	Y+7, r18	; 0x07
    3316:	8c 81       	ldd	r24, Y+4	; 0x04
    3318:	9d 81       	ldd	r25, Y+5	; 0x05
    331a:	9a 83       	std	Y+2, r25	; 0x02
    331c:	89 83       	std	Y+1, r24	; 0x01
    331e:	2f 81       	ldd	r18, Y+7	; 0x07
    3320:	4e 81       	ldd	r20, Y+6	; 0x06
    3322:	60 e6       	ldi	r22, 0x60	; 96
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <Show_Font57>
    332a:	89 81       	ldd	r24, Y+1	; 0x01
    332c:	9a 81       	ldd	r25, Y+2	; 0x02
    332e:	fc 01       	movw	r30, r24
    3330:	80 81       	ld	r24, Z
    3332:	2f 81       	ldd	r18, Y+7	; 0x07
    3334:	4e 81       	ldd	r20, Y+6	; 0x06
    3336:	68 2f       	mov	r22, r24
    3338:	8b 81       	ldd	r24, Y+3	; 0x03
    333a:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <Show_Font57>
    333e:	89 81       	ldd	r24, Y+1	; 0x01
    3340:	9a 81       	ldd	r25, Y+2	; 0x02
    3342:	01 96       	adiw	r24, 0x01	; 1
    3344:	9a 83       	std	Y+2, r25	; 0x02
    3346:	89 83       	std	Y+1, r24	; 0x01
    3348:	8e 81       	ldd	r24, Y+6	; 0x06
    334a:	8e 5f       	subi	r24, 0xFE	; 254
    334c:	8e 83       	std	Y+6, r24	; 0x06
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	9a 81       	ldd	r25, Y+2	; 0x02
    3352:	fc 01       	movw	r30, r24
    3354:	80 81       	ld	r24, Z
    3356:	88 23       	and	r24, r24
    3358:	09 f0       	breq	.+2      	; 0x335c <Show_String+0x64>
    335a:	e7 cf       	rjmp	.-50     	; 0x332a <Show_String+0x32>
    335c:	00 00       	nop
    335e:	00 00       	nop
    3360:	27 96       	adiw	r28, 0x07	; 7
    3362:	0f b6       	in	r0, 0x3f	; 63
    3364:	f8 94       	cli
    3366:	de bf       	out	0x3e, r29	; 62
    3368:	0f be       	out	0x3f, r0	; 63
    336a:	cd bf       	out	0x3d, r28	; 61
    336c:	df 91       	pop	r29
    336e:	cf 91       	pop	r28
    3370:	08 95       	ret

00003372 <Data_processing>:
    3372:	cf 93       	push	r28
    3374:	df 93       	push	r29
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62
    337a:	65 97       	sbiw	r28, 0x15	; 21
    337c:	0f b6       	in	r0, 0x3f	; 63
    337e:	f8 94       	cli
    3380:	de bf       	out	0x3e, r29	; 62
    3382:	0f be       	out	0x3f, r0	; 63
    3384:	cd bf       	out	0x3d, r28	; 61
    3386:	8d 8b       	std	Y+21, r24	; 0x15
    3388:	8d 89       	ldd	r24, Y+21	; 0x15
    338a:	80 78       	andi	r24, 0x80	; 128
    338c:	89 83       	std	Y+1, r24	; 0x01
    338e:	8d 89       	ldd	r24, Y+21	; 0x15
    3390:	88 2f       	mov	r24, r24
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	80 74       	andi	r24, 0x40	; 64
    3396:	99 27       	eor	r25, r25
    3398:	95 95       	asr	r25
    339a:	87 95       	ror	r24
    339c:	95 95       	asr	r25
    339e:	87 95       	ror	r24
    33a0:	95 95       	asr	r25
    33a2:	87 95       	ror	r24
    33a4:	8a 83       	std	Y+2, r24	; 0x02
    33a6:	8d 89       	ldd	r24, Y+21	; 0x15
    33a8:	80 72       	andi	r24, 0x20	; 32
    33aa:	88 0f       	add	r24, r24
    33ac:	88 0f       	add	r24, r24
    33ae:	8b 83       	std	Y+3, r24	; 0x03
    33b0:	8d 89       	ldd	r24, Y+21	; 0x15
    33b2:	88 2f       	mov	r24, r24
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	80 71       	andi	r24, 0x10	; 16
    33b8:	99 27       	eor	r25, r25
    33ba:	95 95       	asr	r25
    33bc:	87 95       	ror	r24
    33be:	8c 83       	std	Y+4, r24	; 0x04
    33c0:	8d 89       	ldd	r24, Y+21	; 0x15
    33c2:	88 70       	andi	r24, 0x08	; 8
    33c4:	82 95       	swap	r24
    33c6:	80 7f       	andi	r24, 0xF0	; 240
    33c8:	8d 83       	std	Y+5, r24	; 0x05
    33ca:	8d 89       	ldd	r24, Y+21	; 0x15
    33cc:	84 70       	andi	r24, 0x04	; 4
    33ce:	88 0f       	add	r24, r24
    33d0:	8e 83       	std	Y+6, r24	; 0x06
    33d2:	8d 89       	ldd	r24, Y+21	; 0x15
    33d4:	82 70       	andi	r24, 0x02	; 2
    33d6:	82 95       	swap	r24
    33d8:	88 0f       	add	r24, r24
    33da:	88 0f       	add	r24, r24
    33dc:	80 7c       	andi	r24, 0xC0	; 192
    33de:	8f 83       	std	Y+7, r24	; 0x07
    33e0:	8d 89       	ldd	r24, Y+21	; 0x15
    33e2:	81 70       	andi	r24, 0x01	; 1
    33e4:	88 0f       	add	r24, r24
    33e6:	88 0f       	add	r24, r24
    33e8:	88 0f       	add	r24, r24
    33ea:	88 87       	std	Y+8, r24	; 0x08
    33ec:	89 81       	ldd	r24, Y+1	; 0x01
    33ee:	98 2f       	mov	r25, r24
    33f0:	96 95       	lsr	r25
    33f2:	89 81       	ldd	r24, Y+1	; 0x01
    33f4:	98 2b       	or	r25, r24
    33f6:	89 81       	ldd	r24, Y+1	; 0x01
    33f8:	86 95       	lsr	r24
    33fa:	86 95       	lsr	r24
    33fc:	98 2b       	or	r25, r24
    33fe:	89 81       	ldd	r24, Y+1	; 0x01
    3400:	86 95       	lsr	r24
    3402:	86 95       	lsr	r24
    3404:	86 95       	lsr	r24
    3406:	89 2b       	or	r24, r25
    3408:	89 87       	std	Y+9, r24	; 0x09
    340a:	8a 81       	ldd	r24, Y+2	; 0x02
    340c:	98 2f       	mov	r25, r24
    340e:	96 95       	lsr	r25
    3410:	8a 81       	ldd	r24, Y+2	; 0x02
    3412:	98 2b       	or	r25, r24
    3414:	8a 81       	ldd	r24, Y+2	; 0x02
    3416:	86 95       	lsr	r24
    3418:	86 95       	lsr	r24
    341a:	98 2b       	or	r25, r24
    341c:	8a 81       	ldd	r24, Y+2	; 0x02
    341e:	86 95       	lsr	r24
    3420:	86 95       	lsr	r24
    3422:	86 95       	lsr	r24
    3424:	89 2b       	or	r24, r25
    3426:	8a 87       	std	Y+10, r24	; 0x0a
    3428:	8b 81       	ldd	r24, Y+3	; 0x03
    342a:	98 2f       	mov	r25, r24
    342c:	96 95       	lsr	r25
    342e:	8b 81       	ldd	r24, Y+3	; 0x03
    3430:	98 2b       	or	r25, r24
    3432:	8b 81       	ldd	r24, Y+3	; 0x03
    3434:	86 95       	lsr	r24
    3436:	86 95       	lsr	r24
    3438:	98 2b       	or	r25, r24
    343a:	8b 81       	ldd	r24, Y+3	; 0x03
    343c:	86 95       	lsr	r24
    343e:	86 95       	lsr	r24
    3440:	86 95       	lsr	r24
    3442:	89 2b       	or	r24, r25
    3444:	8b 87       	std	Y+11, r24	; 0x0b
    3446:	8c 81       	ldd	r24, Y+4	; 0x04
    3448:	98 2f       	mov	r25, r24
    344a:	96 95       	lsr	r25
    344c:	8c 81       	ldd	r24, Y+4	; 0x04
    344e:	98 2b       	or	r25, r24
    3450:	8c 81       	ldd	r24, Y+4	; 0x04
    3452:	86 95       	lsr	r24
    3454:	86 95       	lsr	r24
    3456:	98 2b       	or	r25, r24
    3458:	8c 81       	ldd	r24, Y+4	; 0x04
    345a:	86 95       	lsr	r24
    345c:	86 95       	lsr	r24
    345e:	86 95       	lsr	r24
    3460:	89 2b       	or	r24, r25
    3462:	8c 87       	std	Y+12, r24	; 0x0c
    3464:	8d 81       	ldd	r24, Y+5	; 0x05
    3466:	98 2f       	mov	r25, r24
    3468:	96 95       	lsr	r25
    346a:	8d 81       	ldd	r24, Y+5	; 0x05
    346c:	98 2b       	or	r25, r24
    346e:	8d 81       	ldd	r24, Y+5	; 0x05
    3470:	86 95       	lsr	r24
    3472:	86 95       	lsr	r24
    3474:	98 2b       	or	r25, r24
    3476:	8d 81       	ldd	r24, Y+5	; 0x05
    3478:	86 95       	lsr	r24
    347a:	86 95       	lsr	r24
    347c:	86 95       	lsr	r24
    347e:	89 2b       	or	r24, r25
    3480:	8d 87       	std	Y+13, r24	; 0x0d
    3482:	8e 81       	ldd	r24, Y+6	; 0x06
    3484:	98 2f       	mov	r25, r24
    3486:	96 95       	lsr	r25
    3488:	8e 81       	ldd	r24, Y+6	; 0x06
    348a:	98 2b       	or	r25, r24
    348c:	8e 81       	ldd	r24, Y+6	; 0x06
    348e:	86 95       	lsr	r24
    3490:	86 95       	lsr	r24
    3492:	98 2b       	or	r25, r24
    3494:	8e 81       	ldd	r24, Y+6	; 0x06
    3496:	86 95       	lsr	r24
    3498:	86 95       	lsr	r24
    349a:	86 95       	lsr	r24
    349c:	89 2b       	or	r24, r25
    349e:	8e 87       	std	Y+14, r24	; 0x0e
    34a0:	8f 81       	ldd	r24, Y+7	; 0x07
    34a2:	98 2f       	mov	r25, r24
    34a4:	96 95       	lsr	r25
    34a6:	8f 81       	ldd	r24, Y+7	; 0x07
    34a8:	98 2b       	or	r25, r24
    34aa:	8f 81       	ldd	r24, Y+7	; 0x07
    34ac:	86 95       	lsr	r24
    34ae:	86 95       	lsr	r24
    34b0:	98 2b       	or	r25, r24
    34b2:	8f 81       	ldd	r24, Y+7	; 0x07
    34b4:	86 95       	lsr	r24
    34b6:	86 95       	lsr	r24
    34b8:	86 95       	lsr	r24
    34ba:	89 2b       	or	r24, r25
    34bc:	8f 87       	std	Y+15, r24	; 0x0f
    34be:	88 85       	ldd	r24, Y+8	; 0x08
    34c0:	98 2f       	mov	r25, r24
    34c2:	96 95       	lsr	r25
    34c4:	88 85       	ldd	r24, Y+8	; 0x08
    34c6:	98 2b       	or	r25, r24
    34c8:	88 85       	ldd	r24, Y+8	; 0x08
    34ca:	86 95       	lsr	r24
    34cc:	86 95       	lsr	r24
    34ce:	98 2b       	or	r25, r24
    34d0:	88 85       	ldd	r24, Y+8	; 0x08
    34d2:	86 95       	lsr	r24
    34d4:	86 95       	lsr	r24
    34d6:	86 95       	lsr	r24
    34d8:	89 2b       	or	r24, r25
    34da:	88 8b       	std	Y+16, r24	; 0x10
    34dc:	99 85       	ldd	r25, Y+9	; 0x09
    34de:	8a 85       	ldd	r24, Y+10	; 0x0a
    34e0:	89 2b       	or	r24, r25
    34e2:	89 8b       	std	Y+17, r24	; 0x11
    34e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    34e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    34e8:	89 2b       	or	r24, r25
    34ea:	8a 8b       	std	Y+18, r24	; 0x12
    34ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    34ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    34f0:	89 2b       	or	r24, r25
    34f2:	8b 8b       	std	Y+19, r24	; 0x13
    34f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    34f6:	88 89       	ldd	r24, Y+16	; 0x10
    34f8:	89 2b       	or	r24, r25
    34fa:	8c 8b       	std	Y+20, r24	; 0x14
    34fc:	89 89       	ldd	r24, Y+17	; 0x11
    34fe:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    3502:	8a 89       	ldd	r24, Y+18	; 0x12
    3504:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    3508:	8b 89       	ldd	r24, Y+19	; 0x13
    350a:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    350e:	8c 89       	ldd	r24, Y+20	; 0x14
    3510:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    3514:	00 00       	nop
    3516:	65 96       	adiw	r28, 0x15	; 21
    3518:	0f b6       	in	r0, 0x3f	; 63
    351a:	f8 94       	cli
    351c:	de bf       	out	0x3e, r29	; 62
    351e:	0f be       	out	0x3f, r0	; 63
    3520:	cd bf       	out	0x3d, r28	; 61
    3522:	df 91       	pop	r29
    3524:	cf 91       	pop	r28
    3526:	08 95       	ret

00003528 <Display_Picture>:
    3528:	cf 93       	push	r28
    352a:	df 93       	push	r29
    352c:	00 d0       	rcall	.+0      	; 0x352e <Display_Picture+0x6>
    352e:	00 d0       	rcall	.+0      	; 0x3530 <Display_Picture+0x8>
    3530:	cd b7       	in	r28, 0x3d	; 61
    3532:	de b7       	in	r29, 0x3e	; 62
    3534:	9c 83       	std	Y+4, r25	; 0x04
    3536:	8b 83       	std	Y+3, r24	; 0x03
    3538:	63 e9       	ldi	r22, 0x93	; 147
    353a:	8c e1       	ldi	r24, 0x1C	; 28
    353c:	0e 94 62 14 	call	0x28c4	; 0x28c4 <Set_Column_Address>
    3540:	6f e7       	ldi	r22, 0x7F	; 127
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	0e 94 78 14 	call	0x28f0	; 0x28f0 <Set_Row_Address>
    3548:	0e 94 8e 14 	call	0x291c	; 0x291c <Set_Write_RAM>
    354c:	19 82       	std	Y+1, r1	; 0x01
    354e:	25 c0       	rjmp	.+74     	; 0x359a <Display_Picture+0x72>
    3550:	1a 82       	std	Y+2, r1	; 0x02
    3552:	1d c0       	rjmp	.+58     	; 0x358e <Display_Picture+0x66>
    3554:	89 81       	ldd	r24, Y+1	; 0x01
    3556:	88 2f       	mov	r24, r24
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	9c 01       	movw	r18, r24
    355c:	22 0f       	add	r18, r18
    355e:	33 1f       	adc	r19, r19
    3560:	22 95       	swap	r18
    3562:	32 95       	swap	r19
    3564:	30 7f       	andi	r19, 0xF0	; 240
    3566:	32 27       	eor	r19, r18
    3568:	20 7f       	andi	r18, 0xF0	; 240
    356a:	32 27       	eor	r19, r18
    356c:	8a 81       	ldd	r24, Y+2	; 0x02
    356e:	88 2f       	mov	r24, r24
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	82 0f       	add	r24, r18
    3574:	93 1f       	adc	r25, r19
    3576:	9c 01       	movw	r18, r24
    3578:	8b 81       	ldd	r24, Y+3	; 0x03
    357a:	9c 81       	ldd	r25, Y+4	; 0x04
    357c:	82 0f       	add	r24, r18
    357e:	93 1f       	adc	r25, r19
    3580:	fc 01       	movw	r30, r24
    3582:	80 81       	ld	r24, Z
    3584:	0e 94 b9 19 	call	0x3372	; 0x3372 <Data_processing>
    3588:	8a 81       	ldd	r24, Y+2	; 0x02
    358a:	8f 5f       	subi	r24, 0xFF	; 255
    358c:	8a 83       	std	Y+2, r24	; 0x02
    358e:	8a 81       	ldd	r24, Y+2	; 0x02
    3590:	8c 33       	cpi	r24, 0x3C	; 60
    3592:	00 f3       	brcs	.-64     	; 0x3554 <Display_Picture+0x2c>
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	8f 5f       	subi	r24, 0xFF	; 255
    3598:	89 83       	std	Y+1, r24	; 0x01
    359a:	89 81       	ldd	r24, Y+1	; 0x01
    359c:	80 34       	cpi	r24, 0x40	; 64
    359e:	c0 f2       	brcs	.-80     	; 0x3550 <Display_Picture+0x28>
    35a0:	00 00       	nop
    35a2:	0f 90       	pop	r0
    35a4:	0f 90       	pop	r0
    35a6:	0f 90       	pop	r0
    35a8:	0f 90       	pop	r0
    35aa:	df 91       	pop	r29
    35ac:	cf 91       	pop	r28
    35ae:	08 95       	ret

000035b0 <Set_Gray_Scale_Table>:
    35b0:	cf 93       	push	r28
    35b2:	df 93       	push	r29
    35b4:	cd b7       	in	r28, 0x3d	; 61
    35b6:	de b7       	in	r29, 0x3e	; 62
    35b8:	88 eb       	ldi	r24, 0xB8	; 184
    35ba:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    35be:	8c e0       	ldi	r24, 0x0C	; 12
    35c0:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    35c4:	88 e1       	ldi	r24, 0x18	; 24
    35c6:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    35ca:	84 e2       	ldi	r24, 0x24	; 36
    35cc:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    35d0:	80 e3       	ldi	r24, 0x30	; 48
    35d2:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    35d6:	8c e3       	ldi	r24, 0x3C	; 60
    35d8:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    35dc:	88 e4       	ldi	r24, 0x48	; 72
    35de:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    35e2:	84 e5       	ldi	r24, 0x54	; 84
    35e4:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    35e8:	80 e6       	ldi	r24, 0x60	; 96
    35ea:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    35ee:	8c e6       	ldi	r24, 0x6C	; 108
    35f0:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    35f4:	88 e7       	ldi	r24, 0x78	; 120
    35f6:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    35fa:	84 e8       	ldi	r24, 0x84	; 132
    35fc:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    3600:	80 e9       	ldi	r24, 0x90	; 144
    3602:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    3606:	8c e9       	ldi	r24, 0x9C	; 156
    3608:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    360c:	88 ea       	ldi	r24, 0xA8	; 168
    360e:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    3612:	84 eb       	ldi	r24, 0xB4	; 180
    3614:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	0e 94 fe 13 	call	0x27fc	; 0x27fc <Write_Command>
    361e:	00 00       	nop
    3620:	df 91       	pop	r29
    3622:	cf 91       	pop	r28
    3624:	08 95       	ret

00003626 <readDials>:
    3626:	cf 93       	push	r28
    3628:	df 93       	push	r29
    362a:	cd b7       	in	r28, 0x3d	; 61
    362c:	de b7       	in	r29, 0x3e	; 62
    362e:	6d 97       	sbiw	r28, 0x1d	; 29
    3630:	0f b6       	in	r0, 0x3f	; 63
    3632:	f8 94       	cli
    3634:	de bf       	out	0x3e, r29	; 62
    3636:	0f be       	out	0x3f, r0	; 63
    3638:	cd bf       	out	0x3d, r28	; 61
    363a:	19 82       	std	Y+1, r1	; 0x01
    363c:	82 e0       	ldi	r24, 0x02	; 2
    363e:	0e 94 35 13 	call	0x266a	; 0x266a <ADC_read>
    3642:	9b 83       	std	Y+3, r25	; 0x03
    3644:	8a 83       	std	Y+2, r24	; 0x02
    3646:	83 e0       	ldi	r24, 0x03	; 3
    3648:	0e 94 35 13 	call	0x266a	; 0x266a <ADC_read>
    364c:	9d 83       	std	Y+5, r25	; 0x05
    364e:	8c 83       	std	Y+4, r24	; 0x04
    3650:	8c 81       	ldd	r24, Y+4	; 0x04
    3652:	9d 81       	ldd	r25, Y+5	; 0x05
    3654:	96 95       	lsr	r25
    3656:	87 95       	ror	r24
    3658:	96 95       	lsr	r25
    365a:	87 95       	ror	r24
    365c:	9c 01       	movw	r18, r24
    365e:	ab ea       	ldi	r26, 0xAB	; 171
    3660:	ba ea       	ldi	r27, 0xAA	; 170
    3662:	0e 94 8a 29 	call	0x5314	; 0x5314 <__umulhisi3>
    3666:	92 95       	swap	r25
    3668:	82 95       	swap	r24
    366a:	8f 70       	andi	r24, 0x0F	; 15
    366c:	89 27       	eor	r24, r25
    366e:	9f 70       	andi	r25, 0x0F	; 15
    3670:	89 27       	eor	r24, r25
    3672:	9f 83       	std	Y+7, r25	; 0x07
    3674:	8e 83       	std	Y+6, r24	; 0x06
    3676:	8a 81       	ldd	r24, Y+2	; 0x02
    3678:	9b 81       	ldd	r25, Y+3	; 0x03
    367a:	96 95       	lsr	r25
    367c:	87 95       	ror	r24
    367e:	96 95       	lsr	r25
    3680:	87 95       	ror	r24
    3682:	9c 01       	movw	r18, r24
    3684:	ab ea       	ldi	r26, 0xAB	; 171
    3686:	ba ea       	ldi	r27, 0xAA	; 170
    3688:	0e 94 8a 29 	call	0x5314	; 0x5314 <__umulhisi3>
    368c:	92 95       	swap	r25
    368e:	82 95       	swap	r24
    3690:	8f 70       	andi	r24, 0x0F	; 15
    3692:	89 27       	eor	r24, r25
    3694:	9f 70       	andi	r25, 0x0F	; 15
    3696:	89 27       	eor	r24, r25
    3698:	99 87       	std	Y+9, r25	; 0x09
    369a:	88 87       	std	Y+8, r24	; 0x08
    369c:	9e 01       	movw	r18, r28
    369e:	2c 5e       	subi	r18, 0xEC	; 236
    36a0:	3f 4f       	sbci	r19, 0xFF	; 255
    36a2:	88 85       	ldd	r24, Y+8	; 0x08
    36a4:	99 85       	ldd	r25, Y+9	; 0x09
    36a6:	4a e0       	ldi	r20, 0x0A	; 10
    36a8:	50 e0       	ldi	r21, 0x00	; 0
    36aa:	b9 01       	movw	r22, r18
    36ac:	0e 94 a4 29 	call	0x5348	; 0x5348 <itoa>
    36b0:	9e 01       	movw	r18, r28
    36b2:	26 5f       	subi	r18, 0xF6	; 246
    36b4:	3f 4f       	sbci	r19, 0xFF	; 255
    36b6:	8e 81       	ldd	r24, Y+6	; 0x06
    36b8:	9f 81       	ldd	r25, Y+7	; 0x07
    36ba:	4a e0       	ldi	r20, 0x0A	; 10
    36bc:	50 e0       	ldi	r21, 0x00	; 0
    36be:	b9 01       	movw	r22, r18
    36c0:	0e 94 a4 29 	call	0x5348	; 0x5348 <itoa>
    36c4:	9e 01       	movw	r18, r28
    36c6:	2c 5e       	subi	r18, 0xEC	; 236
    36c8:	3f 4f       	sbci	r19, 0xFF	; 255
    36ca:	ce 01       	movw	r24, r28
    36cc:	0a 96       	adiw	r24, 0x0a	; 10
    36ce:	b9 01       	movw	r22, r18
    36d0:	0e 94 99 29 	call	0x5332	; 0x5332 <strcat>
    36d4:	8e 81       	ldd	r24, Y+6	; 0x06
    36d6:	9f 81       	ldd	r25, Y+7	; 0x07
    36d8:	82 95       	swap	r24
    36da:	92 95       	swap	r25
    36dc:	90 7f       	andi	r25, 0xF0	; 240
    36de:	98 27       	eor	r25, r24
    36e0:	80 7f       	andi	r24, 0xF0	; 240
    36e2:	98 27       	eor	r25, r24
    36e4:	98 2f       	mov	r25, r24
    36e6:	88 85       	ldd	r24, Y+8	; 0x08
    36e8:	89 2b       	or	r24, r25
    36ea:	80 93 34 10 	sts	0x1034, r24	; 0x801034 <CAN_Dial>
    36ee:	00 00       	nop
    36f0:	6d 96       	adiw	r28, 0x1d	; 29
    36f2:	0f b6       	in	r0, 0x3f	; 63
    36f4:	f8 94       	cli
    36f6:	de bf       	out	0x3e, r29	; 62
    36f8:	0f be       	out	0x3f, r0	; 63
    36fa:	cd bf       	out	0x3d, r28	; 61
    36fc:	df 91       	pop	r29
    36fe:	cf 91       	pop	r28
    3700:	08 95       	ret

00003702 <OLED_Init>:

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  Initialization
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void OLED_Init()
{
    3702:	cf 93       	push	r28
    3704:	df 93       	push	r29
    3706:	cd b7       	in	r28, 0x3d	; 61
    3708:	de b7       	in	r29, 0x3e	; 62
	
	
	unsigned char i;

	RESET_low;
    370a:	85 e2       	ldi	r24, 0x25	; 37
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	25 e2       	ldi	r18, 0x25	; 37
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	f9 01       	movw	r30, r18
    3714:	20 81       	ld	r18, Z
    3716:	2f 7b       	andi	r18, 0xBF	; 191
    3718:	fc 01       	movw	r30, r24
    371a:	20 83       	st	Z, r18
	Delay(1000);
    371c:	88 ee       	ldi	r24, 0xE8	; 232
    371e:	93 e0       	ldi	r25, 0x03	; 3
    3720:	0e 94 db 13 	call	0x27b6	; 0x27b6 <Delay>
	
	RESET_high;
    3724:	85 e2       	ldi	r24, 0x25	; 37
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	25 e2       	ldi	r18, 0x25	; 37
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	f9 01       	movw	r30, r18
    372e:	20 81       	ld	r18, Z
    3730:	20 64       	ori	r18, 0x40	; 64
    3732:	fc 01       	movw	r30, r24
    3734:	20 83       	st	Z, r18


	Set_Command_Lock(0x12);			// Unlock Basic Commands (0x12/0x16)
    3736:	82 e1       	ldi	r24, 0x12	; 18
    3738:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <Set_Command_Lock>
	Set_Display_On_Off(0x00);		// Display Off (0x00/0x01)
    373c:	80 e0       	ldi	r24, 0x00	; 0
    373e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <Set_Display_On_Off>
	Set_Display_Clock(0x91);		// Set Clock as 80 Frames/Sec
    3742:	81 e9       	ldi	r24, 0x91	; 145
    3744:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <Set_Display_Clock>
	Set_Multiplex_Ratio(0x3F);		// 1/64 Duty (0x0F~0x3F)
    3748:	8f e3       	ldi	r24, 0x3F	; 63
    374a:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <Set_Multiplex_Ratio>
	Set_Display_Offset(0x00);		// Shift Mapping RAM Counter (0x00~0x3F)
    374e:	80 e0       	ldi	r24, 0x00	; 0
    3750:	0e 94 be 14 	call	0x297c	; 0x297c <Set_Display_Offset>
	Set_Start_Line(0x00);			// Set Mapping RAM Display Start Line (0x00~0x7F)
    3754:	80 e0       	ldi	r24, 0x00	; 0
    3756:	0e 94 ad 14 	call	0x295a	; 0x295a <Set_Start_Line>
	Set_Remap_Format(0x14);			// Set Horizontal Address Increment
    375a:	84 e1       	ldi	r24, 0x14	; 20
    375c:	0e 94 99 14 	call	0x2932	; 0x2932 <Set_Remap_Format>
	//     Column Address 0 Mapped to SEG0
	//     Disable Nibble Remap
	//     Scan from COM[N-1] to COM0
	//     Disable COM Split Odd Even
	//     Enable Dual COM Line Mode
	Set_GPIO(0x00);				// Disable GPIO Pins Input
    3760:	80 e0       	ldi	r24, 0x00	; 0
    3762:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <Set_GPIO>
	Set_Function_Selection(0x01);		// Enable Internal VDD Regulator
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <Set_Function_Selection>
	Set_Display_Enhancement_A(0xA0,0xFD);	// Enable External VSL
    376c:	6d ef       	ldi	r22, 0xFD	; 253
    376e:	80 ea       	ldi	r24, 0xA0	; 160
    3770:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <Set_Display_Enhancement_A>
	// Set Low Gray Scale Enhancement
	Set_Contrast_Current(0x7F);		// Set Segment Output Current
    3774:	8f e7       	ldi	r24, 0x7F	; 127
    3776:	0e 94 99 15 	call	0x2b32	; 0x2b32 <Set_Contrast_Current>
	Set_Master_Current(Brightness);		// Set Scale Factor of Segment Output Current Control
    377a:	8f e0       	ldi	r24, 0x0F	; 15
    377c:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <Set_Master_Current>
	Set_Gray_Scale_Table();			// Set Pulse Width for Gray Scale Table
    3780:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <Set_Gray_Scale_Table>
	Set_Phase_Length(0xE2);			// Set Phase 1 as 5 Clocks & Phase 2 as 14 Clocks
    3784:	82 ee       	ldi	r24, 0xE2	; 226
    3786:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <Set_Phase_Length>
	Set_Display_Enhancement_B(0x20);	// Enhance Driving Scheme Capability (0x00/0x20)
    378a:	80 e2       	ldi	r24, 0x20	; 32
    378c:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <Set_Display_Enhancement_B>
	Set_Precharge_Voltage(0x1F);		// Set Pre-Charge Voltage Level as 0.60*VCC
    3790:	8f e1       	ldi	r24, 0x1F	; 31
    3792:	0e 94 77 15 	call	0x2aee	; 0x2aee <Set_Precharge_Voltage>
	Set_Precharge_Period(0x08);		// Set Second Pre-Charge Period as 8 Clocks
    3796:	88 e0       	ldi	r24, 0x08	; 8
    3798:	0e 94 66 15 	call	0x2acc	; 0x2acc <Set_Precharge_Period>
	Set_VCOMH(0x07);			// Set Common Pins Deselect Voltage Level as 0.86*VCC
    379c:	87 e0       	ldi	r24, 0x07	; 7
    379e:	0e 94 88 15 	call	0x2b10	; 0x2b10 <Set_VCOMH>
	Set_Display_Mode(0x02);			// Normal Display Mode (0x00/0x01/0x02/0x03)
    37a2:	82 e0       	ldi	r24, 0x02	; 2
    37a4:	0e 94 cf 14 	call	0x299e	; 0x299e <Set_Display_Mode>
	Set_Partial_Display(0x01,0x00,0x00);	// Disable Partial Display
    37a8:	40 e0       	ldi	r20, 0x00	; 0
    37aa:	60 e0       	ldi	r22, 0x00	; 0
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	0e 94 de 14 	call	0x29bc	; 0x29bc <Set_Partial_Display>

	Fill_RAM(0x00);				// Clear Screen
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <Fill_RAM>

	Set_Display_On_Off(0x01);		// Display On (0x00/0x01)
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <Set_Display_On_Off>
	
	
}
    37be:	00 00       	nop
    37c0:	df 91       	pop	r29
    37c2:	cf 91       	pop	r28
    37c4:	08 95       	ret

000037c6 <main>:

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  Main Program
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
int main()
{
    37c6:	af 92       	push	r10
    37c8:	bf 92       	push	r11
    37ca:	cf 92       	push	r12
    37cc:	df 92       	push	r13
    37ce:	ef 92       	push	r14
    37d0:	ff 92       	push	r15
    37d2:	0f 93       	push	r16
    37d4:	1f 93       	push	r17
    37d6:	cf 93       	push	r28
    37d8:	df 93       	push	r29
    37da:	cd b7       	in	r28, 0x3d	; 61
    37dc:	de b7       	in	r29, 0x3e	; 62
    37de:	ce 5b       	subi	r28, 0xBE	; 190
    37e0:	d1 09       	sbc	r29, r1
    37e2:	0f b6       	in	r0, 0x3f	; 63
    37e4:	f8 94       	cli
    37e6:	de bf       	out	0x3e, r29	; 62
    37e8:	0f be       	out	0x3f, r0	; 63
    37ea:	cd bf       	out	0x3d, r28	; 61
	
	DDRB = 0b11100011;	//b7 - SCK; b1 - MOSI
    37ec:	84 e2       	ldi	r24, 0x24	; 36
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	23 ee       	ldi	r18, 0xE3	; 227
    37f2:	fc 01       	movw	r30, r24
    37f4:	20 83       	st	Z, r18
	DDRD = 0b00001001;	//b3 - SS pin
    37f6:	8a e2       	ldi	r24, 0x2A	; 42
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	29 e0       	ldi	r18, 0x09	; 9
    37fc:	fc 01       	movw	r30, r24
    37fe:	20 83       	st	Z, r18
	SPI_clock_high;
    3800:	85 e2       	ldi	r24, 0x25	; 37
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	25 e2       	ldi	r18, 0x25	; 37
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	f9 01       	movw	r30, r18
    380a:	20 81       	ld	r18, Z
    380c:	20 68       	ori	r18, 0x80	; 128
    380e:	fc 01       	movw	r30, r24
    3810:	20 83       	st	Z, r18
	
	unsigned char MTemp1[]= "MTEMP";
    3812:	86 e0       	ldi	r24, 0x06	; 6
    3814:	e7 ec       	ldi	r30, 0xC7	; 199
    3816:	ff e0       	ldi	r31, 0x0F	; 15
    3818:	de 01       	movw	r26, r28
    381a:	da 96       	adiw	r26, 0x3a	; 58
    381c:	01 90       	ld	r0, Z+
    381e:	0d 92       	st	X+, r0
    3820:	8a 95       	dec	r24
    3822:	e1 f7       	brne	.-8      	; 0x381c <main+0x56>
	unsigned char MTemp2[]= "MTEMP";
    3824:	86 e0       	ldi	r24, 0x06	; 6
    3826:	e7 ec       	ldi	r30, 0xC7	; 199
    3828:	ff e0       	ldi	r31, 0x0F	; 15
    382a:	de 01       	movw	r26, r28
    382c:	a0 5c       	subi	r26, 0xC0	; 192
    382e:	bf 4f       	sbci	r27, 0xFF	; 255
    3830:	01 90       	ld	r0, Z+
    3832:	0d 92       	st	X+, r0
    3834:	8a 95       	dec	r24
    3836:	e1 f7       	brne	.-8      	; 0x3830 <main+0x6a>
	unsigned char MTemp3[]= "MTEMP";
    3838:	ce 01       	movw	r24, r28
    383a:	8a 5b       	subi	r24, 0xBA	; 186
    383c:	9f 4f       	sbci	r25, 0xFF	; 255
    383e:	26 e0       	ldi	r18, 0x06	; 6
    3840:	e7 ec       	ldi	r30, 0xC7	; 199
    3842:	ff e0       	ldi	r31, 0x0F	; 15
    3844:	dc 01       	movw	r26, r24
    3846:	01 90       	ld	r0, Z+
    3848:	0d 92       	st	X+, r0
    384a:	2a 95       	dec	r18
    384c:	e1 f7       	brne	.-8      	; 0x3846 <main+0x80>
	unsigned char MTemp4[]= "MTEMP";
    384e:	ce 01       	movw	r24, r28
    3850:	84 5b       	subi	r24, 0xB4	; 180
    3852:	9f 4f       	sbci	r25, 0xFF	; 255
    3854:	26 e0       	ldi	r18, 0x06	; 6
    3856:	e7 ec       	ldi	r30, 0xC7	; 199
    3858:	ff e0       	ldi	r31, 0x0F	; 15
    385a:	dc 01       	movw	r26, r24
    385c:	01 90       	ld	r0, Z+
    385e:	0d 92       	st	X+, r0
    3860:	2a 95       	dec	r18
    3862:	e1 f7       	brne	.-8      	; 0x385c <main+0x96>
	unsigned char Charge[]="CHARGE";
    3864:	ce 01       	movw	r24, r28
    3866:	8e 5a       	subi	r24, 0xAE	; 174
    3868:	9f 4f       	sbci	r25, 0xFF	; 255
    386a:	27 e0       	ldi	r18, 0x07	; 7
    386c:	ed ec       	ldi	r30, 0xCD	; 205
    386e:	ff e0       	ldi	r31, 0x0F	; 15
    3870:	dc 01       	movw	r26, r24
    3872:	01 90       	ld	r0, Z+
    3874:	0d 92       	st	X+, r0
    3876:	2a 95       	dec	r18
    3878:	e1 f7       	brne	.-8      	; 0x3872 <main+0xac>
	//unsigned char Name3[]="REKT";

	//unsigned char i;

	CAN_init();		// Initialise CAN
    387a:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <CAN_init>
	CAN_RXInit(5,8,0x400000, 0x400000);
    387e:	e1 2c       	mov	r14, r1
    3880:	f1 2c       	mov	r15, r1
    3882:	00 e4       	ldi	r16, 0x40	; 64
    3884:	10 e0       	ldi	r17, 0x00	; 0
    3886:	20 e0       	ldi	r18, 0x00	; 0
    3888:	30 e0       	ldi	r19, 0x00	; 0
    388a:	40 e4       	ldi	r20, 0x40	; 64
    388c:	50 e0       	ldi	r21, 0x00	; 0
    388e:	68 e0       	ldi	r22, 0x08	; 8
    3890:	85 e0       	ldi	r24, 0x05	; 5
    3892:	0e 94 02 10 	call	0x2004	; 0x2004 <CAN_RXInit>
	ADC_init();		// Initialise ADC
    3896:	0e 94 1a 13 	call	0x2634	; 0x2634 <ADC_init>
	spi_init();		// Initialise SPI (OLED screen communication)
    389a:	0e 94 8b 13 	call	0x2716	; 0x2716 <spi_init>
	OLED_Init();	// Initialise the OLED screen
    389e:	0e 94 81 1b 	call	0x3702	; 0x3702 <OLED_Init>
	sei();
    38a2:	78 94       	sei
	
	
	unsigned char Acceleration[]= {'A','C','C','E','L','E','R','A','T','I','O','N'};
    38a4:	ce 01       	movw	r24, r28
    38a6:	87 5a       	subi	r24, 0xA7	; 167
    38a8:	9f 4f       	sbci	r25, 0xFF	; 255
    38aa:	2c e0       	ldi	r18, 0x0C	; 12
    38ac:	e4 ed       	ldi	r30, 0xD4	; 212
    38ae:	ff e0       	ldi	r31, 0x0F	; 15
    38b0:	dc 01       	movw	r26, r24
    38b2:	01 90       	ld	r0, Z+
    38b4:	0d 92       	st	X+, r0
    38b6:	2a 95       	dec	r18
    38b8:	e1 f7       	brne	.-8      	; 0x38b2 <main+0xec>
	unsigned char SkidPad[]= {'S','K','I','D','P','A','D'};
    38ba:	ce 01       	movw	r24, r28
    38bc:	8b 59       	subi	r24, 0x9B	; 155
    38be:	9f 4f       	sbci	r25, 0xFF	; 255
    38c0:	27 e0       	ldi	r18, 0x07	; 7
    38c2:	e0 ee       	ldi	r30, 0xE0	; 224
    38c4:	ff e0       	ldi	r31, 0x0F	; 15
    38c6:	dc 01       	movw	r26, r24
    38c8:	01 90       	ld	r0, Z+
    38ca:	0d 92       	st	X+, r0
    38cc:	2a 95       	dec	r18
    38ce:	e1 f7       	brne	.-8      	; 0x38c8 <main+0x102>
	unsigned char AutoCross[]= {'A','U','T','O','C','R','O','S','S'};
    38d0:	ce 01       	movw	r24, r28
    38d2:	84 59       	subi	r24, 0x94	; 148
    38d4:	9f 4f       	sbci	r25, 0xFF	; 255
    38d6:	29 e0       	ldi	r18, 0x09	; 9
    38d8:	e7 ee       	ldi	r30, 0xE7	; 231
    38da:	ff e0       	ldi	r31, 0x0F	; 15
    38dc:	dc 01       	movw	r26, r24
    38de:	01 90       	ld	r0, Z+
    38e0:	0d 92       	st	X+, r0
    38e2:	2a 95       	dec	r18
    38e4:	e1 f7       	brne	.-8      	; 0x38de <main+0x118>
	unsigned char Endurance[]= {'E','N','D','U','R','A','N,','C','E'};
    38e6:	ce 01       	movw	r24, r28
    38e8:	8b 58       	subi	r24, 0x8B	; 139
    38ea:	9f 4f       	sbci	r25, 0xFF	; 255
    38ec:	29 e0       	ldi	r18, 0x09	; 9
    38ee:	e0 ef       	ldi	r30, 0xF0	; 240
    38f0:	ff e0       	ldi	r31, 0x0F	; 15
    38f2:	dc 01       	movw	r26, r24
    38f4:	01 90       	ld	r0, Z+
    38f6:	0d 92       	st	X+, r0
    38f8:	2a 95       	dec	r18
    38fa:	e1 f7       	brne	.-8      	; 0x38f4 <main+0x12e>
	unsigned char SelectionRight[]= {'>','>','>','>'};
    38fc:	ce 01       	movw	r24, r28
    38fe:	82 58       	subi	r24, 0x82	; 130
    3900:	9f 4f       	sbci	r25, 0xFF	; 255
    3902:	2e e3       	ldi	r18, 0x3E	; 62
    3904:	fc 01       	movw	r30, r24
    3906:	20 83       	st	Z, r18
    3908:	ce 01       	movw	r24, r28
    390a:	82 58       	subi	r24, 0x82	; 130
    390c:	9f 4f       	sbci	r25, 0xFF	; 255
    390e:	2e e3       	ldi	r18, 0x3E	; 62
    3910:	fc 01       	movw	r30, r24
    3912:	21 83       	std	Z+1, r18	; 0x01
    3914:	ce 01       	movw	r24, r28
    3916:	82 58       	subi	r24, 0x82	; 130
    3918:	9f 4f       	sbci	r25, 0xFF	; 255
    391a:	2e e3       	ldi	r18, 0x3E	; 62
    391c:	fc 01       	movw	r30, r24
    391e:	22 83       	std	Z+2, r18	; 0x02
    3920:	ce 01       	movw	r24, r28
    3922:	82 58       	subi	r24, 0x82	; 130
    3924:	9f 4f       	sbci	r25, 0xFF	; 255
    3926:	2e e3       	ldi	r18, 0x3E	; 62
    3928:	fc 01       	movw	r30, r24
    392a:	23 83       	std	Z+3, r18	; 0x03
	unsigned char SelectionLeft[]= {'<','<','<','<'};
    392c:	ce 01       	movw	r24, r28
    392e:	8e 57       	subi	r24, 0x7E	; 126
    3930:	9f 4f       	sbci	r25, 0xFF	; 255
    3932:	2c e3       	ldi	r18, 0x3C	; 60
    3934:	fc 01       	movw	r30, r24
    3936:	20 83       	st	Z, r18
    3938:	ce 01       	movw	r24, r28
    393a:	8e 57       	subi	r24, 0x7E	; 126
    393c:	9f 4f       	sbci	r25, 0xFF	; 255
    393e:	2c e3       	ldi	r18, 0x3C	; 60
    3940:	fc 01       	movw	r30, r24
    3942:	21 83       	std	Z+1, r18	; 0x01
    3944:	ce 01       	movw	r24, r28
    3946:	8e 57       	subi	r24, 0x7E	; 126
    3948:	9f 4f       	sbci	r25, 0xFF	; 255
    394a:	2c e3       	ldi	r18, 0x3C	; 60
    394c:	fc 01       	movw	r30, r24
    394e:	22 83       	std	Z+2, r18	; 0x02
    3950:	ce 01       	movw	r24, r28
    3952:	8e 57       	subi	r24, 0x7E	; 126
    3954:	9f 4f       	sbci	r25, 0xFF	; 255
    3956:	2c e3       	ldi	r18, 0x3C	; 60
    3958:	fc 01       	movw	r30, r24
    395a:	23 83       	std	Z+3, r18	; 0x03
	unsigned char Voltage[]= {'V','O','L','T','A','G','E',' ',':'};
    395c:	ce 01       	movw	r24, r28
    395e:	8a 57       	subi	r24, 0x7A	; 122
    3960:	9f 4f       	sbci	r25, 0xFF	; 255
    3962:	29 e0       	ldi	r18, 0x09	; 9
    3964:	e9 ef       	ldi	r30, 0xF9	; 249
    3966:	ff e0       	ldi	r31, 0x0F	; 15
    3968:	dc 01       	movw	r26, r24
    396a:	01 90       	ld	r0, Z+
    396c:	0d 92       	st	X+, r0
    396e:	2a 95       	dec	r18
    3970:	e1 f7       	brne	.-8      	; 0x396a <main+0x1a4>
	unsigned char RPM[] = {'R','P','M',' ',':'};
    3972:	ce 01       	movw	r24, r28
    3974:	81 57       	subi	r24, 0x71	; 113
    3976:	9f 4f       	sbci	r25, 0xFF	; 255
    3978:	25 e0       	ldi	r18, 0x05	; 5
    397a:	e2 e0       	ldi	r30, 0x02	; 2
    397c:	f0 e1       	ldi	r31, 0x10	; 16
    397e:	dc 01       	movw	r26, r24
    3980:	01 90       	ld	r0, Z+
    3982:	0d 92       	st	X+, r0
    3984:	2a 95       	dec	r18
    3986:	e1 f7       	brne	.-8      	; 0x3980 <main+0x1ba>
	unsigned char GearboxTemp[] = {'G','E','A','R','B','O','X',' ','T','E','M','P',' ',':'};
    3988:	ce 01       	movw	r24, r28
    398a:	8c 56       	subi	r24, 0x6C	; 108
    398c:	9f 4f       	sbci	r25, 0xFF	; 255
    398e:	2e e0       	ldi	r18, 0x0E	; 14
    3990:	e7 e0       	ldi	r30, 0x07	; 7
    3992:	f0 e1       	ldi	r31, 0x10	; 16
    3994:	dc 01       	movw	r26, r24
    3996:	01 90       	ld	r0, Z+
    3998:	0d 92       	st	X+, r0
    399a:	2a 95       	dec	r18
    399c:	e1 f7       	brne	.-8      	; 0x3996 <main+0x1d0>
	unsigned char Throttle[]= {'T','H','R','O','T','T','L','E',' ','%',' ',':'};
    399e:	ce 01       	movw	r24, r28
    39a0:	8e 55       	subi	r24, 0x5E	; 94
    39a2:	9f 4f       	sbci	r25, 0xFF	; 255
    39a4:	2c e0       	ldi	r18, 0x0C	; 12
    39a6:	e5 e1       	ldi	r30, 0x15	; 21
    39a8:	f0 e1       	ldi	r31, 0x10	; 16
    39aa:	dc 01       	movw	r26, r24
    39ac:	01 90       	ld	r0, Z+
    39ae:	0d 92       	st	X+, r0
    39b0:	2a 95       	dec	r18
    39b2:	e1 f7       	brne	.-8      	; 0x39ac <main+0x1e6>
	unsigned char BlankNumber[] = {' ',' ',' ',' ',' '};
    39b4:	ce 01       	movw	r24, r28
    39b6:	82 55       	subi	r24, 0x52	; 82
    39b8:	9f 4f       	sbci	r25, 0xFF	; 255
    39ba:	25 e0       	ldi	r18, 0x05	; 5
    39bc:	e1 e2       	ldi	r30, 0x21	; 33
    39be:	f0 e1       	ldi	r31, 0x10	; 16
    39c0:	dc 01       	movw	r26, r24
    39c2:	01 90       	ld	r0, Z+
    39c4:	0d 92       	st	X+, r0
    39c6:	2a 95       	dec	r18
    39c8:	e1 f7       	brne	.-8      	; 0x39c2 <main+0x1fc>
	unsigned char LeftArrow[]= {'<'};
    39ca:	ce 01       	movw	r24, r28
    39cc:	8d 54       	subi	r24, 0x4D	; 77
    39ce:	9f 4f       	sbci	r25, 0xFF	; 255
    39d0:	2c e3       	ldi	r18, 0x3C	; 60
    39d2:	fc 01       	movw	r30, r24
    39d4:	20 83       	st	Z, r18
	unsigned char RightArrow[]= {'>'};
    39d6:	ce 01       	movw	r24, r28
    39d8:	8c 54       	subi	r24, 0x4C	; 76
    39da:	9f 4f       	sbci	r25, 0xFF	; 255
    39dc:	2e e3       	ldi	r18, 0x3E	; 62
    39de:	fc 01       	movw	r30, r24
    39e0:	20 83       	st	Z, r18
	unsigned char TempBuffer[10];
	unsigned int RPMMaxFlag = 0;
    39e2:	1c 86       	std	Y+12, r1	; 0x0c
    39e4:	1b 86       	std	Y+11, r1	; 0x0b
	unsigned int ThrottleMaxFlag = 0;
    39e6:	1a 82       	std	Y+2, r1	; 0x02
    39e8:	19 82       	std	Y+1, r1	; 0x01
	unsigned int ThrottleGreaterThan10 = 0;
    39ea:	1c 82       	std	Y+4, r1	; 0x04
    39ec:	1b 82       	std	Y+3, r1	; 0x03
	unsigned int RPMGreaterThan100 = 0;
    39ee:	1e 82       	std	Y+6, r1	; 0x06
    39f0:	1d 82       	std	Y+5, r1	; 0x05
	unsigned int RPMGreaterThan1000 = 0;
    39f2:	1e 86       	std	Y+14, r1	; 0x0e
    39f4:	1d 86       	std	Y+13, r1	; 0x0d
	unsigned int GearboxTempCount = 0;
    39f6:	18 8a       	std	Y+16, r1	; 0x10
    39f8:	1f 86       	std	Y+15, r1	; 0x0f
	unsigned int GearboxTempMaxFlag = 0;
    39fa:	1a 8a       	std	Y+18, r1	; 0x12
    39fc:	19 8a       	std	Y+17, r1	; 0x11
	unsigned int RPMCounter = 0;
    39fe:	1c 8a       	std	Y+20, r1	; 0x14
    3a00:	1b 8a       	std	Y+19, r1	; 0x13
	unsigned int BootFlag = 0;
    3a02:	1e 8a       	std	Y+22, r1	; 0x16
    3a04:	1d 8a       	std	Y+21, r1	; 0x15
	int ScreenFlag = 0;
    3a06:	18 8e       	std	Y+24, r1	; 0x18
    3a08:	1f 8a       	std	Y+23, r1	; 0x17
	int ADC_Change = 1;
    3a0a:	81 e0       	ldi	r24, 0x01	; 1
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	98 87       	std	Y+8, r25	; 0x08
    3a10:	8f 83       	std	Y+7, r24	; 0x07
	int ADC_Previous = 0;
    3a12:	1a 8e       	std	Y+26, r1	; 0x1a
    3a14:	19 8e       	std	Y+25, r1	; 0x19
	int digitLength = 0;
    3a16:	1c 8e       	std	Y+28, r1	; 0x1c
    3a18:	1b 8e       	std	Y+27, r1	; 0x1b
	uint16_t LeftDialADC;
	uint16_t LeftDialADCOld = 0;
    3a1a:	1a 86       	std	Y+10, r1	; 0x0a
    3a1c:	19 86       	std	Y+9, r1	; 0x09
	int LeftDialADCScaled;
	uint16_t RightDialADC;
	uint16_t RightDialADCOld = 0;
    3a1e:	1e 8e       	std	Y+30, r1	; 0x1e
    3a20:	1d 8e       	std	Y+29, r1	; 0x1d
	int RightDialADCScaled;
	uint8_t mob;
	
Fill_RAM(0x00);			// Clear Screen
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <Fill_RAM>
unsigned int index33 = 0x17;
    3a28:	87 e1       	ldi	r24, 0x17	; 23
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	98 a3       	std	Y+32, r25	; 0x20
    3a2e:	8f 8f       	std	Y+31, r24	; 0x1f
unsigned char character66 = 65;
    3a30:	81 e4       	ldi	r24, 0x41	; 65
    3a32:	89 a3       	std	Y+33, r24	; 0x21
//Set_Column_Address(30,30);
//Set_Row_Address(24,65);
//Set_Write_RAM();
//Fill_RAM(0xFF);

unsigned char temp_brightness = 0;
    3a34:	1a a2       	std	Y+34, r1	; 0x22

Display_Picture(Motorsport);
    3a36:	80 e0       	ldi	r24, 0x00	; 0
    3a38:	91 e0       	ldi	r25, 0x01	; 1
    3a3a:	0e 94 94 1a 	call	0x3528	; 0x3528 <Display_Picture>

Delay(4000);
    3a3e:	80 ea       	ldi	r24, 0xA0	; 160
    3a40:	9f e0       	ldi	r25, 0x0F	; 15
    3a42:	0e 94 db 13 	call	0x27b6	; 0x27b6 <Delay>

Fill_RAM(0x00);			// Clear Screen
    3a46:	80 e0       	ldi	r24, 0x00	; 0
    3a48:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <Fill_RAM>
	while(1)
	{
		
		readDials();
    3a4c:	0e 94 13 1b 	call	0x3626	; 0x3626 <readDials>
		LeftDialADC = ADC_read(3); // 3 = LEFT DIAL
    3a50:	83 e0       	ldi	r24, 0x03	; 3
    3a52:	0e 94 35 13 	call	0x266a	; 0x266a <ADC_read>
    3a56:	9c a3       	std	Y+36, r25	; 0x24
    3a58:	8b a3       	std	Y+35, r24	; 0x23
		LeftDialADCScaled = (int)(LeftDialADC >> 2) / 24; // Scale values from 1 to 8 - need to verify with new PCB since dials are playing up
    3a5a:	8b a1       	ldd	r24, Y+35	; 0x23
    3a5c:	9c a1       	ldd	r25, Y+36	; 0x24
    3a5e:	96 95       	lsr	r25
    3a60:	87 95       	ror	r24
    3a62:	96 95       	lsr	r25
    3a64:	87 95       	ror	r24
    3a66:	28 e1       	ldi	r18, 0x18	; 24
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	b9 01       	movw	r22, r18
    3a6c:	0e 94 54 29 	call	0x52a8	; 0x52a8 <__divmodhi4>
    3a70:	cb 01       	movw	r24, r22
    3a72:	9e a3       	std	Y+38, r25	; 0x26
    3a74:	8d a3       	std	Y+37, r24	; 0x25
		RightDialADC = ADC_read(2); // 2 = RIGHT DIAL
    3a76:	82 e0       	ldi	r24, 0x02	; 2
    3a78:	0e 94 35 13 	call	0x266a	; 0x266a <ADC_read>
    3a7c:	98 a7       	std	Y+40, r25	; 0x28
    3a7e:	8f a3       	std	Y+39, r24	; 0x27
		RightDialADCScaled = (int)(RightDialADC >> 2) / 24; // Scale values from 1 to 8 - need to verify with new PCB since dials are playing up
    3a80:	8f a1       	ldd	r24, Y+39	; 0x27
    3a82:	98 a5       	ldd	r25, Y+40	; 0x28
    3a84:	96 95       	lsr	r25
    3a86:	87 95       	ror	r24
    3a88:	96 95       	lsr	r25
    3a8a:	87 95       	ror	r24
    3a8c:	28 e1       	ldi	r18, 0x18	; 24
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	b9 01       	movw	r22, r18
    3a92:	0e 94 54 29 	call	0x52a8	; 0x52a8 <__divmodhi4>
    3a96:	cb 01       	movw	r24, r22
    3a98:	9a a7       	std	Y+42, r25	; 0x2a
    3a9a:	89 a7       	std	Y+41, r24	; 0x29
		mob = CAN_findFreeTXMOB();
    3a9c:	0e 94 bf 11 	call	0x237e	; 0x237e <CAN_findFreeTXMOB>
    3aa0:	8b a7       	std	Y+43, r24	; 0x2b
		//if(mob > 0)
		CAN_TXMOB(0, 1, &CAN_Dial, 0x400001,0);
    3aa2:	e1 2c       	mov	r14, r1
    3aa4:	01 e0       	ldi	r16, 0x01	; 1
    3aa6:	10 e0       	ldi	r17, 0x00	; 0
    3aa8:	20 e4       	ldi	r18, 0x40	; 64
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	44 e3       	ldi	r20, 0x34	; 52
    3aae:	50 e1       	ldi	r21, 0x10	; 16
    3ab0:	61 e0       	ldi	r22, 0x01	; 1
    3ab2:	80 e0       	ldi	r24, 0x00	; 0
    3ab4:	0e 94 a9 10 	call	0x2152	; 0x2152 <CAN_TXMOB>
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	a8 ec       	ldi	r26, 0xC8	; 200
    3abe:	b2 e4       	ldi	r27, 0x42	; 66
    3ac0:	8c a7       	std	Y+44, r24	; 0x2c
    3ac2:	9d a7       	std	Y+45, r25	; 0x2d
    3ac4:	ae a7       	std	Y+46, r26	; 0x2e
    3ac6:	bf a7       	std	Y+47, r27	; 0x2f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3ac8:	20 e0       	ldi	r18, 0x00	; 0
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	4a e7       	ldi	r20, 0x7A	; 122
    3ace:	55 e4       	ldi	r21, 0x45	; 69
    3ad0:	6c a5       	ldd	r22, Y+44	; 0x2c
    3ad2:	7d a5       	ldd	r23, Y+45	; 0x2d
    3ad4:	8e a5       	ldd	r24, Y+46	; 0x2e
    3ad6:	9f a5       	ldd	r25, Y+47	; 0x2f
    3ad8:	0e 94 9e 28 	call	0x513c	; 0x513c <__mulsf3>
    3adc:	dc 01       	movw	r26, r24
    3ade:	cb 01       	movw	r24, r22
    3ae0:	88 ab       	std	Y+48, r24	; 0x30
    3ae2:	99 ab       	std	Y+49, r25	; 0x31
    3ae4:	aa ab       	std	Y+50, r26	; 0x32
    3ae6:	bb ab       	std	Y+51, r27	; 0x33
	if (__tmp < 1.0)
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	40 e8       	ldi	r20, 0x80	; 128
    3aee:	5f e3       	ldi	r21, 0x3F	; 63
    3af0:	68 a9       	ldd	r22, Y+48	; 0x30
    3af2:	79 a9       	ldd	r23, Y+49	; 0x31
    3af4:	8a a9       	ldd	r24, Y+50	; 0x32
    3af6:	9b a9       	ldd	r25, Y+51	; 0x33
    3af8:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <__cmpsf2>
    3afc:	88 23       	and	r24, r24
    3afe:	2c f4       	brge	.+10     	; 0x3b0a <main+0x344>
		__ticks = 1;
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	9d ab       	std	Y+53, r25	; 0x35
    3b06:	8c ab       	std	Y+52, r24	; 0x34
    3b08:	3f c0       	rjmp	.+126    	; 0x3b88 <main+0x3c2>
	else if (__tmp > 65535)
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	3f ef       	ldi	r19, 0xFF	; 255
    3b0e:	4f e7       	ldi	r20, 0x7F	; 127
    3b10:	57 e4       	ldi	r21, 0x47	; 71
    3b12:	68 a9       	ldd	r22, Y+48	; 0x30
    3b14:	79 a9       	ldd	r23, Y+49	; 0x31
    3b16:	8a a9       	ldd	r24, Y+50	; 0x32
    3b18:	9b a9       	ldd	r25, Y+51	; 0x33
    3b1a:	0e 94 41 28 	call	0x5082	; 0x5082 <__gesf2>
    3b1e:	18 16       	cp	r1, r24
    3b20:	4c f5       	brge	.+82     	; 0x3b74 <main+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b22:	20 e0       	ldi	r18, 0x00	; 0
    3b24:	30 e0       	ldi	r19, 0x00	; 0
    3b26:	40 e2       	ldi	r20, 0x20	; 32
    3b28:	51 e4       	ldi	r21, 0x41	; 65
    3b2a:	6c a5       	ldd	r22, Y+44	; 0x2c
    3b2c:	7d a5       	ldd	r23, Y+45	; 0x2d
    3b2e:	8e a5       	ldd	r24, Y+46	; 0x2e
    3b30:	9f a5       	ldd	r25, Y+47	; 0x2f
    3b32:	0e 94 9e 28 	call	0x513c	; 0x513c <__mulsf3>
    3b36:	dc 01       	movw	r26, r24
    3b38:	cb 01       	movw	r24, r22
    3b3a:	bc 01       	movw	r22, r24
    3b3c:	cd 01       	movw	r24, r26
    3b3e:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <__fixunssfsi>
    3b42:	dc 01       	movw	r26, r24
    3b44:	cb 01       	movw	r24, r22
    3b46:	9d ab       	std	Y+53, r25	; 0x35
    3b48:	8c ab       	std	Y+52, r24	; 0x34
    3b4a:	0f c0       	rjmp	.+30     	; 0x3b6a <main+0x3a4>
    3b4c:	80 e9       	ldi	r24, 0x90	; 144
    3b4e:	91 e0       	ldi	r25, 0x01	; 1
    3b50:	9f ab       	std	Y+55, r25	; 0x37
    3b52:	8e ab       	std	Y+54, r24	; 0x36
    3b54:	8e a9       	ldd	r24, Y+54	; 0x36
    3b56:	9f a9       	ldd	r25, Y+55	; 0x37
    3b58:	01 97       	sbiw	r24, 0x01	; 1
    3b5a:	f1 f7       	brne	.-4      	; 0x3b58 <main+0x392>
    3b5c:	9f ab       	std	Y+55, r25	; 0x37
    3b5e:	8e ab       	std	Y+54, r24	; 0x36
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b60:	8c a9       	ldd	r24, Y+52	; 0x34
    3b62:	9d a9       	ldd	r25, Y+53	; 0x35
    3b64:	01 97       	sbiw	r24, 0x01	; 1
    3b66:	9d ab       	std	Y+53, r25	; 0x35
    3b68:	8c ab       	std	Y+52, r24	; 0x34
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b6a:	8c a9       	ldd	r24, Y+52	; 0x34
    3b6c:	9d a9       	ldd	r25, Y+53	; 0x35
    3b6e:	89 2b       	or	r24, r25
    3b70:	69 f7       	brne	.-38     	; 0x3b4c <main+0x386>
    3b72:	14 c0       	rjmp	.+40     	; 0x3b9c <main+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b74:	68 a9       	ldd	r22, Y+48	; 0x30
    3b76:	79 a9       	ldd	r23, Y+49	; 0x31
    3b78:	8a a9       	ldd	r24, Y+50	; 0x32
    3b7a:	9b a9       	ldd	r25, Y+51	; 0x33
    3b7c:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <__fixunssfsi>
    3b80:	dc 01       	movw	r26, r24
    3b82:	cb 01       	movw	r24, r22
    3b84:	9d ab       	std	Y+53, r25	; 0x35
    3b86:	8c ab       	std	Y+52, r24	; 0x34
    3b88:	8c a9       	ldd	r24, Y+52	; 0x34
    3b8a:	9d a9       	ldd	r25, Y+53	; 0x35
    3b8c:	99 af       	std	Y+57, r25	; 0x39
    3b8e:	88 af       	std	Y+56, r24	; 0x38
    3b90:	88 ad       	ldd	r24, Y+56	; 0x38
    3b92:	99 ad       	ldd	r25, Y+57	; 0x39
    3b94:	01 97       	sbiw	r24, 0x01	; 1
    3b96:	f1 f7       	brne	.-4      	; 0x3b94 <main+0x3ce>
    3b98:	99 af       	std	Y+57, r25	; 0x39
    3b9a:	88 af       	std	Y+56, r24	; 0x38
		_delay_ms(100);
		
		if((LeftDialADCOld != LeftDialADCScaled) /*|| (RightDialADCOld != RightDialADCScaled)*/)
    3b9c:	8d a1       	ldd	r24, Y+37	; 0x25
    3b9e:	9e a1       	ldd	r25, Y+38	; 0x26
    3ba0:	29 85       	ldd	r18, Y+9	; 0x09
    3ba2:	3a 85       	ldd	r19, Y+10	; 0x0a
    3ba4:	28 17       	cp	r18, r24
    3ba6:	39 07       	cpc	r19, r25
    3ba8:	21 f0       	breq	.+8      	; 0x3bb2 <main+0x3ec>
		{
			ADC_Change = 1;
    3baa:	81 e0       	ldi	r24, 0x01	; 1
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	98 87       	std	Y+8, r25	; 0x08
    3bb0:	8f 83       	std	Y+7, r24	; 0x07
		}
		
		if(LeftDialADCScaled == 3)
    3bb2:	8d a1       	ldd	r24, Y+37	; 0x25
    3bb4:	9e a1       	ldd	r25, Y+38	; 0x26
    3bb6:	03 97       	sbiw	r24, 0x03	; 3
    3bb8:	09 f0       	breq	.+2      	; 0x3bbc <main+0x3f6>
    3bba:	08 c1       	rjmp	.+528    	; 0x3dcc <main+0x606>
		{
			if(ADC_Change == 1)
    3bbc:	8f 81       	ldd	r24, Y+7	; 0x07
    3bbe:	98 85       	ldd	r25, Y+8	; 0x08
    3bc0:	01 97       	sbiw	r24, 0x01	; 1
    3bc2:	09 f0       	breq	.+2      	; 0x3bc6 <main+0x400>
    3bc4:	4f c0       	rjmp	.+158    	; 0x3c64 <main+0x49e>
			{
				ADC_Change = 0;
    3bc6:	18 86       	std	Y+8, r1	; 0x08
    3bc8:	1f 82       	std	Y+7, r1	; 0x07
				if(LeftDialADCScaled > LeftDialADCOld){
    3bca:	2d a1       	ldd	r18, Y+37	; 0x25
    3bcc:	3e a1       	ldd	r19, Y+38	; 0x26
    3bce:	89 85       	ldd	r24, Y+9	; 0x09
    3bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd2:	82 17       	cp	r24, r18
    3bd4:	93 07       	cpc	r25, r19
    3bd6:	d0 f4       	brcc	.+52     	; 0x3c0c <main+0x446>
					Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x0F, 0xF0);
    3bd8:	ce 01       	movw	r24, r28
    3bda:	8c 54       	subi	r24, 0x4C	; 76
    3bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    3bde:	0f 2e       	mov	r0, r31
    3be0:	f0 ef       	ldi	r31, 0xF0	; 240
    3be2:	af 2e       	mov	r10, r31
    3be4:	b1 2c       	mov	r11, r1
    3be6:	f0 2d       	mov	r31, r0
    3be8:	0f 2e       	mov	r0, r31
    3bea:	ff e0       	ldi	r31, 0x0F	; 15
    3bec:	cf 2e       	mov	r12, r31
    3bee:	d1 2c       	mov	r13, r1
    3bf0:	f0 2d       	mov	r31, r0
    3bf2:	ee 24       	eor	r14, r14
    3bf4:	e3 94       	inc	r14
    3bf6:	f1 2c       	mov	r15, r1
    3bf8:	0f e7       	ldi	r16, 0x7F	; 127
    3bfa:	10 e0       	ldi	r17, 0x00	; 0
    3bfc:	21 e1       	ldi	r18, 0x11	; 17
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	40 e6       	ldi	r20, 0x60	; 96
    3c02:	50 e0       	ldi	r21, 0x00	; 0
    3c04:	6a e3       	ldi	r22, 0x3A	; 58
    3c06:	70 e0       	ldi	r23, 0x00	; 0
    3c08:	0e 94 a5 22 	call	0x454a	; 0x454a <Show_Bigger_String>
				}
				if(LeftDialADCScaled < LeftDialADCOld){
    3c0c:	2d a1       	ldd	r18, Y+37	; 0x25
    3c0e:	3e a1       	ldd	r19, Y+38	; 0x26
    3c10:	89 85       	ldd	r24, Y+9	; 0x09
    3c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c14:	28 17       	cp	r18, r24
    3c16:	39 07       	cpc	r19, r25
    3c18:	d0 f4       	brcc	.+52     	; 0x3c4e <main+0x488>
					Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x0F, 0xF0);
    3c1a:	ce 01       	movw	r24, r28
    3c1c:	8d 54       	subi	r24, 0x4D	; 77
    3c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c20:	0f 2e       	mov	r0, r31
    3c22:	f0 ef       	ldi	r31, 0xF0	; 240
    3c24:	af 2e       	mov	r10, r31
    3c26:	b1 2c       	mov	r11, r1
    3c28:	f0 2d       	mov	r31, r0
    3c2a:	0f 2e       	mov	r0, r31
    3c2c:	ff e0       	ldi	r31, 0x0F	; 15
    3c2e:	cf 2e       	mov	r12, r31
    3c30:	d1 2c       	mov	r13, r1
    3c32:	f0 2d       	mov	r31, r0
    3c34:	ee 24       	eor	r14, r14
    3c36:	e3 94       	inc	r14
    3c38:	f1 2c       	mov	r15, r1
    3c3a:	0f e7       	ldi	r16, 0x7F	; 127
    3c3c:	10 e0       	ldi	r17, 0x00	; 0
    3c3e:	21 e1       	ldi	r18, 0x11	; 17
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	45 e1       	ldi	r20, 0x15	; 21
    3c44:	50 e0       	ldi	r21, 0x00	; 0
    3c46:	60 e0       	ldi	r22, 0x00	; 0
    3c48:	70 e0       	ldi	r23, 0x00	; 0
    3c4a:	0e 94 a5 22 	call	0x454a	; 0x454a <Show_Bigger_String>
				}
				LeftDialADCOld = LeftDialADCScaled;
    3c4e:	8d a1       	ldd	r24, Y+37	; 0x25
    3c50:	9e a1       	ldd	r25, Y+38	; 0x26
    3c52:	9a 87       	std	Y+10, r25	; 0x0a
    3c54:	89 87       	std	Y+9, r24	; 0x09
				Delay(500);
    3c56:	84 ef       	ldi	r24, 0xF4	; 244
    3c58:	91 e0       	ldi	r25, 0x01	; 1
    3c5a:	0e 94 db 13 	call	0x27b6	; 0x27b6 <Delay>
				Fill_RAM(0x00);
    3c5e:	80 e0       	ldi	r24, 0x00	; 0
    3c60:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <Fill_RAM>
			}
			
			if(ThrottleMaxFlag == 1){
    3c64:	89 81       	ldd	r24, Y+1	; 0x01
    3c66:	9a 81       	ldd	r25, Y+2	; 0x02
    3c68:	01 97       	sbiw	r24, 0x01	; 1
    3c6a:	11 f4       	brne	.+4      	; 0x3c70 <main+0x4aa>
				//Show_String(1,&BlankNumber,0x28,0x05);
				ThrottleMaxFlag = 0;
    3c6c:	1a 82       	std	Y+2, r1	; 0x02
    3c6e:	19 82       	std	Y+1, r1	; 0x01
			}
			if(ThrottlePercentageData == 100){ ThrottleMaxFlag = 1;	}
    3c70:	80 91 26 10 	lds	r24, 0x1026	; 0x801026 <__data_end>
    3c74:	90 91 27 10 	lds	r25, 0x1027	; 0x801027 <__data_end+0x1>
    3c78:	84 36       	cpi	r24, 0x64	; 100
    3c7a:	91 05       	cpc	r25, r1
    3c7c:	21 f4       	brne	.+8      	; 0x3c86 <main+0x4c0>
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	9a 83       	std	Y+2, r25	; 0x02
    3c84:	89 83       	std	Y+1, r24	; 0x01
			// If throttle is at 10%, when the throttle goes down, a trailing 0 will be left - this needs to be cleared
			if(ThrottlePercentageData < 10){ ThrottleGreaterThan10 = 1;	}
    3c86:	80 91 26 10 	lds	r24, 0x1026	; 0x801026 <__data_end>
    3c8a:	90 91 27 10 	lds	r25, 0x1027	; 0x801027 <__data_end+0x1>
    3c8e:	0a 97       	sbiw	r24, 0x0a	; 10
    3c90:	20 f4       	brcc	.+8      	; 0x3c9a <main+0x4d4>
    3c92:	81 e0       	ldi	r24, 0x01	; 1
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	9c 83       	std	Y+4, r25	; 0x04
    3c98:	8b 83       	std	Y+3, r24	; 0x03
			if(ThrottleGreaterThan10 == 1){
    3c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c9e:	01 97       	sbiw	r24, 0x01	; 1
    3ca0:	11 f4       	brne	.+4      	; 0x3ca6 <main+0x4e0>
				//Show_String(1,&BlankNumber,0x28,0x05);
				ThrottleGreaterThan10 = 0;
    3ca2:	1c 82       	std	Y+4, r1	; 0x04
    3ca4:	1b 82       	std	Y+3, r1	; 0x03
			}
			itoa(ThrottlePercentageData,TempBuffer,10);
    3ca6:	80 91 26 10 	lds	r24, 0x1026	; 0x801026 <__data_end>
    3caa:	90 91 27 10 	lds	r25, 0x1027	; 0x801027 <__data_end+0x1>
    3cae:	9c 01       	movw	r18, r24
    3cb0:	ce 01       	movw	r24, r28
    3cb2:	8b 54       	subi	r24, 0x4B	; 75
    3cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    3cb6:	4a e0       	ldi	r20, 0x0A	; 10
    3cb8:	50 e0       	ldi	r21, 0x00	; 0
    3cba:	bc 01       	movw	r22, r24
    3cbc:	c9 01       	movw	r24, r18
    3cbe:	0e 94 a4 29 	call	0x5348	; 0x5348 <itoa>
			digitLength = (ThrottlePercentageData == 0 ? 1 : (int)(log10(ThrottlePercentageData)+1));
    3cc2:	80 91 26 10 	lds	r24, 0x1026	; 0x801026 <__data_end>
    3cc6:	90 91 27 10 	lds	r25, 0x1027	; 0x801027 <__data_end+0x1>
    3cca:	89 2b       	or	r24, r25
    3ccc:	21 f1       	breq	.+72     	; 0x3d16 <main+0x550>
    3cce:	80 91 26 10 	lds	r24, 0x1026	; 0x801026 <__data_end>
    3cd2:	90 91 27 10 	lds	r25, 0x1027	; 0x801027 <__data_end+0x1>
    3cd6:	cc 01       	movw	r24, r24
    3cd8:	a0 e0       	ldi	r26, 0x00	; 0
    3cda:	b0 e0       	ldi	r27, 0x00	; 0
    3cdc:	bc 01       	movw	r22, r24
    3cde:	cd 01       	movw	r24, r26
    3ce0:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <__floatunsisf>
    3ce4:	dc 01       	movw	r26, r24
    3ce6:	cb 01       	movw	r24, r22
    3ce8:	bc 01       	movw	r22, r24
    3cea:	cd 01       	movw	r24, r26
    3cec:	0e 94 46 28 	call	0x508c	; 0x508c <log10>
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	cb 01       	movw	r24, r22
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	40 e8       	ldi	r20, 0x80	; 128
    3cfa:	5f e3       	ldi	r21, 0x3F	; 63
    3cfc:	bc 01       	movw	r22, r24
    3cfe:	cd 01       	movw	r24, r26
    3d00:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__addsf3>
    3d04:	dc 01       	movw	r26, r24
    3d06:	cb 01       	movw	r24, r22
    3d08:	bc 01       	movw	r22, r24
    3d0a:	cd 01       	movw	r24, r26
    3d0c:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <__fixsfsi>
    3d10:	dc 01       	movw	r26, r24
    3d12:	cb 01       	movw	r24, r22
    3d14:	02 c0       	rjmp	.+4      	; 0x3d1a <main+0x554>
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	9c 8f       	std	Y+28, r25	; 0x1c
    3d1c:	8b 8f       	std	Y+27, r24	; 0x1b
			Show_Big_String(&Throttle,0x05,0x64,0x16,0x7F, 12, 0x0F, 0xF0);
    3d1e:	ce 01       	movw	r24, r28
    3d20:	8e 55       	subi	r24, 0x5E	; 94
    3d22:	9f 4f       	sbci	r25, 0xFF	; 255
    3d24:	0f 2e       	mov	r0, r31
    3d26:	f0 ef       	ldi	r31, 0xF0	; 240
    3d28:	af 2e       	mov	r10, r31
    3d2a:	b1 2c       	mov	r11, r1
    3d2c:	f0 2d       	mov	r31, r0
    3d2e:	0f 2e       	mov	r0, r31
    3d30:	ff e0       	ldi	r31, 0x0F	; 15
    3d32:	cf 2e       	mov	r12, r31
    3d34:	d1 2c       	mov	r13, r1
    3d36:	f0 2d       	mov	r31, r0
    3d38:	0f 2e       	mov	r0, r31
    3d3a:	fc e0       	ldi	r31, 0x0C	; 12
    3d3c:	ef 2e       	mov	r14, r31
    3d3e:	f1 2c       	mov	r15, r1
    3d40:	f0 2d       	mov	r31, r0
    3d42:	0f e7       	ldi	r16, 0x7F	; 127
    3d44:	10 e0       	ldi	r17, 0x00	; 0
    3d46:	26 e1       	ldi	r18, 0x16	; 22
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	44 e6       	ldi	r20, 0x64	; 100
    3d4c:	50 e0       	ldi	r21, 0x00	; 0
    3d4e:	65 e0       	ldi	r22, 0x05	; 5
    3d50:	70 e0       	ldi	r23, 0x00	; 0
    3d52:	0e 94 0b 23 	call	0x4616	; 0x4616 <Show_Big_String>
			Show_String(1,TempBuffer,0x28,0x05);
    3d56:	ce 01       	movw	r24, r28
    3d58:	8b 54       	subi	r24, 0x4B	; 75
    3d5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d5c:	25 e0       	ldi	r18, 0x05	; 5
    3d5e:	48 e2       	ldi	r20, 0x28	; 40
    3d60:	bc 01       	movw	r22, r24
    3d62:	81 e0       	ldi	r24, 0x01	; 1
    3d64:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <Show_String>
			Show_Big_String(&TempBuffer,0x2D,0x64,0x16,0x7F, digitLength, 0x0F, 0xF0); // Print the current throttle percentage
    3d68:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3d6a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3d6c:	ce 01       	movw	r24, r28
    3d6e:	8b 54       	subi	r24, 0x4B	; 75
    3d70:	9f 4f       	sbci	r25, 0xFF	; 255
    3d72:	0f 2e       	mov	r0, r31
    3d74:	f0 ef       	ldi	r31, 0xF0	; 240
    3d76:	af 2e       	mov	r10, r31
    3d78:	b1 2c       	mov	r11, r1
    3d7a:	f0 2d       	mov	r31, r0
    3d7c:	0f 2e       	mov	r0, r31
    3d7e:	ff e0       	ldi	r31, 0x0F	; 15
    3d80:	cf 2e       	mov	r12, r31
    3d82:	d1 2c       	mov	r13, r1
    3d84:	f0 2d       	mov	r31, r0
    3d86:	79 01       	movw	r14, r18
    3d88:	0f e7       	ldi	r16, 0x7F	; 127
    3d8a:	10 e0       	ldi	r17, 0x00	; 0
    3d8c:	26 e1       	ldi	r18, 0x16	; 22
    3d8e:	30 e0       	ldi	r19, 0x00	; 0
    3d90:	44 e6       	ldi	r20, 0x64	; 100
    3d92:	50 e0       	ldi	r21, 0x00	; 0
    3d94:	6d e2       	ldi	r22, 0x2D	; 45
    3d96:	70 e0       	ldi	r23, 0x00	; 0
    3d98:	0e 94 0b 23 	call	0x4616	; 0x4616 <Show_Big_String>
			Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x04, 0x40);
    3d9c:	ce 01       	movw	r24, r28
    3d9e:	8c 54       	subi	r24, 0x4C	; 76
    3da0:	9f 4f       	sbci	r25, 0xFF	; 255
    3da2:	68 94       	set
    3da4:	aa 24       	eor	r10, r10
    3da6:	a6 f8       	bld	r10, 6
    3da8:	b1 2c       	mov	r11, r1
    3daa:	68 94       	set
    3dac:	cc 24       	eor	r12, r12
    3dae:	c2 f8       	bld	r12, 2
    3db0:	d1 2c       	mov	r13, r1
    3db2:	ee 24       	eor	r14, r14
    3db4:	e3 94       	inc	r14
    3db6:	f1 2c       	mov	r15, r1
    3db8:	0f e7       	ldi	r16, 0x7F	; 127
    3dba:	10 e0       	ldi	r17, 0x00	; 0
    3dbc:	21 e1       	ldi	r18, 0x11	; 17
    3dbe:	30 e0       	ldi	r19, 0x00	; 0
    3dc0:	40 e6       	ldi	r20, 0x60	; 96
    3dc2:	50 e0       	ldi	r21, 0x00	; 0
    3dc4:	6a e3       	ldi	r22, 0x3A	; 58
    3dc6:	70 e0       	ldi	r23, 0x00	; 0
    3dc8:	0e 94 a5 22 	call	0x454a	; 0x454a <Show_Bigger_String>
		}
		
		if(LeftDialADCScaled == 4)
    3dcc:	8d a1       	ldd	r24, Y+37	; 0x25
    3dce:	9e a1       	ldd	r25, Y+38	; 0x26
    3dd0:	04 97       	sbiw	r24, 0x04	; 4
    3dd2:	09 f0       	breq	.+2      	; 0x3dd6 <main+0x610>
    3dd4:	32 c1       	rjmp	.+612    	; 0x403a <main+0x874>
		{
			if(ADC_Change == 1)
    3dd6:	8f 81       	ldd	r24, Y+7	; 0x07
    3dd8:	98 85       	ldd	r25, Y+8	; 0x08
    3dda:	01 97       	sbiw	r24, 0x01	; 1
    3ddc:	09 f0       	breq	.+2      	; 0x3de0 <main+0x61a>
    3dde:	4f c0       	rjmp	.+158    	; 0x3e7e <main+0x6b8>
			{
				ADC_Change = 0;
    3de0:	18 86       	std	Y+8, r1	; 0x08
    3de2:	1f 82       	std	Y+7, r1	; 0x07
				if(LeftDialADCScaled > LeftDialADCOld){
    3de4:	2d a1       	ldd	r18, Y+37	; 0x25
    3de6:	3e a1       	ldd	r19, Y+38	; 0x26
    3de8:	89 85       	ldd	r24, Y+9	; 0x09
    3dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dec:	82 17       	cp	r24, r18
    3dee:	93 07       	cpc	r25, r19
    3df0:	d0 f4       	brcc	.+52     	; 0x3e26 <main+0x660>
					Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x0F, 0xF0);
    3df2:	ce 01       	movw	r24, r28
    3df4:	8c 54       	subi	r24, 0x4C	; 76
    3df6:	9f 4f       	sbci	r25, 0xFF	; 255
    3df8:	0f 2e       	mov	r0, r31
    3dfa:	f0 ef       	ldi	r31, 0xF0	; 240
    3dfc:	af 2e       	mov	r10, r31
    3dfe:	b1 2c       	mov	r11, r1
    3e00:	f0 2d       	mov	r31, r0
    3e02:	0f 2e       	mov	r0, r31
    3e04:	ff e0       	ldi	r31, 0x0F	; 15
    3e06:	cf 2e       	mov	r12, r31
    3e08:	d1 2c       	mov	r13, r1
    3e0a:	f0 2d       	mov	r31, r0
    3e0c:	ee 24       	eor	r14, r14
    3e0e:	e3 94       	inc	r14
    3e10:	f1 2c       	mov	r15, r1
    3e12:	0f e7       	ldi	r16, 0x7F	; 127
    3e14:	10 e0       	ldi	r17, 0x00	; 0
    3e16:	21 e1       	ldi	r18, 0x11	; 17
    3e18:	30 e0       	ldi	r19, 0x00	; 0
    3e1a:	40 e6       	ldi	r20, 0x60	; 96
    3e1c:	50 e0       	ldi	r21, 0x00	; 0
    3e1e:	6a e3       	ldi	r22, 0x3A	; 58
    3e20:	70 e0       	ldi	r23, 0x00	; 0
    3e22:	0e 94 a5 22 	call	0x454a	; 0x454a <Show_Bigger_String>
				}
				if(LeftDialADCScaled < LeftDialADCOld){
    3e26:	2d a1       	ldd	r18, Y+37	; 0x25
    3e28:	3e a1       	ldd	r19, Y+38	; 0x26
    3e2a:	89 85       	ldd	r24, Y+9	; 0x09
    3e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e2e:	28 17       	cp	r18, r24
    3e30:	39 07       	cpc	r19, r25
    3e32:	d0 f4       	brcc	.+52     	; 0x3e68 <main+0x6a2>
					Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x0F, 0xF0);
    3e34:	ce 01       	movw	r24, r28
    3e36:	8d 54       	subi	r24, 0x4D	; 77
    3e38:	9f 4f       	sbci	r25, 0xFF	; 255
    3e3a:	0f 2e       	mov	r0, r31
    3e3c:	f0 ef       	ldi	r31, 0xF0	; 240
    3e3e:	af 2e       	mov	r10, r31
    3e40:	b1 2c       	mov	r11, r1
    3e42:	f0 2d       	mov	r31, r0
    3e44:	0f 2e       	mov	r0, r31
    3e46:	ff e0       	ldi	r31, 0x0F	; 15
    3e48:	cf 2e       	mov	r12, r31
    3e4a:	d1 2c       	mov	r13, r1
    3e4c:	f0 2d       	mov	r31, r0
    3e4e:	ee 24       	eor	r14, r14
    3e50:	e3 94       	inc	r14
    3e52:	f1 2c       	mov	r15, r1
    3e54:	0f e7       	ldi	r16, 0x7F	; 127
    3e56:	10 e0       	ldi	r17, 0x00	; 0
    3e58:	21 e1       	ldi	r18, 0x11	; 17
    3e5a:	30 e0       	ldi	r19, 0x00	; 0
    3e5c:	45 e1       	ldi	r20, 0x15	; 21
    3e5e:	50 e0       	ldi	r21, 0x00	; 0
    3e60:	60 e0       	ldi	r22, 0x00	; 0
    3e62:	70 e0       	ldi	r23, 0x00	; 0
    3e64:	0e 94 a5 22 	call	0x454a	; 0x454a <Show_Bigger_String>
				}
				LeftDialADCOld = LeftDialADCScaled;
    3e68:	8d a1       	ldd	r24, Y+37	; 0x25
    3e6a:	9e a1       	ldd	r25, Y+38	; 0x26
    3e6c:	9a 87       	std	Y+10, r25	; 0x0a
    3e6e:	89 87       	std	Y+9, r24	; 0x09
				Delay(500);
    3e70:	84 ef       	ldi	r24, 0xF4	; 244
    3e72:	91 e0       	ldi	r25, 0x01	; 1
    3e74:	0e 94 db 13 	call	0x27b6	; 0x27b6 <Delay>
				Fill_RAM(0x00);
    3e78:	80 e0       	ldi	r24, 0x00	; 0
    3e7a:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <Fill_RAM>
			}
			
			// If RPM is greater than 100 (or 1000), when the throttle goes down, a trailing 0 will be left
			// This needs to be cleared
			if(RPMData < 99){ RPMGreaterThan100 = 1; }
    3e7e:	80 91 28 10 	lds	r24, 0x1028	; 0x801028 <RPMData>
    3e82:	90 91 29 10 	lds	r25, 0x1029	; 0x801029 <RPMData+0x1>
    3e86:	a0 91 2a 10 	lds	r26, 0x102A	; 0x80102a <RPMData+0x2>
    3e8a:	b0 91 2b 10 	lds	r27, 0x102B	; 0x80102b <RPMData+0x3>
    3e8e:	83 36       	cpi	r24, 0x63	; 99
    3e90:	91 05       	cpc	r25, r1
    3e92:	a1 05       	cpc	r26, r1
    3e94:	b1 05       	cpc	r27, r1
    3e96:	20 f4       	brcc	.+8      	; 0x3ea0 <main+0x6da>
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	9e 83       	std	Y+6, r25	; 0x06
    3e9e:	8d 83       	std	Y+5, r24	; 0x05
			if(RPMData < 999){ RPMGreaterThan100 = 1; }
    3ea0:	80 91 28 10 	lds	r24, 0x1028	; 0x801028 <RPMData>
    3ea4:	90 91 29 10 	lds	r25, 0x1029	; 0x801029 <RPMData+0x1>
    3ea8:	a0 91 2a 10 	lds	r26, 0x102A	; 0x80102a <RPMData+0x2>
    3eac:	b0 91 2b 10 	lds	r27, 0x102B	; 0x80102b <RPMData+0x3>
    3eb0:	87 3e       	cpi	r24, 0xE7	; 231
    3eb2:	93 40       	sbci	r25, 0x03	; 3
    3eb4:	a1 05       	cpc	r26, r1
    3eb6:	b1 05       	cpc	r27, r1
    3eb8:	20 f4       	brcc	.+8      	; 0x3ec2 <main+0x6fc>
    3eba:	81 e0       	ldi	r24, 0x01	; 1
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	9e 83       	std	Y+6, r25	; 0x06
    3ec0:	8d 83       	std	Y+5, r24	; 0x05
			if(RPMGreaterThan100 == 1){
    3ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec6:	01 97       	sbiw	r24, 0x01	; 1
    3ec8:	11 f4       	brne	.+4      	; 0x3ece <main+0x708>
				//Show_String(1,&BlankNumber,0x28,0x15);
				RPMGreaterThan100 = 0;
    3eca:	1e 82       	std	Y+6, r1	; 0x06
    3ecc:	1d 82       	std	Y+5, r1	; 0x05
			}
			itoa(RPMData,TempBuffer,10);
    3ece:	80 91 28 10 	lds	r24, 0x1028	; 0x801028 <RPMData>
    3ed2:	90 91 29 10 	lds	r25, 0x1029	; 0x801029 <RPMData+0x1>
    3ed6:	a0 91 2a 10 	lds	r26, 0x102A	; 0x80102a <RPMData+0x2>
    3eda:	b0 91 2b 10 	lds	r27, 0x102B	; 0x80102b <RPMData+0x3>
    3ede:	9c 01       	movw	r18, r24
    3ee0:	ce 01       	movw	r24, r28
    3ee2:	8b 54       	subi	r24, 0x4B	; 75
    3ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ee6:	4a e0       	ldi	r20, 0x0A	; 10
    3ee8:	50 e0       	ldi	r21, 0x00	; 0
    3eea:	bc 01       	movw	r22, r24
    3eec:	c9 01       	movw	r24, r18
    3eee:	0e 94 a4 29 	call	0x5348	; 0x5348 <itoa>
			digitLength = (RPMData == 0 ? 1 : (int)(log10(RPMData)+1));
    3ef2:	80 91 28 10 	lds	r24, 0x1028	; 0x801028 <RPMData>
    3ef6:	90 91 29 10 	lds	r25, 0x1029	; 0x801029 <RPMData+0x1>
    3efa:	a0 91 2a 10 	lds	r26, 0x102A	; 0x80102a <RPMData+0x2>
    3efe:	b0 91 2b 10 	lds	r27, 0x102B	; 0x80102b <RPMData+0x3>
    3f02:	89 2b       	or	r24, r25
    3f04:	8a 2b       	or	r24, r26
    3f06:	8b 2b       	or	r24, r27
    3f08:	29 f1       	breq	.+74     	; 0x3f54 <main+0x78e>
    3f0a:	80 91 28 10 	lds	r24, 0x1028	; 0x801028 <RPMData>
    3f0e:	90 91 29 10 	lds	r25, 0x1029	; 0x801029 <RPMData+0x1>
    3f12:	a0 91 2a 10 	lds	r26, 0x102A	; 0x80102a <RPMData+0x2>
    3f16:	b0 91 2b 10 	lds	r27, 0x102B	; 0x80102b <RPMData+0x3>
    3f1a:	bc 01       	movw	r22, r24
    3f1c:	cd 01       	movw	r24, r26
    3f1e:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <__floatunsisf>
    3f22:	dc 01       	movw	r26, r24
    3f24:	cb 01       	movw	r24, r22
    3f26:	bc 01       	movw	r22, r24
    3f28:	cd 01       	movw	r24, r26
    3f2a:	0e 94 46 28 	call	0x508c	; 0x508c <log10>
    3f2e:	dc 01       	movw	r26, r24
    3f30:	cb 01       	movw	r24, r22
    3f32:	20 e0       	ldi	r18, 0x00	; 0
    3f34:	30 e0       	ldi	r19, 0x00	; 0
    3f36:	40 e8       	ldi	r20, 0x80	; 128
    3f38:	5f e3       	ldi	r21, 0x3F	; 63
    3f3a:	bc 01       	movw	r22, r24
    3f3c:	cd 01       	movw	r24, r26
    3f3e:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__addsf3>
    3f42:	dc 01       	movw	r26, r24
    3f44:	cb 01       	movw	r24, r22
    3f46:	bc 01       	movw	r22, r24
    3f48:	cd 01       	movw	r24, r26
    3f4a:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <__fixsfsi>
    3f4e:	dc 01       	movw	r26, r24
    3f50:	cb 01       	movw	r24, r22
    3f52:	02 c0       	rjmp	.+4      	; 0x3f58 <main+0x792>
    3f54:	81 e0       	ldi	r24, 0x01	; 1
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	9c 8f       	std	Y+28, r25	; 0x1c
    3f5a:	8b 8f       	std	Y+27, r24	; 0x1b
			Show_String(1,TempBuffer,0x28,0x05);
    3f5c:	ce 01       	movw	r24, r28
    3f5e:	8b 54       	subi	r24, 0x4B	; 75
    3f60:	9f 4f       	sbci	r25, 0xFF	; 255
    3f62:	25 e0       	ldi	r18, 0x05	; 5
    3f64:	48 e2       	ldi	r20, 0x28	; 40
    3f66:	bc 01       	movw	r22, r24
    3f68:	81 e0       	ldi	r24, 0x01	; 1
    3f6a:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <Show_String>
			Show_Big_String(&RPM,0x05,0x64,0x16,0x7F, 5, 0x0F, 0xF0);
    3f6e:	ce 01       	movw	r24, r28
    3f70:	81 57       	subi	r24, 0x71	; 113
    3f72:	9f 4f       	sbci	r25, 0xFF	; 255
    3f74:	0f 2e       	mov	r0, r31
    3f76:	f0 ef       	ldi	r31, 0xF0	; 240
    3f78:	af 2e       	mov	r10, r31
    3f7a:	b1 2c       	mov	r11, r1
    3f7c:	f0 2d       	mov	r31, r0
    3f7e:	0f 2e       	mov	r0, r31
    3f80:	ff e0       	ldi	r31, 0x0F	; 15
    3f82:	cf 2e       	mov	r12, r31
    3f84:	d1 2c       	mov	r13, r1
    3f86:	f0 2d       	mov	r31, r0
    3f88:	0f 2e       	mov	r0, r31
    3f8a:	f5 e0       	ldi	r31, 0x05	; 5
    3f8c:	ef 2e       	mov	r14, r31
    3f8e:	f1 2c       	mov	r15, r1
    3f90:	f0 2d       	mov	r31, r0
    3f92:	0f e7       	ldi	r16, 0x7F	; 127
    3f94:	10 e0       	ldi	r17, 0x00	; 0
    3f96:	26 e1       	ldi	r18, 0x16	; 22
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	44 e6       	ldi	r20, 0x64	; 100
    3f9c:	50 e0       	ldi	r21, 0x00	; 0
    3f9e:	65 e0       	ldi	r22, 0x05	; 5
    3fa0:	70 e0       	ldi	r23, 0x00	; 0
    3fa2:	0e 94 0b 23 	call	0x4616	; 0x4616 <Show_Big_String>
			Show_Big_String(&TempBuffer,0x2D,0x64,0x16,0x7F, digitLength, 0x0F, 0xF0);
    3fa6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3fa8:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3faa:	ce 01       	movw	r24, r28
    3fac:	8b 54       	subi	r24, 0x4B	; 75
    3fae:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb0:	0f 2e       	mov	r0, r31
    3fb2:	f0 ef       	ldi	r31, 0xF0	; 240
    3fb4:	af 2e       	mov	r10, r31
    3fb6:	b1 2c       	mov	r11, r1
    3fb8:	f0 2d       	mov	r31, r0
    3fba:	0f 2e       	mov	r0, r31
    3fbc:	ff e0       	ldi	r31, 0x0F	; 15
    3fbe:	cf 2e       	mov	r12, r31
    3fc0:	d1 2c       	mov	r13, r1
    3fc2:	f0 2d       	mov	r31, r0
    3fc4:	79 01       	movw	r14, r18
    3fc6:	0f e7       	ldi	r16, 0x7F	; 127
    3fc8:	10 e0       	ldi	r17, 0x00	; 0
    3fca:	26 e1       	ldi	r18, 0x16	; 22
    3fcc:	30 e0       	ldi	r19, 0x00	; 0
    3fce:	44 e6       	ldi	r20, 0x64	; 100
    3fd0:	50 e0       	ldi	r21, 0x00	; 0
    3fd2:	6d e2       	ldi	r22, 0x2D	; 45
    3fd4:	70 e0       	ldi	r23, 0x00	; 0
    3fd6:	0e 94 0b 23 	call	0x4616	; 0x4616 <Show_Big_String>
			Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x04, 0x40);
    3fda:	ce 01       	movw	r24, r28
    3fdc:	8d 54       	subi	r24, 0x4D	; 77
    3fde:	9f 4f       	sbci	r25, 0xFF	; 255
    3fe0:	68 94       	set
    3fe2:	aa 24       	eor	r10, r10
    3fe4:	a6 f8       	bld	r10, 6
    3fe6:	b1 2c       	mov	r11, r1
    3fe8:	68 94       	set
    3fea:	cc 24       	eor	r12, r12
    3fec:	c2 f8       	bld	r12, 2
    3fee:	d1 2c       	mov	r13, r1
    3ff0:	ee 24       	eor	r14, r14
    3ff2:	e3 94       	inc	r14
    3ff4:	f1 2c       	mov	r15, r1
    3ff6:	0f e7       	ldi	r16, 0x7F	; 127
    3ff8:	10 e0       	ldi	r17, 0x00	; 0
    3ffa:	21 e1       	ldi	r18, 0x11	; 17
    3ffc:	30 e0       	ldi	r19, 0x00	; 0
    3ffe:	45 e1       	ldi	r20, 0x15	; 21
    4000:	50 e0       	ldi	r21, 0x00	; 0
    4002:	60 e0       	ldi	r22, 0x00	; 0
    4004:	70 e0       	ldi	r23, 0x00	; 0
    4006:	0e 94 a5 22 	call	0x454a	; 0x454a <Show_Bigger_String>
			Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x04, 0x40);
    400a:	ce 01       	movw	r24, r28
    400c:	8c 54       	subi	r24, 0x4C	; 76
    400e:	9f 4f       	sbci	r25, 0xFF	; 255
    4010:	68 94       	set
    4012:	aa 24       	eor	r10, r10
    4014:	a6 f8       	bld	r10, 6
    4016:	b1 2c       	mov	r11, r1
    4018:	68 94       	set
    401a:	cc 24       	eor	r12, r12
    401c:	c2 f8       	bld	r12, 2
    401e:	d1 2c       	mov	r13, r1
    4020:	ee 24       	eor	r14, r14
    4022:	e3 94       	inc	r14
    4024:	f1 2c       	mov	r15, r1
    4026:	0f e7       	ldi	r16, 0x7F	; 127
    4028:	10 e0       	ldi	r17, 0x00	; 0
    402a:	21 e1       	ldi	r18, 0x11	; 17
    402c:	30 e0       	ldi	r19, 0x00	; 0
    402e:	40 e6       	ldi	r20, 0x60	; 96
    4030:	50 e0       	ldi	r21, 0x00	; 0
    4032:	6a e3       	ldi	r22, 0x3A	; 58
    4034:	70 e0       	ldi	r23, 0x00	; 0
    4036:	0e 94 a5 22 	call	0x454a	; 0x454a <Show_Bigger_String>
		}
		
		if(LeftDialADCScaled == 5)
    403a:	8d a1       	ldd	r24, Y+37	; 0x25
    403c:	9e a1       	ldd	r25, Y+38	; 0x26
    403e:	05 97       	sbiw	r24, 0x05	; 5
    4040:	09 f0       	breq	.+2      	; 0x4044 <main+0x87e>
    4042:	0a c1       	rjmp	.+532    	; 0x4258 <main+0xa92>
		{
			if(ADC_Change == 1)
    4044:	8f 81       	ldd	r24, Y+7	; 0x07
    4046:	98 85       	ldd	r25, Y+8	; 0x08
    4048:	01 97       	sbiw	r24, 0x01	; 1
    404a:	09 f0       	breq	.+2      	; 0x404e <main+0x888>
    404c:	4f c0       	rjmp	.+158    	; 0x40ec <main+0x926>
			{
				ADC_Change = 0;
    404e:	18 86       	std	Y+8, r1	; 0x08
    4050:	1f 82       	std	Y+7, r1	; 0x07
				if(LeftDialADCScaled > LeftDialADCOld){
    4052:	2d a1       	ldd	r18, Y+37	; 0x25
    4054:	3e a1       	ldd	r19, Y+38	; 0x26
    4056:	89 85       	ldd	r24, Y+9	; 0x09
    4058:	9a 85       	ldd	r25, Y+10	; 0x0a
    405a:	82 17       	cp	r24, r18
    405c:	93 07       	cpc	r25, r19
    405e:	d0 f4       	brcc	.+52     	; 0x4094 <main+0x8ce>
					Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x0F, 0xF0);
    4060:	ce 01       	movw	r24, r28
    4062:	8c 54       	subi	r24, 0x4C	; 76
    4064:	9f 4f       	sbci	r25, 0xFF	; 255
    4066:	0f 2e       	mov	r0, r31
    4068:	f0 ef       	ldi	r31, 0xF0	; 240
    406a:	af 2e       	mov	r10, r31
    406c:	b1 2c       	mov	r11, r1
    406e:	f0 2d       	mov	r31, r0
    4070:	0f 2e       	mov	r0, r31
    4072:	ff e0       	ldi	r31, 0x0F	; 15
    4074:	cf 2e       	mov	r12, r31
    4076:	d1 2c       	mov	r13, r1
    4078:	f0 2d       	mov	r31, r0
    407a:	ee 24       	eor	r14, r14
    407c:	e3 94       	inc	r14
    407e:	f1 2c       	mov	r15, r1
    4080:	0f e7       	ldi	r16, 0x7F	; 127
    4082:	10 e0       	ldi	r17, 0x00	; 0
    4084:	21 e1       	ldi	r18, 0x11	; 17
    4086:	30 e0       	ldi	r19, 0x00	; 0
    4088:	40 e6       	ldi	r20, 0x60	; 96
    408a:	50 e0       	ldi	r21, 0x00	; 0
    408c:	6a e3       	ldi	r22, 0x3A	; 58
    408e:	70 e0       	ldi	r23, 0x00	; 0
    4090:	0e 94 a5 22 	call	0x454a	; 0x454a <Show_Bigger_String>
				}
				if(LeftDialADCScaled < LeftDialADCOld){
    4094:	2d a1       	ldd	r18, Y+37	; 0x25
    4096:	3e a1       	ldd	r19, Y+38	; 0x26
    4098:	89 85       	ldd	r24, Y+9	; 0x09
    409a:	9a 85       	ldd	r25, Y+10	; 0x0a
    409c:	28 17       	cp	r18, r24
    409e:	39 07       	cpc	r19, r25
    40a0:	d0 f4       	brcc	.+52     	; 0x40d6 <main+0x910>
					Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x0F, 0xF0);
    40a2:	ce 01       	movw	r24, r28
    40a4:	8d 54       	subi	r24, 0x4D	; 77
    40a6:	9f 4f       	sbci	r25, 0xFF	; 255
    40a8:	0f 2e       	mov	r0, r31
    40aa:	f0 ef       	ldi	r31, 0xF0	; 240
    40ac:	af 2e       	mov	r10, r31
    40ae:	b1 2c       	mov	r11, r1
    40b0:	f0 2d       	mov	r31, r0
    40b2:	0f 2e       	mov	r0, r31
    40b4:	ff e0       	ldi	r31, 0x0F	; 15
    40b6:	cf 2e       	mov	r12, r31
    40b8:	d1 2c       	mov	r13, r1
    40ba:	f0 2d       	mov	r31, r0
    40bc:	ee 24       	eor	r14, r14
    40be:	e3 94       	inc	r14
    40c0:	f1 2c       	mov	r15, r1
    40c2:	0f e7       	ldi	r16, 0x7F	; 127
    40c4:	10 e0       	ldi	r17, 0x00	; 0
    40c6:	21 e1       	ldi	r18, 0x11	; 17
    40c8:	30 e0       	ldi	r19, 0x00	; 0
    40ca:	45 e1       	ldi	r20, 0x15	; 21
    40cc:	50 e0       	ldi	r21, 0x00	; 0
    40ce:	60 e0       	ldi	r22, 0x00	; 0
    40d0:	70 e0       	ldi	r23, 0x00	; 0
    40d2:	0e 94 a5 22 	call	0x454a	; 0x454a <Show_Bigger_String>
				}
				LeftDialADCOld = LeftDialADCScaled;
    40d6:	8d a1       	ldd	r24, Y+37	; 0x25
    40d8:	9e a1       	ldd	r25, Y+38	; 0x26
    40da:	9a 87       	std	Y+10, r25	; 0x0a
    40dc:	89 87       	std	Y+9, r24	; 0x09
				Delay(500);
    40de:	84 ef       	ldi	r24, 0xF4	; 244
    40e0:	91 e0       	ldi	r25, 0x01	; 1
    40e2:	0e 94 db 13 	call	0x27b6	; 0x27b6 <Delay>
				Fill_RAM(0x00);
    40e6:	80 e0       	ldi	r24, 0x00	; 0
    40e8:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <Fill_RAM>
			}
			
			itoa(GearboxTempData,TempBuffer,10);
    40ec:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <GearboxTempData>
    40f0:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <GearboxTempData+0x1>
    40f4:	a0 91 2e 10 	lds	r26, 0x102E	; 0x80102e <GearboxTempData+0x2>
    40f8:	b0 91 2f 10 	lds	r27, 0x102F	; 0x80102f <GearboxTempData+0x3>
    40fc:	9c 01       	movw	r18, r24
    40fe:	ce 01       	movw	r24, r28
    4100:	8b 54       	subi	r24, 0x4B	; 75
    4102:	9f 4f       	sbci	r25, 0xFF	; 255
    4104:	4a e0       	ldi	r20, 0x0A	; 10
    4106:	50 e0       	ldi	r21, 0x00	; 0
    4108:	bc 01       	movw	r22, r24
    410a:	c9 01       	movw	r24, r18
    410c:	0e 94 a4 29 	call	0x5348	; 0x5348 <itoa>
			digitLength = (GearboxTempData == 0 ? 1 : (int)(log10(GearboxTempData)+1));
    4110:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <GearboxTempData>
    4114:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <GearboxTempData+0x1>
    4118:	a0 91 2e 10 	lds	r26, 0x102E	; 0x80102e <GearboxTempData+0x2>
    411c:	b0 91 2f 10 	lds	r27, 0x102F	; 0x80102f <GearboxTempData+0x3>
    4120:	89 2b       	or	r24, r25
    4122:	8a 2b       	or	r24, r26
    4124:	8b 2b       	or	r24, r27
    4126:	29 f1       	breq	.+74     	; 0x4172 <main+0x9ac>
    4128:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <GearboxTempData>
    412c:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <GearboxTempData+0x1>
    4130:	a0 91 2e 10 	lds	r26, 0x102E	; 0x80102e <GearboxTempData+0x2>
    4134:	b0 91 2f 10 	lds	r27, 0x102F	; 0x80102f <GearboxTempData+0x3>
    4138:	bc 01       	movw	r22, r24
    413a:	cd 01       	movw	r24, r26
    413c:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <__floatunsisf>
    4140:	dc 01       	movw	r26, r24
    4142:	cb 01       	movw	r24, r22
    4144:	bc 01       	movw	r22, r24
    4146:	cd 01       	movw	r24, r26
    4148:	0e 94 46 28 	call	0x508c	; 0x508c <log10>
    414c:	dc 01       	movw	r26, r24
    414e:	cb 01       	movw	r24, r22
    4150:	20 e0       	ldi	r18, 0x00	; 0
    4152:	30 e0       	ldi	r19, 0x00	; 0
    4154:	40 e8       	ldi	r20, 0x80	; 128
    4156:	5f e3       	ldi	r21, 0x3F	; 63
    4158:	bc 01       	movw	r22, r24
    415a:	cd 01       	movw	r24, r26
    415c:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__addsf3>
    4160:	dc 01       	movw	r26, r24
    4162:	cb 01       	movw	r24, r22
    4164:	bc 01       	movw	r22, r24
    4166:	cd 01       	movw	r24, r26
    4168:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <__fixsfsi>
    416c:	dc 01       	movw	r26, r24
    416e:	cb 01       	movw	r24, r22
    4170:	02 c0       	rjmp	.+4      	; 0x4176 <main+0x9b0>
    4172:	81 e0       	ldi	r24, 0x01	; 1
    4174:	90 e0       	ldi	r25, 0x00	; 0
    4176:	9c 8f       	std	Y+28, r25	; 0x1c
    4178:	8b 8f       	std	Y+27, r24	; 0x1b
			Show_String(1,TempBuffer,0x28,0x05);
    417a:	ce 01       	movw	r24, r28
    417c:	8b 54       	subi	r24, 0x4B	; 75
    417e:	9f 4f       	sbci	r25, 0xFF	; 255
    4180:	25 e0       	ldi	r18, 0x05	; 5
    4182:	48 e2       	ldi	r20, 0x28	; 40
    4184:	bc 01       	movw	r22, r24
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <Show_String>
			Show_Big_String(&GearboxTemp,0x05,0x64,0x16,0x7F, 14, 0x0F, 0xF0);
    418c:	ce 01       	movw	r24, r28
    418e:	8c 56       	subi	r24, 0x6C	; 108
    4190:	9f 4f       	sbci	r25, 0xFF	; 255
    4192:	0f 2e       	mov	r0, r31
    4194:	f0 ef       	ldi	r31, 0xF0	; 240
    4196:	af 2e       	mov	r10, r31
    4198:	b1 2c       	mov	r11, r1
    419a:	f0 2d       	mov	r31, r0
    419c:	0f 2e       	mov	r0, r31
    419e:	ff e0       	ldi	r31, 0x0F	; 15
    41a0:	cf 2e       	mov	r12, r31
    41a2:	d1 2c       	mov	r13, r1
    41a4:	f0 2d       	mov	r31, r0
    41a6:	0f 2e       	mov	r0, r31
    41a8:	fe e0       	ldi	r31, 0x0E	; 14
    41aa:	ef 2e       	mov	r14, r31
    41ac:	f1 2c       	mov	r15, r1
    41ae:	f0 2d       	mov	r31, r0
    41b0:	0f e7       	ldi	r16, 0x7F	; 127
    41b2:	10 e0       	ldi	r17, 0x00	; 0
    41b4:	26 e1       	ldi	r18, 0x16	; 22
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	44 e6       	ldi	r20, 0x64	; 100
    41ba:	50 e0       	ldi	r21, 0x00	; 0
    41bc:	65 e0       	ldi	r22, 0x05	; 5
    41be:	70 e0       	ldi	r23, 0x00	; 0
    41c0:	0e 94 0b 23 	call	0x4616	; 0x4616 <Show_Big_String>
			Show_Big_String(&TempBuffer,0x30,0x64,0x16,0x7F, digitLength, 0x0F, 0xF0);
    41c4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    41c6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    41c8:	ce 01       	movw	r24, r28
    41ca:	8b 54       	subi	r24, 0x4B	; 75
    41cc:	9f 4f       	sbci	r25, 0xFF	; 255
    41ce:	0f 2e       	mov	r0, r31
    41d0:	f0 ef       	ldi	r31, 0xF0	; 240
    41d2:	af 2e       	mov	r10, r31
    41d4:	b1 2c       	mov	r11, r1
    41d6:	f0 2d       	mov	r31, r0
    41d8:	0f 2e       	mov	r0, r31
    41da:	ff e0       	ldi	r31, 0x0F	; 15
    41dc:	cf 2e       	mov	r12, r31
    41de:	d1 2c       	mov	r13, r1
    41e0:	f0 2d       	mov	r31, r0
    41e2:	79 01       	movw	r14, r18
    41e4:	0f e7       	ldi	r16, 0x7F	; 127
    41e6:	10 e0       	ldi	r17, 0x00	; 0
    41e8:	26 e1       	ldi	r18, 0x16	; 22
    41ea:	30 e0       	ldi	r19, 0x00	; 0
    41ec:	44 e6       	ldi	r20, 0x64	; 100
    41ee:	50 e0       	ldi	r21, 0x00	; 0
    41f0:	60 e3       	ldi	r22, 0x30	; 48
    41f2:	70 e0       	ldi	r23, 0x00	; 0
    41f4:	0e 94 0b 23 	call	0x4616	; 0x4616 <Show_Big_String>
			Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x04, 0x40);
    41f8:	ce 01       	movw	r24, r28
    41fa:	8d 54       	subi	r24, 0x4D	; 77
    41fc:	9f 4f       	sbci	r25, 0xFF	; 255
    41fe:	68 94       	set
    4200:	aa 24       	eor	r10, r10
    4202:	a6 f8       	bld	r10, 6
    4204:	b1 2c       	mov	r11, r1
    4206:	68 94       	set
    4208:	cc 24       	eor	r12, r12
    420a:	c2 f8       	bld	r12, 2
    420c:	d1 2c       	mov	r13, r1
    420e:	ee 24       	eor	r14, r14
    4210:	e3 94       	inc	r14
    4212:	f1 2c       	mov	r15, r1
    4214:	0f e7       	ldi	r16, 0x7F	; 127
    4216:	10 e0       	ldi	r17, 0x00	; 0
    4218:	21 e1       	ldi	r18, 0x11	; 17
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	45 e1       	ldi	r20, 0x15	; 21
    421e:	50 e0       	ldi	r21, 0x00	; 0
    4220:	60 e0       	ldi	r22, 0x00	; 0
    4222:	70 e0       	ldi	r23, 0x00	; 0
    4224:	0e 94 a5 22 	call	0x454a	; 0x454a <Show_Bigger_String>
			Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x04, 0x40);
    4228:	ce 01       	movw	r24, r28
    422a:	8c 54       	subi	r24, 0x4C	; 76
    422c:	9f 4f       	sbci	r25, 0xFF	; 255
    422e:	68 94       	set
    4230:	aa 24       	eor	r10, r10
    4232:	a6 f8       	bld	r10, 6
    4234:	b1 2c       	mov	r11, r1
    4236:	68 94       	set
    4238:	cc 24       	eor	r12, r12
    423a:	c2 f8       	bld	r12, 2
    423c:	d1 2c       	mov	r13, r1
    423e:	ee 24       	eor	r14, r14
    4240:	e3 94       	inc	r14
    4242:	f1 2c       	mov	r15, r1
    4244:	0f e7       	ldi	r16, 0x7F	; 127
    4246:	10 e0       	ldi	r17, 0x00	; 0
    4248:	21 e1       	ldi	r18, 0x11	; 17
    424a:	30 e0       	ldi	r19, 0x00	; 0
    424c:	40 e6       	ldi	r20, 0x60	; 96
    424e:	50 e0       	ldi	r21, 0x00	; 0
    4250:	6a e3       	ldi	r22, 0x3A	; 58
    4252:	70 e0       	ldi	r23, 0x00	; 0
    4254:	0e 94 a5 22 	call	0x454a	; 0x454a <Show_Bigger_String>
		}
		
		if(LeftDialADCScaled == 6)
    4258:	8d a1       	ldd	r24, Y+37	; 0x25
    425a:	9e a1       	ldd	r25, Y+38	; 0x26
    425c:	06 97       	sbiw	r24, 0x06	; 6
    425e:	09 f0       	breq	.+2      	; 0x4262 <main+0xa9c>
    4260:	02 c1       	rjmp	.+516    	; 0x4466 <main+0xca0>
		{
			if(ADC_Change == 1)
    4262:	8f 81       	ldd	r24, Y+7	; 0x07
    4264:	98 85       	ldd	r25, Y+8	; 0x08
    4266:	01 97       	sbiw	r24, 0x01	; 1
    4268:	09 f0       	breq	.+2      	; 0x426c <main+0xaa6>
    426a:	4f c0       	rjmp	.+158    	; 0x430a <main+0xb44>
			{
				ADC_Change = 0;
    426c:	18 86       	std	Y+8, r1	; 0x08
    426e:	1f 82       	std	Y+7, r1	; 0x07
				if(LeftDialADCScaled > LeftDialADCOld){
    4270:	2d a1       	ldd	r18, Y+37	; 0x25
    4272:	3e a1       	ldd	r19, Y+38	; 0x26
    4274:	89 85       	ldd	r24, Y+9	; 0x09
    4276:	9a 85       	ldd	r25, Y+10	; 0x0a
    4278:	82 17       	cp	r24, r18
    427a:	93 07       	cpc	r25, r19
    427c:	d0 f4       	brcc	.+52     	; 0x42b2 <main+0xaec>
					Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x0F, 0xF0);
    427e:	ce 01       	movw	r24, r28
    4280:	8c 54       	subi	r24, 0x4C	; 76
    4282:	9f 4f       	sbci	r25, 0xFF	; 255
    4284:	0f 2e       	mov	r0, r31
    4286:	f0 ef       	ldi	r31, 0xF0	; 240
    4288:	af 2e       	mov	r10, r31
    428a:	b1 2c       	mov	r11, r1
    428c:	f0 2d       	mov	r31, r0
    428e:	0f 2e       	mov	r0, r31
    4290:	ff e0       	ldi	r31, 0x0F	; 15
    4292:	cf 2e       	mov	r12, r31
    4294:	d1 2c       	mov	r13, r1
    4296:	f0 2d       	mov	r31, r0
    4298:	ee 24       	eor	r14, r14
    429a:	e3 94       	inc	r14
    429c:	f1 2c       	mov	r15, r1
    429e:	0f e7       	ldi	r16, 0x7F	; 127
    42a0:	10 e0       	ldi	r17, 0x00	; 0
    42a2:	21 e1       	ldi	r18, 0x11	; 17
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	40 e6       	ldi	r20, 0x60	; 96
    42a8:	50 e0       	ldi	r21, 0x00	; 0
    42aa:	6a e3       	ldi	r22, 0x3A	; 58
    42ac:	70 e0       	ldi	r23, 0x00	; 0
    42ae:	0e 94 a5 22 	call	0x454a	; 0x454a <Show_Bigger_String>
				}
				if(LeftDialADCScaled < LeftDialADCOld){
    42b2:	2d a1       	ldd	r18, Y+37	; 0x25
    42b4:	3e a1       	ldd	r19, Y+38	; 0x26
    42b6:	89 85       	ldd	r24, Y+9	; 0x09
    42b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    42ba:	28 17       	cp	r18, r24
    42bc:	39 07       	cpc	r19, r25
    42be:	d0 f4       	brcc	.+52     	; 0x42f4 <main+0xb2e>
					Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x0F, 0xF0);
    42c0:	ce 01       	movw	r24, r28
    42c2:	8d 54       	subi	r24, 0x4D	; 77
    42c4:	9f 4f       	sbci	r25, 0xFF	; 255
    42c6:	0f 2e       	mov	r0, r31
    42c8:	f0 ef       	ldi	r31, 0xF0	; 240
    42ca:	af 2e       	mov	r10, r31
    42cc:	b1 2c       	mov	r11, r1
    42ce:	f0 2d       	mov	r31, r0
    42d0:	0f 2e       	mov	r0, r31
    42d2:	ff e0       	ldi	r31, 0x0F	; 15
    42d4:	cf 2e       	mov	r12, r31
    42d6:	d1 2c       	mov	r13, r1
    42d8:	f0 2d       	mov	r31, r0
    42da:	ee 24       	eor	r14, r14
    42dc:	e3 94       	inc	r14
    42de:	f1 2c       	mov	r15, r1
    42e0:	0f e7       	ldi	r16, 0x7F	; 127
    42e2:	10 e0       	ldi	r17, 0x00	; 0
    42e4:	21 e1       	ldi	r18, 0x11	; 17
    42e6:	30 e0       	ldi	r19, 0x00	; 0
    42e8:	45 e1       	ldi	r20, 0x15	; 21
    42ea:	50 e0       	ldi	r21, 0x00	; 0
    42ec:	60 e0       	ldi	r22, 0x00	; 0
    42ee:	70 e0       	ldi	r23, 0x00	; 0
    42f0:	0e 94 a5 22 	call	0x454a	; 0x454a <Show_Bigger_String>
				}
				LeftDialADCOld = LeftDialADCScaled;
    42f4:	8d a1       	ldd	r24, Y+37	; 0x25
    42f6:	9e a1       	ldd	r25, Y+38	; 0x26
    42f8:	9a 87       	std	Y+10, r25	; 0x0a
    42fa:	89 87       	std	Y+9, r24	; 0x09
				Delay(500);
    42fc:	84 ef       	ldi	r24, 0xF4	; 244
    42fe:	91 e0       	ldi	r25, 0x01	; 1
    4300:	0e 94 db 13 	call	0x27b6	; 0x27b6 <Delay>
				Fill_RAM(0x00);
    4304:	80 e0       	ldi	r24, 0x00	; 0
    4306:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <Fill_RAM>
			}
			
			itoa(VoltageData/1000, TempBuffer, 10);		//display the average cell voltage in Volts instead of millivolts (find the whole volts in the value)
    430a:	80 91 30 10 	lds	r24, 0x1030	; 0x801030 <VoltageData>
    430e:	90 91 31 10 	lds	r25, 0x1031	; 0x801031 <VoltageData+0x1>
    4312:	a0 91 32 10 	lds	r26, 0x1032	; 0x801032 <VoltageData+0x2>
    4316:	b0 91 33 10 	lds	r27, 0x1033	; 0x801033 <VoltageData+0x3>
    431a:	28 ee       	ldi	r18, 0xE8	; 232
    431c:	33 e0       	ldi	r19, 0x03	; 3
    431e:	40 e0       	ldi	r20, 0x00	; 0
    4320:	50 e0       	ldi	r21, 0x00	; 0
    4322:	bc 01       	movw	r22, r24
    4324:	cd 01       	movw	r24, r26
    4326:	0e 94 68 29 	call	0x52d0	; 0x52d0 <__udivmodsi4>
    432a:	da 01       	movw	r26, r20
    432c:	c9 01       	movw	r24, r18
    432e:	9c 01       	movw	r18, r24
    4330:	ce 01       	movw	r24, r28
    4332:	8b 54       	subi	r24, 0x4B	; 75
    4334:	9f 4f       	sbci	r25, 0xFF	; 255
    4336:	4a e0       	ldi	r20, 0x0A	; 10
    4338:	50 e0       	ldi	r21, 0x00	; 0
    433a:	bc 01       	movw	r22, r24
    433c:	c9 01       	movw	r24, r18
    433e:	0e 94 a4 29 	call	0x5348	; 0x5348 <itoa>
			TempBuffer[1] = '.';						//add the decimal point
    4342:	ce 01       	movw	r24, r28
    4344:	8b 54       	subi	r24, 0x4B	; 75
    4346:	9f 4f       	sbci	r25, 0xFF	; 255
    4348:	2e e2       	ldi	r18, 0x2E	; 46
    434a:	fc 01       	movw	r30, r24
    434c:	21 83       	std	Z+1, r18	; 0x01
			itoa(VoltageData-((VoltageData/1000)*1000), TempBuffer+2, 10);	//add the remaining millivolts
    434e:	8e 01       	movw	r16, r28
    4350:	0b 54       	subi	r16, 0x4B	; 75
    4352:	1f 4f       	sbci	r17, 0xFF	; 255
    4354:	0e 5f       	subi	r16, 0xFE	; 254
    4356:	1f 4f       	sbci	r17, 0xFF	; 255
    4358:	80 91 30 10 	lds	r24, 0x1030	; 0x801030 <VoltageData>
    435c:	90 91 31 10 	lds	r25, 0x1031	; 0x801031 <VoltageData+0x1>
    4360:	a0 91 32 10 	lds	r26, 0x1032	; 0x801032 <VoltageData+0x2>
    4364:	b0 91 33 10 	lds	r27, 0x1033	; 0x801033 <VoltageData+0x3>
    4368:	28 ee       	ldi	r18, 0xE8	; 232
    436a:	33 e0       	ldi	r19, 0x03	; 3
    436c:	40 e0       	ldi	r20, 0x00	; 0
    436e:	50 e0       	ldi	r21, 0x00	; 0
    4370:	bc 01       	movw	r22, r24
    4372:	cd 01       	movw	r24, r26
    4374:	0e 94 68 29 	call	0x52d0	; 0x52d0 <__udivmodsi4>
    4378:	dc 01       	movw	r26, r24
    437a:	cb 01       	movw	r24, r22
    437c:	4a e0       	ldi	r20, 0x0A	; 10
    437e:	50 e0       	ldi	r21, 0x00	; 0
    4380:	b8 01       	movw	r22, r16
    4382:	0e 94 a4 29 	call	0x5348	; 0x5348 <itoa>
			Show_String(1,TempBuffer,0x28,0x05);		//display the result.
    4386:	ce 01       	movw	r24, r28
    4388:	8b 54       	subi	r24, 0x4B	; 75
    438a:	9f 4f       	sbci	r25, 0xFF	; 255
    438c:	25 e0       	ldi	r18, 0x05	; 5
    438e:	48 e2       	ldi	r20, 0x28	; 40
    4390:	bc 01       	movw	r22, r24
    4392:	81 e0       	ldi	r24, 0x01	; 1
    4394:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <Show_String>
			Show_Big_String(&Voltage,0x05,0x64,0x16,0x7F, 9, 0x0F, 0xF0);
    4398:	ce 01       	movw	r24, r28
    439a:	8a 57       	subi	r24, 0x7A	; 122
    439c:	9f 4f       	sbci	r25, 0xFF	; 255
    439e:	0f 2e       	mov	r0, r31
    43a0:	f0 ef       	ldi	r31, 0xF0	; 240
    43a2:	af 2e       	mov	r10, r31
    43a4:	b1 2c       	mov	r11, r1
    43a6:	f0 2d       	mov	r31, r0
    43a8:	0f 2e       	mov	r0, r31
    43aa:	ff e0       	ldi	r31, 0x0F	; 15
    43ac:	cf 2e       	mov	r12, r31
    43ae:	d1 2c       	mov	r13, r1
    43b0:	f0 2d       	mov	r31, r0
    43b2:	0f 2e       	mov	r0, r31
    43b4:	f9 e0       	ldi	r31, 0x09	; 9
    43b6:	ef 2e       	mov	r14, r31
    43b8:	f1 2c       	mov	r15, r1
    43ba:	f0 2d       	mov	r31, r0
    43bc:	0f e7       	ldi	r16, 0x7F	; 127
    43be:	10 e0       	ldi	r17, 0x00	; 0
    43c0:	26 e1       	ldi	r18, 0x16	; 22
    43c2:	30 e0       	ldi	r19, 0x00	; 0
    43c4:	44 e6       	ldi	r20, 0x64	; 100
    43c6:	50 e0       	ldi	r21, 0x00	; 0
    43c8:	65 e0       	ldi	r22, 0x05	; 5
    43ca:	70 e0       	ldi	r23, 0x00	; 0
    43cc:	0e 94 0b 23 	call	0x4616	; 0x4616 <Show_Big_String>
			Show_Big_String(&TempBuffer,0x2D,0x64,0x16,0x7F, 4, 0x0F, 0xF0);
    43d0:	ce 01       	movw	r24, r28
    43d2:	8b 54       	subi	r24, 0x4B	; 75
    43d4:	9f 4f       	sbci	r25, 0xFF	; 255
    43d6:	0f 2e       	mov	r0, r31
    43d8:	f0 ef       	ldi	r31, 0xF0	; 240
    43da:	af 2e       	mov	r10, r31
    43dc:	b1 2c       	mov	r11, r1
    43de:	f0 2d       	mov	r31, r0
    43e0:	0f 2e       	mov	r0, r31
    43e2:	ff e0       	ldi	r31, 0x0F	; 15
    43e4:	cf 2e       	mov	r12, r31
    43e6:	d1 2c       	mov	r13, r1
    43e8:	f0 2d       	mov	r31, r0
    43ea:	68 94       	set
    43ec:	ee 24       	eor	r14, r14
    43ee:	e2 f8       	bld	r14, 2
    43f0:	f1 2c       	mov	r15, r1
    43f2:	0f e7       	ldi	r16, 0x7F	; 127
    43f4:	10 e0       	ldi	r17, 0x00	; 0
    43f6:	26 e1       	ldi	r18, 0x16	; 22
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	44 e6       	ldi	r20, 0x64	; 100
    43fc:	50 e0       	ldi	r21, 0x00	; 0
    43fe:	6d e2       	ldi	r22, 0x2D	; 45
    4400:	70 e0       	ldi	r23, 0x00	; 0
    4402:	0e 94 0b 23 	call	0x4616	; 0x4616 <Show_Big_String>
			Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x04, 0x40);
    4406:	ce 01       	movw	r24, r28
    4408:	8d 54       	subi	r24, 0x4D	; 77
    440a:	9f 4f       	sbci	r25, 0xFF	; 255
    440c:	68 94       	set
    440e:	aa 24       	eor	r10, r10
    4410:	a6 f8       	bld	r10, 6
    4412:	b1 2c       	mov	r11, r1
    4414:	68 94       	set
    4416:	cc 24       	eor	r12, r12
    4418:	c2 f8       	bld	r12, 2
    441a:	d1 2c       	mov	r13, r1
    441c:	ee 24       	eor	r14, r14
    441e:	e3 94       	inc	r14
    4420:	f1 2c       	mov	r15, r1
    4422:	0f e7       	ldi	r16, 0x7F	; 127
    4424:	10 e0       	ldi	r17, 0x00	; 0
    4426:	21 e1       	ldi	r18, 0x11	; 17
    4428:	30 e0       	ldi	r19, 0x00	; 0
    442a:	45 e1       	ldi	r20, 0x15	; 21
    442c:	50 e0       	ldi	r21, 0x00	; 0
    442e:	60 e0       	ldi	r22, 0x00	; 0
    4430:	70 e0       	ldi	r23, 0x00	; 0
    4432:	0e 94 a5 22 	call	0x454a	; 0x454a <Show_Bigger_String>
			Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x04, 0x40);
    4436:	ce 01       	movw	r24, r28
    4438:	8c 54       	subi	r24, 0x4C	; 76
    443a:	9f 4f       	sbci	r25, 0xFF	; 255
    443c:	68 94       	set
    443e:	aa 24       	eor	r10, r10
    4440:	a6 f8       	bld	r10, 6
    4442:	b1 2c       	mov	r11, r1
    4444:	68 94       	set
    4446:	cc 24       	eor	r12, r12
    4448:	c2 f8       	bld	r12, 2
    444a:	d1 2c       	mov	r13, r1
    444c:	ee 24       	eor	r14, r14
    444e:	e3 94       	inc	r14
    4450:	f1 2c       	mov	r15, r1
    4452:	0f e7       	ldi	r16, 0x7F	; 127
    4454:	10 e0       	ldi	r17, 0x00	; 0
    4456:	21 e1       	ldi	r18, 0x11	; 17
    4458:	30 e0       	ldi	r19, 0x00	; 0
    445a:	40 e6       	ldi	r20, 0x60	; 96
    445c:	50 e0       	ldi	r21, 0x00	; 0
    445e:	6a e3       	ldi	r22, 0x3A	; 58
    4460:	70 e0       	ldi	r23, 0x00	; 0
    4462:	0e 94 a5 22 	call	0x454a	; 0x454a <Show_Bigger_String>
		}
		
		if(LeftDialADCScaled > 6)
    4466:	8d a1       	ldd	r24, Y+37	; 0x25
    4468:	9e a1       	ldd	r25, Y+38	; 0x26
    446a:	07 97       	sbiw	r24, 0x07	; 7
    446c:	0c f4       	brge	.+2      	; 0x4470 <main+0xcaa>
    446e:	ee ca       	rjmp	.-2596   	; 0x3a4c <main+0x286>
		{
			if(ADC_Change == 1)
    4470:	8f 81       	ldd	r24, Y+7	; 0x07
    4472:	98 85       	ldd	r25, Y+8	; 0x08
    4474:	01 97       	sbiw	r24, 0x01	; 1
    4476:	09 f0       	breq	.+2      	; 0x447a <main+0xcb4>
    4478:	4f c0       	rjmp	.+158    	; 0x4518 <main+0xd52>
			{
				ADC_Change = 0;
    447a:	18 86       	std	Y+8, r1	; 0x08
    447c:	1f 82       	std	Y+7, r1	; 0x07
				if(LeftDialADCScaled > LeftDialADCOld){
    447e:	2d a1       	ldd	r18, Y+37	; 0x25
    4480:	3e a1       	ldd	r19, Y+38	; 0x26
    4482:	89 85       	ldd	r24, Y+9	; 0x09
    4484:	9a 85       	ldd	r25, Y+10	; 0x0a
    4486:	82 17       	cp	r24, r18
    4488:	93 07       	cpc	r25, r19
    448a:	d0 f4       	brcc	.+52     	; 0x44c0 <main+0xcfa>
					Show_Bigger_String(&RightArrow,0x3A,0x60,0x11,0x7F, 1, 0x0F, 0xF0);
    448c:	ce 01       	movw	r24, r28
    448e:	8c 54       	subi	r24, 0x4C	; 76
    4490:	9f 4f       	sbci	r25, 0xFF	; 255
    4492:	0f 2e       	mov	r0, r31
    4494:	f0 ef       	ldi	r31, 0xF0	; 240
    4496:	af 2e       	mov	r10, r31
    4498:	b1 2c       	mov	r11, r1
    449a:	f0 2d       	mov	r31, r0
    449c:	0f 2e       	mov	r0, r31
    449e:	ff e0       	ldi	r31, 0x0F	; 15
    44a0:	cf 2e       	mov	r12, r31
    44a2:	d1 2c       	mov	r13, r1
    44a4:	f0 2d       	mov	r31, r0
    44a6:	ee 24       	eor	r14, r14
    44a8:	e3 94       	inc	r14
    44aa:	f1 2c       	mov	r15, r1
    44ac:	0f e7       	ldi	r16, 0x7F	; 127
    44ae:	10 e0       	ldi	r17, 0x00	; 0
    44b0:	21 e1       	ldi	r18, 0x11	; 17
    44b2:	30 e0       	ldi	r19, 0x00	; 0
    44b4:	40 e6       	ldi	r20, 0x60	; 96
    44b6:	50 e0       	ldi	r21, 0x00	; 0
    44b8:	6a e3       	ldi	r22, 0x3A	; 58
    44ba:	70 e0       	ldi	r23, 0x00	; 0
    44bc:	0e 94 a5 22 	call	0x454a	; 0x454a <Show_Bigger_String>
				}
				if(LeftDialADCScaled < LeftDialADCOld){
    44c0:	2d a1       	ldd	r18, Y+37	; 0x25
    44c2:	3e a1       	ldd	r19, Y+38	; 0x26
    44c4:	89 85       	ldd	r24, Y+9	; 0x09
    44c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    44c8:	28 17       	cp	r18, r24
    44ca:	39 07       	cpc	r19, r25
    44cc:	d0 f4       	brcc	.+52     	; 0x4502 <main+0xd3c>
					Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x0F, 0xF0);
    44ce:	ce 01       	movw	r24, r28
    44d0:	8d 54       	subi	r24, 0x4D	; 77
    44d2:	9f 4f       	sbci	r25, 0xFF	; 255
    44d4:	0f 2e       	mov	r0, r31
    44d6:	f0 ef       	ldi	r31, 0xF0	; 240
    44d8:	af 2e       	mov	r10, r31
    44da:	b1 2c       	mov	r11, r1
    44dc:	f0 2d       	mov	r31, r0
    44de:	0f 2e       	mov	r0, r31
    44e0:	ff e0       	ldi	r31, 0x0F	; 15
    44e2:	cf 2e       	mov	r12, r31
    44e4:	d1 2c       	mov	r13, r1
    44e6:	f0 2d       	mov	r31, r0
    44e8:	ee 24       	eor	r14, r14
    44ea:	e3 94       	inc	r14
    44ec:	f1 2c       	mov	r15, r1
    44ee:	0f e7       	ldi	r16, 0x7F	; 127
    44f0:	10 e0       	ldi	r17, 0x00	; 0
    44f2:	21 e1       	ldi	r18, 0x11	; 17
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	45 e1       	ldi	r20, 0x15	; 21
    44f8:	50 e0       	ldi	r21, 0x00	; 0
    44fa:	60 e0       	ldi	r22, 0x00	; 0
    44fc:	70 e0       	ldi	r23, 0x00	; 0
    44fe:	0e 94 a5 22 	call	0x454a	; 0x454a <Show_Bigger_String>
				}
				LeftDialADCOld = LeftDialADCScaled;
    4502:	8d a1       	ldd	r24, Y+37	; 0x25
    4504:	9e a1       	ldd	r25, Y+38	; 0x26
    4506:	9a 87       	std	Y+10, r25	; 0x0a
    4508:	89 87       	std	Y+9, r24	; 0x09
				Delay(500);
    450a:	84 ef       	ldi	r24, 0xF4	; 244
    450c:	91 e0       	ldi	r25, 0x01	; 1
    450e:	0e 94 db 13 	call	0x27b6	; 0x27b6 <Delay>
				Fill_RAM(0x00);
    4512:	80 e0       	ldi	r24, 0x00	; 0
    4514:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <Fill_RAM>
			}
			Show_Bigger_String(&LeftArrow,0x00,0x15,0x11,0x7F, 1, 0x04, 0x40);
    4518:	ce 01       	movw	r24, r28
    451a:	8d 54       	subi	r24, 0x4D	; 77
    451c:	9f 4f       	sbci	r25, 0xFF	; 255
    451e:	68 94       	set
    4520:	aa 24       	eor	r10, r10
    4522:	a6 f8       	bld	r10, 6
    4524:	b1 2c       	mov	r11, r1
    4526:	68 94       	set
    4528:	cc 24       	eor	r12, r12
    452a:	c2 f8       	bld	r12, 2
    452c:	d1 2c       	mov	r13, r1
    452e:	ee 24       	eor	r14, r14
    4530:	e3 94       	inc	r14
    4532:	f1 2c       	mov	r15, r1
    4534:	0f e7       	ldi	r16, 0x7F	; 127
    4536:	10 e0       	ldi	r17, 0x00	; 0
    4538:	21 e1       	ldi	r18, 0x11	; 17
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	45 e1       	ldi	r20, 0x15	; 21
    453e:	50 e0       	ldi	r21, 0x00	; 0
    4540:	60 e0       	ldi	r22, 0x00	; 0
    4542:	70 e0       	ldi	r23, 0x00	; 0
    4544:	0e 94 a5 22 	call	0x454a	; 0x454a <Show_Bigger_String>
		// Show String - Un
		Show_String(1,Name,0x17,0x14);
		Delay(1000);
		Fill_RAM(0x00);			// Clear Screen
		*/
	}
    4548:	81 ca       	rjmp	.-2814   	; 0x3a4c <main+0x286>

0000454a <Show_Bigger_String>:
		OLED_ClearRam();
		OLED_WriteInstruction(0xA5); /*display ON*/
}

void Show_Bigger_String(unsigned char *Data, unsigned char a, unsigned char b, unsigned char c, unsigned char d, unsigned int length,  unsigned char LwrNibbleBrightness, unsigned char UppNibbleBrightness)
{
    454a:	af 92       	push	r10
    454c:	cf 92       	push	r12
    454e:	df 92       	push	r13
    4550:	ef 92       	push	r14
    4552:	ff 92       	push	r15
    4554:	0f 93       	push	r16
    4556:	1f 93       	push	r17
    4558:	cf 93       	push	r28
    455a:	df 93       	push	r29
    455c:	cd b7       	in	r28, 0x3d	; 61
    455e:	de b7       	in	r29, 0x3e	; 62
    4560:	2e 97       	sbiw	r28, 0x0e	; 14
    4562:	0f b6       	in	r0, 0x3f	; 63
    4564:	f8 94       	cli
    4566:	de bf       	out	0x3e, r29	; 62
    4568:	0f be       	out	0x3f, r0	; 63
    456a:	cd bf       	out	0x3d, r28	; 61
    456c:	9c 83       	std	Y+4, r25	; 0x04
    456e:	8b 83       	std	Y+3, r24	; 0x03
    4570:	6d 83       	std	Y+5, r22	; 0x05
    4572:	4e 83       	std	Y+6, r20	; 0x06
    4574:	2f 83       	std	Y+7, r18	; 0x07
    4576:	08 87       	std	Y+8, r16	; 0x08
    4578:	fa 86       	std	Y+10, r15	; 0x0a
    457a:	e9 86       	std	Y+9, r14	; 0x09
    457c:	cb 86       	std	Y+11, r12	; 0x0b
    457e:	ac 86       	std	Y+12, r10	; 0x0c
	for(int i = 0; i < length; i++)
    4580:	1a 82       	std	Y+2, r1	; 0x02
    4582:	19 82       	std	Y+1, r1	; 0x01
    4584:	30 c0       	rjmp	.+96     	; 0x45e6 <Show_Bigger_String+0x9c>
	{
		Show_Bigger_Char(*Data,a,b,c,d, LwrNibbleBrightness, UppNibbleBrightness);
    4586:	8c 85       	ldd	r24, Y+12	; 0x0c
    4588:	08 2f       	mov	r16, r24
    458a:	10 e0       	ldi	r17, 0x00	; 0
    458c:	8b 85       	ldd	r24, Y+11	; 0x0b
    458e:	a8 2f       	mov	r26, r24
    4590:	b0 e0       	ldi	r27, 0x00	; 0
    4592:	88 85       	ldd	r24, Y+8	; 0x08
    4594:	28 2f       	mov	r18, r24
    4596:	30 e0       	ldi	r19, 0x00	; 0
    4598:	3e 87       	std	Y+14, r19	; 0x0e
    459a:	2d 87       	std	Y+13, r18	; 0x0d
    459c:	8f 81       	ldd	r24, Y+7	; 0x07
    459e:	28 2f       	mov	r18, r24
    45a0:	30 e0       	ldi	r19, 0x00	; 0
    45a2:	8e 81       	ldd	r24, Y+6	; 0x06
    45a4:	48 2f       	mov	r20, r24
    45a6:	50 e0       	ldi	r21, 0x00	; 0
    45a8:	8d 81       	ldd	r24, Y+5	; 0x05
    45aa:	68 2f       	mov	r22, r24
    45ac:	70 e0       	ldi	r23, 0x00	; 0
    45ae:	8b 81       	ldd	r24, Y+3	; 0x03
    45b0:	9c 81       	ldd	r25, Y+4	; 0x04
    45b2:	fc 01       	movw	r30, r24
    45b4:	80 81       	ld	r24, Z
    45b6:	88 2f       	mov	r24, r24
    45b8:	90 e0       	ldi	r25, 0x00	; 0
    45ba:	68 01       	movw	r12, r16
    45bc:	7d 01       	movw	r14, r26
    45be:	0d 85       	ldd	r16, Y+13	; 0x0d
    45c0:	1e 85       	ldd	r17, Y+14	; 0x0e
    45c2:	0e 94 71 23 	call	0x46e2	; 0x46e2 <Show_Bigger_Char>
		Data++;
    45c6:	8b 81       	ldd	r24, Y+3	; 0x03
    45c8:	9c 81       	ldd	r25, Y+4	; 0x04
    45ca:	01 96       	adiw	r24, 0x01	; 1
    45cc:	9c 83       	std	Y+4, r25	; 0x04
    45ce:	8b 83       	std	Y+3, r24	; 0x03
		a+=4;
    45d0:	8d 81       	ldd	r24, Y+5	; 0x05
    45d2:	8c 5f       	subi	r24, 0xFC	; 252
    45d4:	8d 83       	std	Y+5, r24	; 0x05
		b+=4;
    45d6:	8e 81       	ldd	r24, Y+6	; 0x06
    45d8:	8c 5f       	subi	r24, 0xFC	; 252
    45da:	8e 83       	std	Y+6, r24	; 0x06
		OLED_WriteInstruction(0xA5); /*display ON*/
}

void Show_Bigger_String(unsigned char *Data, unsigned char a, unsigned char b, unsigned char c, unsigned char d, unsigned int length,  unsigned char LwrNibbleBrightness, unsigned char UppNibbleBrightness)
{
	for(int i = 0; i < length; i++)
    45dc:	89 81       	ldd	r24, Y+1	; 0x01
    45de:	9a 81       	ldd	r25, Y+2	; 0x02
    45e0:	01 96       	adiw	r24, 0x01	; 1
    45e2:	9a 83       	std	Y+2, r25	; 0x02
    45e4:	89 83       	std	Y+1, r24	; 0x01
    45e6:	29 81       	ldd	r18, Y+1	; 0x01
    45e8:	3a 81       	ldd	r19, Y+2	; 0x02
    45ea:	89 85       	ldd	r24, Y+9	; 0x09
    45ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ee:	28 17       	cp	r18, r24
    45f0:	39 07       	cpc	r19, r25
    45f2:	48 f2       	brcs	.-110    	; 0x4586 <Show_Bigger_String+0x3c>
		Show_Bigger_Char(*Data,a,b,c,d, LwrNibbleBrightness, UppNibbleBrightness);
		Data++;
		a+=4;
		b+=4;
	}
}
    45f4:	00 00       	nop
    45f6:	2e 96       	adiw	r28, 0x0e	; 14
    45f8:	0f b6       	in	r0, 0x3f	; 63
    45fa:	f8 94       	cli
    45fc:	de bf       	out	0x3e, r29	; 62
    45fe:	0f be       	out	0x3f, r0	; 63
    4600:	cd bf       	out	0x3d, r28	; 61
    4602:	df 91       	pop	r29
    4604:	cf 91       	pop	r28
    4606:	1f 91       	pop	r17
    4608:	0f 91       	pop	r16
    460a:	ff 90       	pop	r15
    460c:	ef 90       	pop	r14
    460e:	df 90       	pop	r13
    4610:	cf 90       	pop	r12
    4612:	af 90       	pop	r10
    4614:	08 95       	ret

00004616 <Show_Big_String>:

void Show_Big_String(unsigned char *Data, unsigned char a, unsigned char b, unsigned char c, unsigned char d, unsigned int length, unsigned char LwrNibbleBrightness, unsigned char UppNibbleBrightness)
{
    4616:	af 92       	push	r10
    4618:	cf 92       	push	r12
    461a:	df 92       	push	r13
    461c:	ef 92       	push	r14
    461e:	ff 92       	push	r15
    4620:	0f 93       	push	r16
    4622:	1f 93       	push	r17
    4624:	cf 93       	push	r28
    4626:	df 93       	push	r29
    4628:	cd b7       	in	r28, 0x3d	; 61
    462a:	de b7       	in	r29, 0x3e	; 62
    462c:	2e 97       	sbiw	r28, 0x0e	; 14
    462e:	0f b6       	in	r0, 0x3f	; 63
    4630:	f8 94       	cli
    4632:	de bf       	out	0x3e, r29	; 62
    4634:	0f be       	out	0x3f, r0	; 63
    4636:	cd bf       	out	0x3d, r28	; 61
    4638:	9c 83       	std	Y+4, r25	; 0x04
    463a:	8b 83       	std	Y+3, r24	; 0x03
    463c:	6d 83       	std	Y+5, r22	; 0x05
    463e:	4e 83       	std	Y+6, r20	; 0x06
    4640:	2f 83       	std	Y+7, r18	; 0x07
    4642:	08 87       	std	Y+8, r16	; 0x08
    4644:	fa 86       	std	Y+10, r15	; 0x0a
    4646:	e9 86       	std	Y+9, r14	; 0x09
    4648:	cb 86       	std	Y+11, r12	; 0x0b
    464a:	ac 86       	std	Y+12, r10	; 0x0c
	for(int i = 0; i < length; i++)
    464c:	1a 82       	std	Y+2, r1	; 0x02
    464e:	19 82       	std	Y+1, r1	; 0x01
    4650:	30 c0       	rjmp	.+96     	; 0x46b2 <Show_Big_String+0x9c>
	{
		Show_Big_Char(*Data,a,b,c,d, LwrNibbleBrightness, UppNibbleBrightness);
    4652:	8c 85       	ldd	r24, Y+12	; 0x0c
    4654:	08 2f       	mov	r16, r24
    4656:	10 e0       	ldi	r17, 0x00	; 0
    4658:	8b 85       	ldd	r24, Y+11	; 0x0b
    465a:	a8 2f       	mov	r26, r24
    465c:	b0 e0       	ldi	r27, 0x00	; 0
    465e:	88 85       	ldd	r24, Y+8	; 0x08
    4660:	28 2f       	mov	r18, r24
    4662:	30 e0       	ldi	r19, 0x00	; 0
    4664:	3e 87       	std	Y+14, r19	; 0x0e
    4666:	2d 87       	std	Y+13, r18	; 0x0d
    4668:	8f 81       	ldd	r24, Y+7	; 0x07
    466a:	28 2f       	mov	r18, r24
    466c:	30 e0       	ldi	r19, 0x00	; 0
    466e:	8e 81       	ldd	r24, Y+6	; 0x06
    4670:	48 2f       	mov	r20, r24
    4672:	50 e0       	ldi	r21, 0x00	; 0
    4674:	8d 81       	ldd	r24, Y+5	; 0x05
    4676:	68 2f       	mov	r22, r24
    4678:	70 e0       	ldi	r23, 0x00	; 0
    467a:	8b 81       	ldd	r24, Y+3	; 0x03
    467c:	9c 81       	ldd	r25, Y+4	; 0x04
    467e:	fc 01       	movw	r30, r24
    4680:	80 81       	ld	r24, Z
    4682:	88 2f       	mov	r24, r24
    4684:	90 e0       	ldi	r25, 0x00	; 0
    4686:	68 01       	movw	r12, r16
    4688:	7d 01       	movw	r14, r26
    468a:	0d 85       	ldd	r16, Y+13	; 0x0d
    468c:	1e 85       	ldd	r17, Y+14	; 0x0e
    468e:	0e 94 6e 25 	call	0x4adc	; 0x4adc <Show_Big_Char>
		Data++;
    4692:	8b 81       	ldd	r24, Y+3	; 0x03
    4694:	9c 81       	ldd	r25, Y+4	; 0x04
    4696:	01 96       	adiw	r24, 0x01	; 1
    4698:	9c 83       	std	Y+4, r25	; 0x04
    469a:	8b 83       	std	Y+3, r24	; 0x03
		a+=3;
    469c:	8d 81       	ldd	r24, Y+5	; 0x05
    469e:	8d 5f       	subi	r24, 0xFD	; 253
    46a0:	8d 83       	std	Y+5, r24	; 0x05
		b+=3;
    46a2:	8e 81       	ldd	r24, Y+6	; 0x06
    46a4:	8d 5f       	subi	r24, 0xFD	; 253
    46a6:	8e 83       	std	Y+6, r24	; 0x06
	}
}

void Show_Big_String(unsigned char *Data, unsigned char a, unsigned char b, unsigned char c, unsigned char d, unsigned int length, unsigned char LwrNibbleBrightness, unsigned char UppNibbleBrightness)
{
	for(int i = 0; i < length; i++)
    46a8:	89 81       	ldd	r24, Y+1	; 0x01
    46aa:	9a 81       	ldd	r25, Y+2	; 0x02
    46ac:	01 96       	adiw	r24, 0x01	; 1
    46ae:	9a 83       	std	Y+2, r25	; 0x02
    46b0:	89 83       	std	Y+1, r24	; 0x01
    46b2:	29 81       	ldd	r18, Y+1	; 0x01
    46b4:	3a 81       	ldd	r19, Y+2	; 0x02
    46b6:	89 85       	ldd	r24, Y+9	; 0x09
    46b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ba:	28 17       	cp	r18, r24
    46bc:	39 07       	cpc	r19, r25
    46be:	48 f2       	brcs	.-110    	; 0x4652 <Show_Big_String+0x3c>
		Show_Big_Char(*Data,a,b,c,d, LwrNibbleBrightness, UppNibbleBrightness);
		Data++;
		a+=3;
		b+=3;
	}
}
    46c0:	00 00       	nop
    46c2:	2e 96       	adiw	r28, 0x0e	; 14
    46c4:	0f b6       	in	r0, 0x3f	; 63
    46c6:	f8 94       	cli
    46c8:	de bf       	out	0x3e, r29	; 62
    46ca:	0f be       	out	0x3f, r0	; 63
    46cc:	cd bf       	out	0x3d, r28	; 61
    46ce:	df 91       	pop	r29
    46d0:	cf 91       	pop	r28
    46d2:	1f 91       	pop	r17
    46d4:	0f 91       	pop	r16
    46d6:	ff 90       	pop	r15
    46d8:	ef 90       	pop	r14
    46da:	df 90       	pop	r13
    46dc:	cf 90       	pop	r12
    46de:	af 90       	pop	r10
    46e0:	08 95       	ret

000046e2 <Show_Bigger_Char>:

void Show_Bigger_Char(unsigned char data, unsigned char a, unsigned char b, unsigned char c, unsigned char d, unsigned char LwrNibbleBrightness, unsigned char UppNibbleBrightness)
{
    46e2:	cf 92       	push	r12
    46e4:	ef 92       	push	r14
    46e6:	0f 93       	push	r16
    46e8:	cf 93       	push	r28
    46ea:	df 93       	push	r29
    46ec:	cd b7       	in	r28, 0x3d	; 61
    46ee:	de b7       	in	r29, 0x3e	; 62
    46f0:	a0 97       	sbiw	r28, 0x20	; 32
    46f2:	0f b6       	in	r0, 0x3f	; 63
    46f4:	f8 94       	cli
    46f6:	de bf       	out	0x3e, r29	; 62
    46f8:	0f be       	out	0x3f, r0	; 63
    46fa:	cd bf       	out	0x3d, r28	; 61
    46fc:	8a 8f       	std	Y+26, r24	; 0x1a
    46fe:	6b 8f       	std	Y+27, r22	; 0x1b
    4700:	4c 8f       	std	Y+28, r20	; 0x1c
    4702:	2d 8f       	std	Y+29, r18	; 0x1d
    4704:	0e 8f       	std	Y+30, r16	; 0x1e
    4706:	ef 8e       	std	Y+31, r14	; 0x1f
    4708:	c8 a2       	std	Y+32, r12	; 0x20
	Set_Column_Address(Shift+a,Shift+b);
    470a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    470c:	88 2f       	mov	r24, r24
    470e:	90 e0       	ldi	r25, 0x00	; 0
    4710:	9c 01       	movw	r18, r24
    4712:	24 5e       	subi	r18, 0xE4	; 228
    4714:	3f 4f       	sbci	r19, 0xFF	; 255
    4716:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4718:	88 2f       	mov	r24, r24
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	4c 96       	adiw	r24, 0x1c	; 28
    471e:	b9 01       	movw	r22, r18
    4720:	0e 94 62 14 	call	0x28c4	; 0x28c4 <Set_Column_Address>
	Set_Row_Address(c,c+25);
    4724:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4726:	88 2f       	mov	r24, r24
    4728:	90 e0       	ldi	r25, 0x00	; 0
    472a:	9c 01       	movw	r18, r24
    472c:	27 5e       	subi	r18, 0xE7	; 231
    472e:	3f 4f       	sbci	r19, 0xFF	; 255
    4730:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4732:	88 2f       	mov	r24, r24
    4734:	90 e0       	ldi	r25, 0x00	; 0
    4736:	b9 01       	movw	r22, r18
    4738:	0e 94 78 14 	call	0x28f0	; 0x28f0 <Set_Row_Address>
	Set_Write_RAM();
    473c:	0e 94 8e 14 	call	0x291c	; 0x291c <Set_Write_RAM>
	int counter = 0;
    4740:	1f 82       	std	Y+7, r1	; 0x07
    4742:	1e 82       	std	Y+6, r1	; 0x06
	int i = 0;
    4744:	1a 82       	std	Y+2, r1	; 0x02
    4746:	19 82       	std	Y+1, r1	; 0x01
	
	for(i = 0; i < 25; i++)
    4748:	1a 82       	std	Y+2, r1	; 0x02
    474a:	19 82       	std	Y+1, r1	; 0x01
    474c:	b5 c1       	rjmp	.+874    	; 0x4ab8 <Show_Bigger_Char+0x3d6>
		//the main for loop counts through 0 to 5
		//we double each number we use here as it's all in pairs
		//so the first time we will look at (p*2) and (p*2)+1
		//if p is 0 initially these work out to 0 and 1
		//next time p will be 1 so (p*2) and (p*2)+1 will give us 2 and 3 and so on through to 10 and 11 when p = 5 at the last run
		for(int p=0;p<8;p++)
    474e:	1c 82       	std	Y+4, r1	; 0x04
    4750:	1b 82       	std	Y+3, r1	; 0x03
    4752:	88 c1       	rjmp	.+784    	; 0x4a64 <Show_Bigger_Char+0x382>
		{
			//temp variable we use each time to build each pair of pixels up
			//we set it to zero initially because until theres a pixel(s) to draw we dont want to
			uint8_t tempNibbles = 0;
    4754:	1d 82       	std	Y+5, r1	; 0x05
			
			//here we test if we should be looking at the first byte in the row or the second
			//since the real number we are looking at is p*2 each time we test against 4 not 8
			if(p < 4)
    4756:	8b 81       	ldd	r24, Y+3	; 0x03
    4758:	9c 81       	ldd	r25, Y+4	; 0x04
    475a:	04 97       	sbiw	r24, 0x04	; 4
    475c:	0c f0       	brlt	.+2      	; 0x4760 <Show_Bigger_Char+0x7e>
    475e:	78 c0       	rjmp	.+240    	; 0x4850 <Show_Bigger_Char+0x16e>
				//so we shift a 1 n times along so we can then test to see if it's a 1 or a 0 in the font
				//for example the first time it runs p = 0
				//so the test shifts 1 to the left (((3-0)*2)+1) times or 7 times to the left
				//this then ANDS the first byte in the font row with 0b10000000
				//if the result is non zero it should be a pixel so tempNibbles gets adjusted accordingly
				if(((1 << (((3-p)*2)+1) ) & (pgm_read_byte(&BiggerText[data-0x20][i*2]))) > 0)
    4760:	23 e0       	ldi	r18, 0x03	; 3
    4762:	30 e0       	ldi	r19, 0x00	; 0
    4764:	8b 81       	ldd	r24, Y+3	; 0x03
    4766:	9c 81       	ldd	r25, Y+4	; 0x04
    4768:	a9 01       	movw	r20, r18
    476a:	48 1b       	sub	r20, r24
    476c:	59 0b       	sbc	r21, r25
    476e:	ca 01       	movw	r24, r20
    4770:	88 0f       	add	r24, r24
    4772:	99 1f       	adc	r25, r25
    4774:	9c 01       	movw	r18, r24
    4776:	2f 5f       	subi	r18, 0xFF	; 255
    4778:	3f 4f       	sbci	r19, 0xFF	; 255
    477a:	81 e0       	ldi	r24, 0x01	; 1
    477c:	90 e0       	ldi	r25, 0x00	; 0
    477e:	fc 01       	movw	r30, r24
    4780:	02 c0       	rjmp	.+4      	; 0x4786 <Show_Bigger_Char+0xa4>
    4782:	ee 0f       	add	r30, r30
    4784:	ff 1f       	adc	r31, r31
    4786:	2a 95       	dec	r18
    4788:	e2 f7       	brpl	.-8      	; 0x4782 <Show_Bigger_Char+0xa0>
    478a:	9f 01       	movw	r18, r30
    478c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    478e:	88 2f       	mov	r24, r24
    4790:	90 e0       	ldi	r25, 0x00	; 0
    4792:	bc 01       	movw	r22, r24
    4794:	60 52       	subi	r22, 0x20	; 32
    4796:	71 09       	sbc	r23, r1
    4798:	89 81       	ldd	r24, Y+1	; 0x01
    479a:	9a 81       	ldd	r25, Y+2	; 0x02
    479c:	88 0f       	add	r24, r24
    479e:	99 1f       	adc	r25, r25
    47a0:	e2 e3       	ldi	r30, 0x32	; 50
    47a2:	e6 9f       	mul	r30, r22
    47a4:	a0 01       	movw	r20, r0
    47a6:	e7 9f       	mul	r30, r23
    47a8:	50 0d       	add	r21, r0
    47aa:	11 24       	eor	r1, r1
    47ac:	84 0f       	add	r24, r20
    47ae:	95 1f       	adc	r25, r21
    47b0:	8c 58       	subi	r24, 0x8C	; 140
    47b2:	92 4f       	sbci	r25, 0xF2	; 242
    47b4:	99 87       	std	Y+9, r25	; 0x09
    47b6:	88 87       	std	Y+8, r24	; 0x08
    47b8:	88 85       	ldd	r24, Y+8	; 0x08
    47ba:	99 85       	ldd	r25, Y+9	; 0x09
    47bc:	fc 01       	movw	r30, r24
    47be:	84 91       	lpm	r24, Z
    47c0:	8a 87       	std	Y+10, r24	; 0x0a
    47c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    47c4:	88 2f       	mov	r24, r24
    47c6:	90 e0       	ldi	r25, 0x00	; 0
    47c8:	82 23       	and	r24, r18
    47ca:	93 23       	and	r25, r19
    47cc:	18 16       	cp	r1, r24
    47ce:	19 06       	cpc	r1, r25
    47d0:	24 f4       	brge	.+8      	; 0x47da <Show_Bigger_Char+0xf8>
				{
					tempNibbles += UppNibbleBrightness;
    47d2:	9d 81       	ldd	r25, Y+5	; 0x05
    47d4:	88 a1       	ldd	r24, Y+32	; 0x20
    47d6:	89 0f       	add	r24, r25
    47d8:	8d 83       	std	Y+5, r24	; 0x05
				
				//this does the same test except it drops the plus 1
				//so the first test is ((3-p)*2) or 6 shifts left
				//it therefore compares the second byte in the font row with 0b01000000
				//it then sets the lower nibble on if there was a pixel match
				if(((1 << ((3-p)*2) & (pgm_read_byte(&BiggerText[data-0x20][i*2]))) > 0))
    47da:	23 e0       	ldi	r18, 0x03	; 3
    47dc:	30 e0       	ldi	r19, 0x00	; 0
    47de:	8b 81       	ldd	r24, Y+3	; 0x03
    47e0:	9c 81       	ldd	r25, Y+4	; 0x04
    47e2:	a9 01       	movw	r20, r18
    47e4:	48 1b       	sub	r20, r24
    47e6:	59 0b       	sbc	r21, r25
    47e8:	ca 01       	movw	r24, r20
    47ea:	9c 01       	movw	r18, r24
    47ec:	22 0f       	add	r18, r18
    47ee:	33 1f       	adc	r19, r19
    47f0:	81 e0       	ldi	r24, 0x01	; 1
    47f2:	90 e0       	ldi	r25, 0x00	; 0
    47f4:	fc 01       	movw	r30, r24
    47f6:	02 c0       	rjmp	.+4      	; 0x47fc <Show_Bigger_Char+0x11a>
    47f8:	ee 0f       	add	r30, r30
    47fa:	ff 1f       	adc	r31, r31
    47fc:	2a 95       	dec	r18
    47fe:	e2 f7       	brpl	.-8      	; 0x47f8 <Show_Bigger_Char+0x116>
    4800:	9f 01       	movw	r18, r30
    4802:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4804:	88 2f       	mov	r24, r24
    4806:	90 e0       	ldi	r25, 0x00	; 0
    4808:	bc 01       	movw	r22, r24
    480a:	60 52       	subi	r22, 0x20	; 32
    480c:	71 09       	sbc	r23, r1
    480e:	89 81       	ldd	r24, Y+1	; 0x01
    4810:	9a 81       	ldd	r25, Y+2	; 0x02
    4812:	88 0f       	add	r24, r24
    4814:	99 1f       	adc	r25, r25
    4816:	e2 e3       	ldi	r30, 0x32	; 50
    4818:	e6 9f       	mul	r30, r22
    481a:	a0 01       	movw	r20, r0
    481c:	e7 9f       	mul	r30, r23
    481e:	50 0d       	add	r21, r0
    4820:	11 24       	eor	r1, r1
    4822:	84 0f       	add	r24, r20
    4824:	95 1f       	adc	r25, r21
    4826:	8c 58       	subi	r24, 0x8C	; 140
    4828:	92 4f       	sbci	r25, 0xF2	; 242
    482a:	9c 87       	std	Y+12, r25	; 0x0c
    482c:	8b 87       	std	Y+11, r24	; 0x0b
    482e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4830:	9c 85       	ldd	r25, Y+12	; 0x0c
    4832:	fc 01       	movw	r30, r24
    4834:	84 91       	lpm	r24, Z
    4836:	8d 87       	std	Y+13, r24	; 0x0d
    4838:	8d 85       	ldd	r24, Y+13	; 0x0d
    483a:	88 2f       	mov	r24, r24
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	82 23       	and	r24, r18
    4840:	93 23       	and	r25, r19
    4842:	18 16       	cp	r1, r24
    4844:	19 06       	cpc	r1, r25
    4846:	24 f4       	brge	.+8      	; 0x4850 <Show_Bigger_Char+0x16e>
				{
					tempNibbles += LwrNibbleBrightness;
    4848:	9d 81       	ldd	r25, Y+5	; 0x05
    484a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    484c:	89 0f       	add	r24, r25
    484e:	8d 83       	std	Y+5, r24	; 0x05
				}
			}
			
			if((p > 3) && (p < 8))
    4850:	8b 81       	ldd	r24, Y+3	; 0x03
    4852:	9c 81       	ldd	r25, Y+4	; 0x04
    4854:	04 97       	sbiw	r24, 0x04	; 4
    4856:	0c f4       	brge	.+2      	; 0x485a <Show_Bigger_Char+0x178>
    4858:	81 c0       	rjmp	.+258    	; 0x495c <Show_Bigger_Char+0x27a>
    485a:	8b 81       	ldd	r24, Y+3	; 0x03
    485c:	9c 81       	ldd	r25, Y+4	; 0x04
    485e:	08 97       	sbiw	r24, 0x08	; 8
    4860:	0c f0       	brlt	.+2      	; 0x4864 <Show_Bigger_Char+0x182>
    4862:	7c c0       	rjmp	.+248    	; 0x495c <Show_Bigger_Char+0x27a>
			{
				if(((1 << (((7-p)*2)+1) & (pgm_read_byte(&BiggerText[data-0x20][((i*2)+1)]))) > 0))
    4864:	27 e0       	ldi	r18, 0x07	; 7
    4866:	30 e0       	ldi	r19, 0x00	; 0
    4868:	8b 81       	ldd	r24, Y+3	; 0x03
    486a:	9c 81       	ldd	r25, Y+4	; 0x04
    486c:	a9 01       	movw	r20, r18
    486e:	48 1b       	sub	r20, r24
    4870:	59 0b       	sbc	r21, r25
    4872:	ca 01       	movw	r24, r20
    4874:	88 0f       	add	r24, r24
    4876:	99 1f       	adc	r25, r25
    4878:	9c 01       	movw	r18, r24
    487a:	2f 5f       	subi	r18, 0xFF	; 255
    487c:	3f 4f       	sbci	r19, 0xFF	; 255
    487e:	81 e0       	ldi	r24, 0x01	; 1
    4880:	90 e0       	ldi	r25, 0x00	; 0
    4882:	fc 01       	movw	r30, r24
    4884:	02 c0       	rjmp	.+4      	; 0x488a <Show_Bigger_Char+0x1a8>
    4886:	ee 0f       	add	r30, r30
    4888:	ff 1f       	adc	r31, r31
    488a:	2a 95       	dec	r18
    488c:	e2 f7       	brpl	.-8      	; 0x4886 <Show_Bigger_Char+0x1a4>
    488e:	9f 01       	movw	r18, r30
    4890:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4892:	88 2f       	mov	r24, r24
    4894:	90 e0       	ldi	r25, 0x00	; 0
    4896:	bc 01       	movw	r22, r24
    4898:	60 52       	subi	r22, 0x20	; 32
    489a:	71 09       	sbc	r23, r1
    489c:	89 81       	ldd	r24, Y+1	; 0x01
    489e:	9a 81       	ldd	r25, Y+2	; 0x02
    48a0:	88 0f       	add	r24, r24
    48a2:	99 1f       	adc	r25, r25
    48a4:	01 96       	adiw	r24, 0x01	; 1
    48a6:	e2 e3       	ldi	r30, 0x32	; 50
    48a8:	e6 9f       	mul	r30, r22
    48aa:	a0 01       	movw	r20, r0
    48ac:	e7 9f       	mul	r30, r23
    48ae:	50 0d       	add	r21, r0
    48b0:	11 24       	eor	r1, r1
    48b2:	84 0f       	add	r24, r20
    48b4:	95 1f       	adc	r25, r21
    48b6:	8c 58       	subi	r24, 0x8C	; 140
    48b8:	92 4f       	sbci	r25, 0xF2	; 242
    48ba:	9f 87       	std	Y+15, r25	; 0x0f
    48bc:	8e 87       	std	Y+14, r24	; 0x0e
    48be:	8e 85       	ldd	r24, Y+14	; 0x0e
    48c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    48c2:	fc 01       	movw	r30, r24
    48c4:	84 91       	lpm	r24, Z
    48c6:	88 8b       	std	Y+16, r24	; 0x10
    48c8:	88 89       	ldd	r24, Y+16	; 0x10
    48ca:	88 2f       	mov	r24, r24
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	82 23       	and	r24, r18
    48d0:	93 23       	and	r25, r19
    48d2:	18 16       	cp	r1, r24
    48d4:	19 06       	cpc	r1, r25
    48d6:	24 f4       	brge	.+8      	; 0x48e0 <Show_Bigger_Char+0x1fe>
				{
					tempNibbles += UppNibbleBrightness;
    48d8:	9d 81       	ldd	r25, Y+5	; 0x05
    48da:	88 a1       	ldd	r24, Y+32	; 0x20
    48dc:	89 0f       	add	r24, r25
    48de:	8d 83       	std	Y+5, r24	; 0x05
				
				//this does the same test except it drops the plus 1
				//so the first test is ((3-p)*2) or 6 shifts left
				//it therefore compares the second byte in the font row with 0b01000000
				//it then sets the lower nibble on if there was a pixel match
				if(((1 << ((7-p)*2) & (pgm_read_byte(&BiggerText[data-0x20][((i*2)+1)]))) > 0))
    48e0:	27 e0       	ldi	r18, 0x07	; 7
    48e2:	30 e0       	ldi	r19, 0x00	; 0
    48e4:	8b 81       	ldd	r24, Y+3	; 0x03
    48e6:	9c 81       	ldd	r25, Y+4	; 0x04
    48e8:	a9 01       	movw	r20, r18
    48ea:	48 1b       	sub	r20, r24
    48ec:	59 0b       	sbc	r21, r25
    48ee:	ca 01       	movw	r24, r20
    48f0:	9c 01       	movw	r18, r24
    48f2:	22 0f       	add	r18, r18
    48f4:	33 1f       	adc	r19, r19
    48f6:	81 e0       	ldi	r24, 0x01	; 1
    48f8:	90 e0       	ldi	r25, 0x00	; 0
    48fa:	fc 01       	movw	r30, r24
    48fc:	02 c0       	rjmp	.+4      	; 0x4902 <Show_Bigger_Char+0x220>
    48fe:	ee 0f       	add	r30, r30
    4900:	ff 1f       	adc	r31, r31
    4902:	2a 95       	dec	r18
    4904:	e2 f7       	brpl	.-8      	; 0x48fe <Show_Bigger_Char+0x21c>
    4906:	9f 01       	movw	r18, r30
    4908:	8a 8d       	ldd	r24, Y+26	; 0x1a
    490a:	88 2f       	mov	r24, r24
    490c:	90 e0       	ldi	r25, 0x00	; 0
    490e:	bc 01       	movw	r22, r24
    4910:	60 52       	subi	r22, 0x20	; 32
    4912:	71 09       	sbc	r23, r1
    4914:	89 81       	ldd	r24, Y+1	; 0x01
    4916:	9a 81       	ldd	r25, Y+2	; 0x02
    4918:	88 0f       	add	r24, r24
    491a:	99 1f       	adc	r25, r25
    491c:	01 96       	adiw	r24, 0x01	; 1
    491e:	e2 e3       	ldi	r30, 0x32	; 50
    4920:	e6 9f       	mul	r30, r22
    4922:	a0 01       	movw	r20, r0
    4924:	e7 9f       	mul	r30, r23
    4926:	50 0d       	add	r21, r0
    4928:	11 24       	eor	r1, r1
    492a:	84 0f       	add	r24, r20
    492c:	95 1f       	adc	r25, r21
    492e:	8c 58       	subi	r24, 0x8C	; 140
    4930:	92 4f       	sbci	r25, 0xF2	; 242
    4932:	9a 8b       	std	Y+18, r25	; 0x12
    4934:	89 8b       	std	Y+17, r24	; 0x11
    4936:	89 89       	ldd	r24, Y+17	; 0x11
    4938:	9a 89       	ldd	r25, Y+18	; 0x12
    493a:	fc 01       	movw	r30, r24
    493c:	84 91       	lpm	r24, Z
    493e:	8b 8b       	std	Y+19, r24	; 0x13
    4940:	8b 89       	ldd	r24, Y+19	; 0x13
    4942:	88 2f       	mov	r24, r24
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	82 23       	and	r24, r18
    4948:	93 23       	and	r25, r19
    494a:	18 16       	cp	r1, r24
    494c:	19 06       	cpc	r1, r25
    494e:	0c f0       	brlt	.+2      	; 0x4952 <Show_Bigger_Char+0x270>
    4950:	7f c0       	rjmp	.+254    	; 0x4a50 <Show_Bigger_Char+0x36e>
				{
					tempNibbles += LwrNibbleBrightness;
    4952:	9d 81       	ldd	r25, Y+5	; 0x05
    4954:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4956:	89 0f       	add	r24, r25
    4958:	8d 83       	std	Y+5, r24	; 0x05
				
				//this does the same test except it drops the plus 1
				//so the first test is ((3-p)*2) or 6 shifts left
				//it therefore compares the second byte in the font row with 0b01000000
				//it then sets the lower nibble on if there was a pixel match
				if(((1 << ((7-p)*2) & (pgm_read_byte(&BiggerText[data-0x20][((i*2)+1)]))) > 0))
    495a:	7a c0       	rjmp	.+244    	; 0x4a50 <Show_Bigger_Char+0x36e>
				}
			}
			
			else
			{
				if(((1 << (((8-p)*2)+1) & (pgm_read_byte(&BiggerText[data-0x20][((i*2)+1)]))) > 0))
    495c:	28 e0       	ldi	r18, 0x08	; 8
    495e:	30 e0       	ldi	r19, 0x00	; 0
    4960:	8b 81       	ldd	r24, Y+3	; 0x03
    4962:	9c 81       	ldd	r25, Y+4	; 0x04
    4964:	a9 01       	movw	r20, r18
    4966:	48 1b       	sub	r20, r24
    4968:	59 0b       	sbc	r21, r25
    496a:	ca 01       	movw	r24, r20
    496c:	88 0f       	add	r24, r24
    496e:	99 1f       	adc	r25, r25
    4970:	9c 01       	movw	r18, r24
    4972:	2f 5f       	subi	r18, 0xFF	; 255
    4974:	3f 4f       	sbci	r19, 0xFF	; 255
    4976:	81 e0       	ldi	r24, 0x01	; 1
    4978:	90 e0       	ldi	r25, 0x00	; 0
    497a:	fc 01       	movw	r30, r24
    497c:	02 c0       	rjmp	.+4      	; 0x4982 <Show_Bigger_Char+0x2a0>
    497e:	ee 0f       	add	r30, r30
    4980:	ff 1f       	adc	r31, r31
    4982:	2a 95       	dec	r18
    4984:	e2 f7       	brpl	.-8      	; 0x497e <Show_Bigger_Char+0x29c>
    4986:	9f 01       	movw	r18, r30
    4988:	8a 8d       	ldd	r24, Y+26	; 0x1a
    498a:	88 2f       	mov	r24, r24
    498c:	90 e0       	ldi	r25, 0x00	; 0
    498e:	bc 01       	movw	r22, r24
    4990:	60 52       	subi	r22, 0x20	; 32
    4992:	71 09       	sbc	r23, r1
    4994:	89 81       	ldd	r24, Y+1	; 0x01
    4996:	9a 81       	ldd	r25, Y+2	; 0x02
    4998:	88 0f       	add	r24, r24
    499a:	99 1f       	adc	r25, r25
    499c:	01 96       	adiw	r24, 0x01	; 1
    499e:	e2 e3       	ldi	r30, 0x32	; 50
    49a0:	e6 9f       	mul	r30, r22
    49a2:	a0 01       	movw	r20, r0
    49a4:	e7 9f       	mul	r30, r23
    49a6:	50 0d       	add	r21, r0
    49a8:	11 24       	eor	r1, r1
    49aa:	84 0f       	add	r24, r20
    49ac:	95 1f       	adc	r25, r21
    49ae:	8c 58       	subi	r24, 0x8C	; 140
    49b0:	92 4f       	sbci	r25, 0xF2	; 242
    49b2:	9d 8b       	std	Y+21, r25	; 0x15
    49b4:	8c 8b       	std	Y+20, r24	; 0x14
    49b6:	8c 89       	ldd	r24, Y+20	; 0x14
    49b8:	9d 89       	ldd	r25, Y+21	; 0x15
    49ba:	fc 01       	movw	r30, r24
    49bc:	84 91       	lpm	r24, Z
    49be:	8e 8b       	std	Y+22, r24	; 0x16
    49c0:	8e 89       	ldd	r24, Y+22	; 0x16
    49c2:	88 2f       	mov	r24, r24
    49c4:	90 e0       	ldi	r25, 0x00	; 0
    49c6:	82 23       	and	r24, r18
    49c8:	93 23       	and	r25, r19
    49ca:	18 16       	cp	r1, r24
    49cc:	19 06       	cpc	r1, r25
    49ce:	24 f4       	brge	.+8      	; 0x49d8 <Show_Bigger_Char+0x2f6>
				{
					tempNibbles += UppNibbleBrightness;
    49d0:	9d 81       	ldd	r25, Y+5	; 0x05
    49d2:	88 a1       	ldd	r24, Y+32	; 0x20
    49d4:	89 0f       	add	r24, r25
    49d6:	8d 83       	std	Y+5, r24	; 0x05
				
				//this does the same test except it drops the plus 1
				//so the first test is ((3-p)*2) or 6 shifts left
				//it therefore compares the second byte in the font row with 0b01000000
				//it then sets the lower nibble on if there was a pixel match
				if(((1 << ((8-p)*2) & (pgm_read_byte(&BiggerText[data-0x20][((i*2)+1)]))) > 0))
    49d8:	28 e0       	ldi	r18, 0x08	; 8
    49da:	30 e0       	ldi	r19, 0x00	; 0
    49dc:	8b 81       	ldd	r24, Y+3	; 0x03
    49de:	9c 81       	ldd	r25, Y+4	; 0x04
    49e0:	a9 01       	movw	r20, r18
    49e2:	48 1b       	sub	r20, r24
    49e4:	59 0b       	sbc	r21, r25
    49e6:	ca 01       	movw	r24, r20
    49e8:	9c 01       	movw	r18, r24
    49ea:	22 0f       	add	r18, r18
    49ec:	33 1f       	adc	r19, r19
    49ee:	81 e0       	ldi	r24, 0x01	; 1
    49f0:	90 e0       	ldi	r25, 0x00	; 0
    49f2:	fc 01       	movw	r30, r24
    49f4:	02 c0       	rjmp	.+4      	; 0x49fa <Show_Bigger_Char+0x318>
    49f6:	ee 0f       	add	r30, r30
    49f8:	ff 1f       	adc	r31, r31
    49fa:	2a 95       	dec	r18
    49fc:	e2 f7       	brpl	.-8      	; 0x49f6 <Show_Bigger_Char+0x314>
    49fe:	9f 01       	movw	r18, r30
    4a00:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4a02:	88 2f       	mov	r24, r24
    4a04:	90 e0       	ldi	r25, 0x00	; 0
    4a06:	bc 01       	movw	r22, r24
    4a08:	60 52       	subi	r22, 0x20	; 32
    4a0a:	71 09       	sbc	r23, r1
    4a0c:	89 81       	ldd	r24, Y+1	; 0x01
    4a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    4a10:	88 0f       	add	r24, r24
    4a12:	99 1f       	adc	r25, r25
    4a14:	01 96       	adiw	r24, 0x01	; 1
    4a16:	e2 e3       	ldi	r30, 0x32	; 50
    4a18:	e6 9f       	mul	r30, r22
    4a1a:	a0 01       	movw	r20, r0
    4a1c:	e7 9f       	mul	r30, r23
    4a1e:	50 0d       	add	r21, r0
    4a20:	11 24       	eor	r1, r1
    4a22:	84 0f       	add	r24, r20
    4a24:	95 1f       	adc	r25, r21
    4a26:	8c 58       	subi	r24, 0x8C	; 140
    4a28:	92 4f       	sbci	r25, 0xF2	; 242
    4a2a:	98 8f       	std	Y+24, r25	; 0x18
    4a2c:	8f 8b       	std	Y+23, r24	; 0x17
    4a2e:	8f 89       	ldd	r24, Y+23	; 0x17
    4a30:	98 8d       	ldd	r25, Y+24	; 0x18
    4a32:	fc 01       	movw	r30, r24
    4a34:	84 91       	lpm	r24, Z
    4a36:	89 8f       	std	Y+25, r24	; 0x19
    4a38:	89 8d       	ldd	r24, Y+25	; 0x19
    4a3a:	88 2f       	mov	r24, r24
    4a3c:	90 e0       	ldi	r25, 0x00	; 0
    4a3e:	82 23       	and	r24, r18
    4a40:	93 23       	and	r25, r19
    4a42:	18 16       	cp	r1, r24
    4a44:	19 06       	cpc	r1, r25
    4a46:	24 f4       	brge	.+8      	; 0x4a50 <Show_Bigger_Char+0x36e>
				{
					tempNibbles += LwrNibbleBrightness;
    4a48:	9d 81       	ldd	r25, Y+5	; 0x05
    4a4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a4c:	89 0f       	add	r24, r25
    4a4e:	8d 83       	std	Y+5, r24	; 0x05
				}
			}
			
			//Now we have a temporary 8 bit number with 2 pixels embedded in it we can send it to the screen
			Write_Data(tempNibbles);
    4a50:	8d 81       	ldd	r24, Y+5	; 0x05
    4a52:	88 2f       	mov	r24, r24
    4a54:	90 e0       	ldi	r25, 0x00	; 0
    4a56:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
		//the main for loop counts through 0 to 5
		//we double each number we use here as it's all in pairs
		//so the first time we will look at (p*2) and (p*2)+1
		//if p is 0 initially these work out to 0 and 1
		//next time p will be 1 so (p*2) and (p*2)+1 will give us 2 and 3 and so on through to 10 and 11 when p = 5 at the last run
		for(int p=0;p<8;p++)
    4a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    4a5e:	01 96       	adiw	r24, 0x01	; 1
    4a60:	9c 83       	std	Y+4, r25	; 0x04
    4a62:	8b 83       	std	Y+3, r24	; 0x03
    4a64:	8b 81       	ldd	r24, Y+3	; 0x03
    4a66:	9c 81       	ldd	r25, Y+4	; 0x04
    4a68:	08 97       	sbiw	r24, 0x08	; 8
    4a6a:	0c f4       	brge	.+2      	; 0x4a6e <Show_Bigger_Char+0x38c>
    4a6c:	73 ce       	rjmp	.-794    	; 0x4754 <Show_Bigger_Char+0x72>
			}
			
			//Now we have a temporary 8 bit number with 2 pixels embedded in it we can send it to the screen
			Write_Data(tempNibbles);
		}
		Set_Column_Address(Shift+a,Shift+b);
    4a6e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4a70:	88 2f       	mov	r24, r24
    4a72:	90 e0       	ldi	r25, 0x00	; 0
    4a74:	9c 01       	movw	r18, r24
    4a76:	24 5e       	subi	r18, 0xE4	; 228
    4a78:	3f 4f       	sbci	r19, 0xFF	; 255
    4a7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a7c:	88 2f       	mov	r24, r24
    4a7e:	90 e0       	ldi	r25, 0x00	; 0
    4a80:	4c 96       	adiw	r24, 0x1c	; 28
    4a82:	b9 01       	movw	r22, r18
    4a84:	0e 94 62 14 	call	0x28c4	; 0x28c4 <Set_Column_Address>
		Set_Row_Address(c+i+1,c+30);
    4a88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a8a:	88 2f       	mov	r24, r24
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	ac 01       	movw	r20, r24
    4a90:	42 5e       	subi	r20, 0xE2	; 226
    4a92:	5f 4f       	sbci	r21, 0xFF	; 255
    4a94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a96:	28 2f       	mov	r18, r24
    4a98:	30 e0       	ldi	r19, 0x00	; 0
    4a9a:	89 81       	ldd	r24, Y+1	; 0x01
    4a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a9e:	82 0f       	add	r24, r18
    4aa0:	93 1f       	adc	r25, r19
    4aa2:	01 96       	adiw	r24, 0x01	; 1
    4aa4:	ba 01       	movw	r22, r20
    4aa6:	0e 94 78 14 	call	0x28f0	; 0x28f0 <Set_Row_Address>
		Set_Write_RAM();
    4aaa:	0e 94 8e 14 	call	0x291c	; 0x291c <Set_Write_RAM>
	Set_Row_Address(c,c+25);
	Set_Write_RAM();
	int counter = 0;
	int i = 0;
	
	for(i = 0; i < 25; i++)
    4aae:	89 81       	ldd	r24, Y+1	; 0x01
    4ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ab2:	01 96       	adiw	r24, 0x01	; 1
    4ab4:	9a 83       	std	Y+2, r25	; 0x02
    4ab6:	89 83       	std	Y+1, r24	; 0x01
    4ab8:	89 81       	ldd	r24, Y+1	; 0x01
    4aba:	9a 81       	ldd	r25, Y+2	; 0x02
    4abc:	49 97       	sbiw	r24, 0x19	; 25
    4abe:	0c f4       	brge	.+2      	; 0x4ac2 <Show_Bigger_Char+0x3e0>
    4ac0:	46 ce       	rjmp	.-884    	; 0x474e <Show_Bigger_Char+0x6c>
		}
		Set_Column_Address(Shift+a,Shift+b);
		Set_Row_Address(c+i+1,c+30);
		Set_Write_RAM();
	}
}
    4ac2:	00 00       	nop
    4ac4:	a0 96       	adiw	r28, 0x20	; 32
    4ac6:	0f b6       	in	r0, 0x3f	; 63
    4ac8:	f8 94       	cli
    4aca:	de bf       	out	0x3e, r29	; 62
    4acc:	0f be       	out	0x3f, r0	; 63
    4ace:	cd bf       	out	0x3d, r28	; 61
    4ad0:	df 91       	pop	r29
    4ad2:	cf 91       	pop	r28
    4ad4:	0f 91       	pop	r16
    4ad6:	ef 90       	pop	r14
    4ad8:	cf 90       	pop	r12
    4ada:	08 95       	ret

00004adc <Show_Big_Char>:

void Show_Big_Char(unsigned char data, unsigned char a, unsigned char b, unsigned char c, unsigned char d, unsigned char LwrNibbleBrightness, unsigned char UppNibbleBrightness)
{
    4adc:	cf 92       	push	r12
    4ade:	ef 92       	push	r14
    4ae0:	0f 93       	push	r16
    4ae2:	cf 93       	push	r28
    4ae4:	df 93       	push	r29
    4ae6:	cd b7       	in	r28, 0x3d	; 61
    4ae8:	de b7       	in	r29, 0x3e	; 62
    4aea:	6a 97       	sbiw	r28, 0x1a	; 26
    4aec:	0f b6       	in	r0, 0x3f	; 63
    4aee:	f8 94       	cli
    4af0:	de bf       	out	0x3e, r29	; 62
    4af2:	0f be       	out	0x3f, r0	; 63
    4af4:	cd bf       	out	0x3d, r28	; 61
    4af6:	8c 8b       	std	Y+20, r24	; 0x14
    4af8:	6d 8b       	std	Y+21, r22	; 0x15
    4afa:	4e 8b       	std	Y+22, r20	; 0x16
    4afc:	2f 8b       	std	Y+23, r18	; 0x17
    4afe:	08 8f       	std	Y+24, r16	; 0x18
    4b00:	e9 8e       	std	Y+25, r14	; 0x19
    4b02:	ca 8e       	std	Y+26, r12	; 0x1a
	Set_Column_Address(Shift+a,Shift+b);
    4b04:	8e 89       	ldd	r24, Y+22	; 0x16
    4b06:	88 2f       	mov	r24, r24
    4b08:	90 e0       	ldi	r25, 0x00	; 0
    4b0a:	9c 01       	movw	r18, r24
    4b0c:	24 5e       	subi	r18, 0xE4	; 228
    4b0e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b10:	8d 89       	ldd	r24, Y+21	; 0x15
    4b12:	88 2f       	mov	r24, r24
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	4c 96       	adiw	r24, 0x1c	; 28
    4b18:	b9 01       	movw	r22, r18
    4b1a:	0e 94 62 14 	call	0x28c4	; 0x28c4 <Set_Column_Address>
	Set_Row_Address(c,c+17);
    4b1e:	8f 89       	ldd	r24, Y+23	; 0x17
    4b20:	88 2f       	mov	r24, r24
    4b22:	90 e0       	ldi	r25, 0x00	; 0
    4b24:	9c 01       	movw	r18, r24
    4b26:	2f 5e       	subi	r18, 0xEF	; 239
    4b28:	3f 4f       	sbci	r19, 0xFF	; 255
    4b2a:	8f 89       	ldd	r24, Y+23	; 0x17
    4b2c:	88 2f       	mov	r24, r24
    4b2e:	90 e0       	ldi	r25, 0x00	; 0
    4b30:	b9 01       	movw	r22, r18
    4b32:	0e 94 78 14 	call	0x28f0	; 0x28f0 <Set_Row_Address>
	Set_Write_RAM();
    4b36:	0e 94 8e 14 	call	0x291c	; 0x291c <Set_Write_RAM>
	int counter = 0;
    4b3a:	1f 82       	std	Y+7, r1	; 0x07
    4b3c:	1e 82       	std	Y+6, r1	; 0x06
	int i = 0;
    4b3e:	1a 82       	std	Y+2, r1	; 0x02
    4b40:	19 82       	std	Y+1, r1	; 0x01
	
	for(i = 0; i < 17; i++)
    4b42:	1a 82       	std	Y+2, r1	; 0x02
    4b44:	19 82       	std	Y+1, r1	; 0x01
    4b46:	31 c1       	rjmp	.+610    	; 0x4daa <Show_Big_Char+0x2ce>
		//the main for loop counts through 0 to 5
		//we double each number we use here as it's all in pairs
		//so the first time we will look at (p*2) and (p*2)+1
		//if p is 0 initially these work out to 0 and 1
		//next time p will be 1 so (p*2) and (p*2)+1 will give us 2 and 3 and so on through to 10 and 11 when p = 5 at the last run
		for(int p=0;p<7;p++)
    4b48:	1c 82       	std	Y+4, r1	; 0x04
    4b4a:	1b 82       	std	Y+3, r1	; 0x03
    4b4c:	04 c1       	rjmp	.+520    	; 0x4d56 <Show_Big_Char+0x27a>
		{
			//temp variable we use each time to build each pair of pixels up
			//we set it to zero initially because until theres a pixel(s) to draw we dont want to
			uint8_t tempNibbles = 0;
    4b4e:	1d 82       	std	Y+5, r1	; 0x05
			
			//here we test if we should be looking at the first byte in the row or the second
			//since the real number we are looking at is p*2 each time we test against 4 not 8
			if(p < 4)
    4b50:	8b 81       	ldd	r24, Y+3	; 0x03
    4b52:	9c 81       	ldd	r25, Y+4	; 0x04
    4b54:	04 97       	sbiw	r24, 0x04	; 4
    4b56:	0c f0       	brlt	.+2      	; 0x4b5a <Show_Big_Char+0x7e>
    4b58:	7a c0       	rjmp	.+244    	; 0x4c4e <Show_Big_Char+0x172>
				//so we shift a 1 n times along so we can then test to see if it's a 1 or a 0 in the font
				//for example the first time it runs p = 0
				//so the test shifts 1 to the left (((3-0)*2)+1) times or 7 times to the left
				//this then ANDS the first byte in the font row with 0b10000000
				//if the result is non zero it should be a pixel so tempNibbles gets adjusted accordingly
				if(((1 << (((3-p)*2)+1) ) & (pgm_read_byte(&BigText[data-0x20][i*2]))) > 0)
    4b5a:	23 e0       	ldi	r18, 0x03	; 3
    4b5c:	30 e0       	ldi	r19, 0x00	; 0
    4b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    4b60:	9c 81       	ldd	r25, Y+4	; 0x04
    4b62:	a9 01       	movw	r20, r18
    4b64:	48 1b       	sub	r20, r24
    4b66:	59 0b       	sbc	r21, r25
    4b68:	ca 01       	movw	r24, r20
    4b6a:	88 0f       	add	r24, r24
    4b6c:	99 1f       	adc	r25, r25
    4b6e:	9c 01       	movw	r18, r24
    4b70:	2f 5f       	subi	r18, 0xFF	; 255
    4b72:	3f 4f       	sbci	r19, 0xFF	; 255
    4b74:	81 e0       	ldi	r24, 0x01	; 1
    4b76:	90 e0       	ldi	r25, 0x00	; 0
    4b78:	fc 01       	movw	r30, r24
    4b7a:	02 c0       	rjmp	.+4      	; 0x4b80 <Show_Big_Char+0xa4>
    4b7c:	ee 0f       	add	r30, r30
    4b7e:	ff 1f       	adc	r31, r31
    4b80:	2a 95       	dec	r18
    4b82:	e2 f7       	brpl	.-8      	; 0x4b7c <Show_Big_Char+0xa0>
    4b84:	9f 01       	movw	r18, r30
    4b86:	8c 89       	ldd	r24, Y+20	; 0x14
    4b88:	88 2f       	mov	r24, r24
    4b8a:	90 e0       	ldi	r25, 0x00	; 0
    4b8c:	bc 01       	movw	r22, r24
    4b8e:	60 52       	subi	r22, 0x20	; 32
    4b90:	71 09       	sbc	r23, r1
    4b92:	89 81       	ldd	r24, Y+1	; 0x01
    4b94:	9a 81       	ldd	r25, Y+2	; 0x02
    4b96:	88 0f       	add	r24, r24
    4b98:	99 1f       	adc	r25, r25
    4b9a:	e6 e2       	ldi	r30, 0x26	; 38
    4b9c:	e6 9f       	mul	r30, r22
    4b9e:	a0 01       	movw	r20, r0
    4ba0:	e7 9f       	mul	r30, r23
    4ba2:	50 0d       	add	r21, r0
    4ba4:	11 24       	eor	r1, r1
    4ba6:	84 0f       	add	r24, r20
    4ba8:	95 1f       	adc	r25, r21
    4baa:	8a 52       	subi	r24, 0x2A	; 42
    4bac:	9f 4f       	sbci	r25, 0xFF	; 255
    4bae:	99 87       	std	Y+9, r25	; 0x09
    4bb0:	88 87       	std	Y+8, r24	; 0x08
    4bb2:	88 85       	ldd	r24, Y+8	; 0x08
    4bb4:	99 85       	ldd	r25, Y+9	; 0x09
    4bb6:	fc 01       	movw	r30, r24
    4bb8:	84 91       	lpm	r24, Z
    4bba:	8a 87       	std	Y+10, r24	; 0x0a
    4bbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    4bbe:	88 2f       	mov	r24, r24
    4bc0:	90 e0       	ldi	r25, 0x00	; 0
    4bc2:	82 23       	and	r24, r18
    4bc4:	93 23       	and	r25, r19
    4bc6:	18 16       	cp	r1, r24
    4bc8:	19 06       	cpc	r1, r25
    4bca:	24 f4       	brge	.+8      	; 0x4bd4 <Show_Big_Char+0xf8>
				{
					tempNibbles += UppNibbleBrightness;
    4bcc:	9d 81       	ldd	r25, Y+5	; 0x05
    4bce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4bd0:	89 0f       	add	r24, r25
    4bd2:	8d 83       	std	Y+5, r24	; 0x05
				
				//this does the same test except it drops the plus 1
				//so the first test is ((3-p)*2) or 6 shifts left
				//it therefore compares the second byte in the font row with 0b01000000
				//it then sets the lower nibble on if there was a pixel match
				if(((1 << ((3-p)*2) & (pgm_read_byte(&BigText[data-0x20][i*2]))) > 0))
    4bd4:	23 e0       	ldi	r18, 0x03	; 3
    4bd6:	30 e0       	ldi	r19, 0x00	; 0
    4bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    4bda:	9c 81       	ldd	r25, Y+4	; 0x04
    4bdc:	a9 01       	movw	r20, r18
    4bde:	48 1b       	sub	r20, r24
    4be0:	59 0b       	sbc	r21, r25
    4be2:	ca 01       	movw	r24, r20
    4be4:	9c 01       	movw	r18, r24
    4be6:	22 0f       	add	r18, r18
    4be8:	33 1f       	adc	r19, r19
    4bea:	81 e0       	ldi	r24, 0x01	; 1
    4bec:	90 e0       	ldi	r25, 0x00	; 0
    4bee:	fc 01       	movw	r30, r24
    4bf0:	02 c0       	rjmp	.+4      	; 0x4bf6 <Show_Big_Char+0x11a>
    4bf2:	ee 0f       	add	r30, r30
    4bf4:	ff 1f       	adc	r31, r31
    4bf6:	2a 95       	dec	r18
    4bf8:	e2 f7       	brpl	.-8      	; 0x4bf2 <Show_Big_Char+0x116>
    4bfa:	9f 01       	movw	r18, r30
    4bfc:	8c 89       	ldd	r24, Y+20	; 0x14
    4bfe:	88 2f       	mov	r24, r24
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	bc 01       	movw	r22, r24
    4c04:	60 52       	subi	r22, 0x20	; 32
    4c06:	71 09       	sbc	r23, r1
    4c08:	89 81       	ldd	r24, Y+1	; 0x01
    4c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c0c:	88 0f       	add	r24, r24
    4c0e:	99 1f       	adc	r25, r25
    4c10:	e6 e2       	ldi	r30, 0x26	; 38
    4c12:	e6 9f       	mul	r30, r22
    4c14:	a0 01       	movw	r20, r0
    4c16:	e7 9f       	mul	r30, r23
    4c18:	50 0d       	add	r21, r0
    4c1a:	11 24       	eor	r1, r1
    4c1c:	84 0f       	add	r24, r20
    4c1e:	95 1f       	adc	r25, r21
    4c20:	8a 52       	subi	r24, 0x2A	; 42
    4c22:	9f 4f       	sbci	r25, 0xFF	; 255
    4c24:	9c 87       	std	Y+12, r25	; 0x0c
    4c26:	8b 87       	std	Y+11, r24	; 0x0b
    4c28:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c2a:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c2c:	fc 01       	movw	r30, r24
    4c2e:	84 91       	lpm	r24, Z
    4c30:	8d 87       	std	Y+13, r24	; 0x0d
    4c32:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c34:	88 2f       	mov	r24, r24
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	82 23       	and	r24, r18
    4c3a:	93 23       	and	r25, r19
    4c3c:	18 16       	cp	r1, r24
    4c3e:	19 06       	cpc	r1, r25
    4c40:	0c f0       	brlt	.+2      	; 0x4c44 <Show_Big_Char+0x168>
    4c42:	7f c0       	rjmp	.+254    	; 0x4d42 <Show_Big_Char+0x266>
				{
					tempNibbles += LwrNibbleBrightness;
    4c44:	9d 81       	ldd	r25, Y+5	; 0x05
    4c46:	89 8d       	ldd	r24, Y+25	; 0x19
    4c48:	89 0f       	add	r24, r25
    4c4a:	8d 83       	std	Y+5, r24	; 0x05
    4c4c:	7a c0       	rjmp	.+244    	; 0x4d42 <Show_Big_Char+0x266>
			//this means that on the first pass through for example, when p would be 4
			//the left bit shift is (((7-4)*2)+1) which is 7 so we get to AND against 0b10000000 against
			//only this time on the second byte in the font row
			else
			{
				if(((1 << (((7-p)*2)+1) & (pgm_read_byte(&BigText[data-0x20][((i*2)+1)]))) > 0))
    4c4e:	27 e0       	ldi	r18, 0x07	; 7
    4c50:	30 e0       	ldi	r19, 0x00	; 0
    4c52:	8b 81       	ldd	r24, Y+3	; 0x03
    4c54:	9c 81       	ldd	r25, Y+4	; 0x04
    4c56:	a9 01       	movw	r20, r18
    4c58:	48 1b       	sub	r20, r24
    4c5a:	59 0b       	sbc	r21, r25
    4c5c:	ca 01       	movw	r24, r20
    4c5e:	88 0f       	add	r24, r24
    4c60:	99 1f       	adc	r25, r25
    4c62:	9c 01       	movw	r18, r24
    4c64:	2f 5f       	subi	r18, 0xFF	; 255
    4c66:	3f 4f       	sbci	r19, 0xFF	; 255
    4c68:	81 e0       	ldi	r24, 0x01	; 1
    4c6a:	90 e0       	ldi	r25, 0x00	; 0
    4c6c:	fc 01       	movw	r30, r24
    4c6e:	02 c0       	rjmp	.+4      	; 0x4c74 <Show_Big_Char+0x198>
    4c70:	ee 0f       	add	r30, r30
    4c72:	ff 1f       	adc	r31, r31
    4c74:	2a 95       	dec	r18
    4c76:	e2 f7       	brpl	.-8      	; 0x4c70 <Show_Big_Char+0x194>
    4c78:	9f 01       	movw	r18, r30
    4c7a:	8c 89       	ldd	r24, Y+20	; 0x14
    4c7c:	88 2f       	mov	r24, r24
    4c7e:	90 e0       	ldi	r25, 0x00	; 0
    4c80:	bc 01       	movw	r22, r24
    4c82:	60 52       	subi	r22, 0x20	; 32
    4c84:	71 09       	sbc	r23, r1
    4c86:	89 81       	ldd	r24, Y+1	; 0x01
    4c88:	9a 81       	ldd	r25, Y+2	; 0x02
    4c8a:	88 0f       	add	r24, r24
    4c8c:	99 1f       	adc	r25, r25
    4c8e:	01 96       	adiw	r24, 0x01	; 1
    4c90:	e6 e2       	ldi	r30, 0x26	; 38
    4c92:	e6 9f       	mul	r30, r22
    4c94:	a0 01       	movw	r20, r0
    4c96:	e7 9f       	mul	r30, r23
    4c98:	50 0d       	add	r21, r0
    4c9a:	11 24       	eor	r1, r1
    4c9c:	84 0f       	add	r24, r20
    4c9e:	95 1f       	adc	r25, r21
    4ca0:	8a 52       	subi	r24, 0x2A	; 42
    4ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ca4:	9f 87       	std	Y+15, r25	; 0x0f
    4ca6:	8e 87       	std	Y+14, r24	; 0x0e
    4ca8:	8e 85       	ldd	r24, Y+14	; 0x0e
    4caa:	9f 85       	ldd	r25, Y+15	; 0x0f
    4cac:	fc 01       	movw	r30, r24
    4cae:	84 91       	lpm	r24, Z
    4cb0:	88 8b       	std	Y+16, r24	; 0x10
    4cb2:	88 89       	ldd	r24, Y+16	; 0x10
    4cb4:	88 2f       	mov	r24, r24
    4cb6:	90 e0       	ldi	r25, 0x00	; 0
    4cb8:	82 23       	and	r24, r18
    4cba:	93 23       	and	r25, r19
    4cbc:	18 16       	cp	r1, r24
    4cbe:	19 06       	cpc	r1, r25
    4cc0:	24 f4       	brge	.+8      	; 0x4cca <Show_Big_Char+0x1ee>
				{
					tempNibbles += UppNibbleBrightness;
    4cc2:	9d 81       	ldd	r25, Y+5	; 0x05
    4cc4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4cc6:	89 0f       	add	r24, r25
    4cc8:	8d 83       	std	Y+5, r24	; 0x05
				
				//this does the same test except it drops the plus 1
				//so the first test is ((3-p)*2) or 6 shifts left
				//it therefore compares the second byte in the font row with 0b01000000
				//it then sets the lower nibble on if there was a pixel match
				if(((1 << ((7-p)*2) & (pgm_read_byte(&BigText[data-0x20][((i*2)+1)]))) > 0))
    4cca:	27 e0       	ldi	r18, 0x07	; 7
    4ccc:	30 e0       	ldi	r19, 0x00	; 0
    4cce:	8b 81       	ldd	r24, Y+3	; 0x03
    4cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    4cd2:	a9 01       	movw	r20, r18
    4cd4:	48 1b       	sub	r20, r24
    4cd6:	59 0b       	sbc	r21, r25
    4cd8:	ca 01       	movw	r24, r20
    4cda:	9c 01       	movw	r18, r24
    4cdc:	22 0f       	add	r18, r18
    4cde:	33 1f       	adc	r19, r19
    4ce0:	81 e0       	ldi	r24, 0x01	; 1
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	fc 01       	movw	r30, r24
    4ce6:	02 c0       	rjmp	.+4      	; 0x4cec <Show_Big_Char+0x210>
    4ce8:	ee 0f       	add	r30, r30
    4cea:	ff 1f       	adc	r31, r31
    4cec:	2a 95       	dec	r18
    4cee:	e2 f7       	brpl	.-8      	; 0x4ce8 <Show_Big_Char+0x20c>
    4cf0:	9f 01       	movw	r18, r30
    4cf2:	8c 89       	ldd	r24, Y+20	; 0x14
    4cf4:	88 2f       	mov	r24, r24
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	bc 01       	movw	r22, r24
    4cfa:	60 52       	subi	r22, 0x20	; 32
    4cfc:	71 09       	sbc	r23, r1
    4cfe:	89 81       	ldd	r24, Y+1	; 0x01
    4d00:	9a 81       	ldd	r25, Y+2	; 0x02
    4d02:	88 0f       	add	r24, r24
    4d04:	99 1f       	adc	r25, r25
    4d06:	01 96       	adiw	r24, 0x01	; 1
    4d08:	e6 e2       	ldi	r30, 0x26	; 38
    4d0a:	e6 9f       	mul	r30, r22
    4d0c:	a0 01       	movw	r20, r0
    4d0e:	e7 9f       	mul	r30, r23
    4d10:	50 0d       	add	r21, r0
    4d12:	11 24       	eor	r1, r1
    4d14:	84 0f       	add	r24, r20
    4d16:	95 1f       	adc	r25, r21
    4d18:	8a 52       	subi	r24, 0x2A	; 42
    4d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    4d1c:	9a 8b       	std	Y+18, r25	; 0x12
    4d1e:	89 8b       	std	Y+17, r24	; 0x11
    4d20:	89 89       	ldd	r24, Y+17	; 0x11
    4d22:	9a 89       	ldd	r25, Y+18	; 0x12
    4d24:	fc 01       	movw	r30, r24
    4d26:	84 91       	lpm	r24, Z
    4d28:	8b 8b       	std	Y+19, r24	; 0x13
    4d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    4d2c:	88 2f       	mov	r24, r24
    4d2e:	90 e0       	ldi	r25, 0x00	; 0
    4d30:	82 23       	and	r24, r18
    4d32:	93 23       	and	r25, r19
    4d34:	18 16       	cp	r1, r24
    4d36:	19 06       	cpc	r1, r25
    4d38:	24 f4       	brge	.+8      	; 0x4d42 <Show_Big_Char+0x266>
				{
					tempNibbles += LwrNibbleBrightness;
    4d3a:	9d 81       	ldd	r25, Y+5	; 0x05
    4d3c:	89 8d       	ldd	r24, Y+25	; 0x19
    4d3e:	89 0f       	add	r24, r25
    4d40:	8d 83       	std	Y+5, r24	; 0x05
				}
			}
			
			//Now we have a temporary 8 bit number with 2 pixels embedded in it we can send it to the screen
			Write_Data(tempNibbles);
    4d42:	8d 81       	ldd	r24, Y+5	; 0x05
    4d44:	88 2f       	mov	r24, r24
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	0e 94 30 14 	call	0x2860	; 0x2860 <Write_Data>
		//the main for loop counts through 0 to 5
		//we double each number we use here as it's all in pairs
		//so the first time we will look at (p*2) and (p*2)+1
		//if p is 0 initially these work out to 0 and 1
		//next time p will be 1 so (p*2) and (p*2)+1 will give us 2 and 3 and so on through to 10 and 11 when p = 5 at the last run
		for(int p=0;p<7;p++)
    4d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    4d50:	01 96       	adiw	r24, 0x01	; 1
    4d52:	9c 83       	std	Y+4, r25	; 0x04
    4d54:	8b 83       	std	Y+3, r24	; 0x03
    4d56:	8b 81       	ldd	r24, Y+3	; 0x03
    4d58:	9c 81       	ldd	r25, Y+4	; 0x04
    4d5a:	07 97       	sbiw	r24, 0x07	; 7
    4d5c:	0c f4       	brge	.+2      	; 0x4d60 <Show_Big_Char+0x284>
    4d5e:	f7 ce       	rjmp	.-530    	; 0x4b4e <Show_Big_Char+0x72>
			}
			
			//Now we have a temporary 8 bit number with 2 pixels embedded in it we can send it to the screen
			Write_Data(tempNibbles);
		}
		Set_Column_Address(Shift+a,Shift+b);
    4d60:	8e 89       	ldd	r24, Y+22	; 0x16
    4d62:	88 2f       	mov	r24, r24
    4d64:	90 e0       	ldi	r25, 0x00	; 0
    4d66:	9c 01       	movw	r18, r24
    4d68:	24 5e       	subi	r18, 0xE4	; 228
    4d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d6c:	8d 89       	ldd	r24, Y+21	; 0x15
    4d6e:	88 2f       	mov	r24, r24
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	4c 96       	adiw	r24, 0x1c	; 28
    4d74:	b9 01       	movw	r22, r18
    4d76:	0e 94 62 14 	call	0x28c4	; 0x28c4 <Set_Column_Address>
		Set_Row_Address(c+i+1,c+17);
    4d7a:	8f 89       	ldd	r24, Y+23	; 0x17
    4d7c:	88 2f       	mov	r24, r24
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	ac 01       	movw	r20, r24
    4d82:	4f 5e       	subi	r20, 0xEF	; 239
    4d84:	5f 4f       	sbci	r21, 0xFF	; 255
    4d86:	8f 89       	ldd	r24, Y+23	; 0x17
    4d88:	28 2f       	mov	r18, r24
    4d8a:	30 e0       	ldi	r19, 0x00	; 0
    4d8c:	89 81       	ldd	r24, Y+1	; 0x01
    4d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    4d90:	82 0f       	add	r24, r18
    4d92:	93 1f       	adc	r25, r19
    4d94:	01 96       	adiw	r24, 0x01	; 1
    4d96:	ba 01       	movw	r22, r20
    4d98:	0e 94 78 14 	call	0x28f0	; 0x28f0 <Set_Row_Address>
		Set_Write_RAM();
    4d9c:	0e 94 8e 14 	call	0x291c	; 0x291c <Set_Write_RAM>
	Set_Row_Address(c,c+17);
	Set_Write_RAM();
	int counter = 0;
	int i = 0;
	
	for(i = 0; i < 17; i++)
    4da0:	89 81       	ldd	r24, Y+1	; 0x01
    4da2:	9a 81       	ldd	r25, Y+2	; 0x02
    4da4:	01 96       	adiw	r24, 0x01	; 1
    4da6:	9a 83       	std	Y+2, r25	; 0x02
    4da8:	89 83       	std	Y+1, r24	; 0x01
    4daa:	89 81       	ldd	r24, Y+1	; 0x01
    4dac:	9a 81       	ldd	r25, Y+2	; 0x02
    4dae:	41 97       	sbiw	r24, 0x11	; 17
    4db0:	0c f4       	brge	.+2      	; 0x4db4 <Show_Big_Char+0x2d8>
    4db2:	ca ce       	rjmp	.-620    	; 0x4b48 <Show_Big_Char+0x6c>
		}
		Set_Column_Address(Shift+a,Shift+b);
		Set_Row_Address(c+i+1,c+17);
		Set_Write_RAM();
	}
    4db4:	00 00       	nop
    4db6:	6a 96       	adiw	r28, 0x1a	; 26
    4db8:	0f b6       	in	r0, 0x3f	; 63
    4dba:	f8 94       	cli
    4dbc:	de bf       	out	0x3e, r29	; 62
    4dbe:	0f be       	out	0x3f, r0	; 63
    4dc0:	cd bf       	out	0x3d, r28	; 61
    4dc2:	df 91       	pop	r29
    4dc4:	cf 91       	pop	r28
    4dc6:	0f 91       	pop	r16
    4dc8:	ef 90       	pop	r14
    4dca:	cf 90       	pop	r12
    4dcc:	08 95       	ret

00004dce <__subsf3>:
    4dce:	50 58       	subi	r21, 0x80	; 128

00004dd0 <__addsf3>:
    4dd0:	bb 27       	eor	r27, r27
    4dd2:	aa 27       	eor	r26, r26
    4dd4:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <__addsf3x>
    4dd8:	0c 94 07 28 	jmp	0x500e	; 0x500e <__fp_round>
    4ddc:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <__fp_pscA>
    4de0:	38 f0       	brcs	.+14     	; 0x4df0 <__addsf3+0x20>
    4de2:	0e 94 00 28 	call	0x5000	; 0x5000 <__fp_pscB>
    4de6:	20 f0       	brcs	.+8      	; 0x4df0 <__addsf3+0x20>
    4de8:	39 f4       	brne	.+14     	; 0x4df8 <__addsf3+0x28>
    4dea:	9f 3f       	cpi	r25, 0xFF	; 255
    4dec:	19 f4       	brne	.+6      	; 0x4df4 <__addsf3+0x24>
    4dee:	26 f4       	brtc	.+8      	; 0x4df8 <__addsf3+0x28>
    4df0:	0c 94 f6 27 	jmp	0x4fec	; 0x4fec <__fp_nan>
    4df4:	0e f4       	brtc	.+2      	; 0x4df8 <__addsf3+0x28>
    4df6:	e0 95       	com	r30
    4df8:	e7 fb       	bst	r30, 7
    4dfa:	0c 94 f0 27 	jmp	0x4fe0	; 0x4fe0 <__fp_inf>

00004dfe <__addsf3x>:
    4dfe:	e9 2f       	mov	r30, r25
    4e00:	0e 94 18 28 	call	0x5030	; 0x5030 <__fp_split3>
    4e04:	58 f3       	brcs	.-42     	; 0x4ddc <__addsf3+0xc>
    4e06:	ba 17       	cp	r27, r26
    4e08:	62 07       	cpc	r22, r18
    4e0a:	73 07       	cpc	r23, r19
    4e0c:	84 07       	cpc	r24, r20
    4e0e:	95 07       	cpc	r25, r21
    4e10:	20 f0       	brcs	.+8      	; 0x4e1a <__addsf3x+0x1c>
    4e12:	79 f4       	brne	.+30     	; 0x4e32 <__addsf3x+0x34>
    4e14:	a6 f5       	brtc	.+104    	; 0x4e7e <__addsf3x+0x80>
    4e16:	0c 94 3a 28 	jmp	0x5074	; 0x5074 <__fp_zero>
    4e1a:	0e f4       	brtc	.+2      	; 0x4e1e <__addsf3x+0x20>
    4e1c:	e0 95       	com	r30
    4e1e:	0b 2e       	mov	r0, r27
    4e20:	ba 2f       	mov	r27, r26
    4e22:	a0 2d       	mov	r26, r0
    4e24:	0b 01       	movw	r0, r22
    4e26:	b9 01       	movw	r22, r18
    4e28:	90 01       	movw	r18, r0
    4e2a:	0c 01       	movw	r0, r24
    4e2c:	ca 01       	movw	r24, r20
    4e2e:	a0 01       	movw	r20, r0
    4e30:	11 24       	eor	r1, r1
    4e32:	ff 27       	eor	r31, r31
    4e34:	59 1b       	sub	r21, r25
    4e36:	99 f0       	breq	.+38     	; 0x4e5e <__addsf3x+0x60>
    4e38:	59 3f       	cpi	r21, 0xF9	; 249
    4e3a:	50 f4       	brcc	.+20     	; 0x4e50 <__addsf3x+0x52>
    4e3c:	50 3e       	cpi	r21, 0xE0	; 224
    4e3e:	68 f1       	brcs	.+90     	; 0x4e9a <__addsf3x+0x9c>
    4e40:	1a 16       	cp	r1, r26
    4e42:	f0 40       	sbci	r31, 0x00	; 0
    4e44:	a2 2f       	mov	r26, r18
    4e46:	23 2f       	mov	r18, r19
    4e48:	34 2f       	mov	r19, r20
    4e4a:	44 27       	eor	r20, r20
    4e4c:	58 5f       	subi	r21, 0xF8	; 248
    4e4e:	f3 cf       	rjmp	.-26     	; 0x4e36 <__addsf3x+0x38>
    4e50:	46 95       	lsr	r20
    4e52:	37 95       	ror	r19
    4e54:	27 95       	ror	r18
    4e56:	a7 95       	ror	r26
    4e58:	f0 40       	sbci	r31, 0x00	; 0
    4e5a:	53 95       	inc	r21
    4e5c:	c9 f7       	brne	.-14     	; 0x4e50 <__addsf3x+0x52>
    4e5e:	7e f4       	brtc	.+30     	; 0x4e7e <__addsf3x+0x80>
    4e60:	1f 16       	cp	r1, r31
    4e62:	ba 0b       	sbc	r27, r26
    4e64:	62 0b       	sbc	r22, r18
    4e66:	73 0b       	sbc	r23, r19
    4e68:	84 0b       	sbc	r24, r20
    4e6a:	ba f0       	brmi	.+46     	; 0x4e9a <__addsf3x+0x9c>
    4e6c:	91 50       	subi	r25, 0x01	; 1
    4e6e:	a1 f0       	breq	.+40     	; 0x4e98 <__addsf3x+0x9a>
    4e70:	ff 0f       	add	r31, r31
    4e72:	bb 1f       	adc	r27, r27
    4e74:	66 1f       	adc	r22, r22
    4e76:	77 1f       	adc	r23, r23
    4e78:	88 1f       	adc	r24, r24
    4e7a:	c2 f7       	brpl	.-16     	; 0x4e6c <__addsf3x+0x6e>
    4e7c:	0e c0       	rjmp	.+28     	; 0x4e9a <__addsf3x+0x9c>
    4e7e:	ba 0f       	add	r27, r26
    4e80:	62 1f       	adc	r22, r18
    4e82:	73 1f       	adc	r23, r19
    4e84:	84 1f       	adc	r24, r20
    4e86:	48 f4       	brcc	.+18     	; 0x4e9a <__addsf3x+0x9c>
    4e88:	87 95       	ror	r24
    4e8a:	77 95       	ror	r23
    4e8c:	67 95       	ror	r22
    4e8e:	b7 95       	ror	r27
    4e90:	f7 95       	ror	r31
    4e92:	9e 3f       	cpi	r25, 0xFE	; 254
    4e94:	08 f0       	brcs	.+2      	; 0x4e98 <__addsf3x+0x9a>
    4e96:	b0 cf       	rjmp	.-160    	; 0x4df8 <__addsf3+0x28>
    4e98:	93 95       	inc	r25
    4e9a:	88 0f       	add	r24, r24
    4e9c:	08 f0       	brcs	.+2      	; 0x4ea0 <__addsf3x+0xa2>
    4e9e:	99 27       	eor	r25, r25
    4ea0:	ee 0f       	add	r30, r30
    4ea2:	97 95       	ror	r25
    4ea4:	87 95       	ror	r24
    4ea6:	08 95       	ret

00004ea8 <__cmpsf2>:
    4ea8:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <__fp_cmp>
    4eac:	08 f4       	brcc	.+2      	; 0x4eb0 <__cmpsf2+0x8>
    4eae:	81 e0       	ldi	r24, 0x01	; 1
    4eb0:	08 95       	ret

00004eb2 <__fixsfsi>:
    4eb2:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <__fixunssfsi>
    4eb6:	68 94       	set
    4eb8:	b1 11       	cpse	r27, r1
    4eba:	0c 94 3b 28 	jmp	0x5076	; 0x5076 <__fp_szero>
    4ebe:	08 95       	ret

00004ec0 <__fixunssfsi>:
    4ec0:	0e 94 20 28 	call	0x5040	; 0x5040 <__fp_splitA>
    4ec4:	88 f0       	brcs	.+34     	; 0x4ee8 <__fixunssfsi+0x28>
    4ec6:	9f 57       	subi	r25, 0x7F	; 127
    4ec8:	98 f0       	brcs	.+38     	; 0x4ef0 <__fixunssfsi+0x30>
    4eca:	b9 2f       	mov	r27, r25
    4ecc:	99 27       	eor	r25, r25
    4ece:	b7 51       	subi	r27, 0x17	; 23
    4ed0:	b0 f0       	brcs	.+44     	; 0x4efe <__fixunssfsi+0x3e>
    4ed2:	e1 f0       	breq	.+56     	; 0x4f0c <__fixunssfsi+0x4c>
    4ed4:	66 0f       	add	r22, r22
    4ed6:	77 1f       	adc	r23, r23
    4ed8:	88 1f       	adc	r24, r24
    4eda:	99 1f       	adc	r25, r25
    4edc:	1a f0       	brmi	.+6      	; 0x4ee4 <__fixunssfsi+0x24>
    4ede:	ba 95       	dec	r27
    4ee0:	c9 f7       	brne	.-14     	; 0x4ed4 <__fixunssfsi+0x14>
    4ee2:	14 c0       	rjmp	.+40     	; 0x4f0c <__fixunssfsi+0x4c>
    4ee4:	b1 30       	cpi	r27, 0x01	; 1
    4ee6:	91 f0       	breq	.+36     	; 0x4f0c <__fixunssfsi+0x4c>
    4ee8:	0e 94 3a 28 	call	0x5074	; 0x5074 <__fp_zero>
    4eec:	b1 e0       	ldi	r27, 0x01	; 1
    4eee:	08 95       	ret
    4ef0:	0c 94 3a 28 	jmp	0x5074	; 0x5074 <__fp_zero>
    4ef4:	67 2f       	mov	r22, r23
    4ef6:	78 2f       	mov	r23, r24
    4ef8:	88 27       	eor	r24, r24
    4efa:	b8 5f       	subi	r27, 0xF8	; 248
    4efc:	39 f0       	breq	.+14     	; 0x4f0c <__fixunssfsi+0x4c>
    4efe:	b9 3f       	cpi	r27, 0xF9	; 249
    4f00:	cc f3       	brlt	.-14     	; 0x4ef4 <__fixunssfsi+0x34>
    4f02:	86 95       	lsr	r24
    4f04:	77 95       	ror	r23
    4f06:	67 95       	ror	r22
    4f08:	b3 95       	inc	r27
    4f0a:	d9 f7       	brne	.-10     	; 0x4f02 <__fixunssfsi+0x42>
    4f0c:	3e f4       	brtc	.+14     	; 0x4f1c <__fixunssfsi+0x5c>
    4f0e:	90 95       	com	r25
    4f10:	80 95       	com	r24
    4f12:	70 95       	com	r23
    4f14:	61 95       	neg	r22
    4f16:	7f 4f       	sbci	r23, 0xFF	; 255
    4f18:	8f 4f       	sbci	r24, 0xFF	; 255
    4f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    4f1c:	08 95       	ret

00004f1e <__floatunsisf>:
    4f1e:	e8 94       	clt
    4f20:	09 c0       	rjmp	.+18     	; 0x4f34 <__floatsisf+0x12>

00004f22 <__floatsisf>:
    4f22:	97 fb       	bst	r25, 7
    4f24:	3e f4       	brtc	.+14     	; 0x4f34 <__floatsisf+0x12>
    4f26:	90 95       	com	r25
    4f28:	80 95       	com	r24
    4f2a:	70 95       	com	r23
    4f2c:	61 95       	neg	r22
    4f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    4f30:	8f 4f       	sbci	r24, 0xFF	; 255
    4f32:	9f 4f       	sbci	r25, 0xFF	; 255
    4f34:	99 23       	and	r25, r25
    4f36:	a9 f0       	breq	.+42     	; 0x4f62 <__floatsisf+0x40>
    4f38:	f9 2f       	mov	r31, r25
    4f3a:	96 e9       	ldi	r25, 0x96	; 150
    4f3c:	bb 27       	eor	r27, r27
    4f3e:	93 95       	inc	r25
    4f40:	f6 95       	lsr	r31
    4f42:	87 95       	ror	r24
    4f44:	77 95       	ror	r23
    4f46:	67 95       	ror	r22
    4f48:	b7 95       	ror	r27
    4f4a:	f1 11       	cpse	r31, r1
    4f4c:	f8 cf       	rjmp	.-16     	; 0x4f3e <__floatsisf+0x1c>
    4f4e:	fa f4       	brpl	.+62     	; 0x4f8e <__floatsisf+0x6c>
    4f50:	bb 0f       	add	r27, r27
    4f52:	11 f4       	brne	.+4      	; 0x4f58 <__floatsisf+0x36>
    4f54:	60 ff       	sbrs	r22, 0
    4f56:	1b c0       	rjmp	.+54     	; 0x4f8e <__floatsisf+0x6c>
    4f58:	6f 5f       	subi	r22, 0xFF	; 255
    4f5a:	7f 4f       	sbci	r23, 0xFF	; 255
    4f5c:	8f 4f       	sbci	r24, 0xFF	; 255
    4f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    4f60:	16 c0       	rjmp	.+44     	; 0x4f8e <__floatsisf+0x6c>
    4f62:	88 23       	and	r24, r24
    4f64:	11 f0       	breq	.+4      	; 0x4f6a <__floatsisf+0x48>
    4f66:	96 e9       	ldi	r25, 0x96	; 150
    4f68:	11 c0       	rjmp	.+34     	; 0x4f8c <__floatsisf+0x6a>
    4f6a:	77 23       	and	r23, r23
    4f6c:	21 f0       	breq	.+8      	; 0x4f76 <__floatsisf+0x54>
    4f6e:	9e e8       	ldi	r25, 0x8E	; 142
    4f70:	87 2f       	mov	r24, r23
    4f72:	76 2f       	mov	r23, r22
    4f74:	05 c0       	rjmp	.+10     	; 0x4f80 <__floatsisf+0x5e>
    4f76:	66 23       	and	r22, r22
    4f78:	71 f0       	breq	.+28     	; 0x4f96 <__floatsisf+0x74>
    4f7a:	96 e8       	ldi	r25, 0x86	; 134
    4f7c:	86 2f       	mov	r24, r22
    4f7e:	70 e0       	ldi	r23, 0x00	; 0
    4f80:	60 e0       	ldi	r22, 0x00	; 0
    4f82:	2a f0       	brmi	.+10     	; 0x4f8e <__floatsisf+0x6c>
    4f84:	9a 95       	dec	r25
    4f86:	66 0f       	add	r22, r22
    4f88:	77 1f       	adc	r23, r23
    4f8a:	88 1f       	adc	r24, r24
    4f8c:	da f7       	brpl	.-10     	; 0x4f84 <__floatsisf+0x62>
    4f8e:	88 0f       	add	r24, r24
    4f90:	96 95       	lsr	r25
    4f92:	87 95       	ror	r24
    4f94:	97 f9       	bld	r25, 7
    4f96:	08 95       	ret

00004f98 <__fp_cmp>:
    4f98:	99 0f       	add	r25, r25
    4f9a:	00 08       	sbc	r0, r0
    4f9c:	55 0f       	add	r21, r21
    4f9e:	aa 0b       	sbc	r26, r26
    4fa0:	e0 e8       	ldi	r30, 0x80	; 128
    4fa2:	fe ef       	ldi	r31, 0xFE	; 254
    4fa4:	16 16       	cp	r1, r22
    4fa6:	17 06       	cpc	r1, r23
    4fa8:	e8 07       	cpc	r30, r24
    4faa:	f9 07       	cpc	r31, r25
    4fac:	c0 f0       	brcs	.+48     	; 0x4fde <__fp_cmp+0x46>
    4fae:	12 16       	cp	r1, r18
    4fb0:	13 06       	cpc	r1, r19
    4fb2:	e4 07       	cpc	r30, r20
    4fb4:	f5 07       	cpc	r31, r21
    4fb6:	98 f0       	brcs	.+38     	; 0x4fde <__fp_cmp+0x46>
    4fb8:	62 1b       	sub	r22, r18
    4fba:	73 0b       	sbc	r23, r19
    4fbc:	84 0b       	sbc	r24, r20
    4fbe:	95 0b       	sbc	r25, r21
    4fc0:	39 f4       	brne	.+14     	; 0x4fd0 <__fp_cmp+0x38>
    4fc2:	0a 26       	eor	r0, r26
    4fc4:	61 f0       	breq	.+24     	; 0x4fde <__fp_cmp+0x46>
    4fc6:	23 2b       	or	r18, r19
    4fc8:	24 2b       	or	r18, r20
    4fca:	25 2b       	or	r18, r21
    4fcc:	21 f4       	brne	.+8      	; 0x4fd6 <__fp_cmp+0x3e>
    4fce:	08 95       	ret
    4fd0:	0a 26       	eor	r0, r26
    4fd2:	09 f4       	brne	.+2      	; 0x4fd6 <__fp_cmp+0x3e>
    4fd4:	a1 40       	sbci	r26, 0x01	; 1
    4fd6:	a6 95       	lsr	r26
    4fd8:	8f ef       	ldi	r24, 0xFF	; 255
    4fda:	81 1d       	adc	r24, r1
    4fdc:	81 1d       	adc	r24, r1
    4fde:	08 95       	ret

00004fe0 <__fp_inf>:
    4fe0:	97 f9       	bld	r25, 7
    4fe2:	9f 67       	ori	r25, 0x7F	; 127
    4fe4:	80 e8       	ldi	r24, 0x80	; 128
    4fe6:	70 e0       	ldi	r23, 0x00	; 0
    4fe8:	60 e0       	ldi	r22, 0x00	; 0
    4fea:	08 95       	ret

00004fec <__fp_nan>:
    4fec:	9f ef       	ldi	r25, 0xFF	; 255
    4fee:	80 ec       	ldi	r24, 0xC0	; 192
    4ff0:	08 95       	ret

00004ff2 <__fp_pscA>:
    4ff2:	00 24       	eor	r0, r0
    4ff4:	0a 94       	dec	r0
    4ff6:	16 16       	cp	r1, r22
    4ff8:	17 06       	cpc	r1, r23
    4ffa:	18 06       	cpc	r1, r24
    4ffc:	09 06       	cpc	r0, r25
    4ffe:	08 95       	ret

00005000 <__fp_pscB>:
    5000:	00 24       	eor	r0, r0
    5002:	0a 94       	dec	r0
    5004:	12 16       	cp	r1, r18
    5006:	13 06       	cpc	r1, r19
    5008:	14 06       	cpc	r1, r20
    500a:	05 06       	cpc	r0, r21
    500c:	08 95       	ret

0000500e <__fp_round>:
    500e:	09 2e       	mov	r0, r25
    5010:	03 94       	inc	r0
    5012:	00 0c       	add	r0, r0
    5014:	11 f4       	brne	.+4      	; 0x501a <__fp_round+0xc>
    5016:	88 23       	and	r24, r24
    5018:	52 f0       	brmi	.+20     	; 0x502e <__fp_round+0x20>
    501a:	bb 0f       	add	r27, r27
    501c:	40 f4       	brcc	.+16     	; 0x502e <__fp_round+0x20>
    501e:	bf 2b       	or	r27, r31
    5020:	11 f4       	brne	.+4      	; 0x5026 <__fp_round+0x18>
    5022:	60 ff       	sbrs	r22, 0
    5024:	04 c0       	rjmp	.+8      	; 0x502e <__fp_round+0x20>
    5026:	6f 5f       	subi	r22, 0xFF	; 255
    5028:	7f 4f       	sbci	r23, 0xFF	; 255
    502a:	8f 4f       	sbci	r24, 0xFF	; 255
    502c:	9f 4f       	sbci	r25, 0xFF	; 255
    502e:	08 95       	ret

00005030 <__fp_split3>:
    5030:	57 fd       	sbrc	r21, 7
    5032:	90 58       	subi	r25, 0x80	; 128
    5034:	44 0f       	add	r20, r20
    5036:	55 1f       	adc	r21, r21
    5038:	59 f0       	breq	.+22     	; 0x5050 <__fp_splitA+0x10>
    503a:	5f 3f       	cpi	r21, 0xFF	; 255
    503c:	71 f0       	breq	.+28     	; 0x505a <__fp_splitA+0x1a>
    503e:	47 95       	ror	r20

00005040 <__fp_splitA>:
    5040:	88 0f       	add	r24, r24
    5042:	97 fb       	bst	r25, 7
    5044:	99 1f       	adc	r25, r25
    5046:	61 f0       	breq	.+24     	; 0x5060 <__fp_splitA+0x20>
    5048:	9f 3f       	cpi	r25, 0xFF	; 255
    504a:	79 f0       	breq	.+30     	; 0x506a <__fp_splitA+0x2a>
    504c:	87 95       	ror	r24
    504e:	08 95       	ret
    5050:	12 16       	cp	r1, r18
    5052:	13 06       	cpc	r1, r19
    5054:	14 06       	cpc	r1, r20
    5056:	55 1f       	adc	r21, r21
    5058:	f2 cf       	rjmp	.-28     	; 0x503e <__fp_split3+0xe>
    505a:	46 95       	lsr	r20
    505c:	f1 df       	rcall	.-30     	; 0x5040 <__fp_splitA>
    505e:	08 c0       	rjmp	.+16     	; 0x5070 <__fp_splitA+0x30>
    5060:	16 16       	cp	r1, r22
    5062:	17 06       	cpc	r1, r23
    5064:	18 06       	cpc	r1, r24
    5066:	99 1f       	adc	r25, r25
    5068:	f1 cf       	rjmp	.-30     	; 0x504c <__fp_splitA+0xc>
    506a:	86 95       	lsr	r24
    506c:	71 05       	cpc	r23, r1
    506e:	61 05       	cpc	r22, r1
    5070:	08 94       	sec
    5072:	08 95       	ret

00005074 <__fp_zero>:
    5074:	e8 94       	clt

00005076 <__fp_szero>:
    5076:	bb 27       	eor	r27, r27
    5078:	66 27       	eor	r22, r22
    507a:	77 27       	eor	r23, r23
    507c:	cb 01       	movw	r24, r22
    507e:	97 f9       	bld	r25, 7
    5080:	08 95       	ret

00005082 <__gesf2>:
    5082:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <__fp_cmp>
    5086:	08 f4       	brcc	.+2      	; 0x508a <__gesf2+0x8>
    5088:	8f ef       	ldi	r24, 0xFF	; 255
    508a:	08 95       	ret

0000508c <log10>:
    508c:	0e 94 56 28 	call	0x50ac	; 0x50ac <log>
    5090:	29 ed       	ldi	r18, 0xD9	; 217
    5092:	3b e5       	ldi	r19, 0x5B	; 91
    5094:	4e ed       	ldi	r20, 0xDE	; 222
    5096:	5e e3       	ldi	r21, 0x3E	; 62
    5098:	0c 94 9e 28 	jmp	0x513c	; 0x513c <__mulsf3>
    509c:	16 f0       	brts	.+4      	; 0x50a2 <log10+0x16>
    509e:	0c 94 0b 29 	jmp	0x5216	; 0x5216 <__fp_mpack>
    50a2:	0c 94 f6 27 	jmp	0x4fec	; 0x4fec <__fp_nan>
    50a6:	68 94       	set
    50a8:	0c 94 f0 27 	jmp	0x4fe0	; 0x4fe0 <__fp_inf>

000050ac <log>:
    50ac:	0e 94 20 28 	call	0x5040	; 0x5040 <__fp_splitA>
    50b0:	a8 f3       	brcs	.-22     	; 0x509c <log10+0x10>
    50b2:	99 23       	and	r25, r25
    50b4:	c1 f3       	breq	.-16     	; 0x50a6 <log10+0x1a>
    50b6:	ae f3       	brts	.-22     	; 0x50a2 <log10+0x16>
    50b8:	df 93       	push	r29
    50ba:	cf 93       	push	r28
    50bc:	1f 93       	push	r17
    50be:	0f 93       	push	r16
    50c0:	ff 92       	push	r15
    50c2:	c9 2f       	mov	r28, r25
    50c4:	dd 27       	eor	r29, r29
    50c6:	88 23       	and	r24, r24
    50c8:	2a f0       	brmi	.+10     	; 0x50d4 <log+0x28>
    50ca:	21 97       	sbiw	r28, 0x01	; 1
    50cc:	66 0f       	add	r22, r22
    50ce:	77 1f       	adc	r23, r23
    50d0:	88 1f       	adc	r24, r24
    50d2:	da f7       	brpl	.-10     	; 0x50ca <log+0x1e>
    50d4:	20 e0       	ldi	r18, 0x00	; 0
    50d6:	30 e0       	ldi	r19, 0x00	; 0
    50d8:	40 e8       	ldi	r20, 0x80	; 128
    50da:	5f eb       	ldi	r21, 0xBF	; 191
    50dc:	9f e3       	ldi	r25, 0x3F	; 63
    50de:	88 39       	cpi	r24, 0x98	; 152
    50e0:	20 f0       	brcs	.+8      	; 0x50ea <log+0x3e>
    50e2:	80 3e       	cpi	r24, 0xE0	; 224
    50e4:	38 f0       	brcs	.+14     	; 0x50f4 <log+0x48>
    50e6:	21 96       	adiw	r28, 0x01	; 1
    50e8:	8f 77       	andi	r24, 0x7F	; 127
    50ea:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__addsf3>
    50ee:	ec e7       	ldi	r30, 0x7C	; 124
    50f0:	f0 e0       	ldi	r31, 0x00	; 0
    50f2:	04 c0       	rjmp	.+8      	; 0x50fc <log+0x50>
    50f4:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__addsf3>
    50f8:	e9 ea       	ldi	r30, 0xA9	; 169
    50fa:	f0 e0       	ldi	r31, 0x00	; 0
    50fc:	0e 94 19 29 	call	0x5232	; 0x5232 <__fp_powser>
    5100:	8b 01       	movw	r16, r22
    5102:	be 01       	movw	r22, r28
    5104:	ec 01       	movw	r28, r24
    5106:	fb 2e       	mov	r15, r27
    5108:	6f 57       	subi	r22, 0x7F	; 127
    510a:	71 09       	sbc	r23, r1
    510c:	75 95       	asr	r23
    510e:	77 1f       	adc	r23, r23
    5110:	88 0b       	sbc	r24, r24
    5112:	99 0b       	sbc	r25, r25
    5114:	0e 94 91 27 	call	0x4f22	; 0x4f22 <__floatsisf>
    5118:	28 e1       	ldi	r18, 0x18	; 24
    511a:	32 e7       	ldi	r19, 0x72	; 114
    511c:	41 e3       	ldi	r20, 0x31	; 49
    511e:	5f e3       	ldi	r21, 0x3F	; 63
    5120:	0e 94 b1 28 	call	0x5162	; 0x5162 <__mulsf3x>
    5124:	af 2d       	mov	r26, r15
    5126:	98 01       	movw	r18, r16
    5128:	ae 01       	movw	r20, r28
    512a:	ff 90       	pop	r15
    512c:	0f 91       	pop	r16
    512e:	1f 91       	pop	r17
    5130:	cf 91       	pop	r28
    5132:	df 91       	pop	r29
    5134:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <__addsf3x>
    5138:	0c 94 07 28 	jmp	0x500e	; 0x500e <__fp_round>

0000513c <__mulsf3>:
    513c:	0e 94 b1 28 	call	0x5162	; 0x5162 <__mulsf3x>
    5140:	0c 94 07 28 	jmp	0x500e	; 0x500e <__fp_round>
    5144:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <__fp_pscA>
    5148:	38 f0       	brcs	.+14     	; 0x5158 <__mulsf3+0x1c>
    514a:	0e 94 00 28 	call	0x5000	; 0x5000 <__fp_pscB>
    514e:	20 f0       	brcs	.+8      	; 0x5158 <__mulsf3+0x1c>
    5150:	95 23       	and	r25, r21
    5152:	11 f0       	breq	.+4      	; 0x5158 <__mulsf3+0x1c>
    5154:	0c 94 f0 27 	jmp	0x4fe0	; 0x4fe0 <__fp_inf>
    5158:	0c 94 f6 27 	jmp	0x4fec	; 0x4fec <__fp_nan>
    515c:	11 24       	eor	r1, r1
    515e:	0c 94 3b 28 	jmp	0x5076	; 0x5076 <__fp_szero>

00005162 <__mulsf3x>:
    5162:	0e 94 18 28 	call	0x5030	; 0x5030 <__fp_split3>
    5166:	70 f3       	brcs	.-36     	; 0x5144 <__mulsf3+0x8>

00005168 <__mulsf3_pse>:
    5168:	95 9f       	mul	r25, r21
    516a:	c1 f3       	breq	.-16     	; 0x515c <__mulsf3+0x20>
    516c:	95 0f       	add	r25, r21
    516e:	50 e0       	ldi	r21, 0x00	; 0
    5170:	55 1f       	adc	r21, r21
    5172:	62 9f       	mul	r22, r18
    5174:	f0 01       	movw	r30, r0
    5176:	72 9f       	mul	r23, r18
    5178:	bb 27       	eor	r27, r27
    517a:	f0 0d       	add	r31, r0
    517c:	b1 1d       	adc	r27, r1
    517e:	63 9f       	mul	r22, r19
    5180:	aa 27       	eor	r26, r26
    5182:	f0 0d       	add	r31, r0
    5184:	b1 1d       	adc	r27, r1
    5186:	aa 1f       	adc	r26, r26
    5188:	64 9f       	mul	r22, r20
    518a:	66 27       	eor	r22, r22
    518c:	b0 0d       	add	r27, r0
    518e:	a1 1d       	adc	r26, r1
    5190:	66 1f       	adc	r22, r22
    5192:	82 9f       	mul	r24, r18
    5194:	22 27       	eor	r18, r18
    5196:	b0 0d       	add	r27, r0
    5198:	a1 1d       	adc	r26, r1
    519a:	62 1f       	adc	r22, r18
    519c:	73 9f       	mul	r23, r19
    519e:	b0 0d       	add	r27, r0
    51a0:	a1 1d       	adc	r26, r1
    51a2:	62 1f       	adc	r22, r18
    51a4:	83 9f       	mul	r24, r19
    51a6:	a0 0d       	add	r26, r0
    51a8:	61 1d       	adc	r22, r1
    51aa:	22 1f       	adc	r18, r18
    51ac:	74 9f       	mul	r23, r20
    51ae:	33 27       	eor	r19, r19
    51b0:	a0 0d       	add	r26, r0
    51b2:	61 1d       	adc	r22, r1
    51b4:	23 1f       	adc	r18, r19
    51b6:	84 9f       	mul	r24, r20
    51b8:	60 0d       	add	r22, r0
    51ba:	21 1d       	adc	r18, r1
    51bc:	82 2f       	mov	r24, r18
    51be:	76 2f       	mov	r23, r22
    51c0:	6a 2f       	mov	r22, r26
    51c2:	11 24       	eor	r1, r1
    51c4:	9f 57       	subi	r25, 0x7F	; 127
    51c6:	50 40       	sbci	r21, 0x00	; 0
    51c8:	9a f0       	brmi	.+38     	; 0x51f0 <__mulsf3_pse+0x88>
    51ca:	f1 f0       	breq	.+60     	; 0x5208 <__mulsf3_pse+0xa0>
    51cc:	88 23       	and	r24, r24
    51ce:	4a f0       	brmi	.+18     	; 0x51e2 <__mulsf3_pse+0x7a>
    51d0:	ee 0f       	add	r30, r30
    51d2:	ff 1f       	adc	r31, r31
    51d4:	bb 1f       	adc	r27, r27
    51d6:	66 1f       	adc	r22, r22
    51d8:	77 1f       	adc	r23, r23
    51da:	88 1f       	adc	r24, r24
    51dc:	91 50       	subi	r25, 0x01	; 1
    51de:	50 40       	sbci	r21, 0x00	; 0
    51e0:	a9 f7       	brne	.-22     	; 0x51cc <__mulsf3_pse+0x64>
    51e2:	9e 3f       	cpi	r25, 0xFE	; 254
    51e4:	51 05       	cpc	r21, r1
    51e6:	80 f0       	brcs	.+32     	; 0x5208 <__mulsf3_pse+0xa0>
    51e8:	0c 94 f0 27 	jmp	0x4fe0	; 0x4fe0 <__fp_inf>
    51ec:	0c 94 3b 28 	jmp	0x5076	; 0x5076 <__fp_szero>
    51f0:	5f 3f       	cpi	r21, 0xFF	; 255
    51f2:	e4 f3       	brlt	.-8      	; 0x51ec <__mulsf3_pse+0x84>
    51f4:	98 3e       	cpi	r25, 0xE8	; 232
    51f6:	d4 f3       	brlt	.-12     	; 0x51ec <__mulsf3_pse+0x84>
    51f8:	86 95       	lsr	r24
    51fa:	77 95       	ror	r23
    51fc:	67 95       	ror	r22
    51fe:	b7 95       	ror	r27
    5200:	f7 95       	ror	r31
    5202:	e7 95       	ror	r30
    5204:	9f 5f       	subi	r25, 0xFF	; 255
    5206:	c1 f7       	brne	.-16     	; 0x51f8 <__mulsf3_pse+0x90>
    5208:	fe 2b       	or	r31, r30
    520a:	88 0f       	add	r24, r24
    520c:	91 1d       	adc	r25, r1
    520e:	96 95       	lsr	r25
    5210:	87 95       	ror	r24
    5212:	97 f9       	bld	r25, 7
    5214:	08 95       	ret

00005216 <__fp_mpack>:
    5216:	9f 3f       	cpi	r25, 0xFF	; 255
    5218:	31 f0       	breq	.+12     	; 0x5226 <__fp_mpack_finite+0xc>

0000521a <__fp_mpack_finite>:
    521a:	91 50       	subi	r25, 0x01	; 1
    521c:	20 f4       	brcc	.+8      	; 0x5226 <__fp_mpack_finite+0xc>
    521e:	87 95       	ror	r24
    5220:	77 95       	ror	r23
    5222:	67 95       	ror	r22
    5224:	b7 95       	ror	r27
    5226:	88 0f       	add	r24, r24
    5228:	91 1d       	adc	r25, r1
    522a:	96 95       	lsr	r25
    522c:	87 95       	ror	r24
    522e:	97 f9       	bld	r25, 7
    5230:	08 95       	ret

00005232 <__fp_powser>:
    5232:	df 93       	push	r29
    5234:	cf 93       	push	r28
    5236:	1f 93       	push	r17
    5238:	0f 93       	push	r16
    523a:	ff 92       	push	r15
    523c:	ef 92       	push	r14
    523e:	df 92       	push	r13
    5240:	7b 01       	movw	r14, r22
    5242:	8c 01       	movw	r16, r24
    5244:	68 94       	set
    5246:	06 c0       	rjmp	.+12     	; 0x5254 <__fp_powser+0x22>
    5248:	da 2e       	mov	r13, r26
    524a:	ef 01       	movw	r28, r30
    524c:	0e 94 b1 28 	call	0x5162	; 0x5162 <__mulsf3x>
    5250:	fe 01       	movw	r30, r28
    5252:	e8 94       	clt
    5254:	a5 91       	lpm	r26, Z+
    5256:	25 91       	lpm	r18, Z+
    5258:	35 91       	lpm	r19, Z+
    525a:	45 91       	lpm	r20, Z+
    525c:	55 91       	lpm	r21, Z+
    525e:	a6 f3       	brts	.-24     	; 0x5248 <__fp_powser+0x16>
    5260:	ef 01       	movw	r28, r30
    5262:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <__addsf3x>
    5266:	fe 01       	movw	r30, r28
    5268:	97 01       	movw	r18, r14
    526a:	a8 01       	movw	r20, r16
    526c:	da 94       	dec	r13
    526e:	69 f7       	brne	.-38     	; 0x524a <__fp_powser+0x18>
    5270:	df 90       	pop	r13
    5272:	ef 90       	pop	r14
    5274:	ff 90       	pop	r15
    5276:	0f 91       	pop	r16
    5278:	1f 91       	pop	r17
    527a:	cf 91       	pop	r28
    527c:	df 91       	pop	r29
    527e:	08 95       	ret

00005280 <__udivmodhi4>:
    5280:	aa 1b       	sub	r26, r26
    5282:	bb 1b       	sub	r27, r27
    5284:	51 e1       	ldi	r21, 0x11	; 17
    5286:	07 c0       	rjmp	.+14     	; 0x5296 <__udivmodhi4_ep>

00005288 <__udivmodhi4_loop>:
    5288:	aa 1f       	adc	r26, r26
    528a:	bb 1f       	adc	r27, r27
    528c:	a6 17       	cp	r26, r22
    528e:	b7 07       	cpc	r27, r23
    5290:	10 f0       	brcs	.+4      	; 0x5296 <__udivmodhi4_ep>
    5292:	a6 1b       	sub	r26, r22
    5294:	b7 0b       	sbc	r27, r23

00005296 <__udivmodhi4_ep>:
    5296:	88 1f       	adc	r24, r24
    5298:	99 1f       	adc	r25, r25
    529a:	5a 95       	dec	r21
    529c:	a9 f7       	brne	.-22     	; 0x5288 <__udivmodhi4_loop>
    529e:	80 95       	com	r24
    52a0:	90 95       	com	r25
    52a2:	bc 01       	movw	r22, r24
    52a4:	cd 01       	movw	r24, r26
    52a6:	08 95       	ret

000052a8 <__divmodhi4>:
    52a8:	97 fb       	bst	r25, 7
    52aa:	07 2e       	mov	r0, r23
    52ac:	16 f4       	brtc	.+4      	; 0x52b2 <__divmodhi4+0xa>
    52ae:	00 94       	com	r0
    52b0:	07 d0       	rcall	.+14     	; 0x52c0 <__divmodhi4_neg1>
    52b2:	77 fd       	sbrc	r23, 7
    52b4:	09 d0       	rcall	.+18     	; 0x52c8 <__divmodhi4_neg2>
    52b6:	0e 94 40 29 	call	0x5280	; 0x5280 <__udivmodhi4>
    52ba:	07 fc       	sbrc	r0, 7
    52bc:	05 d0       	rcall	.+10     	; 0x52c8 <__divmodhi4_neg2>
    52be:	3e f4       	brtc	.+14     	; 0x52ce <__divmodhi4_exit>

000052c0 <__divmodhi4_neg1>:
    52c0:	90 95       	com	r25
    52c2:	81 95       	neg	r24
    52c4:	9f 4f       	sbci	r25, 0xFF	; 255
    52c6:	08 95       	ret

000052c8 <__divmodhi4_neg2>:
    52c8:	70 95       	com	r23
    52ca:	61 95       	neg	r22
    52cc:	7f 4f       	sbci	r23, 0xFF	; 255

000052ce <__divmodhi4_exit>:
    52ce:	08 95       	ret

000052d0 <__udivmodsi4>:
    52d0:	a1 e2       	ldi	r26, 0x21	; 33
    52d2:	1a 2e       	mov	r1, r26
    52d4:	aa 1b       	sub	r26, r26
    52d6:	bb 1b       	sub	r27, r27
    52d8:	fd 01       	movw	r30, r26
    52da:	0d c0       	rjmp	.+26     	; 0x52f6 <__udivmodsi4_ep>

000052dc <__udivmodsi4_loop>:
    52dc:	aa 1f       	adc	r26, r26
    52de:	bb 1f       	adc	r27, r27
    52e0:	ee 1f       	adc	r30, r30
    52e2:	ff 1f       	adc	r31, r31
    52e4:	a2 17       	cp	r26, r18
    52e6:	b3 07       	cpc	r27, r19
    52e8:	e4 07       	cpc	r30, r20
    52ea:	f5 07       	cpc	r31, r21
    52ec:	20 f0       	brcs	.+8      	; 0x52f6 <__udivmodsi4_ep>
    52ee:	a2 1b       	sub	r26, r18
    52f0:	b3 0b       	sbc	r27, r19
    52f2:	e4 0b       	sbc	r30, r20
    52f4:	f5 0b       	sbc	r31, r21

000052f6 <__udivmodsi4_ep>:
    52f6:	66 1f       	adc	r22, r22
    52f8:	77 1f       	adc	r23, r23
    52fa:	88 1f       	adc	r24, r24
    52fc:	99 1f       	adc	r25, r25
    52fe:	1a 94       	dec	r1
    5300:	69 f7       	brne	.-38     	; 0x52dc <__udivmodsi4_loop>
    5302:	60 95       	com	r22
    5304:	70 95       	com	r23
    5306:	80 95       	com	r24
    5308:	90 95       	com	r25
    530a:	9b 01       	movw	r18, r22
    530c:	ac 01       	movw	r20, r24
    530e:	bd 01       	movw	r22, r26
    5310:	cf 01       	movw	r24, r30
    5312:	08 95       	ret

00005314 <__umulhisi3>:
    5314:	a2 9f       	mul	r26, r18
    5316:	b0 01       	movw	r22, r0
    5318:	b3 9f       	mul	r27, r19
    531a:	c0 01       	movw	r24, r0
    531c:	a3 9f       	mul	r26, r19
    531e:	70 0d       	add	r23, r0
    5320:	81 1d       	adc	r24, r1
    5322:	11 24       	eor	r1, r1
    5324:	91 1d       	adc	r25, r1
    5326:	b2 9f       	mul	r27, r18
    5328:	70 0d       	add	r23, r0
    532a:	81 1d       	adc	r24, r1
    532c:	11 24       	eor	r1, r1
    532e:	91 1d       	adc	r25, r1
    5330:	08 95       	ret

00005332 <strcat>:
    5332:	fb 01       	movw	r30, r22
    5334:	dc 01       	movw	r26, r24
    5336:	0d 90       	ld	r0, X+
    5338:	00 20       	and	r0, r0
    533a:	e9 f7       	brne	.-6      	; 0x5336 <strcat+0x4>
    533c:	11 97       	sbiw	r26, 0x01	; 1
    533e:	01 90       	ld	r0, Z+
    5340:	0d 92       	st	X+, r0
    5342:	00 20       	and	r0, r0
    5344:	e1 f7       	brne	.-8      	; 0x533e <strcat+0xc>
    5346:	08 95       	ret

00005348 <itoa>:
    5348:	45 32       	cpi	r20, 0x25	; 37
    534a:	51 05       	cpc	r21, r1
    534c:	20 f4       	brcc	.+8      	; 0x5356 <itoa+0xe>
    534e:	42 30       	cpi	r20, 0x02	; 2
    5350:	10 f0       	brcs	.+4      	; 0x5356 <itoa+0xe>
    5352:	0c 94 af 29 	jmp	0x535e	; 0x535e <__itoa_ncheck>
    5356:	fb 01       	movw	r30, r22
    5358:	10 82       	st	Z, r1
    535a:	cb 01       	movw	r24, r22
    535c:	08 95       	ret

0000535e <__itoa_ncheck>:
    535e:	bb 27       	eor	r27, r27
    5360:	4a 30       	cpi	r20, 0x0A	; 10
    5362:	31 f4       	brne	.+12     	; 0x5370 <__itoa_ncheck+0x12>
    5364:	99 23       	and	r25, r25
    5366:	22 f4       	brpl	.+8      	; 0x5370 <__itoa_ncheck+0x12>
    5368:	bd e2       	ldi	r27, 0x2D	; 45
    536a:	90 95       	com	r25
    536c:	81 95       	neg	r24
    536e:	9f 4f       	sbci	r25, 0xFF	; 255
    5370:	0c 94 bb 29 	jmp	0x5376	; 0x5376 <__utoa_common>

00005374 <__utoa_ncheck>:
    5374:	bb 27       	eor	r27, r27

00005376 <__utoa_common>:
    5376:	fb 01       	movw	r30, r22
    5378:	55 27       	eor	r21, r21
    537a:	aa 27       	eor	r26, r26
    537c:	88 0f       	add	r24, r24
    537e:	99 1f       	adc	r25, r25
    5380:	aa 1f       	adc	r26, r26
    5382:	a4 17       	cp	r26, r20
    5384:	10 f0       	brcs	.+4      	; 0x538a <__utoa_common+0x14>
    5386:	a4 1b       	sub	r26, r20
    5388:	83 95       	inc	r24
    538a:	50 51       	subi	r21, 0x10	; 16
    538c:	b9 f7       	brne	.-18     	; 0x537c <__utoa_common+0x6>
    538e:	a0 5d       	subi	r26, 0xD0	; 208
    5390:	aa 33       	cpi	r26, 0x3A	; 58
    5392:	08 f0       	brcs	.+2      	; 0x5396 <__utoa_common+0x20>
    5394:	a9 5d       	subi	r26, 0xD9	; 217
    5396:	a1 93       	st	Z+, r26
    5398:	00 97       	sbiw	r24, 0x00	; 0
    539a:	79 f7       	brne	.-34     	; 0x537a <__utoa_common+0x4>
    539c:	b1 11       	cpse	r27, r1
    539e:	b1 93       	st	Z+, r27
    53a0:	11 92       	st	Z+, r1
    53a2:	cb 01       	movw	r24, r22
    53a4:	0c 94 d4 29 	jmp	0x53a8	; 0x53a8 <strrev>

000053a8 <strrev>:
    53a8:	dc 01       	movw	r26, r24
    53aa:	fc 01       	movw	r30, r24
    53ac:	67 2f       	mov	r22, r23
    53ae:	71 91       	ld	r23, Z+
    53b0:	77 23       	and	r23, r23
    53b2:	e1 f7       	brne	.-8      	; 0x53ac <strrev+0x4>
    53b4:	32 97       	sbiw	r30, 0x02	; 2
    53b6:	04 c0       	rjmp	.+8      	; 0x53c0 <strrev+0x18>
    53b8:	7c 91       	ld	r23, X
    53ba:	6d 93       	st	X+, r22
    53bc:	70 83       	st	Z, r23
    53be:	62 91       	ld	r22, -Z
    53c0:	ae 17       	cp	r26, r30
    53c2:	bf 07       	cpc	r27, r31
    53c4:	c8 f3       	brcs	.-14     	; 0x53b8 <strrev+0x10>
    53c6:	08 95       	ret

000053c8 <_exit>:
    53c8:	f8 94       	cli

000053ca <__stop_program>:
    53ca:	ff cf       	rjmp	.-2      	; 0x53ca <__stop_program>
